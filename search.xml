<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>资本家可以割韭菜，年轻人也可以“躺平”</title>
      <link href="%E8%BD%A6%E7%89%8C%E5%88%86%E4%BA%AB/"/>
      <url>%E8%BD%A6%E7%89%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="太阳底下从来没有新鲜事"><a href="#太阳底下从来没有新鲜事" class="headerlink" title="太阳底下从来没有新鲜事"></a>太阳底下从来没有新鲜事</h2><p>最近“躺平”二字成为了网络热词，我用最简练的语言总结一下躺平的内涵：是一种在内卷社会中，选择“非暴力不合作”式的生活态度。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/52ChNWeJuicfD22KFLLAg6MEyI9ufApPa6hZbRKNnEJ4JMxZtQ4mz3SC2via7Kj2XqSUZSulicrhIKJMhZcVXqXJg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image"></p><p>然而年轻人的“躺平”缺引发了一众媒体的批判。上周《南方日报》写了一篇《“躺平”可耻，哪来的正义感？》并被新华网转发，其文章论调充满了无聊的说教与精神上位者的优越感：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/52ChNWeJuicfD22KFLLAg6MEyI9ufApPaqDj8aH915aD5KgYN06EFaa801dUcVXF6pVscQDiaibr5aSCjTaZwHJ6g/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="Image"></p><blockquote><p>奋斗本身就是一种幸福，只有奋斗的人生才称得上是幸福的人生。虽然来自外部的压力不容忽视，但与其嗟叹抱怨，不如奋起直追，有志青年大都会正视压力，用奋斗闯出自己的路。一代人有一代人的困难和挑战，没有谁的人生是一帆风顺的，动不动就被小困难打败，时不时受“丧文化”所左右，显然不是一个当代青年应有的气质。如果一遇到压力就喊“内卷”，一遇到挫折就想“躺平”，我们又怎能改变人生呢？——《南方日报：“躺平”可耻，哪来的正义感？》</p></blockquote><p>无独有偶，犹记当年《光明日报》写过一篇文章批判“丧文化”，我们来看一下，语气与《南方日报》这篇如出一辙：</p><blockquote><p>我差不多是个废人了”“其实并不是很想活”“漫无目的的颓废”“什么都不想干”“颓废到忧伤”，这些散发着绝望特质的话语，配上生动的“葛优瘫”“懒猫瘫”等表情包，成了新聊天形式的流行内容。从这些话里，我们明显地感受到了某种情绪——什么都不想干、只想蹉跎岁月、找一个最省事省力的方式活着的消极情绪。这与大家对青年朝气蓬勃的一贯印象格格不入，令人费解，也令人担忧。——《光明日报：引导青年人远离“丧文化”侵蚀》</p></blockquote><p>从批判丧文化，到批判躺平，官方的媒体看问题倒是看到了，然而看到了能说明什么问题呢？单靠喊几个口号，进行几轮思想教育，强迫学生背点正能量价值观，年轻人就能不“丧文化”了？真正的马克思主义者，永远坚持唯物史观的立场，永远从经济基础与上层建筑的矛盾关系分析问题，年轻人为什么“丧”，简单得很，工作压力过大，上升渠道渺茫，别说事业有成开创未来什么的，就连房子都买不起。人又不傻，你能看到的未来预期就这么点，努不努力差别不大，那肯定就“丧”起来了。日本的现在就是我们的一面镜子。还是那句话，当你发现努力、奋斗都改变不了什么的时候，那还奋斗做什么呢？</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/fc176403j00qttg74001md000qs00d6p.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>太阳底下然而终究没有新鲜事，这是我三年多前 2018 年 1 月写的一篇文章<a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650673717&idx=1&sn=38db9d5aa80ef4cf3e7768d8f9a6f766&chksm=bed49d1489a31402eed3531e8de1ae45c9dfad013ca8805ddd83da95634dd15d8dccea0376da&scene=21#wechat_redirect">《从“葛优躺”到“保温杯”：不同的社会热词，相同的社会问题》</a>，文章中分析了五年前的网络热词——</p><p>每一年网络上都会产生新鲜的词语，这些新鲜的词语，有的已经消失在历史的长河中，有的已经成为了我们生活一部分，有的改头换面以另一种表达方式再次出现。我们来看一下在 2017 年年初，光明日报总结的 2016 年度网路用语：</p><blockquote><p>“年度十大网络用语”充满正能量。与往年相比，今年的十大网络用语总体上充满阳光向上的气息，不用说“洪荒之力”“定个小目标”的激励作用，就是“葛优躺”“辣眼睛”“老司机”“蓝瘦香菇”“吃瓜群众”“全是套路”“友谊的小船”“厉害了我的哥”，也都饱含着对生活诙谐的调侃与热爱，充满正能量。——《光明日报：洪荒之力、吃瓜群众等年度十大网络用语充满正能量》</p></blockquote><p>这一段新闻怎么说呢，满满都是槽点。如果非要说“正能量”吧，也就“洪荒之力”稍微搭一点边。剩下的词语都是一言难尽：“定个小目标”紧跟着的话是“先挣一个亿”，王健林这一句话迅速走红网络不过是对巨大的贫富差距的自嘲。“葛优躺”是在高强度、高压力工作下的一种慵懒态度，是对学习工作生活低动力、低期望的表现。“蓝瘦香菇”也类似如此，不过是对负面情绪的一种诙谐化派遣。至于“辣眼睛”“全是套路”，怎么也看不出是正能量吧？</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/b75689f2j00qttg7c000hd000cg007rp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>而最不能理解的是《光明日报》为何要把“老司机”划作年度正能量网络词语——这话出自于云南当地带有情色味道的调情山歌：“老司机，带带我，我是初中生”。而网络上使用“老司机”这一词的时候，最多的后面都要跟一句“求种子”。类似的还有“友谊的小船”，紧跟着下一句就是“说翻就翻”……虽然说有许多调侃的性质在其中，但是要强行“正能量”也说不过去吧。</p><p>“吃瓜群众”则更值得说道说道，最早的“吃瓜群众”前面还有一个定语是“不明真相的”——是从“不明真相的围观群众”和“前排吃瓜”两句话中演化而来。而“不明真相的围观群众”就是为了调侃出现群体性事件后官方报道中常见的那句“不明真相的群众被别有用心的人利用”。说白了还是对几年前许多地方处理应急事件、高关注度事件遮遮掩掩不尽如人意的表达。后来才发展到对明星八卦关注、围观网络撕逼时应用。</p><p>《光明日报》的文章中强行将这些网络用语赋予“正能量”的属性，不外乎两种情况：一是作者确实不了解这些词的来源与使用环境，对网络用语的称赞只是叶公好龙；另一种可能是作者明知道这些词语的真正用途，但还要强行说成正能量，这就是掩耳盗铃了——最大的用处就是糊弄一下几个不熟悉互联网生态、没用过社交媒体但喜欢听漂亮话的领导。</p><p>非常有趣的是，2017 年人民日报微博发表了九图年度热词，包括了“皮皮虾，我们走”“扎心了，老铁”“保温杯”等，而其中一句“贫穷限制了我的想象力”人日是这样诠释的：“用来自嘲有钱人的世界难以想象，但只是一句玩笑话。”</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/45513222j00qttg7k001bd000dw00fvp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>最后一句显得着实有点“揣着明白装糊涂”，是不是玩笑话，我们用的人心理不清楚么？</p><p>2018 年，在一些民间商业机构评选的年度网络热词中，“佛系 XX”“脱发”“第一批 90 后已经秃了”纷纷上榜。2015 年的“我能怎么办，我也绝望啊”，2016 年的“葛优躺”“咸鱼”，2017 年的“佛系青年”，2019 年的“小确丧”，2021 年的“躺平”这些都是一脉相承的。然而有些人还要装糊涂。</p><h2 id="装糊涂的高手"><a href="#装糊涂的高手" class="headerlink" title="装糊涂的高手"></a>装糊涂的高手</h2><p>这些官媒肯定不是不知道，而是他们都是装糊涂的高手：避重就轻，忽略问题的根源，只是从表面现象入手，树个假稻草人批判一番，反正胡诌一篇文章就有 KPI、就能完成领导的任务。</p><p>然而年轻人可不会配合着装糊涂，一切试图和稀泥的老油条在年轻人这里都讨不到什么好话，甚至还会取得适得其反的效果。譬如共青团中央官微昨天晚上发的这条，主要思想是年轻人为国奉献，并未躺平。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/d3624f4bj00qttg7s0062d000u001qap.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>这个糊涂装的很高明，直接提升到了为国为民的层次，然而很遗憾的是，评论区又喜闻乐见地翻车了，可见年轻人虽然身体上被动“躺平”，但是思想上还是拒绝官微一切和稀泥的装糊涂行为。</p><p><img src="/images/63f9d916ly1gqxys5qfobj20zo256b29.jpg"></p><!-- ![Image](https://nimg.ws.126.net/?url=http%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0528%2F430776edj00qttg7z006gd000u001plp.jpg&thumbnail=650x2147483647&quality=80&type=jpg) --><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/27f24c94j00qttg86004pd000u001qfp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>说白了还是人民对于官媒的定位不同，官媒不为民做主，不去关注社会矛盾激化的根源于本质，反而在这里和稀泥，就算躺平也得生气。我之前分析过《后浪》这一则宣传视频的口碑变化趋势：当 B 站官方账号发布了这则视频之后，都是铺天盖地的溢美之词：小破站牛逼、眼里进沙子之类的。然而当人民日报等媒体发布了之后评论的画风就变成了这样：</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/0d5d8964j00qttg8e005ad000u001pfp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/7fb2cd60j00qttg8m005rd000u001pfp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>原因很简单，大家对官方账号发布内容的要求跟一个商业网站宣传视频的要求是不一样的。做个不恰当的类比，任何公司做虚拟偶像都行，关我屁事；但是共青团做虚拟偶像就要批判。而这一次 B 站的“本站形象宣传片”拉上了大量官媒站台，引起普遍讨论也是自然而然的事情。既然你拉上了一种官媒，又打上了“献给新一代”的题目，那为什么看不见“我们”呢？只是因为我们昏天黑地的上班，只是我们的生产工作没他们欢天喜地的消费“美”，我们就不配被展示了吗？既然不配你何苦打上“青年”这样的标签呢？</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/5369901bj00qttg8s000od000u000a8p.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>什么不是装糊涂？就是必须要正视当今社会贫富分化与阶级固化的问题。年轻人不是不努力，而是努力之后上升通道狭窄，社会资源和资源的分配依旧把持在少数人手里，奋斗并没有用，那还不如“躺平”呢。根源就是我上一篇文章<a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650682256&idx=1&sn=621b4372ad0d9ee8165b9f273815f1a7&chksm=bed4bcb189a335a7028ecdbeb4c012abb78e05f9a4375e80a0901fcf64c07de42c37a6b98560&scene=21#wechat_redirect">《社会内卷的根源，在于资本家们太坏了》</a>中详细分析论证的：资本家因为掌握了社会资源，他们可以凭借优势地位制定分配规则，资本家要保证自己足够的既得利益，于是劳动者们的奋斗与努力的成果都被剥削了，于是他们的奋斗与努力反而变成了会让群体环境更加恶化的“内卷”，于是劳动者们宁可“躺平”。</p><p>骂了这么多官媒，我举一个媒体不装糊涂的例子。人物杂志那一篇《外卖骑手，困在系统里》就写的非常好，直指背后平台剥削、资本吃人的本质。同时央视财经对于那篇报道的评论确实说到点子上了：</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/247c758dj00qttg90003ud000op00hmp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>“创造了数十亿利润，却难分一杯羹”；“数千亿美元的商业帝国，谁饿了，美了谁？”。这不就是我们教科书里讲的“剩余价值剥削”嘛。遍身罗绮者，不是养蚕人；采得百花成蜜后，为谁辛苦为谁甜？</p><p>还有另一种不装糊涂，而是“真糊涂”的既得利益者。前日，白岩松一条毒鸡汤又被年轻人们冲得很惨：“难道我们现在指望的是房价很低？然后工作到处随便找？然后一点压力都没有？然后看到喜欢的女孩只要一追求就同意?不会吧！”</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/996d98aaj00qttg980024d000s600r4p.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>老白估计不是装糊涂，而是成功太容易、居高位太久了，真糊涂了。现在年轻人想不想房价很低的问题，而是房价太高的问题；现在不是年轻人想要一点压力都没有的问题，而是压力太大的问题。这就叫抓住主要矛盾，抓不住主要矛盾，就只能像傻子一样问几句“不会吧不会吧”，沦为年轻人讨论中的笑柄。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/0fe48c0ej00qttg9e000pd000u00085p.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><h2 id="捅破意识形态的窗户纸"><a href="#捅破意识形态的窗户纸" class="headerlink" title="捅破意识形态的窗户纸"></a>捅破意识形态的窗户纸</h2><p>所以年轻人本质上既不佛系，也不躺平，他们只是面对资本制造的内卷进行“非暴力不合作”，面对装糊涂的官媒或者何不食肉糜的既得利益者，我们还是有力气坐起来锤爆他们的狗头的。</p><p>于是舆论终于还是进入真刀真枪的阶段，譬如企鹅新闻的《为国捐躯可以，为资本家不行，年轻人的思想或走入误区》：</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/2a866fbcj00qttg9l003yd000tv014ep.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>这篇文章会让你觉得愚蠢到是个反串黑，但是读来读去竟然发现作者是认真的。这是好事啊，年轻人不许和稀泥，不许装糊涂，不许何不食肉糜，终于图穷匕见，逼出了资本家和他们的乏走狗真实嘴脸：你为国家奉献可以，就不能给我们贡献点剩余价值吗？</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/28d307e2j00qttg9q000pd000fu007vp.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>我在两年前批判马云“福报论”的文章里就说过：这次事情的本质是一个忍无可忍无需再忍的故事，资本家们得寸进尺步步紧逼，突破最后的底线都毫无顾虑；于是那些曾经被消费主义和资产阶级成功学洗脑的精神上的小资产阶级们，终于开始有一点回过味来了。而且这群人，与血汗工厂那些被驱离的体力劳动者们不同，他们能熟练运用社交网络表达自己的观点立场，是稍微有一点话语权的。而当千千万万个有这么一点点话语权的人开始“是可忍孰不可忍”了，曾经岁月静好灌鸡汤的资本家也终于坐不住了，开始撕破“温情脉脉的面纱”不惜自打脸亲自下场了，只能说明一个问题：意识形态的窗户纸，快要捅破了。</p><p>无产阶级的觉醒是一个漫长而艰巨的过程，《让子弹飞》中张麻子又发枪又发钱，还让漂亮的小姐姐们敲鼓助威，最后跟他来的也只是一群鹅。这个世界就是一个利益割裂的世界，资产阶级无产阶级注定利益会有冲突，那我们你代表你的我代表我的，我们堂堂正正威武之师，正面对抗去分割这些利益，没有毛病。怕就怕那些臀脑分离的人，被资产阶级价值观洗脑，明明自己每个月月光甚至还要靠父母接济，但就因为透支收入买了点上档次的消费品以为自己晋级上流社会了，瞧不起体力劳动者，一边抱怨着加班一边鄙视那些维护自身权益的人。正所谓“千防万防，工贼难防”，因此，提防被资本家和传教士洗脑到福至心灵的臀脑分离者，成为了重中之重。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/c8a127c9j00qttg9w000od000u000aep.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>总而言之，无产阶级的阶级意识觉醒，年轻人阶级认同的重塑，是一个不可逆的历史潮流。我在<a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650680297&idx=1&sn=b5e3687ef20e15aaca6641c9d96184d9&chksm=bed4a4c889a32dde0a0b20aaea962c459ebb1005bae34ab5e6a43bebab05e96fffb1fca17ae4&scene=21#wechat_redirect">《2020 年的一条主线：从我们不是“后浪”到我们都是“打工人”》</a>这篇文章中分析过：2020 年上半年最火的一个词是“后浪”，下半年最火的一个词是“打工人”。对于“后浪”一种普遍的观点是：我们不是后浪。B 站宣传片中所展示的冲浪、滑雪、汉服、滑翔翼、全球旅行、手办、无人机、摄影等等元素不是我们绝大多数年轻人的生活。对于“打工人”一种普遍观点是：你们不是打工人。譬如，各种流量明星蹭热点说自己是打工人，被挂在热搜骂了好几天；宝马汽车官微曾打工人的热度，被全网嘲讽；智障富二代曹译文去工地体验生活，被喷得销声匿迹。</p><p>这两种情绪可以简单的概括为：“我们不是这样的”与“这样的不是我们”。说明当代的无产阶级在重修阶级认同这一门课程，历史兜兜转转又走了一个轮回。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0528/1d78d407j00qttga3002yd000m700t3p.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="Image"></p><p>总而言之，当乏走狗、工贼、奋斗逼、传教士，甚至资本家自己，都无法再通过鸡汤、鸡血、画大饼、温情脉脉的面纱来唤起“躺平”的年轻人，当装糊涂和不食肉糜的既得利益者们持续翻车丢人现眼，阶级斗争——这一意识形态领域中被遗忘已久的四个字终将会被重新提起，一轮无法回避的新的较量即将展开。</p><hr><p>相关阅读：<a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650680339&idx=1&sn=5a2cfd8e7ab015b2fbd439a2af98c9ae&chksm=bed4a33289a32a248cc6898a03aa55d7d8313227a0ba18713749d77c3bf7244b244d09f9f1bc&scene=21#wechat_redirect">暴打资本家的乏走狗</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650677170&idx=1&sn=a46cdf4ca547cd4c656ba47b579e9446&chksm=bed4909389a319857fd0b78e0d92d255451eae1b883a97c4008a866125d8b63e24222a7d353f&scene=21#wechat_redirect">砸烂资本家的毒鸡汤</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650679288&idx=1&sn=86107020d2055265031277cd920696ad&chksm=bed4a8d989a321cfadc89d29f553099ac55408f5125a5d5c247db11f1a82fd407c2e0197f0f6&scene=21#wechat_redirect">刷了几天“打工人”的梗，你却还不肯称我一声“无产阶级同志”</a></p><p>第二本新书正在付费连载中：<a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650680940&idx=2&sn=29323ce4bfe76dc3c20f3db166f69155&chksm=bed4a14d89a3285b121514cefbbb501610fe21f5141baedfecf001027da953331192e3793f97&scene=21#wechat_redirect">《资本囚笼》：结语——革命尽头</a>（上）；<a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE2NTY0Ng==&mid=2650681061&idx=2&sn=14874ebbd35b3c00f754d62e22e4978c&chksm=bed4a1c489a328d2b887d19ac39bfbce46cf0f5fa0bfe5a82bc220b463ddde6e3d8266f9a25a&scene=21#wechat_redirect">革命尽头（下）</a></p><p>上一篇 <a href="https://weibo.com/ttarticle/p/show?id=2309404641874521751842">我是年轻人，我十分反感流量明星，以及他们的邪教粉圈</a></p><hr><blockquote><p><a href="https://politics.gmw.cn/2021-05/15/content_34847222.htm">光明时评：拒绝“内卷”，年轻人开始信奉“躺平学”了？</a></p><p><a href="http://www.xinhuanet.com/2021-05/20/c_1127467232.htm">“躺平”可耻，哪来的正义感？</a></p></blockquote><!-- A:他外出, 对坐在家里看电视的她说:'我出去一下'.她起身拿了一件外套给他, 说:'外面冷, 早点回来.'他笑笑, 把外套穿在身上走了出去.路上, 他收到她的短信: 老公我在家等你.B:他外出, 对坐在家里看电视的她说:'我出去一小时.'她站了起来, 吼道:'是不是我在家里你一分钟都呆不下去？'他解释说:'有个以前的同事, 约好了今晚一起聚一下.'她接着问:'男的女的？'他说: 男的.她快步走到门口堵着路说:'你先打电话给他, 我听一下是不是真的.'他无语, 掏出电话打朋友的手机.> 男人娶错了老婆连最基本的外出都被限制. 自由诚可贵, 爱情价多少？A:他买了一件 T 恤衫, 然后提着回到家.她看了后说:'挺好看的, 很适合你.'他看着她说:'明天给你也买件吧！'她说:'不用, 我衣服还多的是.'B:他买了一件 T 恤衫提着回到家.她瞪了一眼, 追问:'多少钱买的, 怎么这么难看？'他说:'７０块钱.'她红着眼说:'好啊, 你背着我藏私房钱, 你买衣服的钱什么地方来的？'他说:'今天刚发的奖金, 我们同事一起逛商场, 大家都买我也就买了一件.'她说:'你呀, 就只知道乱花钱, 你知不知道这个家一个月要开支多少钱, 你还不学会节省.'他无语.> 工资上交的男人连买件 70 元的衣服都得向家里的老婆申请, 提前透支还要被骂.A:他打电话给她说:'我晚上不回家吃饭了, 公司有应酬.'她淡淡的问:'那你几点钟回家？'他说:'十点后吧, 如果十一点我还没到家你就打我电话.'她点了点头, 对着话筒说: 好的.B:他打电话给她说:'我晚上不回家吃饭了, 公司有应酬.'她朝电话里大吼: 你个王八蛋, 又不回家吃饭, 你一星期回家吃顿饭会死啊？他解释说:'今天我们主任请客, 想缓和一下上下级关系, 不去不好.'她朝听筒喊:'你给老娘听好了, 你不回家, 我也不回. 咱们这个家你怕是不想要了.'他说:'吃完饭就回.'她骂道:'爱回不回！' 嚓的挂了电话.> 不讲理的女人, 娶不得, 娶了也怕受不了.A:他感冒, 从床上坐起倒杯水平备吃药.她忙起身, 说:'你要干什么, 我去'他说:'该吃药了, 吃了好睡.'她红着脸, 很不好意思的说:'哦, 对不起亲爱的, 我忘了你还没有吃药.' 然后起身倒水, 吃药.B:他感冒, 从床上坐起倒杯水平备吃药.她瞪着他, 问:'你要去哪里？'他苦笑:'我要倒水吃药, 吃了好睡.'她骂道:'睡前为什么不吃？睡下来了才想起来, 你这不是成心不认人睡觉么？'他无语, 自己一个人起身倒水吃药.> 懒惰的女人, 是男人最不能娶, 也是娶之最后悔的女人.A:他们两人上街, 遇到他熟悉的人, 他指着她介绍说:'我老婆, 结婚三年了.'她朝那人看了一眼, 笑着说:'幸会.'走过一段路后, 她追问他, 说:'为什么要说我是你老婆？'他笑, 说:'你温柔, 可爱, 大方, 漂亮, 得体, 说你是我老婆, 大家都会觉得我有眼光挑了这么好的老婆.'她笑, 笑的很开朗.B:他们两人上街, 遇到他熟悉的人, 他没向朋友介绍她.走过之后, 她在他的胳膊上掐了一把, 追问:'你为什么不向你的朋友介绍我？'他苦笑, 说:'都是些八杆子打不到的朋友, 没必要介绍.'她伤心了, 遇到他的朋友, 他都不会介绍自己去给朋友认识.> 所谓幸福, 不是制造出来的, 而是平日里一点一滴的生活经历. 有一种人对你好, 是想让你知道她的好. 而另外一种人对你好, 是因为他懂你, 才想要对你好.---他: 我晚上出去吃饭了啊.她: 几点回家？他: 吃完很快就回去了.九点半了……她: 你怎么还不回来啊？他: 很快就回家了.十一点, 十二点, 一点后来, 她不再打电话催他.> 因为她知道: 对于不守承诺的男人, 一切 '肯定' 都是 '未必'.他: 我晚上出去吃饭, 九点之前肯定结束. 然后我俩去看电影.她: 你能那么快就结束吗？他: 放心吧, 我答应你了就一定能！快到九点的时候......他: 收拾一下吧, 我马上就到家了.> 信任, 是在一件一件小事中建立起来的.---她: 老公, 帮我接杯水呗.他: 石头剪子布, 谁输了谁去.她: 算了, 我自己去吧.他们坐在一起看韩剧, 她起身.他问: 干吗去？她: 去接杯水.他: 你坐这看吧, 我去给你接.A: 她:'老公. 我晚上不想刷牙了.'他:'随便你, 等你有了虫牙可不要叫疼.'她静静的没有说话, 我有了虫牙你不会心疼吗？B: 他们坐在一起看韩剧吃零食. 她困了要睡觉. 他说 '刚吃了糖, 刷牙再睡！'她:'我困, 不想动, 不刷了.'他起身, 拿来挤好牙膏的牙刷, 漱口水, 还有可以盛水的空盆, 端着盆哄着她把牙刷好, 再把东西都收好.> 女人很简单, 她对男人唯一的要求就是 '疼她'. 你可以什么都没有, 只要你疼她, 她就有足够的勇气把自己的下半辈子交给你.---她给他拿了一包榛子, 然后她去洗衣服.回来的时候, 榛子已经被他吃得所剩无几.她拿给他一包榛子, 然后自己去收拾屋子.回来的时候, 她看见电脑前面放了一堆剥好的榛子仁.> 女人很感性, 她炫耀你对她的体贴, 就好像炫耀克拉钻一样, 这么廉价的买卖, 用一点心思就能收获无价的财富.---他晚上下班. 给她打电话 '宝贝儿. 我晚上和朋友出去吃饭.'她:'你不是答应我陪我逛街的吗？'他:'改天吧！'她默默地流泪. 为什么每次都是这样？他下班的时候打电话给她:'亲爱的. 别人给我一张奥运会的票. 巴西队啊！一会儿我去看球了啊.'她:'哦. 这样啊. 好吧.'他:'怎么不高兴了？'她:'你忘了. 上周说好今天我朋友和她男朋友请我俩吃饭啊.'他:'哎呀. 对不起亲爱的. 我忘记了. 那我把票给别人吧. 我陪你去吃饭.'她:'不要了. 吃饭可以改天. 或者你先去看. 我们等你.'他:'那不行. 答应你的事情必须得做到. 再说你自己跟他俩在一起像电灯泡似的. 你肯定不舒服啊'她:'没事……'没等她说完. 他很强势的告诉她 '好了. 听我的. 你收拾一下. 我一会儿去接你.'> 其实女人不是不懂事. 只是. 她需要碰上一个懂事的男人. 其实. 情侣之间. 是可以互相的.---A: 她生理期. 身体不舒服. 顶着疼痛洗衣服. 收拾屋子. 他坐在电脑前面玩网络游戏.她干完活. 躺在床上. 长出了一口气.他看了她一眼:'宝贝儿. 辛苦了！' 然后转过头. 继续玩他的游戏.B: 她生理期. 很难受. 起身准备洗衣服.他拽住她:'你去床上躺着. 我来！'她:'你会做家务吗？你自己洗过衣服吗？'他:'不会做可以学着做啊. 以后你身体不舒服的时候. 我当然得独挡一面！'> 女人需要的不只是甜言蜜语. 哄她几句. 她也许会给你一个微笑. 但是实实在在的呵护. 她会对你一辈子的感恩. 并且会回报给你一个温暖的家.---A: 他说:'你是最好的.'她问:'我哪好？'他:'学历高. 能力强. 长得漂亮. 对我又这么好.'她笑了.B: 他:'你是我所遇到最好的女孩儿.'她:'我哪好？'他:'你对身边的每个人都很友善. 很无私. 对人对生活总是很感恩. 一个人有一颗善良的心. 会让周围的人感觉到温暖. 你是我见过最善良的女孩儿. 伤害你的人都应该下地狱！' 她哭了.---> 一个人, 是因为你对他好, 所以觉得你好.> 一个人, 是因为懂得你的好, 所以想要对你好.> 幸福的爱人, 首先应该是一对彼此欣赏的知己. -->]]></content>
      
      
      <categories>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 躺平 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Questions</title>
      <link href="javascript-questions/"/>
      <url>javascript-questions/</url>
      
        <content type="html"><![CDATA[<script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://github.com/lydiahallie/javascript-questions/blob/master/README.md">javascript-questions</a></p></blockquote><hr><blockquote><p>第一遍 完</p><p>77 是纯函数</p><p>144 不知所云 已解决</p></blockquote><h3 id="1-What’s-the-output"><a href="#1-What’s-the-output" class="headerlink" title="1. What’s the output?"></a>1. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Lydia</code> and <code>undefined</code></li><li>B: <code>Lydia</code> and <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> and <code>21</code></li><li>D: <code>undefined</code> and <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: D</p><p>Within the function, we first declare the <code>name</code> variable with the <code>var</code> keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of <code>undefined</code>, until we actually get to the line where we define the variable. We haven’t defined the variable yet on the line where we try to log the <code>name</code> variable, so it still holds the value of <code>undefined</code>.</p><blockquote><p>在函数内部，我们首先通过 <code>var</code> 关键字声明了 <code>name</code> 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了）, 直到程序运行到定义变量位置之前默认值都是 <code>undefined</code>. 因为当我们打印 <code>name</code> 变量时还没有执行到定义变量的位置，因此变量的值保持为 <code>undefined</code>.</p></blockquote><p>Variables with the <code>let</code> keyword (and <code>const</code>) are hoisted, but unlike <code>var</code>, don’t get <em>initialized</em>. They are not accessible before the line we declare (initialize) them. This is called the”temporal dead zone”. When we try to access the variables before they are declared, JavaScript throws a <code>ReferenceError</code>.</p><blockquote><p>通过 <code>let</code> 和 <code>const</code> 关键字声明的变量也会提升，但是和 <code>var</code> 不同，它们不会被 <em>初始化</em>. 在我们声明（初始化） 之前是不能访问它们的。这个行为被称之为 <strong>暂时性死区</strong>. 当我们试图在声明之前访问它们时，JavaScript 将会抛出一个 <code>ReferenceError: Cannot access &#39;age&#39; before initialization</code> 错误。</p></blockquote></details><hr><h3 id="2-What’s-the-output"><a href="#2-What’s-the-output" class="headerlink" title="2. What’s the output?"></a>2. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>0 1 2</code> and <code>0 1 2</code></li><li>B: <code>0 1 2</code> and <code>3 3 3</code></li><li>C: <code>3 3 3</code> and <code>0 1 2</code></li><li>D: <code>3 3 3</code> and <code>3 3 3</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"><code>let</code></a> 允许你声明一个作用域被限制在块级中的变量、语句或者表达式。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout">window.setTimeout</a> 设置一个定时器，该定时器在定时器到期后执行一个函数或指定的一段代码。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>Because of the event queue in JavaScript, the <code>setTimeout</code> callback function is called <em>after</em> the loop has been executed. Since the variable <code>i</code> in the first loop was declared using the <code>var</code> keyword, this value was global. During the loop, we incremented the value of <code>i</code> by <code>1</code> each time, using the unary operator <code>++</code>. By the time the <code>setTimeout</code> callback function was invoked, <code>i</code> was equal to <code>3</code> in the first example.</p><blockquote><p>由于 JavaScript 的事件循环，<code>setTimeout</code> 回调会在 <em>遍历结束后</em> 才执行。因为在第一个遍历中遍历 <code>i</code> 是通过 <code>var</code> 关键字声明的，所以这个值是全局作用域下的。在遍历过程中，我们通过一元操作符 <code>++</code> 来每次递增 <code>i</code> 的值。当 <code>setTimeout</code> 回调执行的时候，<code>i</code> 的值等于 3.</p></blockquote><p>In the second loop, the variable <code>i</code> was declared using the <code>let</code> keyword: variables declared with the <code>let</code> (and <code>const</code>) keyword are block-scoped (a block is anything between <code>&#123; &#125;</code>). During each iteration, <code>i</code> will have a new value, and each value is scoped inside the loop.</p><blockquote><p>在第二个遍历中，遍历 <code>i</code> 是通过 <code>let</code> 关键字声明的：通过 <code>let</code> 和 <code>const</code> 关键字声明的变量是拥有块级作用域（指的是任何在 {} 中的内容）. 在每次的遍历过程中，<code>i</code> 都有一个新值，并且每个值都在循环内的作用域中。</p></blockquote><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="3-What’s-the-output"><a href="#3-What’s-the-output" class="headerlink" title="3. What’s the output?"></a>3. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  radius<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token function">diameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">perimeter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shape<span class="token punctuation">.</span><span class="token function">diameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shape<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>20</code> and <code>62.83185307179586</code></li><li>B: <code>20</code> and <code>NaN</code></li><li>C: <code>20</code> and <code>63</code></li><li>D: <code>NaN</code> and <code>63</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a> Does not have its own bindings to <code>this</code> or <code>super</code>, and should not be used as <code>methods</code>. Does not have <code>new.target</code> keyword.Not suitable for <code>call</code>, <code>apply</code> and <code>bind</code> methods, which generally rely on establishing a <code>scope</code>.Can not be used as <code>constructors</code>.Can not use <code>yield</code>, within its body.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>Note that the value of <code>diameter</code> is a regular function, whereas the value of <code>perimeter</code> is an arrow function.</p><p>With arrow functions, the <code>this</code> keyword refers to its current surrounding scope, unlike regular functions! This means that when we call <code>perimeter</code>, it doesn’t refer to the shape object, but to its surrounding scope (window for example).</p><p>There is no value <code>radius</code> on that object, which returns <code>NaN</code>.</p></details><hr><h3 id="4-What’s-the-output"><a href="#4-What’s-the-output" class="headerlink" title="4. What’s the output?"></a>4. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">'Lydia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>A: <code>1</code> and <code>false</code></li><li>B: <code>false</code> and <code>NaN</code></li><li>C: <code>false</code> and <code>false</code></li><li>D: <code>1</code> and <code>NaN</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus">Unary plus (+)</a> 一元运算符加号 (+) 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字。它的效果和 <code>Number(...)</code> 相同，但是更加简短</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT">Logical NOT (!)</a> 逻辑非 ! 表示布尔非运算。运算符接受一个参数，并按如下运作：1) 将操作数转化为布尔类型：true/false. 2) 返回相反的值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>The unary plus tries to convert an operand to a number. <code>true</code> is <code>1</code>, and <code>false</code> is <code>0</code>.</p><p>The string <code>&#39;Lydia&#39;</code> is a truthy value. What we’re actually asking, is”is this truthy value falsy?”. This returns <code>false</code>.</p></details><hr><h3 id="5-Which-one-is-true"><a href="#5-Which-one-is-true" class="headerlink" title="5. Which one is true?"></a>5. Which one is true?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> bird <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  size<span class="token operator">:</span> <span class="token string">'small'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Mickey'</span><span class="token punctuation">,</span>  small<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>mouse.bird.size</code> is not valid</li><li>B: <code>mouse[bird.size]</code> is not valid</li><li>C: <code>mouse[bird[&quot;size&quot;]]</code> is not valid</li><li>D: All of them are valid</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors">属性访问器</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>In JavaScript, all object keys are strings (unless it’s a Symbol). Even though we might not <em>type</em> them as strings, they are always converted into strings under the hood.</p><p>JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket <code>[</code> and keeps going until it finds the closing bracket <code>]</code>. Only then, it will evaluate the statement.</p><p><code>mouse[bird.size]</code>: First it evaluates <code>bird.size</code>, which is <code>&quot;small&quot;</code>. <code>mouse[&quot;small&quot;]</code> returns <code>true</code></p><p>However, with dot notation, this doesn’t happen. <code>mouse</code> does not have a key called <code>bird</code>, which means that <code>mouse.bird</code> is <code>undefined</code>. Then, we ask for the <code>size</code> using dot notation: <code>mouse.bird.size</code>. Since <code>mouse.bird</code> is <code>undefined</code>, we’re actually asking <code>undefined.size</code>. This isn’t valid, and will throw an error similar to <code>Cannot read property&quot;size&quot; of undefined</code>.</p></details><hr><h3 id="6-What’s-the-output"><a href="#6-What’s-the-output" class="headerlink" title="6. What’s the output?"></a>6. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> greeting<span class="token operator">:</span> <span class="token string">'Hey!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> d<span class="token punctuation">;</span>d <span class="token operator">=</span> c<span class="token punctuation">;</span>c<span class="token punctuation">.</span>greeting <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Hello</code></li><li>B: <code>Hey!</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li><li>E: <code>TypeError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>In JavaScript, all objects interact by <em>reference</em> when setting them equal to each other.</p><blockquote><p>在 JavaScript 中，当设置两个对象彼此相等时，它们会通过 <em>引用</em> 进行交互。</p></blockquote><p>First, variable <code>c</code> holds a value to an object. Later, we assign <code>d</code> with the same reference that <code>c</code> has to the object.</p><blockquote><p>首先，变量 <code>c</code> 的值是一个对象。接下来，我们给 <code>d</code> 分配了一个和 <code>c</code> 对象相同的引用。</p></blockquote><!-- <img src="https://i.imgur.c·om/ko5k0fs.png"> --><p><img src="/images/ko5k0fs.png"></p><p>When you change one object, you change all of them.</p><blockquote><p>因此当我们改变其中一个对象时，其实是改变了所有的对象。</p></blockquote></details><hr><h3 id="7-What’s-the-output"><a href="#7-What’s-the-output" class="headerlink" title="7. What’s the output?"></a>7. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>true</code> <code>false</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>true</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new">new 运算符</a> 创建一个用户定义的对象类型的实例或具有构造函数的内置对象的 <strong>实例</strong>.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality">宽松相等 (==)</a> 检查其两个操作数是否相等，并返回 Boolean 结果。它会尝试强制类型转换并且比较不同类型的操作数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality">严格相等 (===)</a> 严格等于运算符不尝试类型转换。相反，严格相等运算符始终将不同类型的操作数视为不同。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>new Number()</code> is a built-in function constructor. Although it looks like a number, it’s not really a number: it has a bunch of extra features and is an object.</p><blockquote><p><code>new Number()</code> 是一个内建的函数构造器。虽然它看着像是一个 number, 但它实际上并不是一个真实的 number: 它有一堆额外的功能并且它是一个对象。</p></blockquote><p>When we use the <code>==</code> operator, it only checks whether it has the same <em>value</em>. They both have the value of <code>3</code>, so it returns <code>true</code>.</p><blockquote><p>当我们使用 <code>==</code> 操作符时，它只会检查两者是否拥有 <strong>相同的值</strong>. 因为它们的值都是 <code>3</code>, 因此返回 <code>true</code>.</p></blockquote><p>However, when we use the <code>===</code> operator, both value <em>and</em> type should be the same. It’s not: <code>new Number()</code> is not a number, it’s an <strong>object</strong>. Both return <code>false.</code></p><blockquote><p>然后，当我们使用 <code>===</code> 操作符时，<strong>两者的值和类型都应该是相同的</strong>.<code>new Number()</code> 是一个对象而不是 number, 因此返回 <code>false</code>.</p></blockquote></details><hr><h3 id="8-What’s-the-output"><a href="#8-What’s-the-output" class="headerlink" title="8. What’s the output?"></a>8. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Chameleon</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">colorChange</span><span class="token punctuation">(</span><span class="token parameter">newColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newColor <span class="token operator">=</span> newColor<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newColor<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> newColor <span class="token operator">=</span> <span class="token string">'green'</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newColor <span class="token operator">=</span> newColor<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> freddie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chameleon</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> newColor<span class="token operator">:</span> <span class="token string">'purple'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>freddie<span class="token punctuation">.</span><span class="token function">colorChange</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static">static</a> 关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>The <code>colorChange</code> function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children. Since <code>freddie</code> is a child, the function is not passed down, and not available on the <code>freddie</code> instance: a <code>TypeError</code> is thrown.</p><blockquote><p><code>colorChange</code> 是一个静态方法。静态方法被设计为只能被创建它们的构造器使用（也就是 <code>Chameleon</code>), 并且不能传递给实例。因为 <code>freddie</code> 是一个实例，静态方法不能被实例使用，因此抛出了 <code>TypeError: freddie.colorChange is not a function</code> 错误。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Chameleon<span class="token punctuation">.</span><span class="token function">colorChange</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "orange"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="9-What’s-the-output"><a href="#9-What’s-the-output" class="headerlink" title="9. What’s the output?"></a>9. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> greeting<span class="token punctuation">;</span>greetign <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// Typo!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greetign<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;&#125;</code></li><li>B: <code>ReferenceError: greetign is not defined</code></li><li>C: <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A<br>It logs the object, because we just created an empty object on the global object! When we mistyped <code>greeting</code> as <code>greetign</code>, the JS interpreter actually saw this as <code>global.greetign = &#123;&#125;</code> (or <code>window.greetign = &#123;&#125;</code> in a browser).</p><blockquote><p>代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 <code>greeting</code> 写错成 <code>greetign</code> 时，JavaScript 解释器实际在上浏览器中将它视为 <code>global.greetign = &#123;&#125;</code> （或者 <code>window.greetign = &#123;&#125;</code>).</p></blockquote><p>In order to avoid this, we can use <code>&quot;use strict&quot;</code>. This makes sure that you have declared a variable before setting it equal to anything.</p><blockquote><p>为了避免这个，我们可以使用 <code>&quot;use strict&quot;</code>. 这能确保当你声明变量时必须赋值。</p></blockquote></details><hr><h3 id="10-What-happens-when-we-do-this"><a href="#10-What-happens-when-we-do-this" class="headerlink" title="10. What happens when we do this?"></a>10. What happens when we do this?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bark<span class="token punctuation">.</span>animal <span class="token operator">=</span> <span class="token string">'dog'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: Nothing, this is totally fine!</li><li>B: <code>SyntaxError</code>. You cannot add properties to a function this way.</li><li>C: <code>Woof</code> gets logged.</li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)</p><p>A function is a special type of object. The code you write yourself isn’t the actual function. The function is an object with properties. This property is invocable.</p></details><hr><h3 id="11-What’s-the-output"><a href="#11-What’s-the-output" class="headerlink" title="11. What’s the output?"></a>11. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Lydia'</span><span class="token punctuation">,</span> <span class="token string">'Hallie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span><span class="token function-variable function">getFullName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>TypeError</code></li><li>B: <code>SyntaxError</code></li><li>C: <code>Lydia Hallie</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a> 你不能像常规对象那样，给构造函数直接添加属性。我们可以给 <code>doSomething</code> 函数的原型对象添加新属性，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>doSomething<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>In JavaScript, functions are objects, and therefore, the method <code>getFullName</code> gets added to the constructor function object itself. For that reason, we can call <code>Person.getFullName()</code>, but <code>member.getFullName</code> throws a <code>TypeError</code>.</p><blockquote><p>你不能像常规对象那样，给构造函数直接添加属性。因此抛出了 <code>TypeError: member.getFullName is not a function</code> 错误。</p></blockquote><p>If you want a method to be available to all object instances, you have to add it to the prototype property:</p><blockquote><p>如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getFullName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这才会使 <code>member.getFullName()</code> 起作用。为什么这么做是有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 <code>Person</code> 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！</p></details><hr><h3 id="12-What’s-the-output"><a href="#12-What’s-the-output" class="headerlink" title="12. What’s the output?"></a>12. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> lydia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Lydia'</span><span class="token punctuation">,</span> <span class="token string">'Hallie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sarah <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Sarah'</span><span class="token punctuation">,</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lydia<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sarah<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>undefined</code></li><li>B: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>Person &#123;firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;&#125;</code></li><li>C: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>&#123;&#125;</code></li><li>D: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a> 关键字会进行如下的操作：</p><ol><li>创建一个空的简单 JavaScript 对象（即 <code>&#123;&#125;</code>);</li><li>链接该对象（即设置该对象的构造函数） 到另一个对象 ;</li><li>将步骤 1 新创建的对象作为 <code>this</code> 的上下文 ;</li><li>如果该函数没有返回对象，则返回 <code>this</code>.</li></ol></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>For <code>sarah</code>, we didn’t use the <code>new</code> keyword. When using <code>new</code>, <code>this</code> refers to the new empty object we create. However, if you don’t add <code>new</code>, <code>this</code> refers to the <strong>global object</strong>!</p><p>We said that <code>this.firstName</code> equals <code>&quot;Sarah&quot;</code> and <code>this.lastName</code> equals <code>&quot;Smith&quot;</code>. What we actually did, is defining <code>global.firstName = &#39;Sarah&#39;</code> and <code>global.lastName = &#39;Smith&#39;</code>. <code>sarah</code> itself is left <code>undefined</code>, since we don’t return a value from the <code>Person</code> function.</p></details><hr><h3 id="13-What-are-the-three-phases-of-event-propagation"><a href="#13-What-are-the-three-phases-of-event-propagation" class="headerlink" title="13. What are the three phases of event propagation?"></a>13. What are the three phases of event propagation?</h3><ul><li>A: Target &gt; Capturing &gt; Bubbling</li><li>B: Bubbling &gt; Target &gt; Capturing</li><li>C: Target &gt; Bubbling &gt; Capturing</li><li>D: Capturing &gt; Target &gt; Bubbling</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture">Event bubbling and capture</a></p><p>当一个事件发生在具有父元素的元素上时，现代浏览器运行两个不同的阶段</p><ul><li><p>捕获阶段和冒泡阶段。在捕获阶段：</p></li><li><p>浏览器检查元素的最外层祖先 <code>&lt;html&gt;</code>, 是否在捕获阶段中注册了一个 <code>onclick</code> 事件处理程序，如果是，则运行它。</p></li><li><p>然后，它移动到 <code>&lt;html&gt;</code> 中单击元素的下一个祖先元素，并执行相同的操作，然后是此元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</p></li></ul><p>在冒泡阶段，恰恰相反：</p><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个 <code>onclick</code> 事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达 <code>&lt;html&gt;</code> 元素。</li></ul></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>During the <strong>capturing</strong> phase, the event goes through the ancestor elements down to the target element. It then reaches the <strong>target</strong> element, and <strong>bubbling</strong> begins.</p><p><img src="/images/N18oRgd.png"></p></details><hr><h3 id="14-All-object-have-prototypes"><a href="#14-All-object-have-prototypes" class="headerlink" title="14. All object have prototypes."></a>14. All object have prototypes.</h3><ul><li>A: true</li><li>B: false</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype">Object.prototype</a> 属性表示 Object 的原型对象。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>All objects have prototypes, except for the <strong>base object</strong>. The base object is the object created by the user, or an object that is created using the <code>new</code> keyword. The base object has access to some methods and properties, such as <code>.toString</code>. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can’t find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.</p></details><hr><h3 id="15-What’s-the-output"><a href="#15-What’s-the-output" class="headerlink" title="15. What’s the output?"></a>15. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>NaN</code></li><li>B: <code>TypeError</code></li><li>C: <code>&quot;12&quot;</code></li><li>D: <code>3</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>JavaScript is a <strong>dynamically typed language</strong>: we don’t specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called <em>implicit type coercion</em>. <strong>Coercion</strong> is converting from one type into another.</p><p>In this example, JavaScript converts the number <code>1</code> into a string, in order for the function to make sense and return a value. During the addition of a numeric type (<code>1</code>) and a string type (<code>&#39;2&#39;</code>), the number is treated as a string. We can concatenate strings like <code>&quot;Hello&quot; + &quot;World&quot;</code>, so what’s happening here is <code>&quot;1&quot;+&quot;2&quot;</code> which returns <code>&quot;12&quot;</code>.</p></details><hr><h3 id="16-What’s-the-output"><a href="#16-What’s-the-output" class="headerlink" title="16. What’s the output?"></a>16. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>1</code> <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>2</code></li><li>C: <code>0</code> <code>2</code> <code>2</code></li><li>D: <code>0</code> <code>1</code> <code>2</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment">自增 (++)</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: C<br>The <strong>postfix</strong> unary operator <code>++</code>:</p><ol><li>Returns the value (this returns <code>0</code>)</li><li>Increments the value (number is now <code>1</code>)</li></ol><p>The <strong>prefix</strong> unary operator <code>++</code>:</p><ol><li>Increments the value (number is now <code>2</code>)</li><li>Returns the value (this returns <code>2</code>)</li></ol><p>This returns <code>0 2 2</code>.</p></details><hr><h3 id="17-What’s-the-output"><a href="#17-What’s-the-output" class="headerlink" title="17. What’s the output?"></a>17. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getPersonInfo</span><span class="token punctuation">(</span><span class="token parameter">one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>getPersonInfo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>person<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Lydia&quot;</code> <code>21</code> <code>[&quot;&quot;,&quot; is &quot;,&quot; years old&quot;]</code></li><li>B: <code>[&quot;&quot;,&quot; is &quot;,&quot; years old&quot;]</code> <code>&quot;Lydia&quot;</code> <code>21</code></li><li>C: <code>&quot;Lydia&quot;</code> <code>[&quot;&quot;,&quot; is &quot;,&quot; years old&quot;]</code> <code>21</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings#%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2">带标签的模板字符串</a> 标签函数的第一个参数包含一个字符串值的数组。其余的参数与表达式相关</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!</p></details><hr><h3 id="18-What’s-the-output"><a href="#18-What’s-the-output" class="headerlink" title="18. What’s the output?"></a>18. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'You are an adult!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'You are still an adult.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hmm.. You don't have an age I guess</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>You are an adult!</code></li><li>B: <code>You are still an adult.</code></li><li>C: <code>Hmm.. You don&#39;t have an age I guess</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/%E7%9B%B8%E7%AD%89">【宽松】相等 (==)</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality">严格相等 (===)</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>When testing equality, primitives are compared by their <em>value</em>, while objects are compared by their <em>reference</em>. JavaScript checks if the objects have a reference to the same location in memory.</p><p>The two objects that we are comparing don’t have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.</p><p>This is why both <code>&#123;age: 18&#125; === &#123; age: 18 &#125;</code> and <code>&#123; age: 18 &#125; == &#123; age: 18 &#125;</code> return <code>false</code>.</p></details><hr><h3 id="19-What’s-the-output"><a href="#19-What’s-the-output" class="headerlink" title="19. What’s the output?"></a>19. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;array&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;NaN&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a> 操作符返回一个字符串，表示未经计算的操作数的类型。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Rest_parameters">剩余参数</a> 语法允许我们将一个不定数量的参数表示为一个数组。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The rest parameter (<code>...args</code>) lets us “collect” all remaining arguments into an array. An array is an object, so <code>typeof args</code> returns <code>&quot;object&quot;</code></p></details><hr><h3 id="20-What’s-the-output"><a href="#20-What’s-the-output" class="headerlink" title="20. What’s the output?"></a>20. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>21</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>With <code>&quot;use strict&quot;</code>, you can make sure that you don’t accidentally declare global variables. We never declared the variable <code>age</code>, and since we use <code>&quot;use strict&quot;</code>, it will throw a reference error. If we didn’t use <code>&quot;use strict&quot;</code>, it would have worked, since the property <code>age</code> would have gotten added to the global object.</p></details><hr><h3 id="21-What’s-the-output"><a href="#21-What’s-the-output" class="headerlink" title="21. What’s the output?"></a>21. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'10*10+5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>105</code></li><li>B: <code>&quot;105&quot;</code></li><li>C: <code>TypeError</code></li><li>D: <code>&quot;10*10+5&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval">eval()</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p><code>eval</code> evaluates codes that’s passed as a string. If it’s an expression, like in this case, it evaluates the expression. The expression is <code>10 * 10 + 5</code>. This returns the number <code>105</code>.</p></details><hr><h3 id="22-How-long-is-cool-secret-accessible"><a href="#22-How-long-is-cool-secret-accessible" class="headerlink" title="22. How long is cool_secret accessible?"></a>22. How long is cool_secret accessible?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'cool_secret'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: 永远，数据不会丢失。</li><li>B: 当用户关掉标签页时。</li><li>C: 当用户关掉整个浏览器，而不只是关掉标签页。</li><li>D: 当用户关闭电脑时。</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage">Window.sessionStorage</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">Window.localStorage</a></p><p>不同之处在于 <code>localStorage</code> 里面存储的数据没有过期时间设置 浏览器关闭 然后重新打开后数据仍然存在 而存储在 <code>sessionStorage</code> 里面的数据在页面会话结束时会被清除.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>The data stored in <code>sessionStorage</code> is removed after closing the <em>tab</em>.</p><p>If you used <code>localStorage</code>, the data would’ve been there forever, unless for example <code>localStorage.clear()</code> is invoked.</p></details><hr><h3 id="23-What’s-the-output"><a href="#23-What’s-the-output" class="headerlink" title="23. What’s the output?"></a>23. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>8</code></li><li>B: <code>10</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var">var</a> 声明语句声明一个变量，并可选地将其初始化为一个值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>With the <code>var</code> keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.</p><p>You cannot do this with <code>let</code> or <code>const</code> since they’re block-scoped.</p></details><hr><h3 id="24-What’s-the-output"><a href="#24-What’s-the-output" class="headerlink" title="24. What’s the output?"></a>24. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li><li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">Object.prototype.hasOwnProperty()</a> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has">Set.prototype.has()</a> 方法返回一个布尔值来指示对应的值 value 是否存在 Set 对象中。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>All object keys (excluding Symbols) are strings under the hood, even if you don’t type it yourself as a string. This is why <code>obj.hasOwnProperty(&#39;1&#39;)</code> also returns true.</p><p>It doesn’t work that way for a set. There is no <code>&#39;1&#39;</code> in our set: <code>set.has(&#39;1&#39;)</code> returns <code>false</code>. It has the numeric type <code>1</code>, <code>set.has(1)</code> returns <code>true</code>.</p></details><hr><h3 id="25-What’s-the-output"><a href="#25-What’s-the-output" class="headerlink" title="25. What’s the output?"></a>25. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token string">'one'</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">'two'</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token string">'three'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;a: &quot;one&quot;, b: &quot;two&quot;&#125;</code></li><li>B: <code>&#123;b: &quot;two&quot;, a: &quot;three&quot;&#125;</code></li><li>C: <code>&#123;a: &quot;three&quot;, b: &quot;two&quot;&#125;</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.</p></details><hr><h3 id="26-The-JavaScript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-“this”-keyword"><a href="#26-The-JavaScript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-“this”-keyword" class="headerlink" title="26. The JavaScript global execution context creates two things for you: the global object, and the “this” keyword."></a>26. The JavaScript global execution context creates two things for you: the global object, and the “this” keyword.</h3><ul><li>A: true</li><li>B: false</li><li>C: it depends</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>The base execution context is the global execution context: it’s what’s accessible everywhere in your code.</p></details><hr><h3 id="27-What’s-the-output"><a href="#27-What’s-the-output" class="headerlink" title="27. What’s the output?"></a>27. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>3</code></li><li>C: <code>1</code> <code>2</code> <code>4</code></li><li>D: <code>1</code> <code>3</code> <code>4</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue">continue</a> 声明终止当前循环或标记循环的当前迭代中的语句执行，并在下一次迭代时继续执行循环。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The <code>continue</code> statement skips an iteration if a certain condition returns <code>true</code>.</p></details><hr><h3 id="28-What’s-the-output"><a href="#28-What’s-the-output" class="headerlink" title="28. What’s the output?"></a>28. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">giveLydiaPizza</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'Just give Lydia pizza already!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">giveLydiaPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Just give Lydia pizza already!&quot;</code></li><li>B: <code>TypeError: not a function</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes">对象原型</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p><code>String</code> is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!</p></details><hr><h3 id="29-What’s-the-output"><a href="#29-What’s-the-output" class="headerlink" title="29. What’s the output?"></a>29. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'b'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>123</code></li><li>B: <code>456</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>Object keys are automatically converted into strings. We are trying to set an object as a key to object <code>a</code>, with the value of <code>123</code>.</p><p>However, when we stringify an object, it becomes <code>&quot;[object Object]&quot;</code>. So what we are saying here, is that <code>a[&quot;[object Object]&quot;] = 123</code>. Then, we can try to do the same again. <code>c</code> is another object that we are implicitly stringifying. So then, <code>a[&quot;[object Object]&quot;] = 456</code>.</p><p>Then, we log <code>a[b]</code>, which is actually <code>a[&quot;[object Object]&quot;]</code>. We just set that to <code>456</code>, so it returns <code>456</code>.</p></details><hr><h3 id="30-What’s-the-output"><a href="#30-What’s-the-output" class="headerlink" title="30. What’s the output?"></a>30. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Second'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Third'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>First</code> <code>Second</code> <code>Third</code></li><li>B: <code>First</code> <code>Third</code> <code>Second</code></li><li>C: <code>Second</code> <code>First</code> <code>Third</code></li><li>D: <code>Second</code> <code>Third</code> <code>First</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout">window.setTimeout</a> 设置一个定时器，该定时器在定时器到期后执行一个函数或指定的一段代码。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>We have a <code>setTimeout</code> function and invoked it first. Yet, it was logged last.</p><p>This is because in browsers, we don’t just have the runtime engine, we also have something called a <code>WebAPI</code>. The <code>WebAPI</code> gives us the <code>setTimeout</code> function to start with, and for example the DOM.</p><p>After the <em>callback</em> is pushed to the WebAPI, the <code>setTimeout</code> function itself (but not the callback!) is popped off the stack.</p><img src="/images/X5wsHOg.png" width="400"><img src="https://i.imgur.com/X5wsHOg.png" width="400"><p>Now, <code>foo</code> gets invoked, and <code>&quot;First&quot;</code> is being logged.</p><img src="/images/Pvc0dGq.png" width="400"><img src="https://i.imgur.com/Pvc0dGq.png" width="400"><p><code>foo</code> is popped off the stack, and <code>baz</code> gets invoked. <code>&quot;Third&quot;</code> gets logged.<br><img src="/images/WhA2bCP.png" width="400"></p><img src="https://i.imgur.com/WhA2bCP.png" width="400"><p>The WebAPI can’t just add stuff to the stack whenever it’s ready. Instead, it pushes the callback function to something called the <em>queue</em>.<br><img src="/images/NSnDZmU.png" width="400"></p><img src="https://i.imgur.com/NSnDZmU.png" width="400"><p>This is where an event loop starts to work. An <strong>event loop</strong> looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.<br><img src="/images/uyiScAI.png" width="400"></p><img src="https://i.imgur.com/uyiScAI.png" width="400"><p><code>bar</code> gets invoked, <code>&quot;Second&quot;</code> gets logged, and it’s popped off the stack.</p></details><hr><h3 id="31-What-is-the-event-target-when-clicking-the-button"><a href="#31-What-is-the-event-target-when-clicking-the-button" class="headerlink" title="31. What is the event.target when clicking the button?"></a>31. What is the event.target when clicking the button?</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>first div<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>second div<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>button<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: Outer <code>div</code></li><li>B: Inner <code>div</code></li><li>C: <code>button</code></li><li>D: An array of all nested elements.</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target">Event.target</a> 触发事件的对象 （某个 DOM 元素） 的引用。当事件处理程序在事件的冒泡或捕获阶段被调用时，它与 <code>event.currentTarget</code> 不同。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation">event.stopPropagation</a> 阻止捕获和冒泡阶段中当前事件的进一步传播。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The deepest nested element that caused the event is the target of the event. You can stop bubbling by <code>event.stopPropagation</code></p></details><hr><h3 id="32-When-you-click-the-paragraph-what’s-the-logged-output"><a href="#32-When-you-click-the-paragraph-what’s-the-logged-output" class="headerlink" title="32. When you click the paragraph, what’s the logged output?"></a>32. When you click the paragraph, what’s the logged output?</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>div<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>p<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click here!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>p</code> <code>div</code></li><li>B: <code>div</code> <code>p</code></li><li>C: <code>p</code></li><li>D: <code>div</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>If we click <code>p</code>, we see two logs: <code>p</code> and <code>div</code>. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set <code>useCapture</code> to <code>true</code>). It goes from the deepest nested element outwards.</p></details><hr><h3 id="33-What’s-the-output"><a href="#33-What’s-the-output" class="headerlink" title="33. What’s the output?"></a>33. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li><li>B: <code>function</code> <code>function</code></li><li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li><li>D: <code>Lydia is 21</code> <code>function</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a> 方法调用一个具有给定 <code>this</code> 值的函数，以及以一个 ** 数组 **（或类数组对象）的形式提供的参数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind()</a> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p><code>call()</code> 方法的语法和作用与 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是一个参数列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>With both, we can pass the object to which we want the <code>this</code> keyword to refer to. However, <code>.call</code> is also executed immediately!</p><p><code>.bind</code>. returns a <em>copy</em> of the function, but with a bound context! It is not executed immediately.</p></details><hr><h3 id="34-What’s-the-output"><a href="#34-What’s-the-output" class="headerlink" title="34. What’s the output?"></a>34. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typeof</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;object&quot;</code></li><li>B: <code>&quot;number&quot;</code></li><li>C: <code>&quot;function&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">IIFE（立即调用函数表达式）</a> 是一个在定义时就会立即执行的 JavaScript 函数。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>The <code>sayHi</code> function returns the returned value of the immediately invoked function expression (IIFE). This function returned <code>0</code>, which is type <code>&quot;number&quot;</code>.</p><p>FYI: there are only 7 built-in types: <code>null</code>, <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>string</code>, <code>object</code>, and <code>symbol</code>. <code>&quot;function&quot;</code> is not a type, since functions are objects, it’s of type <code>&quot;object&quot;</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> sayHi<span class="token punctuation">;</span> <span class="token comment">// =>"function"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="35-Which-of-these-values-are-falsy"><a href="#35-Which-of-these-values-are-falsy" class="headerlink" title="35. Which of these values are falsy?"></a>35. Which of these values are falsy?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>0</code>, <code>&#39;&#39;</code>, <code>undefined</code></li><li>B: <code>0</code>, <code>new Number(0)</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>C: <code>0</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>D: All of them are falsy</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">Falsy</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>There are 8 falsy values:</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>false</code></li><li><code>&#39;&#39;</code> (empty string)</li><li><code>0</code></li><li><code>-0</code></li><li><code>0n</code> (BigInt(0))</li></ul><p>Function constructors, like <code>new Number</code> and <code>new Boolean</code> are truthy.</p></details><hr><h3 id="36-What’s-the-output"><a href="#36-What’s-the-output" class="headerlink" title="36. What’s the output?"></a>36. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>typeof 1</code> returns <code>&quot;number&quot;</code>.<br><code>typeof &quot;number&quot;</code> returns <code>&quot;string&quot;</code></p></details><hr><h3 id="37-What’s-the-output"><a href="#37-What’s-the-output" class="headerlink" title="37. What’s the output?"></a>37. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[1, 2, 3, 7 x null, 11]</code></li><li>B: <code>[1, 2, 3, 11]</code></li><li>C: <del><code>[1, 2, 3, 7 x empty, 11]</code></del> <code>[ 1, 2, 3, &lt;7 empty items&gt;, 11 ]</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called “empty slots”. These actually have the value of <code>undefined</code>, but you will see something like:</p><p><del><code>[1, 2, 3, 7 x empty, 11]</code></del></p><p><code>[1, 2, 3, empty × 7, 11]</code>(Chrome 87)</p><p><code>[1, 2, 3, 10: 11]</code> (Safari)</p><p>depending on where you run it (it’s different for every browser, node, etc.)</p></details><hr><h3 id="38-What’s-the-output"><a href="#38-What’s-the-output" class="headerlink" title="38. What’s the output?"></a>38. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>1</code> <code>undefined</code> <code>2</code></li><li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>C: <code>1</code> <code>1</code> <code>2</code></li><li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>The <code>catch</code> block receives the argument <code>x</code>. This is not the same <code>x</code> as the variable when we pass arguments. This variable <code>x</code> is block-scoped.</p><p>Later, we set this block-scoped variable equal to <code>1</code>, and set the value of the variable <code>y</code>. Now, we log the block-scoped variable <code>x</code>, which is equal to <code>1</code>.</p><p>Outside of the <code>catch</code> block, <code>x</code> is still <code>undefined</code>, and <code>y</code> is <code>2</code>. When we want to <code>console.log(x)</code> outside of the <code>catch</code> block, it returns <code>undefined</code>, and <code>y</code> returns <code>2</code>.</p></details><hr><h3 id="39-Everything-in-JavaScript-is-either-a…"><a href="#39-Everything-in-JavaScript-is-either-a…" class="headerlink" title="39. Everything in JavaScript is either a…"></a>39. Everything in JavaScript is either a…</h3><ul><li>A: 基本类型与对象</li><li>B: 函数与对象</li><li>C: 只有对象</li><li>D: 数字与对象</li></ul><blockquote><p>⚠️ 最新的 ECMAScript 标准定义了 8 种 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a>: 7 种原始类型：<code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>BigInt</code>, <code>String</code>, <code>Symbol</code> 和 <code>Object</code>.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>JavaScript only has primitive types and objects.</p><p>Primitive types are <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, and <code>symbol</code>.</p><p>What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you’ll note that <code>&#39;foo&#39;.toUpperCase()</code> evaluates to <code>&#39;FOO&#39;</code> and does not result in a <code>TypeError</code>. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the primitive type using one of the wrapper classes, i.e. <code>String</code>, and then immediately discard the wrapper after the expression evaluates. All primitives except for <code>null</code> and <code>undefined</code> exhibit this behaviour.</p></details><hr><h3 id="40-What’s-the-output"><a href="#40-What’s-the-output" class="headerlink" title="40. What’s the output?"></a>40. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[0, 1, 2, 3, 1, 2]</code></li><li>B: <code>[6, 1, 2]</code></li><li>C: <code>[1, 2, 0, 1, 2, 3]</code></li><li>D: <code>[1, 2, 6]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">Array.prototype.reduce()</a> 方法对数组中的每个元素执行一个由您提供的 reducer 函数（升序执行）, 将其结果汇总为单个返回值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>[1, 2]</code> is our initial value. This is the value we start with, and the value of the very first <code>acc</code>. During the first round, <code>acc</code> is <code>[1,2]</code>, and <code>cur</code> is <code>[0, 1]</code>. We concatenate them, which results in <code>[1, 2, 0, 1]</code>.</p><p>Then, <code>[1, 2, 0, 1]</code> is <code>acc</code> and <code>[2, 3]</code> is <code>cur</code>. We concatenate them, and get <code>[1, 2, 0, 1, 2, 3]</code></p></details><hr><h3 id="41-What’s-the-output"><a href="#41-What’s-the-output" class="headerlink" title="41. What’s the output?"></a>41. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>false</code> <code>true</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>false</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT">Logical NOT (!)</a> 两个非运算 !! 有时候用来将某个值转化为布尔类型：也就是，第一个非运算将该值转化为布尔类型并取反，第二个非运算再次取反。最后我们就得到了一个任意值到布尔值的转化。内置的 Boolean 函数方法可以完成同样的事</p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">truthy</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">falsy</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>null</code> is falsy. <code>!null</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p><p><code>&quot;&quot;</code> is falsy. <code>!&quot;&quot;</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p><p><code>1</code> is truthy. <code>!1</code> returns <code>false</code>. <code>!false</code> returns <code>true</code>.</p></details><hr><h3 id="42-What-does-the-setInterval-method-return-in-the-browser"><a href="#42-What-does-the-setInterval-method-return-in-the-browser" class="headerlink" title="42. What does the setInterval method return in the browser?"></a>42. What does the <code>setInterval</code> method return in the browser?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: 一个唯一的 id</li><li>B: 该方法指定的毫秒数</li><li>C: 传递的函数</li><li>D: <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval">window.setInterval</a> 方法重复调用一个函数或执行一个代码段，在每次调用之间具有固定的时间延迟。<code>window.setInterval</code> 返回值 <code>intervalID</code> 是一个非零数值，用来标识通过 <code>setInterval()</code> 创建的计时器，这个值可以用来作为 <code>clearInterval()</code> 的参数来清除对应的计时器 .</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>It returns a unique id. This id can be used to clear that interval with the <code>clearInterval()</code> function.</p></details><hr><h3 id="43-What’s-the-output"><a href="#43-What’s-the-output" class="headerlink" title="43. What’s the output?"></a>43. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'Lydia'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</code></li><li>B: <code>[&quot;Lydia&quot;]</code></li><li>C: <code>[[], &quot;Lydia&quot;]</code></li><li>D: <code>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US//docs/Web/JavaScript/Reference/Operators/Spread_syntax">展开语法</a> 可以在函数调用 / 数组构造时，将 ** 数组表达式 ** 或者 <strong>string</strong> 在语法层面展开；还可以在构造 ** 字面量对象 ** 时，将对象表达式按 key-value 的方式展开。（字面量一般指 [1, 2, 3] 或者 {name: “mdn”} 这种简洁的构造方式） .</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>A string is an iterable. The spread operator maps every character of an iterable to one element.</p></details><hr><h3 id="44-What’s-the-output"><a href="#44-What’s-the-output" class="headerlink" title="44. What’s the output?"></a>44. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> i<span class="token punctuation">;</span>  <span class="token keyword">yield</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[0, 10], [10, 20]</code></li><li>B: <code>20, 20</code></li><li>C: <code>10, 20</code></li><li>D: <code>0, 10 and 10, 20</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*">function*</a> 关键字定义了一个 generator 函数表达式。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator">Generator</a> 生成器对象是由一个 generator function 返回的，并且它符合可迭代协议和迭代器协议。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next">Generator.prototype.next()</a> 方法返回一个包含属性 done 和 value 的对象。该方法也可以通过接受一个参数用以向生成器传值。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield">yield</a> 暂停和恢复 generator 函数。yield 关键字使生成器函数执行暂停，yield 关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的 return 关键字。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>Regular functions cannot be stopped mid-way after invocation. However, a generator function can be “stopped” midway, and later continue from where it stopped. Every time a generator function encounters a <code>yield</code> keyword, the function yields the value specified after it. Note that the generator function in that case doesn’t <em>return</em> the value, it <em>yields</em> the value.</p><p>First, we initialize the generator function with <code>i</code> equal to <code>10</code>. We invoke the generator function using the <code>next()</code> method. The first time we invoke the generator function, <code>i</code> is equal to <code>10</code>. It encounters the first <code>yield</code> keyword: it yields the value of <code>i</code>. The generator is now “paused”, and <code>10</code> gets logged.</p><p>Then, we invoke the function again with the <code>next()</code> method. It starts to continue where it stopped previously, still with <code>i</code> equal to <code>10</code>. Now, it encounters the next <code>yield</code> keyword, and yields <code>i * 2</code>. <code>i</code> is equal to <code>10</code>, so it returns <code>10 * 2</code>, which is <code>20</code>. This results in <code>10, 20</code>.</p></details><hr><h3 id="45-What-does-this-return"><a href="#45-What-does-this-return" class="headerlink" title="45. What does this return?"></a>45. What does this return?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> firstPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> secondPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>firstPromise<span class="token punctuation">,</span> secondPromise<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 对象用于表示一个异步操作的最终完成 （或失败）, 及其结果值。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">Promise.race()</a> Promise.race(iterable) 方法返回一个 promise, 一旦迭代器中的某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout">window.setTimeout</a> 设置一个定时器，该定时器在定时器到期后执行一个函数或指定的一段代码。</p></blockquote><ul><li>A: <code>&quot;one&quot;</code></li><li>B: <code>&quot;two&quot;</code></li><li>C: <code>&quot;two&quot; &quot;one&quot;</code></li><li>D: <code>&quot;one&quot; &quot;two&quot;</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>When we pass multiple promises to the <code>Promise.race</code> method, it resolves/rejects the <em>first</em> promise that resolves/rejects. To the <code>setTimeout</code> method, we pass a timer: 500ms for the first promise (<code>firstPromise</code>), and 100ms for the second promise (<code>secondPromise</code>). This means that the <code>secondPromise</code> resolves first with the value of <code>&#39;two&#39;</code>. <code>res</code> now holds the value of <code>&#39;two&#39;</code>, which gets logged.</p></details><hr><h3 id="46-What’s-the-output"><a href="#46-What’s-the-output" class="headerlink" title="46. What’s the output?"></a>46. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> members <span class="token operator">=</span> <span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">;</span>person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>members<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>null</code></li><li>B: <code>[null]</code></li><li>C: <code>[&#123;&#125;]</code></li><li>D: <code>[&#123;name: &quot;Lydia&quot;&#125;]</code></li></ul><details><summary><b>解析</b></summary><p>Answer: D</p><p>First, we declare a variable <code>person</code> with the value of an object that has a <code>name</code> property.</p><img src="/images/TML1MbS.png" width="400"><img src="https://i.imgur.com/TML1MbS.png" width="400"><p>Then, we declare a variable called <code>members</code>. We set the first element of that array equal to the value of the <code>person</code> variable. Objects interact by <em>reference</em> when setting them equal to each other. When you assign a reference from one variable to another, you make a <em>copy</em> of that reference. (note that they don’t have the <em>same</em> reference!)</p><img src="/images/FSG5K3F.png" width="400"><img src="https://i.imgur.com/FSG5K3F.png" width="400"><p>Then, we set the variable <code>person</code> equal to <code>null</code>.</p><img src="/images/sYjcsMT.png" width="400"><img src="https://i.imgur.com/sYjcsMT.png" width="400"><p>We are only modifying the value of the <code>person</code> variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in <code>members</code> still holds its reference to the original object. When we log the <code>members</code> array, the first element still holds the value of the object, which gets logged.</p></details><hr><h3 id="47-What’s-the-output"><a href="#47-What’s-the-output" class="headerlink" title="47. What’s the output?"></a>47. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;name: &quot;Lydia&quot;&#125;, &#123; age: 21 &#125;</code></li><li>B: <code>&quot;name&quot;, &quot;age&quot;</code></li><li>C: <code>&quot;Lydia&quot;, 21</code></li><li>D: <code>[&quot;name&quot;, &quot;Lydia&quot;], [&quot;age&quot;, 21]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in">for…in</a> 语句以任意顺序遍历一个对象的除 Symbol 以外的 ** 可枚举属性 **.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>With a <code>for-in</code> loop, we can iterate through object keys, in this case <code>name</code> and <code>age</code>. Under the hood, object keys are strings (if they’re not a Symbol). On every loop, we set the value of <code>item</code> equal to the current key it’s iterating over. First, <code>item</code> is equal to <code>name</code>, and gets logged. Then, <code>item</code> is equal to <code>age</code>, which gets logged.</p></details><hr><h3 id="48-What’s-the-output"><a href="#48-What’s-the-output" class="headerlink" title="48. What’s the output?"></a>48. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>&quot;345&quot;</code></li><li>B: <code>&quot;75&quot;</code></li><li>C: <code>12</code></li><li>D: <code>&quot;12&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">运算符优先级</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>Operator associativity is the order in which the compiler evaluates the expressions, either left-to-right or right-to-left. This only happens if all operators have the <em>same</em> precedence. We only have one type of operator: <code>+</code>. For addition, the associativity is left-to-right.</p><p><code>3 + 4</code> gets evaluated first. This results in the number <code>7</code>.</p><p><code>7 + &#39;5&#39;</code> results in <code>&quot;75&quot;</code> because of coercion. JavaScript converts the number <code>7</code> into a string, see question 15. We can concatenate two strings using the <code>+</code>operator. <code>&quot;7&quot; + &quot;5&quot;</code> results in <code>&quot;75&quot;</code>.</p></details><hr><h3 id="49-What’s-the-value-of-num"><a href="#49-What’s-the-value-of-num" class="headerlink" title="49. What’s the value of num?"></a>49. What’s the value of <code>num</code>?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'7*6'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>42</code></li><li>B: <code>&quot;42&quot;</code></li><li>C: <code>7</code></li><li>D: <code>NaN</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt">Number.parseInt()</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>Only the first numbers in the string is returned. Based on the <em>radix</em> (the second argument in order to specify what type of number we want to parse it to: base 10, hexadecimal, octal, binary, etc.), the <code>parseInt</code> checks whether the characters in the string are valid. Once it encounters a character that isn’t a valid number in the radix, it stops parsing and ignores the following characters.</p><p><code>*</code> is not a valid number. It only parses <code>&quot;7&quot;</code> into the decimal <code>7</code>. <code>num</code> now holds the value of <code>7</code>.</p></details><hr><h3 id="50-What’s-the-output"><a href="#50-What’s-the-output" class="headerlink" title="50. What’s the output?"></a>50. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[]</code></li><li>B: <code>[null, null, null]</code></li><li>C: <code>[undefined, undefined, undefined]</code></li><li>D: <code>[3 x empty]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>When mapping over the array, the value of <code>num</code> is equal to the element it’s currently looping over. In this case, the elements are numbers, so the condition of the if statement <code>typeof num === &quot;number&quot;</code> returns <code>true</code>. The map function creates a new array and inserts the values returned from the function.</p><p>However, we don’t return a value. When we don’t return a value from the function, the function returns <code>undefined</code>. For every element in the array, the function block gets called, so for each element we return <code>undefined</code>.</p></details><hr><h3 id="51-What’s-the-output"><a href="#51-What’s-the-output" class="headerlink" title="51. What’s the output?"></a>51. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token parameter">member<span class="token punctuation">,</span> year</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  member<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>  year <span class="token operator">=</span> <span class="token string">'1998'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Sarah'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> birthYear <span class="token operator">=</span> <span class="token string">'1997'</span><span class="token punctuation">;</span><span class="token function">getInfo</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> birthYear<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> birthYear<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;name: &quot;Lydia&quot;&#125;, &quot;1997&quot;</code></li><li>B: <code>&#123;name: &quot;Sarah&quot;&#125;, &quot;1998&quot;</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;&#125;, &quot;1998&quot;</code></li><li>D: <code>&#123;name: &quot;Sarah&quot;&#125;, &quot;1997&quot;</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>Arguments are passed by <em>value</em>, unless their value is an object, then they’re passed by <em>reference</em>. <code>birthYear</code> is passed by value, since it’s a string, not an object. When we pass arguments by value, a <em>copy</em> of that value is created (see question 46).</p><p>The variable <code>birthYear</code> has a reference to the value <code>&quot;1997&quot;</code>. The argument <code>year</code> also has a reference to the value <code>&quot;1997&quot;</code>, but it’s not the same value as <code>birthYear</code> has a reference to. When we update the value of <code>year</code> by setting <code>year</code> equal to <code>&quot;1998&quot;</code>, we are only updating the value of <code>year</code>. <code>birthYear</code> is still equal to <code>&quot;1997&quot;</code>.</p><p>The value of <code>person</code> is an object. The argument <code>member</code> has a (copied) reference to the <em>same</em> object. When we modify a property of the object <code>member</code> has a reference to, the value of <code>person</code> will also be modified, since they both have a reference to the same object. <code>person</code>‘s <code>name</code> property is now equal to the value <code>&quot;Lydia&quot;</code></p></details><hr><h3 id="52-What’s-the-output"><a href="#52-What’s-the-output" class="headerlink" title="52. What’s the output?"></a>52. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'It worked!'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Oh no an error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;It worked! Hello world!&quot;</code></li><li>B: <code>&quot;Oh no an error: undefined</code></li><li>C: <code>SyntaxError: can only throw Error objects</code></li><li>D: <code>&quot;Oh no an error: Hello world!</code></li></ul><details><summary><b>解析</b></summary><p>Answer: D</p><p>With the <code>throw</code> statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a <b>string</b>, a <b>number</b>, a <b>boolean</b> or an <b>object</b>. In this case, our exception is the string <code>&#39;Hello world!&#39;</code>.</p><p>With the <code>catch</code> statement, we can specify what to do if an exception is thrown in the <code>try</code> block. An exception is thrown: the string <code>&#39;Hello world!&#39;</code>. <code>e</code> is now equal to that string, which we log. This results in <code>&#39;Oh an error: Hello world!&#39;</code>.</p></details><hr><h3 id="53-What’s-the-output"><a href="#53-What’s-the-output" class="headerlink" title="53. What’s the output?"></a>53. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> <span class="token string">'Lamborghini'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> make<span class="token operator">:</span> <span class="token string">'Maserati'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Lamborghini&quot;</code></li><li>B: <code>&quot;Maserati&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>When you return a property, the value of the property is equal to the <em>returned</em> value, not the value set in the constructor function. We return the string <code>&quot;Maserati&quot;</code>, so <code>myCar.make</code> is equal to <code>&quot;Maserati&quot;</code>.</p></details><hr><h3 id="54-What’s-the-output"><a href="#54-What’s-the-output" class="headerlink" title="54. What’s the output?"></a>54. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;undefined&quot;, &quot;number&quot;</code></li><li>B: <code>&quot;number&quot;, &quot;number&quot;</code></li><li>C: <code>&quot;object&quot;, &quot;number&quot;</code></li><li>D: <code>&quot;number&quot;, &quot;undefined&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let">let</a> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p><code>let x = (y = 10);</code> is actually shorthand for:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>When we set <code>y</code> equal to <code>10</code>, we actually add a property <code>y</code> to the global object (<code>window</code> in browser, <code>global</code> in Node). In a browser, <code>window.y</code> is now equal to <code>10</code>.</p><p>Then, we declare a variable <code>x</code> with the value of <code>y</code>, which is <code>10</code>. Variables declared with the <code>let</code> keyword are <em>block scoped</em>, they are only defined within the block they’re declared in; the immediately invoked function expression (IIFE) in this case. When we use the <code>typeof</code> operator, the operand <code>x</code> is not defined: we are trying to access <code>x</code> outside of the block it’s declared in. This means that <code>x</code> is not defined. Values who haven’t been assigned a value or declared are of type <code>&quot;undefined&quot;</code>. <code>console.log(typeof x)</code> returns <code>&quot;undefined&quot;</code>.</p><p>However, we created a global variable <code>y</code> when setting <code>y</code> equal to <code>10</code>. This value is accessible anywhere in our code. <code>y</code> is defined, and holds a value of type <code>&quot;number&quot;</code>. <code>console.log(typeof y)</code> returns <code>&quot;number&quot;</code>.</p></details><hr><h3 id="55-What’s-the-output"><a href="#55-What’s-the-output" class="headerlink" title="55. What’s the output?"></a>55. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Woof I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mara'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pet<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bark<span class="token punctuation">;</span>pet<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Woof I am Mara&quot;</code>, <code>TypeError</code></li><li>B: <code>&quot;Woof I am Mara&quot;</code>,<code>&quot;Woof I am Mara&quot;</code></li><li>C: <code>&quot;Woof I am Mara&quot;</code>, <code>undefined</code></li><li>D: <code>TypeError</code>, <code>TypeError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete">delete 操作符</a> 用于删除对象的某个属性放。对于所有情况返回值都是 true, 除非属性是一个自身的 不可配置的属性，在这种情况下，非严格模式返回 false.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>We can delete properties from objects using the <code>delete</code> keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the <code>bark</code> function is not available anymore on the prototype after <code>delete Dog.prototype.bark</code>, yet we still try to access it.</p><p>When we try to invoke something that is not a function, a <code>TypeError</code> is thrown. In this case <code>TypeError: pet.bark is not a function</code>, since <code>pet.bark</code> is <code>undefined</code>.</p></details><hr><h3 id="56-What’s-the-output"><a href="#56-What’s-the-output" class="headerlink" title="56. What’s the output?"></a>56. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[1, 1, 2, 3, 4]</code></li><li>B: <code>[1, 2, 3, 4]</code></li><li>C: <code>&#123;1, 1, 2, 3, 4&#125;</code></li><li>D: <code>&#123;1, 2, 3, 4&#125;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>The <code>Set</code> object is a collection of <em>unique</em> values: a value can only occur once in a set.</p><p>We passed the iterable <code>[1, 1, 2, 3, 4]</code> with a duplicate value <code>1</code>. Since we cannot have two of the same values in a set, one of them is removed. This results in <code>&#123;1, 2, 3, 4&#125;</code>.</p></details><hr><h3 id="57-What’s-the-output"><a href="#57-What’s-the-output" class="headerlink" title="57. What’s the output?"></a>57. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// counter.js</span><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">import</span> myCounter <span class="token keyword">from</span> <span class="token string">'./counter'</span><span class="token punctuation">;</span>myCounter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCounter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>Error</code></li><li>D: <code>NaN</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import</a> 引入的模块是 <em>只读</em> 的：你不能修改引入的模块。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>An imported module is <em>read-only</em>: you cannot modify the imported module. Only the module that exports them can change its value.</p><p>When we try to increment the value of <code>myCounter</code>, it throws an error: <code>myCounter</code> is read-only and cannot be modified.</p></details><hr><h3 id="58-What’s-the-output"><a href="#58-What’s-the-output" class="headerlink" title="58. What’s the output?"></a>58. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>false</code>, <code>true</code></li><li>B: <code>&quot;Lydia&quot;</code>, <code>21</code></li><li>C: <code>true</code>, <code>true</code></li><li>D: <code>undefined</code>, <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>The <code>delete</code> operator returns a boolean value: <code>true</code> on a successful deletion, else it’ll return <code>false</code>. However, variables declared with the <code>var</code>, <code>const</code> or <code>let</code> keyword cannot be deleted using the <code>delete</code> operator.</p><p>The <code>name</code> variable was declared with a <code>const</code> keyword, so its deletion is not successful: <code>false</code> is returned. When we set <code>age</code> equal to <code>21</code>, we actually added a property called <code>age</code> to the global object. You can successfully delete properties from objects this way, also the global object, so <code>delete age</code> returns <code>true</code>.</p></details><hr><h3 id="59-What’s-the-output"><a href="#59-What’s-the-output" class="headerlink" title="59. What’s the output?"></a>59. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[[1, 2, 3, 4, 5]]</code></li><li>B: <code>[1, 2, 3, 4, 5]</code></li><li>C: <code>1</code></li><li>D: <code>[1]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a> 将属性 / 值从对象 / 数组中取出，赋值给其他变量。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>We can unpack values from arrays or properties from objects through destructuring. For example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/ADFpVop.png" width="500"><!-- <img src="https://i.imgur.com/ADFpVop.png" width="500"> --><p>The value of <code>a</code> is now <code>1</code>, and the value of <code>b</code> is now <code>2</code>. What we actually did in the question, is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/NzGkMNk.png" width="500"><!-- <img src="https://i.imgur.com/NzGkMNk.png" width="500"> --><p>This means that the value of <code>y</code> is equal to the first value in the array, which is the number <code>1</code>. When we log <code>y</code>, <code>1</code> is returned.</p></details><hr><h3 id="60-What’s-the-output"><a href="#60-What’s-the-output" class="headerlink" title="60. What’s the output?"></a>60. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> admin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span>user <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;admin: true, user: &#123; name: &quot;Lydia&quot;, age: 21&#125; &#125;</code></li><li>B: <code>&#123;admin: true, name: &quot;Lydia&quot;, age: 21&#125;</code></li><li>C: <code>&#123;admin: true, user: [&quot;Lydia&quot;, 21] &#125;</code></li><li>D: <code>&#123;admin: true&#125;</code></li></ul><blockquote><p>展开语法</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>It’s possible to combine objects using the spread operator <code>...</code>. It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the <code>user</code> object, and add them to the <code>admin</code> object. The <code>admin</code> object now contains the copied key/value pairs, which results in <code>&#123;admin: true, name:&quot;Lydia&quot;, age: 21&#125;</code>.</p></details><hr><h3 id="61-What’s-the-output"><a href="#61-What’s-the-output" class="headerlink" title="61. What’s the output?"></a>61. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;name: &quot;Lydia&quot;, age: 21&#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>B: <code>&#123;name: &quot;Lydia&quot;, age: 21&#125;</code>, <code>[&quot;name&quot;]</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>D: <code>&#123;name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;age&quot;]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys()</a> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 .</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>With the <code>defineProperty</code> method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the <code>defineProperty</code> method, they are by default <em>not enumerable</em>. The <code>Object.keys</code> method returns all <em>enumerable</em> property names from an object, in this case only <code>&quot;name&quot;</code>.</p><p>Properties added using the <code>defineProperty</code> method are immutable by default. You can override this behavior using the <code>writable</code>, <code>configurable</code> and <code>enumerable</code> properties. This way, the <code>defineProperty</code> method gives you a lot more control over the properties you’re adding to an object.</p></details><hr><h3 id="62-What’s-the-output"><a href="#62-What’s-the-output" class="headerlink" title="62. What’s the output?"></a>62. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token string">'lydiahallie'</span><span class="token punctuation">,</span>  level<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>  health<span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'level'</span><span class="token punctuation">,</span> <span class="token string">'health'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;&#123;&quot;level&quot;:19,&quot;health&quot;:90&#125;&quot;</code></li><li>B: <code>&quot;&#123;&quot;username&quot;:&quot;lydiahallie&quot;&#125;&quot;</code></li><li>C: <code>&quot;[&quot;level&quot;,&quot;health&quot;]&quot;</code></li><li>D: <code>&quot;&#123;&quot;username&quot;:&quot;lydiahallie&quot;,&quot;level&quot;:19,&quot;health&quot;:90&#125;&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify()</a> 方法将一个 JavaScript 对象或值转换为 JSON 字符串。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>The second argument of <code>JSON.stringify</code> is the <em>replacer</em>. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.</p><p>If the replacer is an <em>array</em>, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names <code>&quot;level&quot;</code> and <code>&quot;health&quot;</code> are included, <code>&quot;username&quot;</code> is excluded. <code>data</code> is now equal to <code>&quot;&#123;&quot;level&quot;:19,&quot;health&quot;:90&#125;&quot;</code>.</p><p>If the replacer is a <em>function</em>, this function gets called on every property in the object you’re stringifying. The value returned from this function will be the value of the property when it’s added to the JSON string. If the value is <code>undefined</code>, this property is excluded from the JSON string.</p></details><hr><h3 id="63-What’s-the-output"><a href="#63-What’s-the-output" class="headerlink" title="63. What’s the output?"></a>63. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">increaseNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">increasePassedNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> number<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token function">increaseNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token function">increasePassedNumber</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>10</code>, <code>10</code></li><li>B: <code>10</code>, <code>11</code></li><li>C: <code>11</code>, <code>11</code></li><li>D: <code>11</code>, <code>12</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>The unary operator <code>++</code> <em>first returns</em> the value of the operand, <em>then increments</em> the value of the operand. The value of <code>num1</code> is <code>10</code>, since the <code>increaseNumber</code> function first returns the value of <code>num</code>, which is <code>10</code>, and only increments the value of <code>num</code> afterwards.</p><p><code>num2</code> is <code>10</code>, since we passed <code>num1</code> to the <code>increasePassedNumber</code>. <code>number</code> is equal to <code>10</code>(the value of <code>num1</code>. Again, the unary operator <code>++</code> <em>first returns</em> the value of the operand, <em>then increments</em> the value of the operand. The value of <code>number</code> is <code>10</code>, so <code>num2</code> is equal to <code>10</code>.</p></details><hr><h3 id="64-What’s-the-output"><a href="#64-What’s-the-output" class="headerlink" title="64. What’s the output?"></a>64. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> number<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>value <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>number <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">multiply</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li><li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li><li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li><li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is <code>&quot;undefined&quot;</code>. In this case, we spread the properties of the <code>value</code> object into a new object, so <code>x</code> has the default value of <code>&#123;number: 10&#125;</code>.</p><p>The default argument is evaluated at <em>call time</em>! Every time we call the function, a <em>new</em> object is created. We invoke the <code>multiply</code> function the first two times without passing a value: <code>x</code> has the default value of <code>&#123;number: 10&#125;</code>. We then log the multiplied value of that number, which is <code>20</code>.</p><p>The third time we invoke multiply, we do pass an argument: the object called <code>value</code>. The <code>*=</code> operator is actually shorthand for <code>x.number = x.number * 2</code>: we modify the value of <code>x.number</code>, and log the multiplied value <code>20</code>.</p><p>The fourth time, we pass the <code>value</code> object again. <code>x.number</code> was previously modified to <code>20</code>, so <code>x.number *= 2</code> logs <code>40</code>.</p></details><hr><h3 id="65-What’s-the-output"><a href="#65-What’s-the-output" class="headerlink" title="65. What’s the output?"></a>65. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li><li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li><li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li><li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">Array.prototype.reduce()</a> 方法对数组中的每个元素执行一个由您提供的 reducer 函数（升序执行）, 将其结果汇总为单个返回值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>The first argument that the <code>reduce</code> method receives is the <em>accumulator</em>, <code>x</code> in this case. The second argument is the <em>current value</em>, <code>y</code>. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.</p><p>In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.</p><p>The value of the accumulator is equal to the previously returned value of the callback function. If you don’t pass the optional <code>initialValue</code> argument to the <code>reduce</code> method, the accumulator is equal to the first element on the first call.</p><p>On the first call, the accumulator (<code>x</code>) is <code>1</code>, and the current value (<code>y</code>) is <code>2</code>. We don’t return from the callback function, we log the accumulator and current value: <code>1</code> and <code>2</code> get logged.</p><p>If you don’t return a value from a function, it returns <code>undefined</code>. On the next call, the accumulator is <code>undefined</code>, and the current value is <code>3</code>. <code>undefined</code> and <code>3</code> get logged.</p><p>On the fourth call, we again don’t return from the callback function. The accumulator is again <code>undefined</code>, and the current value is <code>4</code>. <code>undefined</code> and <code>4</code> get logged.</p></details><hr><h3 id="66-With-which-constructor-can-we-successfully-extend-the-Dog-class"><a href="#66-With-which-constructor-can-we-successfully-extend-the-Dog-class" class="headerlink" title="66. With which constructor can we successfully extend the Dog class?"></a>66. With which constructor can we successfully extend the <code>Dog</code> class?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Labrador</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 2</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 3</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 4</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super">super</a> 关键字用于访问和调用一个对象的父对象上的函数。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>在子类中，在调用 <code>super</code> 之前不能访问到 <code>this</code> 关键字。如果这样做，它将抛出一个 <code>ReferenceError</code>: 1 和 4 将引发一个引用错误。</p><p>使用 <code>super</code> 关键字，需要用给定的参数来调用父类的构造函数。父类的构造函数接收 <code>name</code> 参数，因此我们需要将 <code>name</code> 传递给 <code>super</code>.</p><p><code>Labrador</code> 类接收两个参数，<code>name</code> 参数是由于它继承了 <code>Dog</code>,<code>size</code> 作为 <code>Labrador</code> 类的额外属性，它们都需要传递给 <code>Labrador</code> 的构造函数，因此使用构造函数 2 正确完成。</p></details><hr><h3 id="67-What’s-the-output"><a href="#67-What’s-the-output" class="headerlink" title="67. What’s the output?"></a>67. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running index.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./sum.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sum.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running sum.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li><li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li><li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li><li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import</a> 是编译阶段执行的，在代码运行之前。因此这意味着 ** 被导入的模块会先运行 **, 而 ** 导入模块的文件会后执行 **.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>import</code> 命令是编译阶段执行的，在代码运行之前。因此这意味着被导入的模块会先运行，而导入模块的文件会后执行。</p><p>这是 CommonJavaScript 中 <code>require()</code> 和 <code>import</code> 之间的区别。使用 <code>require()</code> , 您可以在运行代码时根据需要加载依赖项。如果我们使用 <code>require</code> 而不是 <code>import</code> , <code>running index.js</code> , <code>running sum.js</code> , <code>3</code> 会被依次打印。</p></details><hr><h3 id="68-What’s-the-output"><a href="#68-What’s-the-output" class="headerlink" title="68. What’s the output?"></a>68. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>true</code>, <code>true</code>, <code>false</code></li><li>B: <code>false</code>, <code>true</code>, <code>false</code></li><li>C: <code>true</code>, <code>false</code>, <code>true</code></li><li>D: <code>true</code>, <code>true</code>, <code>true</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a> 每个从 Symbol() 返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/%E7%9B%B8%E7%AD%89">【宽松】相等 (==)</a> 检查其两个操作数是否相等，并返回 Boolean 结果。它会尝试强制类型转换并且比较不同类型的操作数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality">严格相等 (===)</a> 严格等于运算符不尝试类型转换。相反，严格相等运算符始终将不同类型的操作数视为不同。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>每个 <code>Symbol</code> 都是完全唯一的。传递给 <code>Symbol</code> 的参数只是给 <code>Symbol</code> 的一个描述。<code>Symbol</code> 的值不依赖于传递的参数。当我们测试相等时，我们创建了两个全新的符号：第一个 <code>Symbol(&#39;foo&#39;)</code> , 第二个 <code>Symbol(&#39;foo&#39;)</code> , 这两个值是唯一的，彼此不相等，因此返回 <code>false</code> .</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="69-What’s-the-output"><a href="#69-What’s-the-output" class="headerlink" title="69. What’s the output?"></a>69. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code></li><li>B: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code> (<code>&quot;[13x whitespace]Lydia Hallie&quot;</code>, <code>&quot;[2x whitespace]Lydia Hallie&quot;</code>)</li><li>C: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code> (<code>&quot;[1x whitespace]Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code>)</li><li>D: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lyd&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart">String.prototype.padStart()</a> 方法用另一个字符串填充当前字符串（如果需要的话，会重复多次）, 以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>使用 <code>padStart</code> 方法，我们可以在字符串的开头添加填充。传递给此方法的参数是字符串的总长度（包含填充）. 字符串 <code>Lydia Hallie</code> 的长度为 <code>12</code> , 因此 <code>name.padStart(13)</code> 在字符串的开头只会插入 1 ( <code>13 - 12 = 1</code> ) 个空格。</p><p>如果传递给 <code>padStart</code> 方法的参数小于字符串的长度，则不会添加填充。</p></details><hr><h3 id="70-What’s-the-output"><a href="#70-What’s-the-output" class="headerlink" title="70. What’s the output?"></a>70. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'🥑'</span> <span class="token operator">+</span> <span class="token string">'💻'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>&quot;🥑💻&quot;</code></li><li>B: <code>257548</code></li><li>C: A string containing their code points</li><li>D: Error</li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>使用 <code>+</code> 运算符，您可以连接字符串。上述情况，我们将字符串 <code>&quot;🥑&quot;</code> 与字符串 <code>&quot;💻&quot;</code> 连接起来，产生 <code>&quot;🥑💻&quot;</code> .</p></details><hr><h3 id="71-How-can-we-log-the-values-that-are-commented-out-after-the-console-logstatement"><a href="#71-How-can-we-log-the-values-that-are-commented-out-after-the-console-logstatement" class="headerlink" title="71. How can we log the values that are commented out after the console.logstatement?"></a>71. How can we log the values that are commented out after the <code>console.log</code>statement?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">'Do you love JavaScript?'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">!==</span> <span class="token string">'Yes'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Oh wow... Guess we're gone here"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token string">'JavaScript loves you back ❤️'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token comment">/* 1 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do you love JavaScript?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token comment">/* 2 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JavaScript loves you back ❤️</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>game.next(&quot;Yes&quot;).value</code> and <code>game.next().value</code></li><li>B: <code>game.next.value(&quot;Yes&quot;)</code> and <code>game.next.value()</code></li><li>C: <code>game.next().value</code> and <code>game.next(&quot;Yes&quot;).value</code></li><li>D: <code>game.next.value()</code> and <code>game.next.value(&quot;Yes&quot;)</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next">Generator.prototype.next()</a> 方法返回一个包含属性 done 和 value 的对象。该方法也可以通过接受一个参数用以向生成器传值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>generator</code> 函数在遇到 <code>yield</code> 关键字时会 ** 暂停 ** 其执行。首先，我们需要让函数产生字符串 <code>Do you love JavaScript?</code>, 这可以通过调用 <code>game.next().value</code> 来完成。上述函数的第一行就有一个 <code>yield</code> 关键字，那么运行立即停止了，<code>yield</code> 表达式本身没有返回值，或者说总是返回 <code>undefined</code>, 这意味着此时变量 <code>answer</code> 为 <code>undefined</code> .</p><p><code>next</code> 方法可以带一个参数，该参数会被当作上一个 <code>yield</code> 表达式的返回值。当我们调用 <code>game.next(&quot;Yes&quot;).value</code> 时，先前的 <code>yield</code> 的返回值将被替换为传递给 <code>next()</code> 函数的参数 <code>&quot;Yes&quot;</code>. 此时变量 <code>answer</code> 被赋值为 <code>&quot;Yes&quot;</code> , <code>if</code> 语句返回 <code>false</code> , 所以 <code>JavaScript loves you back ❤️</code> 被打印。</p></details><hr><h3 id="72-What’s-the-output"><a href="#72-What’s-the-output" class="headerlink" title="72. What’s the output?"></a>72. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello\nworld</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>Hello world!</code></li><li>B: <code>Hello</code> <br />&nbsp; &nbsp; &nbsp;<code>world</code></li><li>C: <code>Hello\nworld</code></li><li>D: <code>Hello\n</code> <br /> &nbsp; &nbsp; &nbsp;<code>world</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw">String.raw</a> 返回给定模板字符串的原始字符串。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>String.raw</code> 函数是用来获取一个模板字符串的原始字符串的，它返回一个字符串，其中忽略了转义符 ( <code>\n</code> , <code>\v</code> , <code>\t</code> 等）. 但反斜杠可能造成问题，因为你可能会遇到下面这种类似情况：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">C:\Documents\Projects\table.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这将导致：</p><p><code>&quot;C:DocumentsProjects able.html&quot;</code></p><p>直接使用 <code>String.raw</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">C:\Documents\Projects\table.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会忽略转义字符并打印：<code>C:\Documents\Projects\table.html</code></p><p>上述情况，字符串是 <code>Hello\nworld</code> 被打印出。</p></details><hr><h3 id="73-What’s-the-output"><a href="#73-What’s-the-output" class="headerlink" title="73. What’s the output?"></a>73. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'I made it!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;I made it!&quot;</code></li><li>B: <code>Promise &#123;&lt;resolved&gt;: &quot;I made it!&quot;&#125;</code></li><li>C: <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>D: <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">Promise.resolve</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>异步函数始终返回一个 promise.<code>await</code> 仍然需要等待 promise 的解决：当我们调用 <code>getData()</code> 并将其赋值给 <code>data</code> , 此时 <code>data</code> 为 <code>getData</code> 方法返回的一个挂起的 promise, 该 promise 并没有解决。</p><p>如果我们想要访问已解决的值 <code>&quot;I made it!&quot;</code> , 可以在 <code>data</code> 上使用 <code>.then()</code> 方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">data<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=>"I made it!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样将打印 <code>&quot;I made it!&quot;</code></p></details><hr><h3 id="74-What’s-the-output"><a href="#74-What’s-the-output" class="headerlink" title="74. What’s the output?"></a>74. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addToList</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> list</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">addToList</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&#39;apple&#39;, &#39;banana&#39;]</code></li><li>B: <code>2</code></li><li>C: <code>true</code></li><li>D: <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a> 方法将一个或多个元素添加到数组的末尾，并 ** 返回该数组的新长度 **.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>push()</code> 方法返回新数组的长度。一开始，数组包含一个元素（字符串 <code>&quot;banana&quot;</code>), 长度为 1. 在数组中添加字符串 <code>&quot;apple&quot;</code> 后，长度变为 2, 并将从 <code>addToList</code> 函数返回。</p><p><code>push</code> 方法修改原始数组，如果你想从函数返回数组而不是数组长度，那么应该在 push <code>item</code> 之后返回 <code>list</code> .</p></details><hr><h3 id="75-What’s-the-output"><a href="#75-What’s-the-output" class="headerlink" title="75. What’s the output?"></a>75. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> shape <span class="token operator">=</span> box<span class="token punctuation">;</span>shape<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;x: 100, y: 20&#125;</code></li><li>B: <code>&#123;x: 10, y: 20&#125;</code></li><li>C: <code>&#123;x: 100&#125;</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze()</a> 方法可以冻结一个对象。一个被冻结的对象不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。<code>freeze()</code> 返回和传入的参数相同的对象。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>Object.freeze</code> 使得 ** 无法 ** ** 添加 <strong>、</strong> 删除 ** 或 ** 修改 ** 对象的属性（除非属性的值是另一个对象）.</p><p>当我们创建变量 <code>shape</code> 并将其设置为等于冻结对象 <code>box</code> 时，<code>shape</code> 指向的也是冻结对象。你可以使用 <code>Object.isFrozen</code> 检查一个对象是否被冻结，上述情况，<code>Object.isFrozen(shape)</code> 将返回 <code>true</code> .</p><p>由于 <code>shape</code> 被冻结，并且 <code>x</code> 的值不是对象，所以我们不能修改属性 <code>x</code> . <code>x</code> 仍然等于 <code>10</code> ,<code>&#123;x: 10,y: 20&#125;</code> 被打印。</p><p>注意，上述例子我们对属性 <code>x</code> 进行修改，可能会导致抛出 <code>TypeError: Cannot assign to read only property &#39;x&#39; of object</code> 异常（最常见但不仅限于严格模式下时）.</p></details><hr><h3 id="76-What’s-the-output"><a href="#76-What’s-the-output" class="headerlink" title="76. What’s the output?"></a>76. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> myName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;myName&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a> 将属性 / 值从对象 / 数组中取出，赋值给其他变量。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>当我们从右侧的对象解构属性 <code>name</code> 时，我们将其值 <code>Lydia</code> 分配给名为 <code>myName</code> 的变量。</p><p>使用 <code>&#123;name: myName&#125;</code> , 我们是在告诉 JavaScript 我们要创建一个名为 <code>myName</code> 的新变量，并且其值是右侧对象的 <code>name</code> 属性的值。</p><p>当我们尝试打印 <code>name</code> , 一个未定义的变量时，就会引发 <code>ReferenceError: name is not defined</code> .</p></details><hr><h3 id="77-Is-this-a-pure-function"><a href="#77-Is-this-a-pure-function" class="headerlink" title="77. Is this a pure function?"></a>77. Is this a pure function?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: Yes</li><li>B: No</li></ul><blockquote><p>纯函数</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>纯函数一种若输入参数相同，则永远会得到相同输出的函数。</p><p><code>sum</code> 函数总是返回相同的结果。如果我们传递 <code>1</code> 和 <code>2</code> , 它将总是返回 <code>3</code> 而没有副作用。如果我们传递 <code>5</code> 和 <code>10</code> , 它将总是返回 <code>15</code> , 依此类推，这是纯函数的定义。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncertain</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的这种特定情况 <code>a</code> 和 <code>b</code> 都是对象，输入参数不是相同的，所以输出当然会不同。所以 <code>sum</code> 仍然是一个纯函数。</p></details><hr><h3 id="78-What’s-the-output"><a href="#78-What’s-the-output" class="headerlink" title="78. What’s the output?"></a>78. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">From cache! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cache<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>      cache<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Calculated! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> addFunction <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li><li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li><li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li><li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>add</code> 函数是一个记忆函数。通过记忆化，我们可以缓存函数的结果，以加快其执行速度。上述情况，我们创建一个 <code>cache</code> 对象，用于存储先前返回过的值。</p><p>如果我们使用相同的参数多次调用 <code>addFunction</code> 函数，它首先检查缓存中是否已有该值，如果有，则返回缓存值，这将节省执行时间。如果没有，那么它将计算该值，并存储在缓存中。</p><p>我们用相同的值三次调用了 <code>addFunction</code> 函数：</p><p>在第一次调用，<code>num</code> 等于 <code>10</code> 时函数的值尚未缓存，if 语句 <code>num in cache</code> 返回 <code>false</code> ,else 块的代码被执行：<code>Calculated! 20</code> , 并且其结果被添加到缓存对象，<code>cache</code> 现在看起来像 <code>&#123;10: 20&#125;</code> .</p><p>第二次，<code>cache</code> 对象包含 <code>10</code> 的返回值。if 语句 <code>num in cache</code> 返回 <code>true</code> , <code>From cache! 20</code> 被打印。</p><p>第三次，我们将 <code>5 * 2</code> （值为 10) 传递给函数。<code>cache</code> 对象包含 <code>10</code> 的返回值。if 语句 <code>num in cache</code> 返回 <code>true</code> , <code>From cache! 20</code> 被打印。</p></details><hr><h3 id="79-What’s-the-output"><a href="#79-What’s-the-output" class="headerlink" title="79. What’s the output?"></a>79. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myLifeSummedUp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🔓'</span><span class="token punctuation">,</span> <span class="token string">'💻'</span><span class="token punctuation">,</span> <span class="token string">'🍷'</span><span class="token punctuation">,</span> <span class="token string">'🍫'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> myLifeSummedUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> myLifeSummedUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&quot;🔓&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>B: <code>&quot;🔓&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>&quot;🔓&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>C: <code>&quot;🔓&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li><li>D: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&#123;0: &quot;🔓&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;&#125;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of">for…of</a> 在可迭代对象（包括 <code>Array</code>,<code>Map</code>,<code>Set</code>,<code>String</code>,<code>TypedArray</code>,<code>arguments</code> 对象等等） 上创建一个迭代循环，调用自定义迭代钩子，并为每个不同 ** 属性的值 ** 执行语句</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in">for…in</a> 以任意顺序遍历一个对象的除 <code>Symbol</code> 以外的可枚举属性。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>通过 <code>for...in</code> 循环，我们可以遍历一个对象 ** 自有的 <strong>、</strong> 继承的 <strong>、</strong> 可枚举的 <strong>、</strong> 非 Symbol 的 ** 属性。在数组中，可枚举属性是数组元素的 “键”, 即它们的索引。类似于下面这个对象：</p><p><code>&#123;0: &quot;🔓&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;&#125;</code></p><p>其中键则是可枚举属性，因此 <code>0</code>,<code>1</code>,<code>2</code>,<code>3</code> 被输出。</p><p>通过 <code>for-of</code> 循环，我们可以迭代 ** 可迭代对象 **（包括 <code>Array</code>,<code>Map</code>,<code>Set</code>,<code>String</code>,<code>arguments</code> 等）. 当我们迭代数组时，在每次迭代中，不同属性的值将被分配给变量 <code>item</code> , 因此 <code>&quot;🔓&quot;</code> , <code>&quot;💻&quot;</code> , <code>&quot;🍷&quot;</code> , <code>&quot;🍫&quot;</code> 被输出。</p></details><hr><h3 id="80-What’s-the-output"><a href="#80-What’s-the-output" class="headerlink" title="80. What’s the output?"></a>80. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>A: <code>[&quot;1 + 2&quot;, &quot;1 * 2&quot;, &quot;1 / 2&quot;]</code></li><li>B: <code>[&quot;12&quot;, 2, 0.5]</code></li><li>C: <code>[3, 2, 0.5]</code></li><li>D: <code>[1, 1, 1]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition">加法 (+)</a> 加法运算符的作用是数值求和，或者字符串拼接。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division">除法 (/)</a> 除法运算符的结果是操作数的商 , 左操作数是被除数，右操作数是除数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication">乘法 (*)</a> 乘法运算符的结果是操作数的乘积。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>数组元素可以包含任何值。数字，字符串，布尔值，对象，数组，<code>null</code>,<code>undeifned</code>, 以及其他表达式，如日期，函数和计算。</p><p>元素将等于返回的值。<code>1 + 2</code> 返回 <code>3</code> ,<code>1 * 2</code> 返回 <code>2</code> , <code>1 / 2</code> 返回 <code>0.5</code> .</p></details><hr><h3 id="81-What’s-the-output"><a href="#81-What’s-the-output" class="headerlink" title="81. What’s the output?"></a>81. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi there, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Hi there,</code></li><li>B: <code>Hi there, undefined</code></li><li>C: <code>Hi there, null</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>默认情况下，如果不给函数传参，参数的值将为 <code>undefined</code> . 上述情况，我们没有给参数 <code>name</code> 传值。<code>name</code> 等于 <code>undefined</code> , 并被打印。</p><p>在 ES6 中，我们可以使用默认参数覆盖此默认的 <code>undefined</code> 值。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi there, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这种情况下，如果我们没有传递值或者如果我们传递 <code>undefined</code> ,<code>name</code> 总是等于字符串 <code>Lydia</code> .</p></details><hr><h3 id="82-What’s-the-output"><a href="#82-What’s-the-output" class="headerlink" title="82. What’s the output?"></a>82. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    status<span class="token operator">:</span> <span class="token string">'ccc'</span><span class="token punctuation">,</span>    <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 要在浏览器环境运行</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;ccc&quot;</code> and <code>&quot;bbb&quot;</code></li><li>B: <code>&quot;ccc&quot;</code> and <code>&quot;aaa&quot;</code></li><li>C: <code>&quot;bbb&quot;</code> and <code>&quot;aaa&quot;</code></li><li>D: <code>&quot;aaa&quot;</code> and <code>&quot;aaa&quot;</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>this</code> 关键字的指向取决于使用它的位置。在 ** 函数 ** 中，比如 <code>getStatus</code> ,<code>this</code> 指向的是调用它的对象，上述例子中 <code>data</code> 对象调用了 <code>getStatus</code> , 因此 <code>this</code> 指向的就是 <code>data</code> 对象。当我们打印 <code>this.status</code> 时，<code>data</code> 对象的 <code>status</code> 属性被打印，即 <code>&quot;ccc&quot;</code> .</p><p>使用 <code>call</code> 方法，可以更改 <code>this</code> 指向的对象。<code>data.getStatus.call(this)</code> 是将 <code>this</code> 的指向由 <code>data</code> 对象更改为全局对象。在全局对象上，有一个名为 <code>status</code> 的变量，其值为 <code>&quot;aaa&quot;</code> . 因此打印 <code>this.status</code> 时，会打印 <code>&quot;aaa&quot;</code>.</p></details><hr><h3 id="83-What’s-the-output"><a href="#83-What’s-the-output" class="headerlink" title="83. What’s the output?"></a>83. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> city <span class="token operator">=</span> person<span class="token punctuation">.</span>city<span class="token punctuation">;</span>city <span class="token operator">=</span> <span class="token string">'Amsterdam'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;name: &quot;Lydia&quot;, age: 21&#125;</code></li><li>B: <code>&#123;name: &quot;Lydia&quot;, age: 21, city: &quot;Amsterdam&quot;&#125;</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;, age: 21, city: undefined&#125;</code></li><li>D: <code>&quot;Amsterdam&quot;</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>我们将变量 <code>city</code> 设置为等于 <code>person</code> 对象上名为 <code>city</code> 的属性的值。这个对象上没有名为 <code>city</code> 的属性，因此变量 <code>city</code> 的值为 <code>undefined</code> .</p><p>请注意，我们没有引用 <code>person</code> 对象本身，只是将变量 <code>city</code> 设置为等于 <code>person</code> 对象 <code>city</code> 属性的当前值。</p><p>然后，我们将 <code>city</code> 设置为等于字符串 <code>&quot;Amsterdam&quot;</code> . 这不会更改 person 对象：没有对该对象的引用。</p><p>因此打印 <code>person</code> 对象时，会返回未修改的对象。</p></details><hr><h3 id="84-What’s-the-output"><a href="#84-What’s-the-output" class="headerlink" title="84. What’s the output?"></a>84. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">"Sorry, you're too young."</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">"Yay! You're old enough!"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> message<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Sorry, you&#39;re too young.&quot;</code></li><li>B: <code>&quot;Yay! You&#39;re old enough!&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const">const</a> 是块级作用域。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>const</code> 和 <code>let</code> 声明的变量是具有 ** 块级作用域 ** 的，块是大括号 (<code>&#123;&#125;</code>) 之间的任何东西，即上述情况 <code>if / else</code> 语句的花括号。由于块级作用域，我们无法在声明的块之外引用变量，因此抛出 <code>ReferenceError: message is not defined</code> .</p></details><hr><h3 id="85-What-kind-of-information-would-get-logged"><a href="#85-What-kind-of-information-would-get-logged" class="headerlink" title="85. What kind of information would get logged?"></a>85. What kind of information would get logged?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://www.website.com/api/user/1'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>fetch</code> 方法的结果</li><li>B: 第二次调用 <code>fetch</code> 方法的结果</li><li>C: 前一个 <code>.then()</code> 中回调方法返回的结果</li><li>D: 总是 <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">使用 Fetch</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Basic_concepts">Fetch 基本概念</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/json">Body.json()</a> 返回一个被解析为 JSON 格式的 promise 对象</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>第二个 <code>.then </code> 中 <code>res</code> 的值等于前一个 <code>.then</code> 中的回调函数返回的值。你可以像这样继续链接 <code>.then</code> , 将值传递给下一个处理程序。</p></details><hr><h3 id="86-Which-option-is-a-way-to-set-hasName-equal-to-true-provided-you-cannot-pass-true-as-an-argument"><a href="#86-Which-option-is-a-way-to-set-hasName-equal-to-true-provided-you-cannot-pass-true-as-an-argument" class="headerlink" title="86. Which option is a way to set hasName equal to true, provided you cannot pass true as an argument?"></a>86. Which option is a way to set <code>hasName</code> equal to true, provided you cannot pass <code>true</code> as an argument?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> hasName <span class="token operator">=</span> <span class="token comment">//</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>!!name</code></li><li>B: <code>name</code></li><li>C: <code>new Boolean(name)</code></li><li>D: <code>name.length</code></li></ul><blockquote><p>两个非运算 !! 有时候用来将某个值转化为布尔类型：也就是，第一个非运算将该值转化为布尔类型并取反，第二个非运算再次取反。最后我们就得到了一个任意值到布尔值的转化。内置的 Boolean 函数方法可以完成同样的事</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>使用逻辑非运算符 <code>!</code> , 将返回一个布尔值，使用 <code>!! name</code> , 我们可以确定 <code>name</code> 的值是真的还是假的。如果 <code>name</code> 是真值的，那么 <code>!name</code> 返回 <code>false</code> . <code>!false</code> 返回 <code>true</code> .</p><p>通过将 <code>hasName</code> 设置为 <code>name</code> , 可以将 <code>hasName</code> 设置为等于传递给 <code>getName</code> 函数的值，而不是布尔值 <code>true</code> .</p><p><code>new Boolean(true)</code> 返回一个对象包装器，而不是布尔值本身。</p><p><code>name.length</code> 返回传递的参数的长度，而不是布尔值 <code>true</code> .</p><p>还有另一种方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> hasName <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =>true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="87-What’s-the-output"><a href="#87-What’s-the-output" class="headerlink" title="87. What’s the output?"></a>87. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I want pizza'</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>&quot;&quot;&quot;</code></li><li>B: <code>&quot;I&quot;</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>可以使用方括号表示法获取字符串中特定索引的字符，字符串中的第一个字符具有索引 0, 依此类推。在这种情况下，我们想要得到索引为 0 的元素，字符 <code>&#39;I&#39;</code> 被记录。</p><p>请注意，IE7 及更低版本不支持此方法。在这种情况下，应该使用 <code>.charAt()</code> .</p></details><hr><h3 id="88-What’s-the-output"><a href="#88-What’s-the-output" class="headerlink" title="88. What’s the output?"></a>88. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> num1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>NaN</code></li><li>B: <code>20</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>您可以将默认参数的值设置为函数的另一个参数，只要另一个参数定义在其之前即可。我们将值 <code>10</code> 传递给 <code>sum</code> 函数。如果 <code>sum</code> 函数只接收 1 个参数，则意味着没有传递 <code>num2</code> 的值，这种情况下，<code>num1</code> 的值等于传递的值 <code>10</code> . <code>num2</code> 的默认值是 <code>num1</code> 的值，即 <code>10</code> . <code>num1 + num2</code> 返回 <code>20</code> .</p><p>如果您尝试将默认参数的值设置为后面定义的参数，则可能导致参数的值尚未初始化，从而引发错误。比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">m <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: Cannot access 'n' before initialization</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 2</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="89-What’s-the-output"><a href="#89-What’s-the-output" class="headerlink" title="89. What’s the output?"></a>89. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'Hello world'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span><span class="token comment">// index.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> data <span class="token keyword">from</span> <span class="token string">'./module'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;default: function default(), name: &quot;Lydia&quot; &#125;</code></li><li>B: <code>&#123;default: function default() &#125;</code></li><li>C: <code>&#123;default: &quot;Hello world&quot;, name: &quot;Lydia&quot;&#125;</code></li><li>D: Global object of <code>module.js</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">export</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>使用 <code>import * as name</code> 语法，我们将 <code>module.js</code> 文件中所有 <code>export</code> 导入到 <code>index.js</code> 文件中，并且创建了一个名为 <code>data</code> 的新对象。在 <code>module.js</code> 文件中，有两个导出：默认导出和命名导出。默认导出是一个返回字符串 <code>&quot;Hello World&quot;</code> 的函数，命名导出是一个名为 <code>name</code> 的变量，其值为字符串 <code>&quot;Lydia&quot;</code> .</p><p><code>data</code> 对象具有默认导出的 <code>default</code> 属性，其他属性具有指定 exports 的名称及其对应的值。</p></details><hr><h3 id="90-What’s-the-output"><a href="#90-What’s-the-output" class="headerlink" title="90. What’s the output?"></a>90. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'John'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;class&quot;</code></li><li>B: <code>&quot;function&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;string&quot;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new">new 运算符</a> 创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>类是构造函数的语法糖，如果用构造函数的方式来重写 <code>Person</code> 类则将是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 <code>new</code> 来调用构造函数，将会生成构造函数 <code>Person</code> 的实例，对实例执行 <code>typeof</code> 关键字将返回 <code>&quot;object&quot;</code> , 上述情况打印出 <code>&quot;object&quot;</code> .</p></details><hr><h3 id="91-What’s-the-output"><a href="#91-What’s-the-output" class="headerlink" title="91. What’s the output?"></a>91. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> newList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[1, 2, 3, 4, 5]</code></li><li>B: <code>[1, 2, 3, 5]</code></li><li>C: <code>[1, 2, 3, 4]</code></li><li>D: <code>TypeError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p><code>.push</code> 方法返回数组的长度，而不是数组本身！ 通过将 <code>newList</code> 设置为 <code>[1,2,3].push(4)</code> , 实际上 <code>newList</code> 等于数组的新长度：<code>4</code> .</p><p>然后，尝试在 <code>newList</code> 上使用 <code>.push</code> 方法。由于 <code>newList</code> 是数值 <code>4</code> , 抛出 <code>TypeError: newList.push is not a function</code>.</p></details><hr><h3 id="92-What’s-the-output"><a href="#92-What’s-the-output" class="headerlink" title="92. What’s the output?"></a>92. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">giveLydiaPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'Here is pizza!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">giveLydiaChocolate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"Here's chocolate... now go hit the gym already."</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>giveLydiaPizza<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>giveLydiaChocolate<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;constructor: ...&#125;</code> <code>&#123; constructor: ...&#125;</code></li><li>B: <code>&#123;&#125;</code> <code>&#123; constructor: ...&#125;</code></li><li>C: <code>&#123;constructor: ...&#125;</code> <code>&#123;&#125;</code></li><li>D: <code>&#123;constructor: ...&#125;</code> <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: D</p><p>Regular functions, such as the <code>giveLydiaPizza</code> function, have a <code>prototype</code> property, which is an object (prototype object) with a <code>constructor</code> property. Arrow functions however, such as the <code>giveLydiaChocolate</code> function, do not have this <code>prototype</code> property. <code>undefined</code> gets returned when trying to access the <code>prototype</code> property using <code>giveLydiaChocolate.prototype</code>.</p><blockquote><p>常规函数，例如 <code>giveLydiaPizza</code> 函数，有一个 <code>prototype</code> 属性，它是一个带有 <code>constructor</code> 属性的对象（原型对象）. 然而，箭头函数，例如 <code>giveLydiaChocolate</code> 函数，没有这个 <code>prototype</code> 属性。尝试使用 <code>giveLydiaChocolate.prototype</code> 访问 <code>prototype</code> 属性时会返回 <code>undefined</code> .</p></blockquote></details><hr><h3 id="93-What’s-the-output"><a href="#93-What’s-the-output" class="headerlink" title="93. What’s the output?"></a>93. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li><li>B: <code>[&quot;name&quot;, &quot;Lydia&quot;]</code> and <code>[&quot;age&quot;, 21]</code></li><li>C: <code>[&quot;name&quot;, &quot;age&quot;]</code> and <code>undefined</code></li><li>D: <code>Error</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries()</a> 方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>for...in</code> 循环遍历该对象时返回的顺序一致（区别在于 <code>for-in</code> 循环还会枚举原型链中的属性）.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of">for…of</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p><code>Object.entries()</code> 方法返回一个给定对象自身可枚举属性的键值对数组，上述情况返回一个二维数组，数组每个元素是一个包含键和值的数组：</p><p><code>[[&#39;name&#39;,&#39;Lydia&#39;],[&#39;age&#39;,21]]</code></p><p>使用 <code>for-of</code> 循环，我们可以迭代数组中的每个元素，上述情况是子数组。我们可以使用 <code>const [x,y]</code> 在 <code>for-of</code> 循环中解构子数组。<code>x</code> 等于子数组中的第一个元素，<code>y</code> 等于子数组中的第二个元素。</p><p>第一个子数组是 <code>[&quot;name&quot;,&quot;Lydia&quot;]</code> , 其中 <code>x</code> 等于 <code>name</code> , 而 <code>y</code> 等于 <code>Lydia</code> .<br>第二个子数组是 <code>[&quot;age&quot;,21]</code> , 其中 <code>x</code> 等于 <code>age</code> , 而 <code>y</code> 等于 <code>21</code> .</p></details><hr><h3 id="94-What’s-the-output"><a href="#94-What’s-the-output" class="headerlink" title="94. What’s the output?"></a>94. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token parameter">fruitList<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> favoriteFruit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>fruitList<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> favoriteFruit<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&quot;banana&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;]</code></li><li>B: <code>[[&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;]</code></li><li>C: <code>[&quot;banana&quot;, &quot;apple&quot;, [&quot;pear&quot;], &quot;orange&quot;]</code></li><li>D: <code>SyntaxError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Rest_parameters">剩余参数</a> 语法允许我们将一个不定数量的参数表示为一个数组。<strong>只有最后一个参数可以是 “剩余参数”</strong>.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p><code>...args</code> 是剩余参数，剩余参数的值是一个包含所有剩余参数的数组，** 并且只能作为最后一个参数 **. 上述示例中，剩余参数是第二个参数，这是不可能的，并会抛出语法错误 <code>SyntaxError: Rest parameter must be last formal parameter</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token parameter">fruitList<span class="token punctuation">,</span> favoriteFruit<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>fruitList<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> favoriteFruit<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子是有效的，将会返回数组：<code>[&#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;pear&#39;]</code></p></details><hr><h3 id="95-What’s-the-output"><a href="#95-What’s-the-output" class="headerlink" title="95. What’s the output?"></a>95. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is bigger'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b is bigger'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>  a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">nums</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">nums</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li><li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li><li>C: <code>undefined</code> and <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return">return</a> 函数将会在 return 语句执行后立即中止。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>在 JavaScript 中，我们不必显式地编写分号 (<code>;</code>), 但是 JavaScript 引擎仍然在语句之后自动添加分号。这称为 <strong>自动分号插入</strong>. 例如，一个语句可以是变量，或者像 <code>throw</code> 、 <code>return</code> 、 <code>break</code> 这样的关键字。</p><p>在这里，我们在新的一行上写了一个 <code>return</code> 语句和另一个值 <code>a + b</code> . 然而，由于它是一个新行，引擎并不知道它实际上是我们想要返回的值。相反，它会在 <code>return</code> 后面自动添加分号。你可以这样看：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span><span class="token punctuation">;</span>a <span class="token operator">+</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这意味着永远不会到达 <code>a + b</code> , 因为函数在 <code>return</code> 关键字之后停止运行。如果没有返回值，就像这里，函数返回 <code>undefined</code> . 注意，在 <code>if/else</code> 语句之后没有自动插入！</p></details><hr><h3 id="96-What’s-the-output"><a href="#96-What’s-the-output" class="headerlink" title="96. What’s the output?"></a>96. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AnotherPerson</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Sarah'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;Sarah&quot;</code></li><li>C: <code>Error: cannot redeclare Person</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>我们可以将类设置为等于其他类 / 函数构造函数。在这种情况下，我们将 <code>Person</code> 设置为 <code>AnotherPerson</code> . 这个构造函数的名字是 <code>Sarah</code> , 所以新的 <code>Person</code> 实例 <code>member</code> 上的 name 属性是 <code>Sarah</code> .</p></details><hr><h3 id="97-What’s-the-output"><a href="#97-What’s-the-output" class="headerlink" title="97. What’s the output?"></a>97. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[&quot;&#123;Symbol(&#39;a&#39;)&quot;]</code></li><li>B: <code>&#123;&#125;</code> and <code>[]</code></li><li>C: <code>&#123;a: &quot;b&quot;&#125;</code> and <code>[&quot;a&quot;]</code></li><li>D: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys()</a> 方法会返回一个由一个给定对象的自身 ** 可枚举 ** 属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 .</p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol</a> 属性是匿名的；并且是不可枚举的。因为这个属性是不可枚举的，它不会在循环结构 “for( … in …)” 中作为成员出现，也因为这个属性是匿名的，它同样不会出现在 “Object.getOwnPropertyNames()” 的返回数组里。这个属性可以通过创建时的原始 symbol 值访问到，或者通过遍历 “Object.getOwnPropertySymbols()” 返回的数组</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p><code>Symbol</code> 类型是不可枚举的。<code>Object.keys</code> 方法返回对象上的所有可枚举的键属性。<code>Symbol</code> 类型是不可见的，并返回一个空数组。记录整个对象时，所有属性都是可见的，甚至是不可枚举的属性。</p><p>这是 <code>Symbol</code> 的众多特性之一：除了表示完全唯一的值（防止对象意外名称冲突，例如当使用 2 个想要向同一对象添加属性的库时）, 您还可以 <code>隐藏</code> 这种方式对象的属性（尽管不完全。你仍然可以使用 <code>Object.getOwnPropertySymbols()</code> 方法访问 <code>Symbol</code> .</p></details><hr><h3 id="98-What’s-the-output"><a href="#98-What’s-the-output" class="headerlink" title="98. What’s the output?"></a>98. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token operator">...</span>y<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> age<span class="token operator">:</span> user<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[1, [2, 3, 4]]</code> and <code>SyntaxError</code></li><li>B: <code>[1, [2, 3, 4]]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>[1, 2, 3, 4]</code> and <code>SyntaxError</code></li><li>D: <code>[1, 2, 3, 4]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li></ul><blockquote><p>箭头函数 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">返回对象字面量</a> 用圆括号把对象字面量包起来</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>The <code>getList</code> function receives an array as its argument. Between the parentheses of the <code>getList</code> function, we destructure this array right away. You could see this as:</p><p><code>[x, ...y] = [1, 2, 3, 4]</code></p><p>With the rest parameter <code>...y</code>, we put all “remaining” arguments in an array. The remaining arguments are <code>2</code>, <code>3</code> and <code>4</code> in this case. The value of <code>y</code> is an array, containing all the rest parameters. The value of <code>x</code> is equal to <code>1</code> in this case, so when we log <code>[x, y]</code>, <code>[1, [2, 3, 4]]</code> gets logged.</p><p>The <code>getUser</code> function receives an object. With arrow functions, we don’t <em>have</em> to write curly brackets if we just return one value. However, if you want to return an <em>object</em> from an arrow function, you have to write it between parentheses, otherwise no value gets returned! The following function would have returned an object:</p><p><code>const getUser = user =&gt; (&#123;name: user.name, age: user.age&#125;)</code></p><p>Since no value gets returned in this case, the function returns <code>undefined</code>.</p><blockquote><p><strong>返回一个对象，您必须在圆括号之间编写它</strong>, 否则报错如下：<code>Uncaught SyntaxError: Unexpected token &#39;:&#39;</code>.</p></blockquote><p>正确的写法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> age<span class="token operator">:</span> user<span class="token punctuation">.</span>age <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数将返回一个对象 <code>&#123;name: &#39;Lydia&#39;, age: 21&#125;</code>.</p></details><hr><h3 id="99-What’s-the-output"><a href="#99-What’s-the-output" class="headerlink" title="99. What’s the output?"></a>99. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>SyntaxError</code></li><li>B: <code>ReferenceError</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>The variable <code>name</code> holds the value of a string, which is not a function, thus cannot invoke.</p><p>变量 <code>name</code> 保存字符串的值，该字符串不是函数，因此无法调用。</p><p>TypeErrors get thrown when a value is not of the expected type. JavaScript expected <code>name</code> to be a function since we’re trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!</p><p>当值不是预期类型时，会抛出 <code>TypeErrors</code> . JavaScript 期望 <code>name</code> 是一个函数，因为我们试图调用它。但它是一个字符串，因此抛出 <code>TypeError</code>: <code>name is not a function</code> .</p><p>SyntaxErrors get thrown when you’ve written something that isn’t valid JavaScript, for example when you’ve written the word <code>return</code> as <code>retrun</code>.<br>ReferenceErrors get thrown when JavaScript isn’t able to find a reference to a value that you’re trying to access.</p><p>当你编写了一些非有效的 JavaScript 时，会抛出语法错误，例如当你把 <code>return</code> 这个词写成 <code>retrun</code> 时。当 JavaScript 无法找到您尝试访问的值的引用时，抛出 <code>ReferenceErrors</code>.</p></details><hr><h3 id="100-What’s-the-output"><a href="#100-What’s-the-output" class="headerlink" title="100. What’s the output?"></a>100. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 🎉✨ This is my 100th question! ✨🎉</span><span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'Im'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">possible! You should</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>  <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">n't</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> see a therapist after so much JavaScript lol</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li><li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li><li>C: <code>possible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li><li>D: <code>Impossible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND" title="一假即假">逻辑与 (&amp;&amp;)</a> 两个 &amp; 符号 (&amp;&amp;) 表示 “与” 运算，参与运算的任意一个参数为 false, 返回的结果就为 false, 否则返回 true. 如果第一个运算符是真值，与操作返回第二个操作数。如果第一个运算符是假值，与操作直接返回它。第二个操作数被忽略。如果 “与” 运算串联多个值，返回第一个假值。如果所有的值都是真值，最后一个值将会被返回。</p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">falsy（假值）</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">Truthy（真值）</a> 如 <code>&#123;&#125;</code> 和 <code>[]</code></p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p><code>[]</code> is a truthy value. With the <code>&amp;&amp;</code> operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value <code>[]</code> is a truthy value, so <code>&quot;Im&#39;</code> gets returned.</p><p><code>[]</code> 是一个真值。使用 <code>&amp;&amp;</code> 运算符，如果左侧值是真值，则返回右侧值。在这种情况下，左侧值 <code>[]</code> 是一个真值，所以返回 <code>Im</code>.</p><p><code>&quot;&quot;</code> is a falsy value. If the left-hand value is falsy, nothing gets returned. <code>n&#39;t</code> doesn’t get returned.</p><p><code>&quot;&quot;</code> （空字符串）是一个假值。如果左侧值是假的，则不返回任何内容。<code>n&#39;t</code> 不会被返回。</p></details><hr><h3 id="101-What’s-the-output"><a href="#101-What’s-the-output" class="headerlink" title="101. What’s the output?"></a>101. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">const</span> three <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>false</code> <code>null</code> <code>[]</code></li><li>B: <code>null</code> <code>&quot;&quot;</code> <code>true</code></li><li>C: <code>&#123;&#125;</code> <code>&quot;&quot;</code> <code>[]</code></li><li>D: <code>null</code> <code>null</code> <code>true</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">逻辑或 (||)</a> 两个竖线符号 ( || ) 表示 “或” 运算，参与运算的任意一个参数为 true, 返回的结果就为 true, 否则返回 false.”或” 运算串联多个值，将返回第一个真值，如果所有的值都是假值，就返回该链的最后一个值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>使用 <code>||</code> 运算符，我们可以返回第一个真值。如果所有值都是假值，则返回最后一个值。</p><p><code>(false || &#123;&#125; || null)</code> : 空对象 <code>&#123;&#125;</code> 是一个真值。这是第一个（也是唯一的） 真值，它将被返回。<code>one</code> 等于 <code>&#123;&#125;</code> .</p><p><code>(null || false ||&quot;&quot;)</code> : 所有值都是假值。这意味着返回传递的值 <code>&quot;&quot;</code> . <code>two</code> 等于 <code>&quot;&quot;</code> .</p><p><code>([] || 0 ||&quot;&quot;)</code> : 空数组 <code>[]</code> 是一个真值。这是第一个返回的真值。<code>three</code> 等于 <code>[]</code> .</p></details><hr><h3 id="102-What’s-the-value-of-output"><a href="#102-What’s-the-value-of-output" class="headerlink" title="102. What’s the value of output?"></a>102. What’s the value of output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myPromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'I have resolved!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">firstFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">secondFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">firstFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">secondFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li><li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li><li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li><li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await">await</a> 暂停当前 async function 的执行，等待 Promise 处理完成。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>有了 promise, 我们通常会说：当我想要调用某个方法，但是由于它可能需要一段时间，因此暂时将它放在一边。只有当某个值被 resolved/rejected, 并且执行栈为空时才使用这个值。</p><p>我们可以在 <code>async</code> 函数中通过 <code>.then</code> 和 <code>await</code> 关键字获得该值。尽管我们可以通过 <code>.then</code> 和 <code>await</code> 获得 promise 的价值，但是它们的工作方式有所不同。</p><p>在 <code>firstFunction</code> 中，当运行到 <code>myPromise</code> 方法时我们将其放在一边，即 promise 进入微任务队列，其他后面的代码 (<code>console.log(&#39;second&#39;)</code>) 照常运行，因此 <code>second</code> 被打印出，<code>firstFunction</code> 方法到此执行完毕，执行栈中宏任务队列被清空，此时开始执行微任务队列中的任务，<code>I have resolved</code> 被打印出。</p><p>在 <code>secondFunction</code> 方法中，我们通过 <code>await</code> 关键字，暂停了后面代码的执行，直到异步函数的值被解析才开始后面代码的执行。这意味着，它会等着直到 <code>myPromise</code> 以值 <code>I have resolved</code> 被解决之后，下一行 <code>second</code> 才开始执行。</p></details><hr><h3 id="103-What’s-the-output"><a href="#103-What’s-the-output" class="headerlink" title="103. What’s the output?"></a>103. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'Lydia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li><li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li><li>C: <code>3</code>, <code>Lydia2</code>, <code>[Object object]2</code></li><li>D: <code>&quot;12&quot;</code>, <code>Lydia2</code>, <code>[Object object]2</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add">Set.prototype.add()</a> 方法用来向一个 Set 对象的末尾添加一个指定的值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>+</code> 运算符不仅用于添加数值，还可以使用它来连接字符串。当 JavaScript 引擎发现一个或多个值不是数字时，就会将数字强制为字符串。</p><p>第一个是数字 <code>1</code> . <code>1 + 2</code> 返回数字 3.</p><p>但是，第二个是字符串 <code>&quot;Lydia&quot;</code>. <code>&quot;Lydia&quot;</code> 是一个字符串，<code>2</code> 是一个数字：<code>2</code> 被强制转换为字符串。<code>&quot;Lydia&quot;</code> 和 <code>2</code> 被连接起来，产生字符串 <code>&quot;Lydia2&quot;</code> .</p><p><code>&#123;name: &quot;Lydia&quot;&#125;</code> 是一个对象。数字和对象都不是字符串，因此将二者都字符串化。每当我们对常规对象进行字符串化时，它就会变成 <code>[Object object]</code>. 与 <code>&quot;2&quot;</code> 串联的 <code>&quot;[object Object]&quot;</code> 成为 <code>&quot;[object Object]2&quot;</code> .</p></details><hr><h3 id="104-What’s-its-value"><a href="#104-What’s-its-value" class="headerlink" title="104. What’s its value?"></a>104. What’s its value?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Promise.resolve(5);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>A: <code>5</code></li><li>B: <code>Promise &#123;&lt;pending&gt;: 5&#125;</code></li><li>C: <code>Promise &#123;&lt;fulfilled&gt;: 5&#125;</code></li><li>D: <code>Error</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">Promise.resolve()</a> 方法返回一个以给定值解析后的 Promise 对象。如果这个值是一个 promise , 那么将返回这个 promise ; 如果这个值是 thenable（即带有 “then” 方法）, 返回的 promise 会 “跟随” 这个 thenable 的对象，采用它的最终状态；否则返回的 promise 将以此值完成。此函数将类 promise 对象的多层嵌套展平。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>我们可以将我们想要的任何类型的值传递 <code>Promise.resolve</code>, 无论是否 <code>promise</code>. 该方法本身返回带有已解析值的 <code>Promise</code> (<code>&lt;fulfilled&gt;</code>). 如果您传递常规函数，它将是具有常规值的已解决 <code>promise</code>. 如果你通过了 promise, 它将是一个已经 resolved 的且带有传的值的 promise.</p><p>上述情况，我们传了数字 <code>5</code> , 因此返回一个 resolved 状态的 promise,resolve 值为 <code>5</code> .</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="105-What’s-the-output"><a href="#105-What’s-the-output" class="headerlink" title="105. What’s the output?"></a>105. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compareMembers</span><span class="token punctuation">(</span><span class="token parameter">person1<span class="token punctuation">,</span> person2 <span class="token operator">=</span> person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>person1 <span class="token operator">!==</span> person2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Not the same!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'They are the same!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">compareMembers</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Not the same!</code></li><li>B: <code>They are the same!</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>SyntaxError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/%E7%9B%B8%E7%AD%89">【宽松】相等 (==)</a> 检查其两个操作数是否相等，并返回 Boolean 结果。它会尝试强制类型转换并且比较不同类型的操作数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality">严格相等 (===)</a> 严格等于运算符不尝试类型转换。相反，严格相等运算符始终将不同类型的操作数视为不同。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>对象通过引用传递。当我们检查对象的严格相等性 (<code>===</code>) 时，我们正在比较它们的引用。</p><p>我们将 <code>person2</code> 的默认值设置为 <code>person</code> 对象，并将 <code>person</code> 对象作为 <code>person1</code> 的值传递。</p><p>这意味着两个值都引用内存中的同一位置，因此它们是相等的。</p><p>运行 <code>else</code> 语句中的代码块，并输出 <code>They are the same!</code> .</p></details><hr><h3 id="106-What’s-the-output"><a href="#106-What’s-the-output" class="headerlink" title="106. What’s the output?"></a>106. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> colorConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  red<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  blue<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  green<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  black<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  yellow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorConfig<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>true</code></li><li>B: <code>false</code></li><li>C: <code>undefined</code></li><li>D: <code>TypeError</code></li></ul><blockquote><p>这与第五题类似。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>在 JavaScript 中，我们有两种访问对象属性的方法：括号表示法或点表示法。在此示例中，我们使用点表示法 (<code>colorConfig.colors</code>) 代替括号表示法 (<code>colorConfig [&quot;colors&quot;]</code>).</p><p>使用点表示法，JavaScript 会尝试使用该确切名称在对象上查找属性。在此示例中，JavaScript 尝试在 <code>colorconfig</code> 对象上找到名为 <code>colors</code> 的属性。没有名为 <code>colors</code> 的属性，因此返回 <code>undefined</code> .</p><p>然后，我们尝试使用 <code>[1]</code> 访问第一个元素的值。我们无法对未定义的值执行此操作，因此会抛出 <code>TypeError: Cannot read property &#39;1&#39; of undefined</code>.</p><p>JavaScript 解释（或取消装箱） 语句。当我们使用方括号表示法时，它会看到第一个左方括号 <code>[</code> 并一直进行下去，直到找到右方括号 <code>]</code> . 只有这样，它才会评估该语句。如果我们使用了 <code>colorConfig [colors [1]]</code> , 它将返回 colorConfig 对象上 red 属性的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorConfig<span class="token punctuation">[</span>colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=>true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="107-What’s-the-output"><a href="#107-What’s-the-output" class="headerlink" title="107. What’s the output?"></a>107. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'❤️'</span> <span class="token operator">===</span> <span class="token string">'❤️'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>true</code></li><li>B: <code>false</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>在内部，表情符号是 unicode. <code>❤️</code> 符号的 unicode 是 <code>&quot;U+2764 U+FE0F&quot;</code> . 对于相同的表情符号，它们总是相同的，因此我们将两个相等的字符串相互比较，这将返回 <code>true</code>.</p></details><hr><h3 id="108-Which-of-these-methods-modifies-the-original-array"><a href="#108-Which-of-these-methods-modifies-the-original-array" class="headerlink" title="108. Which of these methods modifies the original array?"></a>108. Which of these methods modifies the original array?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> emojis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'✨'</span><span class="token punctuation">,</span> <span class="token string">'🥑'</span><span class="token punctuation">,</span> <span class="token string">'😍'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>emojis<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token string">'✨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emojis<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">!==</span> <span class="token string">'🥑'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emojis<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">!==</span> <span class="token string">'🥑'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emojis<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> <span class="token string">'✨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emojis<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'✨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emojis<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'✨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>All of them</code></li><li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li><li>C: <code>map</code> <code>slice</code> <code>splice</code></li><li>D: <code>splice</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a> 方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find()</a> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a> 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin, 不包括 end).</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。此方法 ** 会改变原数组 **.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>使用 <code>splice</code> 方法，我们通过删除，替换或添加元素来修改原始数组。在这种情况下，我们从索引 1 开始删除了 2 个元素（我们删除了 <code>&#39;🥑&#39;</code> 和 <code>&#39;😍&#39;</code>), 同时添加了 ✨emoji 表情。</p><p><code>map</code> , <code>filter</code> 和 <code>slice</code> 返回一个新数组，<code>find</code> 返回一个元素，而 <code>reduce</code> 返回一个减小的值。</p></details><hr><h3 id="109-What’s-the-output"><a href="#109-What’s-the-output" class="headerlink" title="109. What’s the output?"></a>109. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> food <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🍕'</span><span class="token punctuation">,</span> <span class="token string">'🍫'</span><span class="token punctuation">,</span> <span class="token string">'🥑'</span><span class="token punctuation">,</span> <span class="token string">'🍔'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span> favoriteFood<span class="token operator">:</span> food<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>favoriteFood <span class="token operator">=</span> <span class="token string">'🍝'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>B: <code>[&#39;🍝&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>C: <code>[&#39;🍝&#39;, &#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>我们将 <code>info</code> 对象上的 <code>favoriteFood</code> 属性的值设置为披萨表情符号 <code>&quot;🍕&quot;</code> 的字符串。字符串是原始数据类型。在 JavaScript 中，~~ 原始数据类型通过值起作用~~ 原始数据类型不会通过引用进行交互。</p><p>在这种情况下，我们将 <code>info</code> 对象上的 <code>favoriteFood</code> 属性的值设置为等于 <code>food</code> 数组中的第一个元素的值，字符串为披萨表情符号 (<code>&#39;🍕&#39;</code>). 字符串是原始数据类型，并且通过值进行交互，我们更改 <code>info</code> 对象上 <code>favoriteFood</code> 属性的值。<code>food</code> 数组没有改变，因为 <code>favoriteFood</code> 的值只是该数组中第一个元素的值的复制，并且与该元素上的元素没有相同的内存引用食物 <code>[0]</code> . 当我们记录食物时，它仍然是原始数组 <code>[&#39;🍕&#39;,&#39;🍫&#39;,&#39;🥑&#39;,&#39;🍔&#39;]</code> .</p></details><hr><h3 id="110-What-does-this-method-do"><a href="#110-What-does-this-method-do" class="headerlink" title="110. What does this method do?"></a>110. What does this method do?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: Parses JSON to a JavaScript value</li><li>B: Parses a JavaScript object to JSON</li><li>C: Parses any JavaScript value to JSON</li><li>D: Parses JSON to a JavaScript object only</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON.parse()</a> 方法用来解析 JSON 字符串，构造由字符串描述的 JavaScript 值或对象。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>使用 <code>JSON.parse()</code> 方法，我们可以将 JSON 字符串解析为 JavaScript 值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将数字字符串化为有效的 JSON, 然后将 JSON 字符串解析为 JavaScript 值：</span><span class="token keyword">const</span> jsonNumber <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '4'</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonNumber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token comment">// 将数组值字符串化为有效的 JSON, 然后将 JSON 字符串解析为 JavaScript 值：</span><span class="token keyword">const</span> jsonArray <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '[1, 2, 3]'</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span class="token comment">// 将对象字符串化为有效的 JSON, 然后将 JSON 字符串解析为 JavaScript 值：</span><span class="token keyword">const</span> jsonArray <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '&#123;"name":"Lydia"&#125;'</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'Lydia' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="111-What’s-the-output"><a href="#111-What’s-the-output" class="headerlink" title="111. What’s the output?"></a>111. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Sarah'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: Lydia</li><li>B: Sarah</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: D</p><p>每个函数都有其自己的执行上下文。<code>getName</code> 函数首先在其自身的上下文（范围） 内查找，以查看其是否包含我们尝试访问的变量 <code>name</code> . 上述情况，<code>getName</code> 函数包含其自己的 <code>name</code> 变量：我们用 <code>let</code> 关键字和 <code>Sarah</code> 的值声明变量 <code>name</code> .</p><p>带有 <code>let</code> 关键字（和 <code>const</code> ) 的变量被提升，但是与 <code>var</code> 不同，它不会被 <strong><em>初始化</em></strong>. 在我们声明（初始化） 它们之前，无法访问它们。这称为 “暂时性死区”. 当我们尝试在声明变量之前访问变量时，JavaScript 会抛出 <code>ReferenceError: Cannot access &#39;name&#39; before initialization</code> .</p><p>如果我们不在 <code>getName</code> 函数中声明 <code>name</code> 变量，则 javascript 引擎会查看原型练。会找到其外部作用域有一个名为 <code>name</code> 的变量，其值为 <code>Lydia</code> . 在这种情况下，它将打印 <code>Lydia</code> :</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lydia</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="112-What’s-the-output"><a href="#112-What’s-the-output" class="headerlink" title="112. What’s the output?"></a>112. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token function">generatorOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token function">generatorTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>a</code> and <code>a</code></li><li>B: <code>a</code> and <code>undefined</code></li><li>C: <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> and <code>a</code></li><li>D: <code>a</code> and <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">function*</a> 定义一个生成器函数 (generator function), 它返回一个 Generator 对象。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield">yield</a> 暂停和恢复 generator 函数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*">yield*</a> 用于委托给另一个 generator 或可迭代对象。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next">Generator.prototype.next()</a> 方法返回一个包含属性 done 和 value 的对象。该方法也可以通过接受一个参数用以向生成器传值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>通过 <code>yield</code> 关键字，我们在 <code>Generator</code> 函数里执行 <code>yield</code> 表达式。通过 <code>yield*</code> 关键字，我们可以在一个 <code>Generator</code> 函数里面执行 (<code>yield</code> 表达式） 另一个 <code>Generator</code> 函数，或可遍历的对象 （如数组）.</p><p>在函数 <code>generatorOne</code> 中，我们通过 <code>yield</code> 关键字 yield 了一个完整的数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>. 函数 <code>one</code> 通过 <code>next</code> 方法返回的对象的 <code>value</code> 属性的值 (<code>one.next().value</code>) 等价于数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['a', 'b', 'c']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在函数 <code>generatorTwo</code> 中，我们使用 <code>yield*</code> 关键字。就相当于函数 <code>two</code> 第一个 <code>yield</code> 的值，等价于在迭代器中第一个 <code>yield</code> 的值。数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> 就是这个迭代器。第一个 <code>yield</code> 的值就是 <code>a</code>, 所以我们第一次调用 <code>two.next().value</code> 时，就返回 <code>a</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'b'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'c'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="113-What’s-the-output"><a href="#113-What’s-the-output" class="headerlink" title="113. What’s the output?"></a>113. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'I love'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> to program</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>A: <code>I love to program</code></li><li>B: <code>undefined to program</code></li><li>C: <code>$&#123;(x =&gt; x)(&#39;I love&#39;) to program</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function <code>(x =&gt; x)(&#39;I love&#39;)</code> in this case. We pass the value <code>&#39;I love&#39;</code> as an argument to the <code>x =&gt; x</code> arrow function. <code>x</code> is equal to <code>&#39;I love&#39;</code>, which gets returned. This results in <code>I love to program</code>.</p></details><hr><h3 id="114-What-will-happen"><a href="#114-What-will-happen" class="headerlink" title="114. What will happen?"></a>114. What will happen?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  alert<span class="token operator">:</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Alert!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>config <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>setInterval</code> 的回调不会被调用</li><li>B: <code>setInterval</code> 的回调被调用一次</li><li>C: <code>setInterval</code> 的回调仍然会被每秒钟调用</li><li>D: 我们从没调用过 <code>config.alert()</code>, config 为 <code>null</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>Normally when we set objects equal to <code>null</code>, those objects get <em>garbage collected</em> as there is no reference anymore to that object. However, since the callback function within <code>setInterval</code> is an arrow function (thus bound to the <code>config</code> object), the callback function still holds a reference to the <code>config</code> object.</p><p>As long as there is a reference, the object won’t get garbage collected.<br>Since this is an interval, setting <code>config</code> to <code>null</code> or <code>delete</code>-ing <code>config.alert</code> won’t garbage-collect the interval, so the interval will still be called.<br>It should be cleared with <code>clearInterval(config.alert)</code> to remove it from memory.<br>Since it was not cleared, the <code>setInterval</code> callback function will still get invoked every 1000ms (1s).</p></details><hr><h3 id="115-Which-method-s-will-return-the-value-39-Hello-world-39-？"><a href="#115-Which-method-s-will-return-the-value-39-Hello-world-39-？" class="headerlink" title="115. Which method(s) will return the value &#39;Hello world!&#39; ？"></a>115. Which method(s) will return the value <code>&#39;Hello world!&#39;</code> ？</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'greeting'</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myFunc<span class="token punctuation">,</span> <span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'greeting'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myFunc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'greeting'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: 1</li><li>B: 2</li><li>C: 2 and 3</li><li>D: All of them</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值） 都可以作为一个键或一个值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>When adding a key/value pair using the <code>set</code> method, the key will be the value of the first argument passed to the <code>set</code> function, and the value will be the second argument passed to the <code>set</code> function. The key is the <em>function</em> <code>() =&gt; &#39;greeting&#39;</code> in this case, and the value <code>&#39;Hello world&#39;</code>. <code>myMap</code> is now <code>&#123; () =&gt; &#39;greeting&#39; =&gt; &#39;Hello world!&#39; &#125;</code>.</p><p>1 is wrong, since the key is not <code>&#39;greeting&#39;</code> but <code>() =&gt; &#39;greeting&#39;</code>.<br>3 is wrong, since we’re creating a new function by passing it as a parameter to the <code>get</code> method. Object interact by <em>reference</em>. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory.</p></details><hr><h3 id="116-What’s-the-output"><a href="#116-What’s-the-output" class="headerlink" title="116. What’s the output?"></a>116. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">changeAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>person <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">changeAgeAndName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>person <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  x<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Sarah'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">changeAge</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">changeAgeAndName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;name: &quot;Sarah&quot;, age: 22&#125;</code></li><li>B: <code>&#123;name: &quot;Sarah&quot;, age: 23&#125;</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;, age: 22&#125;</code></li><li>D: <code>&#123;name: &quot;Lydia&quot;, age: 23&#125;</code></li></ul><div class="codepen" data-height="700" data-theme-id="30013" data-default-tab="result" data-user="cecillia" data-slug-hash="KBaRzR" data-preview="true" data-editable="true"  data-prefill='{"title":" ","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;iframe src="https://lydiahallie-quiz.lydiahallie.now.sh/question/5" /></pre>  <pre data-lang="css">html, body {  margin: 0px;  overflow: hidden;}iframe {  height: 100vh;  width: 100vw;  border: none;}</pre></div><details><summary><b>解析</b></summary><p>Answer: C</p><p>Both the <code>changeAge</code> and <code>changeAgeAndName</code> functions have a default parameter, namely a <em>newly</em> created object <code>&#123; ...person &#125;</code>. This object has copies of all the key/values in the <code>person</code> object.</p><p>First, we invoke the <code>changeAge</code> function and pass the <code>person</code> object as its argument. This function increases the value of the <code>age</code> property by 1. <code>person</code> is now <code>&#123; name: &quot;Lydia&quot;, age: 22 &#125;</code>.</p><p>Then, we invoke the <code>changeAgeAndName</code> function, however we don’t pass a parameter. Instead, the value of <code>x</code> is equal to a <em>new</em> object: <code>&#123; ...person &#125;</code>. Since it’s a new object, it doesn’t affect the values of the properties on the <code>person</code> object. <code>person</code> is still equal to <code>&#123; name: &quot;Lydia&quot;, age: 22 &#125;</code>.</p></details><hr><h3 id="117-Which-of-the-following-options-will-return-6"><a href="#117-Which-of-the-following-options-will-return-6" class="headerlink" title="117. Which of the following options will return 6?"></a>117. Which of the following options will return <code>6</code>?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sumValues</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>sumValues([...1, 2, 3])</code></li><li>B: <code>sumValues([...[1, 2, 3]])</code></li><li>C: <code>sumValues(...[1, 2, 3])</code></li><li>D: <code>sumValues([1, 2, 3])</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">展开语法</a> 可以在函数调用 / 数组构造时，将 <strong>数组表达式</strong> 或者 <strong>string</strong> 在语法层面展开；还可以在构造 <strong>字面量对象</strong> 时，将对象表达式按 key-value 的方式展开。（字面量一般指 [1, 2, 3] 或者 {name: “mdn”} 这种简洁的构造方式）</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>With the spread operator <code>...</code>, we can <em>spread</em> iterables to individual elements. The <code>sumValues</code> function receives three arguments: <code>x</code>, <code>y</code> and <code>z</code>. <code>...[1, 2, 3]</code> will result in <code>1, 2, 3</code>, which we pass to the <code>sumValues</code> function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumValues</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =>6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="118-What’s-the-output"><a href="#118-What’s-the-output" class="headerlink" title="118. What’s the output?"></a>118. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🥳'</span><span class="token punctuation">,</span> <span class="token string">'🤠'</span><span class="token punctuation">,</span> <span class="token string">'🥰'</span><span class="token punctuation">,</span> <span class="token string">'🤪'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token punctuation">(</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>🤠</code></li><li>B: <code>🥰</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment">加赋值运算符(+=)</a> 把一个右值与一个变量相加，然后把相加的结果赋给该变量。两个操作数的类型决定了加赋值运算符的行为。算术相加或字符串连接都有可能。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>With the <code>+=</code> operand, we’re incrementing the value of <code>num</code> by <code>1</code>. <code>num</code> had the initial value <code>1</code>, so <code>1 + 1</code> is <code>2</code>. The item on the second index in the <code>list</code> array is 🥰, <code>console.log(list[2])</code> prints 🥰.</p></details><hr><h3 id="119-What’s-the-output"><a href="#119-What’s-the-output" class="headerlink" title="119. What’s the output?"></a>119. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  firstName<span class="token operator">:</span> <span class="token string">'Lydia'</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token string">'Hallie'</span><span class="token punctuation">,</span>  pet<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Mara'</span><span class="token punctuation">,</span>    breed<span class="token operator">:</span> <span class="token string">'Dutch Tulip Hound'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>pet<span class="token operator">?.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>pet<span class="token operator">?.</span>family<span class="token operator">?.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>getFullName<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span>getLastName<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>ReferenceError</code></li><li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li><li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">可选链操作符(?.)</a> 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为空 (nullish ) (null 或者 undefined) 的情况下不会引起错误，该表达式短路返回值是 undefined. 与函数调用一起使用时，如果给定的函数不存在，则返回 undefined.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>With the optional chaining operator <code>?.</code>, we no longer have to explicitly check whether the deeper nested values are valid or not. If we’re trying to access a property on an <code>undefined</code> or <code>null</code> value (<em>nullish</em>), the expression short-circuits and returns <code>undefined</code>.</p><p><code>person.pet?.name</code>: <code>person</code> has a property named <code>pet</code>: <code>person.pet</code> is not nullish. It has a property called <code>name</code>, and returns <code>Mara</code>.<br><code>person.pet?.family?.name</code>: <code>person</code> has a property named <code>pet</code>: <code>person.pet</code> is not nullish. <code>pet</code> does <em>not</em> have a property called <code>family</code>, <code>person.pet.family</code> is nullish. The expression returns <code>undefined</code>.<br><code>person.getFullName?.()</code>: <code>person</code> has a property named <code>getFullName</code>: <code>person.getFullName()</code> is not nullish and can get invoked, which returns <code>Lydia Hallie</code>.<br><code>member.getLastName?.()</code>: <code>member</code> is not defined: <code>member.getLastName()</code> is nullish. The expression returns <code>undefined</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span>getLastName<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught ReferenceError: member is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>getLastName<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="120-What’s-the-output"><a href="#120-What’s-the-output" class="headerlink" title="120. What’s the output?"></a>120. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> groceries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'peanuts'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>groceries<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'We have to buy bananas!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">We don't have to buy bananas!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: We have to buy bananas!</li><li>B: We don’t have to buy bananas</li><li>C: <code>undefined</code></li><li>D: <code>1</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf()</a> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 - 1.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>我们传递了一个状态 <code>groceries.indexOf(&quot;banana&quot;)</code> 给 if 条件语句。<code>groceries.indexOf(&quot;banana&quot;)</code> 返回 <code>0</code>, 一个 falsy 的值。因为 if 条件语句的状态为 falsy,<code>else</code> 块区内的代码执行，并且 <code>We don&#39;t have to buy bananas!</code> 被输出。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 更好的写法</span><span class="token keyword">const</span> groceries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'peanuts'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>groceries<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">We don't have to buy bananas!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'We have to buy bananas!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="121-What’s-the-output"><a href="#121-What’s-the-output" class="headerlink" title="121. What’s the output?"></a>121. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  languages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">language</span><span class="token punctuation">(</span><span class="token parameter">lang</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>function language(lang) &#123; this.languages.push(lang &#125;</code></li><li>B: <code>0</code></li><li>C: <code>[]</code></li><li>D: <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set">setter</a> 当尝试设置属性时，set 语法将对象属性绑定到要调用的函数。其返回值为 <code>undefined</code>.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>方法 <code>language</code> 是一个 <code>setter</code>.Setters 并不保存一个实际值，它们的使命在于 <em>修改</em> 属性。当调用方法 <code>setter</code>, 返回 <code>undefined</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">set</span> <span class="token function">languages</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  languages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>languages<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="122-What’s-the-output"><a href="#122-What’s-the-output" class="headerlink" title="122. What’s the output?"></a>122. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>false</code> <code>true</code></li><li>B: <code>true</code> <code>false</code></li><li>C: <code>false</code> <code>false</code></li><li>D: <code>true</code> <code>true</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p><code>typeof name</code> 返回 <code>&quot;string&quot;</code>. 字符串 <code>&quot;string&quot;</code> 是一个 truthy 的值，因此 <code>!typeof name</code> 返回一个布尔值 <code>false</code>. <code>false === &quot;object&quot;</code> 和 <code>false === &quot;string&quot;</code> 都返回 <code>false</code>.</p><p>（如果我们想检测一个值的类型，我们应该用 <code>!==</code> 而不是 <code>!typeof</code>)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="123-What’s-the-output"><a href="#123-What’s-the-output" class="headerlink" title="123. What’s the output?"></a>123. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>4</code> <code>5</code> <code>6</code></li><li>B: <code>6</code> <code>5</code> <code>4</code></li><li>C: <code>4</code> <code>function</code> <code>function</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>6</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>The <code>add</code> function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument <code>x</code> with the value of <code>4</code>. We invoke the second function, which receives an argument <code>y</code> with the value <code>5</code>. Then we invoke the third function, which receives an argument <code>z</code> with the value <code>6</code>. When we’re trying to access the value <code>x</code>, <code>y</code> and <code>z</code> within the last arrow function, the JS engine goes up the scope chain in order to find the values for <code>x</code> and <code>y</code> accordingly. This returns <code>4</code> <code>5</code> <code>6</code>.</p></details><hr><h3 id="124-What’s-the-output"><a href="#124-What’s-the-output" class="headerlink" title="124. What’s the output?"></a>124. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> gen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Promise &#123;1&#125;</code> <code>Promise &#123;2&#125;</code> <code>Promise &#123;3&#125;</code></li><li>B: <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>C: <code>1</code> <code>2</code> <code>3</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of">for await…of</a> 语句会在异步或者同步可迭代对象上创建一个迭代循环</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The generator function <code>range</code> returns an async object with promises for each item in the range we pass: <code>Promise&#123;1&#125;</code>, <code>Promise&#123;2&#125;</code>, <code>Promise&#123;3&#125;</code>. We set the variable <code>gen</code> equal to the async object, after which we loop over it using a <code>for await ... of</code> loop. We set the variable <code>item</code> equal to the returned Promise values: first <code>Promise&#123;1&#125;</code>, then <code>Promise&#123;2&#125;</code>, then <code>Promise&#123;3&#125;</code>. Since we’re <em>awaiting</em> the value of <code>item</code>, the resolved promise, the resolved <em>values</em> of the promises get returned: <code>1</code>, <code>2</code>, then <code>3</code>.</p></details><hr><h3 id="125-What’s-the-output"><a href="#125-What’s-the-output" class="headerlink" title="125. What’s the output?"></a>125. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>1</code> <code>2</code> <code>3</code></li><li>B: <code>&#123;1: 1&#125;</code> <code>&#123;2: 2&#125;</code> <code>&#123;3: 3&#125;</code></li><li>C: <code>&#123;1: undefined&#125;</code> <code>undefined</code> <code>undefined</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: D</p><p><code>myFunc</code> 期望接收一个包含 <code>x</code>, <code>y</code> 和 <code>z</code> 属性的对象作为它的参数。因为我们仅仅传递三个单独的数字值 (1, 2, 3) 而不是一个含有 <code>x</code>, <code>y</code> 和 <code>z</code> 属性的对象 ({x: 1, y: 2, z: 3}), <code>x</code>, <code>y</code> 和 <code>z</code> 有着各自的默认值 <code>undefined</code>.</p></details><hr><h3 id="126-What’s-the-output"><a href="#126-What’s-the-output" class="headerlink" title="126. What’s the output?"></a>126. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 参数语法</span><span class="token keyword">function</span> <span class="token function">getFine</span><span class="token punctuation">(</span><span class="token parameter">speed<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> formattedSpeed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>NumberFormat</span><span class="token punctuation">(</span><span class="token string">'en-US'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    style<span class="token operator">:</span> <span class="token string">'unit'</span><span class="token punctuation">,</span>    unit<span class="token operator">:</span> <span class="token string">'mile-per-hour'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> formattedAmount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>NumberFormat</span><span class="token punctuation">(</span><span class="token string">'en-US'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    style<span class="token operator">:</span> <span class="token string">'currency'</span><span class="token punctuation">,</span>    currency<span class="token operator">:</span> <span class="token string">'USD'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The driver drove </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>formattedSpeed<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and has to pay </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>formattedAmount<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getFine</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: The driver drove 130 and has to pay 300</li><li>B: The driver drove 130 mph and has to pay $300.00</li><li>C: The driver drove undefined and has to pay undefined</li><li>D: The driver drove 130.00 and has to pay 300.00</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat">Intl.NumberFormat</a> 是对语言敏感的格式化数字类的构造器类。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>通过方法 <code>Intl.NumberFormat</code>, 我们可以格式化任意区域的数字值。我们对数字值 <code>130</code> 进行 <code>mile-per-hour</code> 作为 <code>unit</code> 的 <code>en-US</code> 区域 格式化，结果为 <code>130 mph</code>. 对数字值 <code>300</code> 进行 <code>USD</code> 作为 <code>currentcy</code> 的 <code>en-US</code> 区域格式化，结果为 <code>$300.00</code>.</p></details><hr><h3 id="127-What’s-the-output"><a href="#127-What’s-the-output" class="headerlink" title="127. What’s the output?"></a>127. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> spookyItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'👻'</span><span class="token punctuation">,</span> <span class="token string">'🎃'</span><span class="token punctuation">,</span> <span class="token string">'🕸'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> item<span class="token operator">:</span> spookyItems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">'💀'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>spookyItems<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;]</code></li><li>B: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code></li><li>C: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &#123; item: &quot;💀&quot;&#125;]</code></li><li>D: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;[object Object]&quot;]</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>通过解构对象们，我们可以从右手边的对象中拆出值，并且将拆出的值分配给左手边对象同名的属性。在这种情况下，我们将值 “💀” 分配给 <code>spookyItems[3]</code>. 相当于我们正在篡改数组 <code>spookyItems</code>, 我们给它添加了值 “💀”. 当输出 <code>spookyItems</code> 时，结果为 <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> item<span class="token operator">:</span> spookyItems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">'💀'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//=></span>spookyItems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'💀'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="128-What’s-the-output"><a href="#128-What’s-the-output" class="headerlink" title="128. What’s the output?"></a>128. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li><li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN">isNaN()</a> 函数用来确定一个值是否为 NaN .</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">Number.isNaN()</a> 方法确定传递的值是否为 NaN, 并且检查其类型是否为 Number.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>通过方法 <code>Number.isNaN</code>, 你可以检测你传递的值是否为 <em>数字值</em> 并且是否等价于 <code>NaN</code>.<code>name</code> 不是一个数字值，因此 <code>Number.isNaN(name)</code> 返回 <code>false</code>.<code>age</code> 是一个数字值，但它不等价于 <code>NaN</code>, 因此 <code>Number.isNaN(age)</code> 返回 <code>false</code>.</p><p>通过方法 <code>isNaN</code>, 你可以检测你传递的值是否一个 number.<code>name</code> 不是一个 <code>number</code>, 因此 <code>isNaN(name)</code> 返回 <code>true</code>. <code>age</code> 是一个 <code>number</code> 因此 <code>isNaN(age)</code> 返回 <code>false</code>.</p></details><hr><h3 id="129-What’s-the-output"><a href="#129-What’s-the-output" class="headerlink" title="129. What’s the output?"></a>129. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> randomValue <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> randomValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> randomValue <span class="token operator">=</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p>通过 <code>const</code> 关键字声明的变量在被初始化之前不可被引用：这被称之为 <em>暂时性死区</em>.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>通过 <code>const</code> 关键字声明的变量在被初始化之前不可被引用：这被称之为 <em>暂时性死区</em>. 在函数 <code>getInfo</code> 中，变量 <code>randomValue</code> 声明在 <code>getInfo</code> 的作用域的此法环境中。在想要对 <code>typeof randomValue</code> 进行 log 之前，变量 <code>randomValue</code> 仍未被初始化：错误 <code>ReferenceError</code> 被抛出！JavaScript 引擎并不会根据作用域链网上寻找该变量，因为我们已经在 <code>getInfo</code> 函数中声明了 <code>randomValue</code> 变量。</p></details><hr><h3 id="130-What’s-the-output"><a href="#130-What’s-the-output" class="headerlink" title="130. What’s the output?"></a>130. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Woah some cool data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> myPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Oops didn't work</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Oh finally!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Woah some cool data</code></li><li>B: <code>Oh finally!</code></li><li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li><li>D: <code>Oops didn&#39;t work</code> <code>Oh finally!</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">try…catch</a> 语句标记要尝试的语句块，并指定一个出现异常时抛出的响应。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>在 <code>try</code> 块区，我们打印 <code>myPromise</code> 变量的 awaited 值：<code>&quot;Woah some cool data&quot;</code>. 因为 <code>try</code> 块区没有错误抛出，<code>catch</code> 块区的代码并不执行。<code>finally</code> 块区的代码 <em>总是</em> 执行，<code>&quot;Oh finally!&quot;</code> 被输出。</p></details><hr><h3 id="131-What’s-the-output"><a href="#131-What’s-the-output" class="headerlink" title="131. What’s the output?"></a>131. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> emojis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🥑'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'✨'</span><span class="token punctuation">,</span> <span class="token string">'✨'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'🍕'</span><span class="token punctuation">,</span> <span class="token string">'🍕'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emojis<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]]</code></li><li>B: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>C: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>D: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">Array.prototype.flat()</a> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>通过方法 <code>flat</code>, 我们可以创建一个新的，已被扁平化的数组。被扁平化的深度取决于我们传递的值。在这个 case 里，我们传递了值 <code>1</code> （并不必要，这是默认值）, 相当于只有第一层的数组才会被连接。即这个 case 里的 <code>[&#39;🥑&#39;]</code> and <code>[&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>. 连接这两个数组得到结果 <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>.</p></details><hr><h3 id="132-What’s-the-output"><a href="#132-What’s-the-output" class="headerlink" title="132. What’s the output?"></a>132. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> counterOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counterOne<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> counterTwo <span class="token operator">=</span> counterOne<span class="token punctuation">;</span>counterTwo<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counterOne<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>2</code></li><li>D: <code>3</code></li></ul><blockquote><p>递增 (++) 为其操作数增加 1, 返回一个数值。如果使用后置 , 即运算符位于操作数的后面（如 x++), 那么将会在递增前返回数值。如果使用前置 , 即运算符位于操作数的前面（如 ++x), 那么将会在递增后返回数值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p><code>counterOne</code> is an instance of the <code>Counter</code> class. The counter class contains a <code>count</code> property on its constructor, and an <code>increment</code> method. First, we invoked the <code>increment</code> method twice by calling <code>counterOne.increment()</code>. Currently, <code>counterOne.count</code> is <code>2</code>.</p><img src="/images/KxLlTm9.png" width="500"><p>Then, we create a new variable <code>counterTwo</code>, and set it equal to <code>counterOne</code>. Since objects interact by reference, we’re just creating a new reference to the same spot in memory that <code>counterOne</code> points to. Since it has the same spot in memory, any changes made to the object that <code>counterTwo</code> has a reference to, also apply to <code>counterOne</code>. Currently, <code>counterTwo.count</code> is <code>2</code>.</p><p>We invoke the <code>counterTwo.increment()</code>, which sets the <code>count</code> to <code>3</code>. Then, we log the count on <code>counterOne</code>, which logs <code>3</code>.</p><img src="/images/BNBHXmc.png" width="500"></details><hr><h3 id="133-What’s-the-output"><a href="#133-What’s-the-output" class="headerlink" title="133. What’s the output?"></a>133. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Promise!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">funcOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Timeout 1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Last line 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">funcTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myPromise<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Timeout 2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Last line 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">funcOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">funcTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Promise!</code> <code>Last line 1</code> <code>Promise!</code> <code>Last line 2</code> <code>Timeout 1</code> <code>Timeout 2</code></li><li>B: <code>Last line 1</code> <code>Promise!</code> <code>Timeout 1</code> <code>Last line 2</code> <code>Promise!</code> <code>Timeout 2</code></li><li>C: <code>Promise!</code> <code>Last line 1</code> <code>Last line 2</code> <code>Promise!</code> <code>Timeout 1</code> <code>Timeout 2</code></li><li>D: <code>Last line 1</code> <code>Promise!</code> <code>Promise!</code> <code>Last line 2</code> <code>Timeout 1</code> <code>Timeout 2</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout">window.setTimeout</a> 设置一个定时器，该定时器在定时器到期后执行一个函数或指定的一段代码。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>First, we invoke <code>funcOne</code>. On the first line of <code>funcOne</code>, we call the <code>myPromise</code> promise, which is an <em>asynchronous</em> operation. While the engine is busy completing the promise, it keeps on running the function <code>funcOne</code>. The next line is the <em>asynchronous</em> <code>setTimeout</code> function, from which the callback is sent to the Web API. (see my article on the event loop <a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif">here</a>.)</p><p>Both the promise and the timeout are asynchronous operations, the function keeps on running while it’s busy completing the promise and handling the <code>setTimeout</code> callback. This means that <code>Last line!</code> gets logged first, since this is not an asynchonous operation. This is the last line of <code>funcOne</code>, the promise resolved, and <code>Promise!</code> gets logged. However, since we’re invoking <code>funcTwo()</code>, the call stack isn’t empty, and the callback of the <code>setTimeout</code> function cannot get added to the callstack yet.</p><p>In <code>funcTwo</code> we’re, first <em>awaiting</em> the myPromise promise. With the <code>await</code> keyword, we pause the execution of the function until the promise has resolved (or rejected). Then, we log the awaited value of <code>res</code> (since the promise itself returns a promise). This logs <code>Promise!</code>.</p><p>The next line is the <em>asynchronous</em> <code>setTimeout</code> function, from which the callback is sent to the Web API.</p><p>We get to the last line of <code>funcTwo</code>, which logs <code>Last line!</code> to the console. Now, since <code>funcTwo</code> popped off the call stack, the call stack is empty. The callbacks waiting in the queue (<code>() =&gt; console.log(&quot;Timeout!&quot;)</code> from <code>funcOne</code>, and <code>() =&gt; console.log(&quot;Timeout!&quot;)</code> from <code>funcTwo</code>) get added to the call stack one by one. The first callback logs <code>Timeout!</code>, and gets popped off the stack. Then, the second callback logs <code>Timeout!</code>, and gets popped off the stack. This logs <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></p></details><hr><h3 id="134-How-can-we-invoke-sum-in-index-js-from-sum-js"><a href="#134-How-can-we-invoke-sum-in-index-js-from-sum-js" class="headerlink" title="134. How can we invoke sum in index.js from sum.js?"></a>134. How can we invoke <code>sum</code> in <code>index.js</code> from <code>sum.js</code>?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// sum.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// index.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> sum <span class="token keyword">from</span> <span class="token string">'./sum'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>sum(4)</code></li><li>B: <code>sum.sum(4)</code></li><li>C: <code>sum.default(4)</code></li><li>D: Default aren’t imported with <code>*</code>, only named exports</li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>With the asterisk <code>*</code>, we import all exported values from that file, both default and named. If we had the following file:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// info.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">'I love JavaScript'</span><span class="token punctuation">;</span><span class="token comment">// index.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> info <span class="token keyword">from</span> <span class="token string">'./info'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The following would get logged:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"I love JavaScript"</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"Lydia"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For the <code>sum</code> example, it means that the imported value <code>sum</code> looks like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> x <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>We can invoke this function, by calling <code>sum.default</code></p></details><hr><h3 id="135-What’s-the-output"><a href="#135-What’s-the-output" class="headerlink" title="135. What’s the output?"></a>135. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Added a new property!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Accessed a property!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>Added a new property!</code></li><li>B: <code>Accessed a property!</code></li><li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li><li>D: 没有任何输出</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）.</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>With a Proxy object, we can add custom behavior to an object that we pass to it as the second argument. In this case, we pass the <code>handler</code> object which contained two properties: <code>set</code> and <code>get</code>. <code>set</code> gets invoked whenever we set property values, <code>get</code> gets invoked whenever we get (access) property values.</p><p>The first argument is an empty object <code>&#123;&#125;</code>, which is the value of <code>person</code>. To this object, the custom behavior specified in the <code>handler</code> object gets added. If we add a property to the <code>person</code> object, <code>set</code> will get invoked. If we access a property on the <code>person</code> object, <code>get</code> gets invoked.</p><p>First, we added a new property <code>name</code> to the proxy object (<code>person.name = &quot;Lydia&quot;</code>). <code>set</code> gets invoked, and logs <code>&quot;Added a new property!&quot;</code>.</p><p>Then, we access a property value on the proxy object, the <code>get</code> property on the handler object got invoked. <code>&quot;Accessed a property!&quot;</code> gets logged.</p></details><hr><h3 id="136-Which-of-the-following-will-modify-the-person-object"><a href="#136-Which-of-the-following-will-modify-the-person-object" class="headerlink" title="136. Which of the following will modify the person object?"></a>136. Which of the following will modify the <code>person</code> object?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia Hallie'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>person.age = 21</code></li><li>C: <code>delete person.name</code></li><li>D: <code>Object.assign(person, &#123; age: 21&#125;)</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">Object.seal()</a> 方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>With <code>Object.seal</code> we can prevent new properies from being <em>added</em>, or existing properties to be <em>removed</em>.</p><p>However, you can still modify the value of existing properties.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Evan Bacon'</span><span class="token punctuation">;</span><span class="token comment">//"Evan Bacon"</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token comment">//21</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">//false</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// VM343:1 Uncaught TypeError: Cannot add property age, object is not extensible</span><span class="token comment">//     at Function.assign (&lt;anonymous>)</span><span class="token comment">//     at &lt;anonymous>:1:8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;name: "Evan Bacon"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="137-Which-of-the-following-will-modify-the-person-object"><a href="#137-Which-of-the-following-will-modify-the-person-object" class="headerlink" title="137. Which of the following will modify the person object?"></a>137. Which of the following will modify the <code>person</code> object?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">,</span>  address<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    street<span class="token operator">:</span> <span class="token string">'100 Main St'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>delete person.address</code></li><li>C: <code>person.address.street = &quot;101 Main St&quot;</code></li><li>D: <code>person.pet = &#123;name: &quot;Mara&quot;&#125;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze()</a> 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The <code>Object.freeze</code> method <em>freezes</em> an object. No properties can be added, modified, or removed.</p><p>However, it only <em>shallowly</em> freezes the object, meaning that only <em>direct</em> properties on the object are frozen. If the property is another object, like <code>address</code> in this case, the properties on that object aren’t frozen, and can be modified.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Evan Bacon'</span><span class="token punctuation">;</span> <span class="token comment">//"Evan Bacon"</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span> <span class="token comment">//false</span>person<span class="token punctuation">.</span>address<span class="token punctuation">.</span>street <span class="token operator">=</span> <span class="token string">'101 Main St'</span><span class="token punctuation">;</span> <span class="token comment">//"101 Main St"</span>person<span class="token punctuation">.</span>pet <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Mara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//&#123;name: "Mara"&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;name: "Evan Bacon", address: &#123;street: '101 Main St'&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="138-What’s-the-output"><a href="#138-What’s-the-output" class="headerlink" title="138. What’s the output?"></a>138. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> x<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token parameter">num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li><li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li><li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li><li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>First, we invoked <code>myFunc()</code> without passing any arguments. Since we didn’t pass arguments, <code>num</code> and <code>value</code> got their default values: num is <code>2</code>, and <code>value</code> the returned value of the function <code>add</code>. To the <code>add</code> function, we pass <code>num</code> as an argument, which had the value of <code>2</code>. <code>add</code> returns <code>4</code>, which is the value of <code>value</code>.</p><p>Then, we invoked <code>myFunc(3)</code> and passed the value <code>3</code> as the value for the argument <code>num</code>. We didn’t pass an argument for <code>value</code>. Since we didn’t pass a value for the <code>value</code> argument, it got the default value: the returned value of the <code>add</code> function. To <code>add</code>, we pass <code>num</code>, which has the value of <code>3</code>. <code>add</code> returns <code>6</code>, which is the value of <code>value</code>.</p></details><hr><h3 id="139-What’s-the-output"><a href="#139-What’s-the-output" class="headerlink" title="139. What’s the output?"></a>139. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>  #number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>#number<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#number<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>#number<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields">类私有域</a> 私有属性和方法应该以 <code>#</code> 开头。它们只在类的内部可被访问。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>In ES2020, we can add private variables in classes by using the <code>#</code>. We cannot access these variables outside of the class. When we try to log <code>counter.#number</code>, a SyntaxError gets thrown: we cannot acccess it outside the <code>Counter</code> class!</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="140-What’s-missing"><a href="#140-What’s-missing" class="headerlink" title="140. What’s missing?"></a>140. What’s missing?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> teams <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Team 1'</span><span class="token punctuation">,</span> members<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token string">'Lisa'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Team 2'</span><span class="token punctuation">,</span> members<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Laura'</span><span class="token punctuation">,</span> <span class="token string">'Tim'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">getMembers</span><span class="token punctuation">(</span><span class="token parameter">members</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> members<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> members<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">getTeams</span><span class="token punctuation">(</span><span class="token parameter">teams</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> teams<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ✨ SOMETHING IS MISSING HERE ✨</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">getTeams</span><span class="token punctuation">(</span>teams<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: "Paul", done: false &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: "Lisa", done: false &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>yield getMembers(teams[i].members)</code></li><li>B: <code>yield* getMembers(teams[i].members)</code></li><li>C: <code>return getMembers(teams[i].members)</code></li><li>D: <code>return yield getMembers(teams[i].members)</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield">yield</a> 暂停和恢复 generator 函数。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*">yield*</a> 用于委托给另一个 generator 或可迭代对象。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next">Generator.prototype.next()</a> 方法返回一个包含属性 done 和 value 的对象。该方法也可以通过接受一个参数用以向生成器传值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>In order to iterate over the <code>members</code> in each element in the <code>teams</code> array, we need to pass <code>teams[i].members</code> to the <code>getMembers</code> generator function. The generator function returns a generator object. In order to iterate over each element in this generator object, we need to use <code>yield*</code>.</p><p>If we would’ve written <code>yield</code>, <code>return yield</code>, or <code>return</code>, the entire generator function would’ve gotten returned the first time we called the <code>next</code> method.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token function">getMembers</span><span class="token punctuation">(</span>teams<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;value: &#123; name: 'Team 1', members: [ 'Paul', 'Lisa'] &#125;, done: false &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;value: &#123; name: 'Team 2', members: [ 'Laura', 'Tim'] &#125;, done: false &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: undefined, done: true &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="141-What’s-the-output"><a href="#141-What’s-the-output" class="headerlink" title="141. What’s the output?"></a>141. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">,</span>  hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'coding'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addHobby</span><span class="token punctuation">(</span><span class="token parameter">hobby<span class="token punctuation">,</span> hobbies <span class="token operator">=</span> person<span class="token punctuation">.</span>hobbies</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> hobbies<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">addHobby</span><span class="token punctuation">(</span><span class="token string">'running'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addHobby</span><span class="token punctuation">(</span><span class="token string">'dancing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addHobby</span><span class="token punctuation">(</span><span class="token string">'baking'</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&quot;coding&quot;]</code></li><li>B: <code>[&quot;coding&quot;, &quot;dancing&quot;]</code></li><li>C: <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li><li>D: <code>[&quot;coding&quot;, &quot;running&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li></ul><details><summary><b>解析</b></summary><p>Answer: C</p><p>The <code>addHobby</code> function receives two arguments, <code>hobby</code> and <code>hobbies</code> with the default value of the <code>hobbies</code> array on the <code>person</code> object.</p><p>First, we invoke the <code>addHobby</code> function, and pass <code>&quot;running&quot;</code> as the value for <code>hobby</code> and an empty array as the value for <code>hobbies</code>. Since we pass an empty array as the value for <code>y</code>, <code>&quot;running&quot;</code> gets added to this empty array.</p><p>Then, we invoke the <code>addHobby</code> function, and pass <code>&quot;dancing&quot;</code> as the value for <code>hobby</code>. We didn’t pass a value for <code>hobbies</code>, so it gets the default value, the <code>hobbies</code> property on the <code>person</code> object. We push the hobby <code>dancing</code> to the <code>person.hobbies</code> array.</p><p>Last, we invoke the <code>addHobby</code> function, and pass <code>&quot;baking&quot;</code> as the value for <code>hobby</code>, and the <code>person.hobbies</code> array as the value for <code>hobbies</code>. We push the hobby <code>baking</code> to the <code>person.hobbies</code> array.</p><p>After pushing <code>dancing</code> and <code>baking</code>, the value of <code>person.hobbies</code> is <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></p></details><hr><h3 id="142-What’s-the-output"><a href="#142-What’s-the-output" class="headerlink" title="142. What’s the output?"></a>142. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm a bird. 🦢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Flamingo</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm pink. 🌸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flamingo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>I&#39;m pink. 🌸</code></li><li>B: <code>I&#39;m pink. 🌸</code> <code>I&#39;m a bird. 🦢</code></li><li>C: <code>I&#39;m a bird. 🦢</code> <code>I&#39;m pink. 🌸</code></li><li>D: Nothing, we didn’t call any method</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super">super</a> 关键字用于访问和调用一个对象的父对象上的函数。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>We create the variable <code>pet</code> which is an instance of the <code>Flamingo</code> class. When we instantiate this instance, the <code>constructor</code> on <code>Flamingo</code> gets called. First, <code>&quot;I&#39;m pink. 🌸&quot;</code> gets logged, after which we call <code>super()</code>. <code>super()</code> calls the constructor of the parent class, <code>Bird</code>. The constructor in <code>Bird</code> gets called, and logs <code>&quot;I&#39;m a bird. 🦢&quot;</code>.</p></details><hr><h3 id="143-Which-of-the-options-result-s-in-an-error"><a href="#143-Which-of-the-options-result-s-in-an-error" class="headerlink" title="143. Which of the options result(s) in an error?"></a>143. Which of the options result(s) in an error?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> emojis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🎄'</span><span class="token punctuation">,</span> <span class="token string">'🎅🏼'</span><span class="token punctuation">,</span> <span class="token string">'🎁'</span><span class="token punctuation">,</span> <span class="token string">'⭐'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 1 */</span> emojis<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'🦌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 2 */</span> emojis<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 3 */</span> emojis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>emojis<span class="token punctuation">,</span> <span class="token string">'🥂'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 4 */</span> emojis<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: 1</li><li>B: 1 and 2</li><li>C: 3 and 4</li><li>D: 3</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const">const</a> 语句定义的值不能通过重新赋值来改变，并且不能重新声明。否则报错：<code>TypeError: Assignment to constant variable.</code></p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>The <code>const</code> keyword simply means we cannot <em>redeclare</em> the value of that variable, it’s <em>read-only</em>. However, the value itself isn’t immutable. The properties on the <code>emojis</code> array can be modified, for example by pushing new values, splicing them, or setting the length of the array to 0.</p></details><hr><h3 id="144-What-do-we-need-to-add-to-the-person-object-to-get-quot-Lydia-Hallie-quot-21-as-the-output-of-person"><a href="#144-What-do-we-need-to-add-to-the-person-object-to-get-quot-Lydia-Hallie-quot-21-as-the-output-of-person" class="headerlink" title="144. What do we need to add to the person object to get [&quot;Lydia Hallie&quot;, 21] as the output of [...person]?"></a>144. What do we need to add to the <code>person</code> object to get <code>[&quot;Lydia Hallie&quot;, 21]</code> as the output of <code>[...person]</code>?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>person<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ["Lydia Hallie", 21]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>A: 不需要，对象默认就是可迭代的</p></li><li><p>B: <code>person[Symbol.iterator] = function* () &#123; yield Object.keys(this);&#125;;</code></p></li><li><p>C: <code>person[Symbol.iterator] = function* () &#123; yield Object.values(this);&#125;;</code></p></li><li><p>D: <code>person[Symbol.iterator] = function* () &#123; yield Object.entries(this);&#125;;</code></p></li><li><p><del>A: Nothing, object are iterable by default</del></p></li><li><p><del>B: <code>*[Symbol.iterator]() &#123; for (let x in this) yield* this[x] &#125;</code></del></p></li><li><p><del>C: <code>*[Symbol.iterator]() &#123; yield* Object.values(this) &#125;</code></del></p></li><li><p><del>D: <code>*[Symbol.iterator]() &#123; for (let x in this) yield this &#125;</code></del></p></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1">自定义可迭代对象</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values()</a> 方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用 for…in 循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 ).</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>Objects aren’t iterable by default. An iterable is an iterable if the iterator protocol is present. We can add this manually by adding the iterator symbol <code>[Symbol.iterator]</code>, which has to return a generator object, for example by making it a generator function <code>*[Symbol.iterator]() &#123;&#125;</code>. This generator function has to yield the <code>Object.values</code> of the <code>person</code> object if we want it to return the array <code>[&quot;Lydia Hallie&quot;, 21]</code>: <code>yield* Object.values(this)</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Lydia Hallie'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>person<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>person<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["Lydia Hallie", 21]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =>  ["Lydia Hallie", 21]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="145-What’s-the-output"><a href="#145-What’s-the-output" class="headerlink" title="145. What’s the output?"></a>145. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">Array.prototype.forEach()</a> 方法对数组的每个元素执行一次给定的函数。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The <code>if</code> condition within the <code>forEach</code> loop checks whether the value of <code>num</code> is truthy or falsy. Since the first number in the <code>nums</code> array is <code>0</code>, a falsy value, the <code>if</code> statement’s code block won’t be executed. <code>count</code> only gets incremented for the other 3 numbers in the <code>nums</code> array, <code>1</code>, <code>2</code> and <code>3</code>. Since <code>count</code> gets incremented by <code>1</code> 3 times, the value of <code>count</code> is <code>3</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 检测数组中有多少个真值</span>nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>num <span class="token operator">?</span> <span class="token operator">++</span>count <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更简便的写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><hr><h3 id="146-What’s-the-output"><a href="#146-What’s-the-output" class="headerlink" title="146. What’s the output?"></a>146. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token parameter">fruits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'🍊'</span><span class="token punctuation">,</span> <span class="token string">'🍌'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'🍍'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'🍍'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'🍊'</span><span class="token punctuation">,</span> <span class="token string">'🍌'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>null</code>, <code>undefined</code>, 🍌</li><li>B: <code>[]</code>, <code>null</code>, 🍌</li><li>C: <code>[]</code>, <code>[]</code>, 🍌</li><li>D: <code>undefined</code>, <code>undefined</code>, 🍌</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE">可选链操作符</a> ( ?. ) 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为空 (nullish ) (null 或者 undefined) 的情况下不会引起错误，该表达式短路返回值是 undefined. 与函数调用一起使用时，如果给定的函数不存在，则返回 undefined.</p><p><a href="https://zh.javascript.info/optional-chaining">可选链 “?.”</a></p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>The <code>?</code> allows us to optionally access deeper nested properties within objects. We’re trying to log the item on index <code>1</code> within the subarray that’s on index <code>1</code> of the <code>fruits</code> array. If the subarray on index <code>1</code> in the <code>fruits</code> array doesn’t exist, it’ll simply return <code>undefined</code>. If the subarray on index <code>1</code> in the <code>fruits</code> array exists, but this subarray doesn’t have an item on its <code>1</code> index, it’ll also return <code>undefined</code>.</p><p>First, we’re trying to log the second item in the <code>[&#39;🍍&#39;]</code> subarray of <code>[[&#39;🍊&#39;,&#39;🍌&#39;], [&#39;🍍&#39;]]]</code>. This subarray only contains one item, which means there is no item on index <code>1</code>, and returns <code>undefined</code>.</p><p>Then, we’re invoking the <code>getFruits</code> function without passing a value as an argument, which means that <code>fruits</code> has a value of <code>undefined</code> by default. Since we’re conditionally chaining the item on index <code>1</code> of<code>fruits</code>, it returns <code>undefined</code> since this item on index <code>1</code> does not exist.</p><p>Lastly, we’re trying to log the second item in the <code>[&#39;🍊&#39;,&#39;🍌&#39;]</code> subarray of <code>[&#39;🍍&#39;], [&#39;🍊&#39;,&#39;🍌&#39;]</code>. The item on index <code>1</code> within this subarray is <code>🍌</code>, which gets logged.</p><blockquote><p><code>getFruit</code> 获取传入的数组中第二项元素中第二项的值。</p></blockquote></details><hr><h3 id="147-What’s-the-output"><a href="#147-What’s-the-output" class="headerlink" title="147. What’s the output?"></a>147. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>解析</b></summary><p>Answer: A</p><p>We set the variable <code>calc</code> equal to a new instance of the <code>Calc</code> class. Then, we instantiate a new instance of <code>Calc</code>, and invoke the <code>increase</code> method on this instance. Since the count property is within the constructor of the <code>Calc</code> class, the count property is not shared on the prototype of <code>Calc</code>. This means that the value of count has not been updated for the instance calc points to, count is still <code>0</code>.</p><blockquote><p><code>new</code> 了两次意味着产生了两个实例，这两个实例的 <code>count</code> 属性相互独立，互不影响。</p></blockquote></details><hr><h3 id="148-What’s-the-output"><a href="#148-What’s-the-output" class="headerlink" title="148. What’s the output?"></a>148. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  email<span class="token operator">:</span> <span class="token string">'e@mail.com'</span><span class="token punctuation">,</span>  password<span class="token operator">:</span> <span class="token string">'12345'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">updateUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> email <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    user<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> updatedUser <span class="token operator">=</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> email<span class="token operator">:</span> <span class="token string">'new@email.com'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedUser <span class="token operator">===</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>false</code></li><li>B: <code>true</code></li><li>C: <code>TypeError</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>The <code>updateUser</code> function updates the values of the <code>email</code> and <code>password</code> properties on user, if their values are passed to the function, after which the function returns the <code>user</code> object. The returned value of the <code>updateUser</code> function is the <code>user</code> object, which means that the value of updatedUser is a reference to the same <code>user</code> object that <code>user</code> points to. <code>updatedUser === user</code> equals <code>true</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">updateUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> email <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    user<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> user<span class="token punctuation">;</span> <span class="token comment">// 意味着不管之前的操作如何，该函数的返回值为 user.updateUser = user</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; email: 'new@email.com', password: '12345' &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; email: 'new@email.com', password: '12345' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="149-What’s-the-output"><a href="#149-What’s-the-output" class="headerlink" title="149. What’s the output?"></a>149. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🍌'</span><span class="token punctuation">,</span> <span class="token string">'🍊'</span><span class="token punctuation">,</span> <span class="token string">'🍎'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruit<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fruit<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fruit<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'🍇'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[&#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>B: <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>C: <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>D: <code>[&#39;🍇&#39;, &#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift() </a> 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度 (** 该方法修改原有数组 **).</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>First, we invoke the <code>slice</code> method on the fruit array. The slice method does not modify the original array, but returns the value that it sliced off the array: the banana emoji.<br>Then, we invoke the <code>splice</code> method on the fruit array. The splice method does modify the original array, which means that the fruit array now consists of <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code>.<br>At last, we invoke the <code>unshift</code> method on the <code>fruit</code> array, which modifies the original array by adding the provided value, ‘🍇’ in this case, as the first element in the array. The fruit array now consists of <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'🍌'</span><span class="token punctuation">,</span> <span class="token string">'🍊'</span><span class="token punctuation">,</span> <span class="token string">'🍎'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruit<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ '🍌', '🍊', '🍎' ]</span>fruit<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ '🍊', '🍎' ]</span>fruit<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'🍇'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ '🍇', '🍊', '🍎' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="150-What’s-the-output"><a href="#150-What’s-the-output" class="headerlink" title="150. What’s the output?"></a>150. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">&#123;</span> emoji<span class="token operator">:</span> <span class="token string">'🐶'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token punctuation">&#123;</span> emoji<span class="token operator">:</span> <span class="token string">'🐈'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>animals<span class="token punctuation">[</span>dog<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>dog<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Mara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>animals<span class="token punctuation">[</span>cat<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>cat<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">[</span>dog<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">[</span>dog<span class="token punctuation">]</span> <span class="token operator">===</span> animals<span class="token punctuation">[</span>cat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;emoji: &quot;🐶&quot;, name: &quot;Mara&quot;&#125;</code></li><li>B: <code>&#123;emoji: &quot;🐈&quot;, name: &quot;Sara&quot;&#125;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p>对象键将转换为字符串。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: B</p><p>Object keys are converted to strings.</p><p>Since the value of <code>dog</code> is an object, <code>animals[dog]</code> actually means that we’re creating a new property called <code>&quot;object Object&quot;</code> equal to the new object. <code>animals[&quot;object Object&quot;]</code> is now equal to <code>&#123; emoji:&quot;🐶&quot;, name:&quot;Mara&quot;&#125;</code>.</p><p><code>cat</code> is also an object, which means that <code>animals[cat]</code> actually means that we’re overwriting the value of <code>animals[``&quot;``object Object``&quot;``]</code> with the new cat properties.</p><p>Logging <code>animals[dog]</code>, or actually <code>animals[&quot;object Object&quot;]</code> since converting the <code>dog</code> object to a string results <code>&quot;object Object&quot;</code>, returns the <code>&#123; emoji: &quot;🐈&quot;, name: &quot;Sara&quot; &#125;</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">[</span>dog<span class="token punctuation">]</span> <span class="token operator">===</span> animals<span class="token punctuation">[</span>cat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><hr><h3 id="151-What’s-the-output"><a href="#151-What’s-the-output" class="headerlink" title="151. What’s the output?"></a>151. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  email<span class="token operator">:</span> <span class="token string">'my@email.com'</span><span class="token punctuation">,</span>  <span class="token function-variable function">updateEmail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">updateEmail</span><span class="token punctuation">(</span><span class="token string">'new@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>my@email.com</code></li><li>B: <code>new@email.com</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a> 表达式的语法比函数表达式更简洁，并且没有自己的 this,arguments,super 或 new.target. 更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: A</p><p>The <code>updateEmail</code> function is an arrow function, and is not bound to the <code>user</code> object. This means that the <code>this</code> keyword is not referring to the <code>user</code> object, but refers to the global scope in this case. The value of <code>email</code> within the <code>user</code> object does not get updated. When logging the value of <code>user.email</code>, the original value of <code>my@email.com</code> gets returned.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  email<span class="token operator">:</span> <span class="token string">'my@email.com'</span><span class="token punctuation">,</span>  <span class="token function-variable function">updateEmail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span> <span class="token comment">// this = user</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">updateEmail</span><span class="token punctuation">(</span><span class="token string">'new@email.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output:'new@email.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="152-What’s-the-output"><a href="#152-What’s-the-output" class="headerlink" title="152. What’s the output?"></a>152. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Third'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise4 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Fourth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">runPromises</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise3<span class="token punctuation">,</span> promise4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">runPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Fourth&#39;]]</code></li><li>B: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Third&#39;, &#39;Fourth&#39;]]</code></li><li>C: <code>[[&#39;First&#39;, &#39;Second&#39;]]</code></li><li>D: <code>&#39;Third&#39;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">Promise.resolve()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject">Promise.reject()</a> 方法返回一个带有拒绝原因的 Promise 对象。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">Promise.all()</a> 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都 “完成 (resolved)” 或参数中不包含 promise 时回调完成 (resolve); 如果参数中 promise 有一个失败 (rejected), 此实例回调失败 (reject), 失败的原因是第一个失败 promise 的结果。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: D</p><p>The <code>Promise.all</code> method runs the passed promises in parallel. If one promise fails, the <code>Promise.all</code> method <em>rejects</em> with the value of the rejected promise. In this case, <code>promise3</code> rejected with the value <code>&quot;Third&quot;</code>. We’re catching the rejected value in the chained <code>catch</code> method on the <code>runPromises</code> invocation to catch any errors within the <code>runPromises</code> function. Only <code>&quot;Third&quot;</code> gets logged, since <code>promise3</code> rejected with this value.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">runPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 如果没有 promise 被拒绝，按顺序输出 Promise.all 参数中所有 promise 的参数</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 如果有 promise 被拒绝，输出 Promise.all 参数中第一个被拒绝 promise 的参数</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="153-What-should-the-value-of-method-be-to-log-name-quot-Lydia-quot-age-22"><a href="#153-What-should-the-value-of-method-be-to-log-name-quot-Lydia-quot-age-22" class="headerlink" title="153. What should the value of method be to log {name: &quot;Lydia&quot;, age: 22}?"></a>153. What should the value of <code>method</code> be to log <code>&#123;name: &quot;Lydia&quot;, age: 22&#125;</code>?</h3><pre class="line-numbers language-none"><code class="language-none">const keys &#x3D; [&quot;name&quot;, &quot;age&quot;]const values &#x3D; [&quot;Lydia&quot;, 22]const method &#x3D; &#x2F;* ?? *&#x2F;Object[method](keys.map((_, i) &#x3D;&gt; &#123;return [keys[i], values[i]]&#125;)) &#x2F;&#x2F; &#123;name: &quot;Lydia&quot;, age: 22&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>entries</code></li><li>B: <code>values</code></li><li>C: <code>fromEntries</code></li><li>D: <code>forEach</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries()</a> 方法返回一个给定对象自身可枚举属性的键值对数组</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values()</a> 方法返回一个给定对象自身的所有可枚举属性值的数组</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries">Object.fromEntries()</a> 方法把键值对列表转换为一个对象</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The <code>fromEntries</code> method turns a 2d array into an object. The first element in each subarray will be the key, and the second element in each subarray will be the value. In this case, we’re mapping over the <code>keys</code> array, which returns an array which first element is the item on the key array on the current index, and the second element is the item of the values array on the current index.</p><p>This creates an array of subarrays containing the correct keys and values, which results in <code>&#123;name: &quot;Lydia&quot;, age: 22&#125;</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Lydia'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>  keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: "Lydia", age: 22 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="154-What’s-the-output"><a href="#154-What’s-the-output" class="headerlink" title="154 What’s the output?"></a>154 What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createMember</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> address <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> validEmail <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.+\@.+\..+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validEmail<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Valid email pls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    email<span class="token punctuation">,</span>    address<span class="token operator">:</span> address <span class="token operator">?</span> address <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">createMember</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> email<span class="token operator">:</span> <span class="token string">'my@email.com'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>&#123;email: &quot;my@email.com&quot;, address: null&#125;</code></li><li>B: <code>&#123;email: &quot;my@email.com&quot;&#125;</code></li><li>C: <code>&#123;email: &quot;my@email.com&quot;, address: &#123;&#125; &#125;</code></li><li>D: <code>&#123;email: &quot;my@email.com&quot;, address: undefined&#125;</code></li></ul><blockquote><p><code>&#123;&#125;</code> 是真值。</p></blockquote><details><summary><b>解析</b></summary><p>Answer: C</p><p>The default value of <code>address</code> is an empty object <code>&#123;&#125;</code>. When we set the variable <code>member</code> equal to the object returned by the <code>createMember</code> function, we didn’t pass a value for address, which means that the value of address is the default empty object <code>&#123;&#125;</code>. An empty object is a truthy value, which means that the condition of the <code>address ? address : null</code> conditional returns <code>true</code>. The value of address is the empty object <code>&#123;&#125;</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createMember</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> address <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> validEmail <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.+\@.+\..+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validEmail<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Valid email pls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    email<span class="token punctuation">,</span>    address<span class="token operator">:</span> address <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 更简洁的写法</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">createMember</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> email<span class="token operator">:</span> <span class="token string">'my@email.com'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="155-What’s-the-output"><a href="#155-What’s-the-output" class="headerlink" title="155. What’s the output?"></a>155. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> randomValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>randomValue <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">typeof</span> randomValue <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's not a string!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Yay it's a string!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>It&#39;s not a string!</code></li><li>B: <code>Yay it&#39;s a string!</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>解析</b></summary><p>Answer: B</p><p>The condition within the <code>if</code> statement checks whether the value of <code>!typeof randomValue</code> is equal to <code>&quot;string&quot;</code>. The <code>!</code> operator converts the value to a boolean value. If the value is truthy, the returned value will be <code>false</code>, if the value is falsy, the returned value will be <code>true</code>. In this case, the returned value of <code>typeof randomValue</code> is the truthy value <code>&quot;number&quot;</code>, meaning that the value of <code>!typeof randomValue</code> is the boolean value <code>false</code>.</p><p><code>!typeof randomValue === &quot;string&quot;</code> always returns false, since we’re actually checking <code>false ===&quot;string&quot;</code>. Since the condition returned <code>false</code>, the code block of the <code>else</code> statement gets run, and <code>Yay it&#39;s a string!</code> gets logged.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> randomValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lydia'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>randomValue <span class="token operator">=</span> <span class="token string">'23'</span><span class="token punctuation">;</span><span class="token comment">// 检测 randomValue 是否为字符串  下面这种方式较好：</span><span class="token keyword">typeof</span> randomValue <span class="token operator">===</span> <span class="token string">'string'</span>  <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Yay it's a string!"</span><span class="token punctuation">)</span>  <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's not a string!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details>]]></content>
      
      
      <categories>
          
          <category> Front-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centering in CSS - A Complete Guide</title>
      <link href="centering-css-complete-guide/"/>
      <url>centering-css-complete-guide/</url>
      
        <content type="html"><![CDATA[<script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://css-tricks.com/centering-css-complete-guide/">Centering in CSS:A Complete Guide | CSS-Tricks</a></p></blockquote><p>Centering things in CSS is the poster child of CSS complaining. <em>Why does it have to be so hard?</em> They jeer. I think the issue isn’t that it’s difficult to do, but in that there so many different ways of doing it, depending on the situation, it’s hard to know which to reach for.</p><p>So let’s make it a decision tree and hopefully make it easier.</p><p>I need to center…</p><h2 id="Horizontally"><a href="#Horizontally" class="headerlink" title="Horizontally"></a>Horizontally</h2><p>You can center inline elements horizontally, within a block-level parent element, with just:</p><h3 id="inline-text-align-center"><a href="#inline-text-align-center" class="headerlink" title="inline-* + text-align:center;"></a><code>inline-*</code> + <code>text-align:center;</code></h3><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWKOgWj"  data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div>  &lt;p>“要让群众讲话，哪怕是骂自己的话”  &lt;/p>&lt;div></pre>  <pre data-lang="css">body {  background:#f06d06;}div {  text-align:center;  background:white;}</pre></div><p>This will work for inline, inline-block, inline-table, inline-flex, etc.</p><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> CSS property sets the horizontal alignment of a block element or table-cell box. This means it works like vertical-align but in the horizontal direction.</p><p><code>text-align:center;</code> The inline contents are centered within the line box.</p><p>父元素设置为 <code>text-align:center;</code> 会使父元素内的文本和行内元素水平居中，但是对块级元素无效。</p><p>缺点：为了水平居中元素，使文本也水平居中了，因此可能需要重置文本的 <code>text-align</code>.</p><p>优点：不需要固定居中元素的宽。</p><h3 id="margin-auto"><a href="#margin-auto" class="headerlink" title="margin:auto"></a><code>margin:auto</code></h3><p>You can center a block-level element by giving it <code>margin-left</code> and <code>margin-right</code> of <code>auto</code> (and it has a set <code>width</code>, otherwise it would be full width and wouldn’t need centering). That’s often done with shorthand like this:</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWKOgWj" data-preview="true" data-editable="true" data-prefill='{"title":"@","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="center">“要让群众讲话，哪怕是骂自己的话”1962 年 1 月 30 日，毛泽东在人民大会堂主持扩大的中央工作会议全体会议，并作长篇讲话。中心是讲民主集中制问题，突出强调在党内外发扬民主的重要性。他说：“要真正把问题敞开，让群众讲话，哪怕是骂自己的话，也要让人家讲。骂的结果，无非是自己倒台，不能做这项工作了，降到下级机关去做工作，或者调到别的地方去做工作。现在有些同志，很怕群众开展讨论，怕他们提出同领导机关、领导者不同的意见。一讨论问题，就压抑群众的积极性，不许人家讲话。”(《毛泽东年谱》第五卷 77 页&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  padding:10px;}.center {  margin:0 auto;  width:300px;  background:black;  color:white;}</pre></div><p>This will work no matter what the width of the block level element you’re centering, or the parent.</p><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin"><code>margin</code></a> CSS property sets the margin area on all four sides of an element.</p><p>元素被设置成块级后，会独占一行，如果其宽度没有占满横向空间，此时将该元素本身设置 <code>margin:auto;</code> 那么剩余的空间就分配给 <code>margin</code>, 并且左右均分，所以就实现了水平居中。</p><p>Note that you can’t <code>float</code> an element to the center. There is a trick though.(<a href="https://css-tricks.com/float-center/">https://css-tricks.com/float-center/</a>)</p><h3 id="display-flex-flex-direction-column-align-items-center"><a href="#display-flex-flex-direction-column-align-items-center" class="headerlink" title="display:flex; + flex-direction:column; + align-items:center;"></a><code>display:flex;</code> + <code>flex-direction:column;</code> + <code>align-items:center;</code></h3><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">CSS Flexible Box Layout</a> 实现水平居中的原理是父元素 <code>display:flex;</code> + <code>flex-direction:column;</code> + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"><code>align-items</code></a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:flex;  flex-direction:column;  align-items:center;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;}</pre></div><h3 id="display-flex-flex-direction-column-align-self-center"><a href="#display-flex-flex-direction-column-align-self-center" class="headerlink" title="display:flex; + flex-direction:column; + align-self:center;"></a><code>display:flex;</code> + <code>flex-direction:column;</code> + <code>align-self:center;</code></h3><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">CSS Flexible Box Layout</a> 实现水平居中的原理是父元素 <code>display:flex;</code> + <code>flex-direction:column;</code>而子元素 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"><code>align-self</code></a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editaxble="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:flex;  flex-direction:column;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;  align-self:center;}</pre></div><!-- ### ❌`display:flex;` + `flex-direction:column;` + `align-content:center;`通过 [CSS Flexible Box Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout) 实现水平居中的原理是父元素 `display:flex;` + `flex-direction:column;` + [`align-content`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content):center;（此属性对单行 flex 容器（即带有 的容器 flex-wrap:nowrap）没有影响。)<div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stxk0ylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:flex;  flex-direction:column;  align-content:center;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;}</pre></div> --><h3 id="display-flex-justify-content-center"><a href="#display-flex-justify-content-center" class="headerlink" title="display:flex; + justify-content:center;"></a><code>display:flex;</code> + <code>justify-content:center;</code></h3><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">CSS Flexible Box Layout</a> 实现水平居中的原理是父元素 <code>display:flex;</code> + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content">justify-content</a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:flex;  justify-content:center;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;}</pre></div><h3 id="display-grid-justify-content-center"><a href="#display-grid-justify-content-center" class="headerlink" title="display:grid; + justify-content:center;"></a><code>display:grid;</code> + <code>justify-content:center;</code></h3><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">CSS Grid Layout</a> 实现水平居中的原理是父元素 <code>display:grid;</code> + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content">justify-content</a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:grid;  justify-content:center;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;}</pre></div><h3 id="display-grid-justify-items-center"><a href="#display-grid-justify-items-center" class="headerlink" title="display:grid; + justify-items:center;"></a><code>display:grid;</code> + <code>justify-items:center;</code></h3><p>通过 CSS Grid Layout 实现水平居中的原理是父元素 <code>display:grid;</code> + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items">justify-items</a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:grid;  justify-items:center;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;}</pre></div><h3 id="display-grid-justify-self-center"><a href="#display-grid-justify-self-center" class="headerlink" title="display:grid; + justify-self:center;"></a><code>display:grid;</code> + <code>justify-self:center;</code></h3><p>通过 CSS Grid Layout 实现水平居中的原理是父元素 <code>display:grid;</code> 子元素 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self">justify-self</a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="rNjBxOZ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">你们习惯把人群分成罪犯和非罪犯，就是所谓的好人和坏人，并且由此延伸出一些高尚啊、卑微之类的概念，但是我要告诉你，其实一切都是机会而已，穷乡僻壤的犯罪率低，不意味着那儿的人就高尚，因为他们没有选择，没有选择就不会有痛苦。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  margin:10px 0;  padding:10px;  display:grid;}.children {  background:black;  color:white;  padding:10px;  width:300px;  margin:10px;  justify-self:center;}</pre></div><h3 id="display-table-cell-margin-left"><a href="#display-table-cell-margin-left" class="headerlink" title="display:table-cell + margin-left"></a><code>display:table-cell</code> + <code>margin-left</code></h3><p>对于父元素和子元素的宽度都确定的情况，父元素 <code>display:table-cell</code>，子元素给剩余宽度一半的 <code>margin-left</code> 实现 CSS 水平居中。</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWKOgWj" data-preview="true" data-editable="true" data-prefill='{"title":"@","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">“要让群众讲话，哪怕是骂自己的话”1962 年 1 月 30 日，毛泽东在人民大会堂主持扩大的中央工作会议全体会议，并作长篇讲话。中心是讲民主集中制问题，突出强调在党内外发扬民主的重要性。他说：“要真正把问题敞开，让群众讲话，哪怕是骂自己的话，也要让人家讲。骂的结果，无非是自己倒台，不能做这项工作了，降到下级机关去做工作，或者调到别的地方去做工作。现在有些同志，很怕群众开展讨论，怕他们提出同领导机关、领导者不同的意见。一讨论问题，就压抑群众的积极性，不许人家讲话。”(《毛泽东年谱》第五卷 77 页&lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  padding:10px 0;  display:table-cell;  width:600px;}.children {  padding:10px 0;  margin-left:150px;  width:300px;  background:#abcdef;}</pre></div><h3 id="position-absolute-margin-left"><a href="#position-absolute-margin-left" class="headerlink" title="position:absolute + margin-left"></a><code>position:absolute</code> + <code>margin-left</code></h3><p>适用于父元素和子元素的宽度都确定的情况。</p><p>父元素 <code>position:absolute</code>，子元素给剩余宽度一半的 <code>margin-left</code>。</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWKOgWj" data-preview="true" data-editable="true" data-prefill='{"title":"@","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">“要让群众讲话，哪怕是骂自己的话”1962 年 1 月 30 日，毛泽东在人民大会堂主持扩大的中央工作会议全体会议，并作长篇讲话。中心是讲民主集中制问题，突出强调在党内外发扬民主的重要性。他说：“要真正把问题敞开，让群众讲话，哪怕是骂自己的话，也要让人家讲。骂的结果，无非是自己倒台，不能做这项工作了，降到下级机关去做工作，或者调到别的地方去做工作。现在有些同志，很怕群众开展讨论，怕他们提出同领导机关、领导者不同的意见。一讨论问题，就压抑群众的积极性，不许人家讲话。”(《毛泽东年谱》第五卷 77 页  &lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  padding:10px 0;  display:absolute;  width:600px;}.children {  padding:10px 0;  margin-left:150px;  width:300px;  background:#abcdef;}</pre></div><h3 id="width-fit-content"><a href="#width-fit-content" class="headerlink" title="width:fit-content"></a><code>width:fit-content</code></h3><p>子元素宽度不确定的情况下，也能实现 CSS 水平居中。</p><p>需要注意的是，需要配合<code>margin:0 auto;</code> + <code>text-align:center;</code>使用。</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWKOgWj" data-preview="true" data-editable="true" data-prefill='{"title":"@","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">“要让群众讲话，哪怕是骂自己的话”  &lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  padding:10px 0;}.children {  padding:10px 0;  background:#abcdef;  width:fit-content;  margin:0 auto;  text-align:center;}</pre></div><h3 id="position-relative-float-left-margin-left"><a href="#position-relative-float-left-margin-left" class="headerlink" title="position:relative; +float:left; + margin-left"></a><code>position:relative;</code> +<code>float:left;</code> + <code>margin-left</code></h3><p>给父元素样式 <code>position:relative;</code>，给子元素 <code>float:left;</code> 和 <code>margin-left</code> 就可以实现 CSS 水平居中。</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWKOgWj" data-preview="true" data-editable="true" data-prefill='{"title":"@","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">“要让群众讲话，哪怕是骂自己的话”1962 年 1 月 30 日，毛泽东在人民大会堂主持扩大的中央工作会议全体会议，并作长篇讲话。中心是讲民主集中制问题，突出强调在党内外发扬民主的重要性。他说：“要真正把问题敞开，让群众讲话，哪怕是骂自己的话，也要让人家讲。骂的结果，无非是自己倒台，不能做这项工作了，降到下级机关去做工作，或者调到别的地方去做工作。现在有些同志，很怕群众开展讨论，怕他们提出同领导机关、领导者不同的意见。一讨论问题，就压抑群众的积极性，不许人家讲话。”(《毛泽东年谱》第五卷 77 页  &lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  padding:10px 0;  position:relative;  width:600px;  height:380px;}.children {  padding:10px 0;  background:#abcdef;  float:left;  width:300px;  margin-left:150px;}</pre></div><h3 id="position-absolute-left-50-transform-translateX-50"><a href="#position-absolute-left-50-transform-translateX-50" class="headerlink" title="position:absolute; + left:50%; + transform:translateX(-50%);"></a><code>position:absolute;</code> + <code>left:50%;</code> + <code>transform:translateX(-50%);</code></h3><p>未知宽度块状元素水平居中</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="lpema" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">这是一个多么可怕的世界啊！他们把人分成三六九等，最高层的人，能够充分享受物质和精神的供应，然后随着层次的递减，供应就开始减少了；最低层次的人，通常他们接受的物质能量只能勉强维持他们的生活，而精神供应几乎是零，本人曾经就活在这个层面里！&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  height:280px;  margin:20px 0;  padding:10px;}.children {  position:absolute;  left:50%;  background:black;  color:white;  padding:20px;  transform:translateX(-50%);}</pre></div><p>也适用多个未知高度块状元素水平居中</p><h2 id="Vertically"><a href="#Vertically" class="headerlink" title="Vertically"></a>Vertically</h2><p>Vertical centering is a bit trickier in CSS.</p><h3 id="上下-padding-相等"><a href="#上下-padding-相等" class="headerlink" title="上下 padding 相等"></a>上下 <code>padding</code> 相等</h3><p>Sometimes inline / text elements can appear vertically centered, just because there is <strong>equal padding above and below them</strong>.</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="ldcwq" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;p>但数年来，全国范围内，到三明学习医改的考察团已有千余批次，无论是堵浪费，还是阳光年薪制，均未见落实。&lt;/p>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">.parent {  background:#f06d06;  margin:20px 0;  padding:50px;}.parent p {  background:white;  padding:20px;  text-decoration:none;}</pre></div><p>If padding isn’t an option for some reason, and you’re trying to center some text that you know will not wrap, there is a trick were making <strong>the <code>line-height</code> equal to the height</strong> will <code>center</code> the text.</p><h3 id="height-和-line-height-相等-不换行文本素垂直居中"><a href="#height-和-line-height-相等-不换行文本素垂直居中" class="headerlink" title="height 和 line-height 相等 不换行文本素垂直居中"></a><code>height</code> 和 <code>line-height</code> 相等 不换行文本素垂直居中</h3><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="LxHmK" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div>但是三明医改经革如何更好地推进，或许是摆在各级政府面前的新问题。​​​​&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">.parent {  background:#f06d06;  margin:20px 0;  padding:40px;}.parent div {  background:white;  height:60px;  line-height:60px;  white-space:nowrap;}</pre></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space">white-space - CSS:Cascading Style Sheets | MDN</a></p><h3 id="display-flex-justify-content-center-flex-direction-column-垂直居中"><a href="#display-flex-justify-content-center-flex-direction-column-垂直居中" class="headerlink" title="display:flex; + justify-content:center; + flex-direction:column;垂直居中"></a><code>display:flex;</code> + <code>justify-content:center;</code> + <code>flex-direction:column;</code>垂直居中</h3><p>父容器设置 <code>display:flex;</code> + <code>justify-content:center;</code> + <code>flex-direction:column;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="uHygv" data-preview="true" data-editable="true"  data-prefill='{"title":"","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验。&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">.parent {  background:#f06d06;  display:flex;  justify-content:center;  flex-direction:column;}.children {  background:white;  margin:20px;  padding:20px;}</pre></div><h3 id="display-flex-align-items-center-垂直居中"><a href="#display-flex-align-items-center-垂直居中" class="headerlink" title="display:flex; + align-items:center; 垂直居中"></a><code>display:flex;</code> + <code>align-items:center;</code> 垂直居中</h3><p>父容器设置 <code>display:flex;</code> + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">align-items</a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="uHygv" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验。&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">.parent {  background:#f06d06;  display:flex;  align-items:center;}.children {  background:white;  margin:20px;  padding:20px;}</pre></div><h3 id="display-flex-align-self-center-垂直居中"><a href="#display-flex-align-self-center-垂直居中" class="headerlink" title="display:flex; + align-self:center; 垂直居中"></a><code>display:flex;</code> + <code>align-self:center;</code> 垂直居中</h3><p>父容器设置 <code>display:flex;</code> 子容器设置 <code>align-self:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="uHygv" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验。&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">.parent {  background:#f06d06;  display:flex;}.children {  background:white;  margin:20px;  padding:20px;  align-self:center;}</pre></div><p>Remember that it’s only really relevant if the parent container has a fixed height (px, %, etc), which is why the container here has a height.</p><h3 id="⊙▽⊙"><a href="#⊙▽⊙" class="headerlink" title="⊙▽⊙"></a>⊙▽⊙</h3><p>If both of these techniques are out, you could employ the “ghost element” technique, in which a full-height pseudo-element is placed inside the container and the text is vertically aligned with that.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ghost-center</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ghost-center::before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1%<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ghost-center p</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="ofwgD" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="ghost-center">  &lt;p>I'm vertically centered multiple lines of text in a container. Centered with a ghost pseudo element&lt;/p>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}div {  background:white;  height:250px;  margin:20px;  color:white;  padding:20px;}.ghost-center {  position:relative;}.ghost-center::before {  content:" ";  display:inline-block;  height:100%;  width:1%;  vertical-align:middle;}.ghost-center p {  display:inline-block;  vertical-align:middle;  width:190px;  margin:0;  padding:20px;  background:black;}</pre></div><h3 id="固定高度垂直居中"><a href="#固定高度垂直居中" class="headerlink" title="固定高度垂直居中"></a>固定高度垂直居中</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.children</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span> <span class="token comment">/* account for padding and border if not using box-sizing:border-box; */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="HiydJ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  height:300px;  margin:20px;  position:relative;}.children {  position:absolute;  top:50%;  height:100px;  margin-top:-70px;  background:black;  color:white;  padding:20px;}</pre></div><hr><h3 id="未知高度垂直居中"><a href="#未知高度垂直居中" class="headerlink" title="未知高度垂直居中"></a>未知高度垂直居中</h3><p>It’s still possible to center it by nudging it up half of it’s height after bumping it down halfway:</p><p>固定高度父容器设置 <code>position:relative;</code><br>子容器设置 <code>position:absolute;</code> + <code>top:50%;</code> + <code>transform:translateY(-50%);</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="lpema" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  height:300px;  margin:20px;  padding:20px;  position:relative;}.children {  position:absolute;  top:50%;   left:20px;  right:20px;  background:black;  color:white;  padding:20px;  transform:translateY(-50%);}</pre></div><h3 id="Do-you-care-if-the-element-stretches-the-height-of-the-container"><a href="#Do-you-care-if-the-element-stretches-the-height-of-the-container" class="headerlink" title="Do you care if the element stretches the height of the container?"></a>Do you care if the element stretches the height of the container?</h3><p>If you don’t, you just need the content inside vertically centered, using tables or CSS display to make elements into tables can do the trick.</p><p>父容器设置 <code>display:table;</code><br>子容器设置 <code>display:table-cell;</code> + <code>vertical-align:middle;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="RmeWvQ" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div>   I'm a block-level element with an unknown height, centered vertically within my parent.  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  margin:20px;  position:relative;  padding:20px;  display:table;}.parent div {  background:black;  color:white;  padding:20px;  display:table-cell;  vertical-align:middle;}</pre></div><h3 id="display-grid-align-items-center"><a href="#display-grid-align-items-center" class="headerlink" title="display:grid;+ align-items:center;"></a><code>display:grid;</code>+ <code>align-items:center;</code></h3><p>固定高度父容器设置 <code>display:grid;</code>+ <code>align-items:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="oNBvjKR" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验  &lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  height:300px;  margin:20px;  display:grid;  align-items:center;}.children {  background:black;  color:white;  padding:20px;  margin:20px;}</pre></div><h3 id="display-grid-align-content-center"><a href="#display-grid-align-content-center" class="headerlink" title="display:grid;+ align-content:center;"></a><code>display:grid;</code>+ <code>align-content:center;</code></h3><p>固定高度父容器设置 <code>display:grid;</code>+ <code>align-content:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="oNBvjKR" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验  &lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  height:300px;  margin:20px;  display:grid;  align-content:center;}.children {  background:black;  color:white;  padding:20px;  margin:20px;}</pre></div><h3 id="display-grid-align-self-center"><a href="#display-grid-align-self-center" class="headerlink" title="display:grid; + align-self:center;"></a><code>display:grid;</code> + <code>align-self:center;</code></h3><p>固定高度父容器设置 <code>display:grid;</code><br>子容器设置 <code>align-self:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="oNBvjKR" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">国家卫生健康委体改司司长许树强：总结三明医改的精髓，主要有以下几个方面：一是改革整体联动；二是完善医改经济政策；三是健全医院内部激励和约束机制；四是推动医疗资源下沉。三明医改从实际出发，大胆实践、勇于创新，打出了一套适合三明实际情况的医改组合拳，也为各地因地制宜推广积累了非常好的经验  &lt;/div>&lt;/div></pre>  <pre data-lang="css">.parent {  background:#f06d06;  height:300px;  margin:20px;  display:grid;}.children {  background:black;  color:white;  padding:20px;  margin:20px;  align-self:center;}</pre></div><h2 id="Both-Horizontally-and-Vertically"><a href="#Both-Horizontally-and-Vertically" class="headerlink" title="Both Horizontally and Vertically"></a>Both Horizontally and Vertically</h2><p>You can combine the techniques above in any fashion to get perfectly centered elements. But I find this generally falls into three camps:</p><h3 id="absolute-负-margin"><a href="#absolute-负-margin" class="headerlink" title="absolute + 负 margin"></a><code>absolute</code> + 负 <code>margin</code></h3><p>Using negative margins equal to half of that width and height, after you’ve absolutely positioned it at 50% / 50% will center it with great cross browser support:</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$height</span></span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token selector">.parent </span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.children </span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">$height</span>/-2 0 0 <span class="token variable">$width</span>/-2<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$height</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="JGofm" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">$width: 300px;$height: 200px;body {  background: #f06d06;}.parent {  background: white;  height: 400px;}.children {  background: black;  color: white;}.parent {  position: relative;}.children {  position: absolute;  top: 50%;  left: 50%;  margin: $height/-2 0 0 $width/-2;  width: $width;  height: $height;}</pre></div><h3 id="absolute-margin-auto"><a href="#absolute-margin-auto" class="headerlink" title="absolute + margin:auto;"></a><code>absolute</code> + <code>margin:auto;</code></h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.children</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="JGofm" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;}.parent {  position:relative;}.children {  position:absolute;  top:0;  right:0;  bottom:0;  left:0;  margin:auto;  width:300px;  height:200px;}</pre></div><p>该方案的原理是：使用了 CSS 中的定位属性 (<code>absolute</code>、<code>fixed</code> 等）后，如果 <code>left</code> 设置了具体值，没有设置 <code>right</code> 和 <code>width</code>, 那么就会自动计算，把剩余的空间分配给 <code>right</code> 和 <code>width</code>. 如果 <code>left</code>、<code>right</code> 和 <code>width</code> 都设置了具体值，并且没有占满横向空间，那么剩余空间就处于待分配状态，此时设置 <code>margin:auto;</code> 意味着把剩余的空间分配给 <code>margin</code>, 并且左右均分，所以就实现了水平居中，垂直方向同理。</p><blockquote><p>副作用：<code>left:0; right:0;</code> 相当于 <code>width:100%;</code> ; <code>top:0; bottom:0;</code> 相当于 <code>height:100%;</code></p><p>需要固定居中元素的宽高，否则其宽高会被设为 <code>100%</code>（副作用）.</p></blockquote><h3 id="absolute-calc"><a href="#absolute-calc" class="headerlink" title="absolute + calc"></a><code>absolute</code> + <code>calc</code></h3><blockquote><p>需要父元素及居中元素的固定宽高。</p></blockquote><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$height</span></span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token selector">.parent </span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.children </span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$height</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> #<span class="token punctuation">&#123;</span><span class="token variable">$width</span>/2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> #<span class="token punctuation">&#123;</span><span class="token variable">$height</span>/2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="JGofm" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;}.children {  background:black;  color:white;}$width: 300px;$height: 200px;.parent {  position: relative;  height: 400px;}.children {  position: absolute;  width: $width;  height: $height;  left: calc(50% - #{$width/2});  top: calc(50% - #{$height/2});}</pre></div><h3 id="absolute-transform-translate-50-50"><a href="#absolute-transform-translate-50-50" class="headerlink" title="absolute + transform:translate(-50%,-50%);"></a><code>absolute</code> + <code>transform:translate(-50%,-50%);</code></h3><p>If you don’t know the width or height, you can use the transform property and a negative translate of 50% in both directions (it is based on the current width/height of the element) to center:</p><blockquote><p>不需要父元素及居中元素的固定宽高。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.children</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="lgFiq" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:400px;}.parent {  position:relative;}.children {  position:absolute;  top:50%;  left:50%;  transform:translate(-50%,-50%);}</pre></div><h3 id="absolute-transform-translate3d-50-50-0"><a href="#absolute-transform-translate3d-50-50-0" class="headerlink" title="absolute + transform:translate3d(-50%,-50%,0);"></a><code>absolute</code> + <code>transform:translate3d(-50%,-50%,0);</code></h3><p>垂直水平居中未知高度宽度块状元素</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.children</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="lgFiq" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:400px;}.parent {  position:relative;}.children {  position: absolute;  top: 50%;  left: 50%;  transform: translate3d(-50%, -50%, 0);}</pre></div><h3 id="display-flex-justify-content-center-align-items-center"><a href="#display-flex-justify-content-center-align-items-center" class="headerlink" title="display:flex; + justify-content:center; + align-items:center;"></a><code>display:flex;</code> + <code>justify-content:center;</code> + <code>align-items:center;</code></h3><p>父容器设置 <code>display:flex;</code> + <code>justify-content:center;</code> + <code>align-items:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="msItD" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">  body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:400px;}.parent {  display:flex;  justify-content:center;  align-items:center;}</pre></div><h3 id="display-flex-justify-content-center-align-self-center"><a href="#display-flex-justify-content-center-align-self-center" class="headerlink" title="display:flex; + justify-content:center; + align-self:center;"></a><code>display:flex;</code> + <code>justify-content:center;</code> + <code>align-self:center;</code></h3><p>父容器设置 <code>display:flex;</code> + <code>justify-content:center;</code><br>子容器设置 <code>align-items:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="LXvqBe" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:400px;}.parent {  display:flex;  justify-content:center;  }.children {  align-self:center;}</pre></div><h3 id="display-flex-margin-auto"><a href="#display-flex-margin-auto" class="headerlink" title="display:flex; + margin:auto;"></a><code>display:flex;</code> + <code>margin:auto;</code></h3><p>父容器设置 <code>display:flex;</code><br>子容器设置 <code>margin:auto;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="LXvqBe" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:400px;}.parent {  display:flex;}.children {  margin:auto;}</pre></div><h3 id="display-grid-justify-content-center-align-items-center"><a href="#display-grid-justify-content-center-align-items-center" class="headerlink" title="display:grid; + justify-content:center; + align-items:center;"></a><code>display:grid;</code> + <code>justify-content:center;</code> + <code>align-items:center;</code></h3><p>父容器设置 <code>display:grid;</code> + <code>justify-content:center;</code> + <code>align-items:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="dQLaxj" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  width:400px;  background:black;  color:white;}.parent {  display:grid;  justify-content:center;  align-items:center;}</pre></div><h3 id="display-grid-justify-items-center-align-items-center"><a href="#display-grid-justify-items-center-align-items-center" class="headerlink" title="display:grid; + justify-items:center; + align-items:center;"></a><code>display:grid;</code> + <code>justify-items:center;</code> + <code>align-items:center;</code></h3><p>父容器设置 <code>display:grid;</code> + <code>justify-items:center;</code> + <code>align-items:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="dQLaxj" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  width:400px;  background:black;  color:white;}.parent {  display:grid;  justify-items:center;  align-items:center;}</pre></div><h3 id="display-grid-justify-content-center-align-content-center"><a href="#display-grid-justify-content-center-align-content-center" class="headerlink" title="display:grid; + justify-content:center; + align-content:center;"></a><code>display:grid;</code> + <code>justify-content:center;</code> + <code>align-content:center;</code></h3><p>父容器设置 <code>display:grid;</code> + <code>justify-content:center;</code> + <code>align-content:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="dQLaxj" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  width:400px;  background:black;  color:white;}.parent {  display:grid;  justify-content:center;  align-content:center;}</pre></div><h3 id="display-grid-place-content-center"><a href="#display-grid-place-content-center" class="headerlink" title="display:grid; + place-content:center;"></a><code>display:grid;</code> + <code>place-content:center;</code></h3><p>父容器设置 <code>display:grid;</code> + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-content">place-content</a>:center;</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="msItD" data-preview="true" data-editable="true"  data-prefill='{"title":"@","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">  body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:400px;}.parent {  display:grid;  place-content:center;}</pre></div><h3 id="display-grid-justify-self-center-align-self-center"><a href="#display-grid-justify-self-center-align-self-center" class="headerlink" title="display:grid; + justify-self:center; + align-self:center;"></a><code>display:grid;</code> + <code>justify-self:center;</code> + <code>align-self:center;</code></h3><p>父容器设置 <code>display:grid;</code><br>子容器设置 <code>justify-self:center;</code> + <code>align-self:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="dQLaxj" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  width:400px;  background:black;  color:white;}.parent {  display:grid;}.children {  justify-self:center;  align-self:center;}</pre></div><h3 id="display-grid-justify-items-center-align-self-center"><a href="#display-grid-justify-items-center-align-self-center" class="headerlink" title="display:grid; + justify-items:center; + align-self:center;"></a><code>display:grid;</code> + <code>justify-items:center;</code> + <code>align-self:center;</code></h3><p>父容器设置 <code>display:grid;</code> + <code>justify-items:center;</code><br>子容器设置 <code>align-self:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="dQLaxj" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  width:400px;  background:black;  color:white;}.parent {  display:grid;  justify-items:center;}.children {  align-self:center;}</pre></div><h3 id="display-grid-justify-self-center-align-items-center"><a href="#display-grid-justify-self-center-align-items-center" class="headerlink" title="display:grid; + justify-self:center; + align-items:center;"></a><code>display:grid;</code> + <code>justify-self:center;</code> + <code>align-items:center;</code></h3><p>父容器设置 <code>display:grid;</code> + <code>align-items:center;</code><br>子容器设置 <code>justify-self:center;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="dQLaxj" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。  &lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  width:400px;  background:black;  color:white;}.parent {  display:grid;  align-items:center;}.children {  justify-self:center;}</pre></div><h3 id="display-grid-margin-auto"><a href="#display-grid-margin-auto" class="headerlink" title="display:grid; + margin:auto;"></a><code>display:grid;</code> + <code>margin:auto;</code></h3><p>父容器设置 <code>display:grid;</code><br>子容器设置 <code>margin:auto;</code></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="LXvqBe" data-preview="true" data-editable="true"  data-prefill='{"title":"@", "tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="parent">  &lt;div class="children">得道多助，失道寡助，出自《孟子·公孙丑下》, 指站在正义方面会得到多数人的支持帮助；违背正义必然陷于孤立。文章通过对"天时"、"地利"、"人和", 并将这三者加以比较，层层递进。论证了"天时不如地利，地利不如人和"的道理。&lt;/div>&lt;/div></pre>  <pre data-lang="css">body {  background:#f06d06;}.parent {  background:white;  height:400px;}.children {  background:black;  color:white;  width:50%;}.parent {  display:grid;}.children {  margin:auto;}</pre></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You can totally center things in CSS.</p><p><a href="https://css-tricks.com/centering-in-the-unknown/">Centering in the Unknown | CSS-Tricks</a></p><p><a href="https://css-tricks.com/centering-percentage-widthheight-elements/">Centering Percentage Width/Height Elements</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flexbox </tag>
            
            <tag> Grid </tag>
            
            <tag> Centering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25 JavaScript Tricks You Need To Know About (Part 2)</title>
      <link href="25-more-javascript-code-solutions-you-need-to-know-about/"/>
      <url>25-more-javascript-code-solutions-you-need-to-know-about/</url>
      
        <content type="html"><![CDATA[<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://beforesemicolon.medium.com/25-more-javascript-code-solutions-you-need-to-know-about-6ee344c2da58">25 JavaScript Tricks You Need To Know About (Part 2)</a></p></blockquote><p><img src="https://miro.medium.com/max/2560/1*EmGHBgB10ETko1GReEl5CQ@2x.jpeg"></p><p>You can read about part one of <a href="/25-javascript-code-solutions-utility-tricks-you-need-to-know-about-3023f7ed993e"><strong>25 Javascript tricks in another article</strong></a> where you can find equally awesome code solution snippets to improve your codebase with and learn more about Javascript by examples.</p><h2 id="Code-Source"><a href="#Code-Source" class="headerlink" title="Code Source"></a>Code Source</h2><p>These are code snippets you can use in your projects and evolve to become something bigger. They teach various lessons and reveal great features of Javascript and the Environment where it runs. <strong>All code links are below the images</strong>.</p><!-- ## Check Also:- [Part I](/25-javascript-code-solutions-utility-tricks-you-need-to-know-about)- [CSS Tricks](/10-css-tricks-you-need-to-know-about)- [CSS Tricks Part 2](/10-css-tricks-you-need-to-know-about-part-2) --><h2 id="1-—-Deep-value-retriever"><a href="#1-—-Deep-value-retriever" class="headerlink" title="1 — Deep value retriever"></a>1 — Deep value retriever</h2><p>This simple function leverages the power of the <a href="https://www.youtube.com/watch?v=DTmToxWZX9I&list=PLpWvGP6yhJUigZr2vQgbqpTv_HLQ6eZsz&index=6">Array <em>reduce</em> method</a> to allow you to retrieve the deep value in deeply nested objects, array, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Javascript Map</a>. You can access value belonging to the object itself or its prototype, like accessing a string length or getting the size of a Map.</p><p><img src="https://miro.medium.com/max/2800/1*kYI2Sa45qpfCCWqGD1TTHg.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepValue</span><span class="token punctuation">(</span><span class="token parameter">dict<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  path <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> path <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token comment">// prevents error on retrieving key in undefined</span>      obj <span class="token operator">===</span> <span class="token keyword">undefined</span>        <span class="token operator">?</span> <span class="token keyword">null</span>        <span class="token operator">:</span> <span class="token comment">// check if Map otherwise it is object like</span>        obj <span class="token keyword">instanceof</span> <span class="token class-name">Map</span>        <span class="token operator">?</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">??</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token operator">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>    dict<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/deep-value-retriever">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">deepValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'top.in.list.0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get list 1st item</span><span class="token function">deepValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'top.in.list.length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get list length</span><span class="token function">deepValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'top.in.noExistentKey'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-—-Date-Formatter"><a href="#2-—-Date-Formatter" class="headerlink" title="2 — Date Formatter"></a>2 — Date Formatter</h2><p><a href="https://developer.mozilla.org/en-us/docs/Web/JavaScript/Reference/Global_Objects/Date">Javascript Date</a> is already powerful if you take time to learn it a little. Combined with the <a href="https://developer.mozilla.org/en-us/docs/Web/JavaScript/Reference/Global_Objects/Intl">Intl object</a> it becomes limitless. This is a small sample of a date formatter that even <strong>handles Internationalization</strong> that can be extended and modified to fulfill the needs of your project.</p><p><img src="https://miro.medium.com/max/3460/1*axbENcc-Z2CiV1vizWzl2w.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> formatStr <span class="token operator">=</span> <span class="token string">'MMMM DD, YYYY'</span><span class="token punctuation">,</span> lang <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> weekday<span class="token operator">:</span> <span class="token string">'long'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> month<span class="token operator">:</span> <span class="token string">'long'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> firstDayOfYear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pastDaysOfYear <span class="token operator">=</span> <span class="token punctuation">(</span>date <span class="token operator">-</span> firstDayOfYear<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">86400000</span><span class="token punctuation">;</span> <span class="token comment">// one day;</span>  <span class="token keyword">const</span> week <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pastDaysOfYear <span class="token operator">+</span> firstDayOfYear<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> formatStr    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bYYYY\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bYY\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bWW\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> week<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bW\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> week<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bDDDD\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> day<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bDDD\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> day<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bDD\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bD\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bMMMM\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> month<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bMMM\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> month<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bMM\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bM\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/date%20formatter">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MM-DD-YYYY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "02-06-2021"</span><span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "February 06, 2021"</span><span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'D de MMMM de YYYY'</span><span class="token punctuation">,</span> <span class="token string">'pt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "6 de fevereiro de 2021"</span><span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MMMM DD, YYYY'</span><span class="token punctuation">,</span> <span class="token string">'zh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "二月 06, 2021"</span><span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MMM DD (DDD), YYYY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "Feb 06 (Sat), 2021"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-—-Promisifier"><a href="#3-—-Promisifier" class="headerlink" title="3 — Promisifier"></a>3 — Promisifier</h2><p><a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original">NodeJs promisify utility</a> is one of my favorite utils in NodeJs and I decided I need that in the client as well so I created this replica that handles any type of functions including <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async function</a>, <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">callback function</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return">those which simply return results</a>.</p><p><img src="https://miro.medium.com/max/3140/1*p-5ch8un66XUYoHV6wkufQ.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">subject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token function-variable function">callbackHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// filter error from results to remove dependency on error, result order</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> error<span class="token punctuation">,</span> result <span class="token punctuation">&#125;</span> <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            obj<span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            obj<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">subject</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> callbackHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// only runs if callbackHandler does not resolve the promise</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/promisify">Code on Github</a></p><p>Here is an example of usage with an “add” function that returns a result and a divide function that takes a callback and may throw or call the callback with the result.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Cannot divide by "Zero"'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> asyncAdd <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> asyncDivide <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>divide<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 90</span><span class="token function">asyncAdd</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 90</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> total</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> total</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 'Cannot divide by "Zero"'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'total' null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">asyncDivide</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">asyncDivide</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 'Cannot divide by "Zero"'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-—-Merge-Objects"><a href="#4-—-Merge-Objects" class="headerlink" title="4 — Merge Objects"></a>4 — Merge Objects</h2><p>Especially in react, you will feel the need to merge two objects without having to deal with the deep nesting and still maintain the structure. This simple snippet will deep merge your objects and array nicely using the <a href="https://youtu.be/7oLO9iAyYIM">power of recursion</a> to return a new copy to you. It can be extended to support more object types as you wish.</p><p><img src="https://miro.medium.com/max/3432/1*nchM0tZl8_N2ZpAnvkY7Dw.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeObjects</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> a <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> b <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mergeObjects</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/merge%20objects">Code on Github</a></p><h2 id="5-—-Deep-Equality"><a href="#5-—-Deep-Equality" class="headerlink" title="5 — Deep Equality"></a>5 — Deep Equality</h2><p>Checking if 2 objects are equal may require you to do a lot and can be expensive. I always wanted something that is simple and extensible and this snippet does that. It can be extended to include checks for different types of objects as you can see in <em>lines 7, 9, 12, and 13</em>.</p><p><img src="https://miro.medium.com/max/3276/1*TbWdINRPOA7S8XfzDU98yQ.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isEqualFunctions</span><span class="token punctuation">(</span><span class="token parameter">fn1<span class="token punctuation">,</span> fn2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fn1 <span class="token operator">===</span> fn2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token keyword">typeof</span> fn1 <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> fn2 <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> fn1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> fn2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqualSymbols</span><span class="token punctuation">(</span><span class="token parameter">symb1<span class="token punctuation">,</span> symb2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>symb1 <span class="token operator">===</span> symb2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token keyword">typeof</span> symb1 <span class="token operator">===</span> <span class="token string">'symbol'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> symb2 <span class="token operator">===</span> <span class="token string">'symbol'</span> <span class="token operator">&amp;&amp;</span> symb1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> symb2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqualMap</span><span class="token punctuation">(</span><span class="token parameter">map1<span class="token punctuation">,</span> map2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map1 <span class="token operator">===</span> map2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>map1 <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>map2 <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token operator">||</span> map1<span class="token punctuation">.</span>size <span class="token operator">!==</span> map2<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keys1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keys2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> values1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> values2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    keys1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">isEqual</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> keys2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> values1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">isEqual</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> values2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqualSet</span><span class="token punctuation">(</span><span class="token parameter">set1<span class="token punctuation">,</span> set2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>set1 <span class="token operator">===</span> set2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>set1 <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>set2 <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token operator">||</span> set1<span class="token punctuation">.</span>size <span class="token operator">!==</span> set2<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> values1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> values2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> values1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">isEqual</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> values2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// handles primitives and same instances</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">typeof</span> a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">typeof</span> b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'symbol:symbol'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">isEqualSymbols</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'function:function'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">isEqualFunctions</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'object:object'</span><span class="token operator">:</span>      <span class="token comment">// inner cases for objects other than Array and Object</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isEqualMap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isEqualSet</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// handles Object and Array</span>      <span class="token keyword">const</span> keysA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> keysB <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length <span class="token operator">!=</span> keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> keysA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keysB<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token comment">// handles when a and b is of different types</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/deep%20equality">Code on Github</a></p><h2 id="6-—-🔥-Siblings-selector"><a href="#6-—-🔥-Siblings-selector" class="headerlink" title="6 — 🔥 Siblings selector"></a>6 — 🔥 Siblings selector</h2><p>jQuery has some useful <a href="https://api.jquery.com/siblings/">siblings selector</a>. In fact, these are super simple methods you can create on your own. Below is a simple command object that allows you to access element siblings easily and efficiently.</p><p><img src="https://miro.medium.com/max/3140/1*o4uW2DPS53bLwSPxm3YOVA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token parameter">selectorOrElement</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> element <span class="token operator">=</span>    selectorOrElement <span class="token keyword">instanceof</span> <span class="token class-name">Element</span>      <span class="token operator">?</span> selectorOrElement      <span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selectorOrElement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">prevElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> element<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>element<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> el <span class="token operator">!==</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">nextSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> siblings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> nextElement <span class="token operator">=</span> element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>nextElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        siblings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextElement <span class="token operator">=</span> nextElement<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> siblings<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">previousSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> siblings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">[</span><span class="token operator">...</span>element<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">!==</span> element<span class="token punctuation">)</span> siblings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> el <span class="token operator">===</span> element<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> siblings<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/element-sibling">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">'ul li:nth-child(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>siblings<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">'ul li:nth-child(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>previousSiblings<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">'ul li:nth-child(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nextSiblings<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-slug-hash="ebing" data-preview="true" data-editable="true" data-user="chriscoyier"  data-prefill='{"title":"Siblings selector","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;ul>  &lt;li>1&lt;/li>  &lt;li>2&lt;/li>  &lt;li>3&lt;/li>  &lt;li>4&lt;/li>  &lt;li>5&lt;/li>  &lt;li>6&lt;/li>&lt;/ul></pre>  <pre data-lang="js">function element(selectorOrElement) {  const element =    selectorOrElement instanceof Element      ? selectorOrElement      : document.querySelector(selectorOrElement);  return {    get self() {      return element;    },    get nextElement() {      return element.nextElementSibling;    },    get prevElement() {      return element.previousElementSibling;    },    get siblings() {      return [...element.parentNode.children].filter((el) => el !== element);    },    get nextSiblings() {      const siblings = [];      let nextElement = element.nextElementSibling;      while (nextElement) {        siblings.push(nextElement);        nextElement = nextElement.nextElementSibling;      }      return siblings;    },    get previousSiblings() {      const siblings = [];      [...element.parentNode.children].some((el) => {        if (el !== element) siblings.push(el);        return el === element;      });      return siblings;    }  };}console.log(element("ul li:nth-child(3)").siblings);console.log(element("ul li:nth-child(3)").previousSiblings);console.log(element("ul li:nth-child(3)").nextSiblings);</pre></div><h2 id="7-—-Ancestor-selector"><a href="#7-—-Ancestor-selector" class="headerlink" title="7 — Ancestor selector"></a>7 — Ancestor selector</h2><p>Similar to siblings, you may need to select an ancestor element that is not the direct parent of your element. You can do that with this simple built-in capability.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span> <span class="token comment">// "&lt;label for=''>...&lt;/label>"</span>input<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&lt;form action=''>...&lt;/form>"</span>input<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'#top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "&lt;section id='top'>...&lt;/section>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-—-Key-list-by"><a href="#8-—-Key-list-by" class="headerlink" title="8 — Key list by"></a>8 — Key list by</h2><p>You can change lists like array or map and even objects to be keyed by a specific value. This allows you to create maps easily from other data which can help for quicker data retrieving and check.</p><p><img src="https://miro.medium.com/max/2172/1*SXpjKziR1_VUPVhyP5nVAw.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/key-by">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'one'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'two'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'three'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">keyBy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* outputs &#123;  '1': &#123; id: 1, name: 'one' &#125;,  '2': &#123; id: 2, name: 'two' &#125;,  '3': &#123; id: 3, name: 'three' &#125;&#125;*/</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token operator">:</span> <span class="token string">'uno'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> str<span class="token operator">:</span> <span class="token string">'doz'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> str<span class="token operator">:</span> <span class="token string">'tres'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">keyBy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* outputs&#123;  uno: &#123; id: 1, str: 'uno' &#125;,  doz: &#123; id: 2, str: 'doz' &#125;,  tres: &#123; id: 3, str: 'tres' &#125;&#125;*/</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'one'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'two'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'three'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">keyBy</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* outputs&#123;  one: &#123; id: 1, name: 'one' &#125;,  two: &#123; id: 2, name: 'two' &#125;,  three: &#123; id: 3, name: 'three' &#125;&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-—-Loop-Anything-with-the-ability-to-break-out"><a href="#9-—-Loop-Anything-with-the-ability-to-break-out" class="headerlink" title="9 — Loop Anything with the ability to break out"></a>9 — Loop Anything with the ability to break out</h2><p>Javascript while and for loops accept the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break">“break” keyword</a> in the body that allows them to <strong>quit early and avoid unnecessary iterations</strong>. My wish is to loop any data type easily with the same ability to break out.</p><p>The following allows you to <strong>loop any iterable with the option to break out of the loop by making your callback return true</strong>. It can also be extended to create other methods similar to many of the other Array methods.</p><p><img src="https://miro.medium.com/max/2680/1*EaQu5sHwr8JpCus8p1RwdA.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/forEach%20iterables">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span class="token function">forEach</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  console<span class="token punctuation">.</span>log<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Iterator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-—-Map-Anything"><a href="#12-—-Map-Anything" class="headerlink" title="12 — Map Anything"></a>12 — Map Anything</h2><p>My favorite Array methods are <a href="https://www.youtube.com/watch?v=Sk3MxEUSwY4&list=PLpWvGP6yhJUhC1SpdouTObbd5yGgV4opL&index=39">.from</a>, <a href="https://www.youtube.com/watch?v=ajZ3wVZew3Q&list=PLpWvGP6yhJUhC1SpdouTObbd5yGgV4opL&index=33">.some</a> and <a href="https://www.youtube.com/watch?v=DTmToxWZX9I&list=PLpWvGP6yhJUhC1SpdouTObbd5yGgV4opL&index=30">.reduce</a>. You can do anything with these so I used the .from to allow me to map anything I want as well with a simple utility function.</p><p><img src="https://miro.medium.com/max/2576/1*3wQtS7OUtg4jfr00rQMcqg.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span class="token function">map</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  handler<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Iterator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-—-Filter-anything"><a href="#11-—-Filter-anything" class="headerlink" title="11 — Filter anything"></a>11 — Filter anything</h2><p>Javascript Array comes with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">“filter” method</a> and what I often feel the need for is to filter things out of other <a href="https://www.youtube.com/playlist?list=PLpWvGP6yhJUhC1SpdouTObbd5yGgV4opL">data structures</a> that are not arrays. So I created this based on the forEach you saw above, and it inherits the ability to filter from any object or iterable list-like objects. It always returns a new array containing only the things you want.</p><p><img src="https://miro.medium.com/max/2076/1*MdkoMTC0xFUp5F4lIw5lXw.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/filter-iterables">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns [ 13, 89 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-—-Fixed-Size-Array"><a href="#12-—-Fixed-Size-Array" class="headerlink" title="12 — Fixed Size Array"></a>12 — Fixed Size Array</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">Javascript Arrays</a> are not Arrays <a href="https://en.wikipedia.org/wiki/Array_data_structure">by definition</a> but Javascript has <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays">typed arrays</a> that follow the array definition. You can define a size for them but that won’t stop you from adding more or remove items dynamically. If you feel the need to have that restriction then you need this snippet.</p><p><img src="https://miro.medium.com/max/2792/1*5tiEXS7zeLZBqcMJEoYu9w.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/fixed%20size%20array">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token function">createFixedSizeArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token function">createFixedSizeArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// has no effect</span>arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws TypeError: Cannot add property...</span>arr1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws TypeError: Cannot delete property ...</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// sets the value since index one slot exists</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints [ 10, 2, 3, 4 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints [ undefined, 12, undefined ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-—-Capitalize-Words"><a href="#13-—-Capitalize-Words" class="headerlink" title="13 — Capitalize Words"></a>13 — Capitalize Words</h2><p>CSS has the ability to capitalize text in many different ways but to do the same in Javascript you need something of your own. This small function gives you this power.</p><p><img src="https://miro.medium.com/max/2320/1*bsSBOQsx48xpKso2b7uFDg.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/capitalize%20words">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">'My dog ate my homework'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// returns 'My Dog Ate My Homework'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-—-File-Uploader"><a href="#12-—-File-Uploader" class="headerlink" title="12 — File Uploader"></a>12 — File Uploader</h2><p>I used a version of this snippet on my <a href="https://www.youtube.com/watch?v=R2AD1h0iQAw&t=233s"><strong>custom multifile resumable uploader video</strong></a> which you can watch for even more details but this simple snippet allows you to upload any data type to any provided server endpoint URL. It lets you listen to the upload progress as well but if you want to <strong>learn more about resuming and pausing upload</strong> <a href="https://www.youtube.com/watch?v=R2AD1h0iQAw&t=233s">watch my video on the topic</a>.</p><p><img src="https://miro.medium.com/max/3308/1*2qIS82auNaymwTOVy5jxAQ.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/uploader">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">postData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:1234/upload'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'John Doe'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">onProgress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>total<span class="token punctuation">,</span> event<span class="token punctuation">,</span> loaded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">postData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:1234/upload'</span><span class="token punctuation">,</span> myFile<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> onProgress <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-—-Class-private-properties"><a href="#13-—-Class-private-properties" class="headerlink" title="13 — Class private properties"></a>13 — Class private properties</h2><p>Javascript has its own way to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields">create class private members</a>, but it does not get the love it deserves from the community — it has a weird syntax. If you don’t like the class built-in way to declare private members you can use the power of <a href="https://www.youtube.com/watch?v=sDmn6p4lRHk">closure, scope</a>, and <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFE</a> to create private things.</p><p><img src="https://miro.medium.com/max/2576/1*5lJIzitLUSdFx1twiBrzOQ.png"></p><h2 id="14-—-Abstract-class"><a href="#14-—-Abstract-class" class="headerlink" title="14 — Abstract class"></a>14 — Abstract class</h2><p>An <a href="https://en.wikipedia.org/wiki/Abstract_type">abstract class</a> is a class that can only be extended and not instantiated directly. It is useful to create classes that will serve as templates for others or to group common stuff for similar other classes. <strong>A good example of its usage is the</strong> <a href="https://www.youtube.com/watch?v=cVTbdo17mYs&t=52s"><strong>Item class in my File System video</strong></a>.</p><p>This trick works by checking the constructor name. If it is the same as the class where you are checking it is because it is being initialized, otherwise, extended.</p><p><img src="https://miro.medium.com/max/3820/1*4oqWeP0Jvf4H54vf4XD72Q.png"></p><h2 id="15-—-Find-Average"><a href="#15-—-Find-Average" class="headerlink" title="15 — Find Average"></a>15 — Find Average</h2><p>Need to find the average of a group of numbers? This is how you do it using the <a href="https://www.youtube.com/watch?v=DTmToxWZX9I">reduce Array method</a>.</p><p><img src="https://miro.medium.com/max/3304/1*5lWMjtzYisepls7wVj4VWg.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/average">Code on Github</a></p><h2 id="16-—-Group-Data-by-key"><a href="#16-—-Group-Data-by-key" class="headerlink" title="16 — Group Data by key"></a>16 — Group Data by key</h2><p>Similarly to key data by a specific key you saw above, we can make a tiny change to let us group similar data by using the <a href="https://www.youtube.com/watch?v=DTmToxWZX9I">Array reduce method</a>. This snippet is awesome to help you collect similar data from big lists. <strong>If you are using react</strong>, consider using the <a href="https://www.npmjs.com/package/flatlist-react"><strong>flatlist-react</strong></a> <strong>module</strong> which has a grouping option that works great to render lists already grouped.</p><p><img src="https://miro.medium.com/max/2888/1*B0h07FXF12FV6oP91l1SDQ.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/group%20by">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Doe'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Peter'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Carter'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Jane'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Sigfield'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Jonathan'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Sigfield'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Doe'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Carlos'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Carter'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Bruno'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Sigfield'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> firstName<span class="token operator">:</span> <span class="token string">'Before'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Semicolon'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">groupBy</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">'lastName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* outputs&#123;  Doe: [    &#123; firstName: 'John', lastName: 'Doe' &#125;,    &#123; firstName: 'Alice', lastName: 'Doe' &#125;  ],  Carter: [    &#123; firstName: 'Peter', lastName: 'Carter' &#125;,    &#123; firstName: 'Carlos', lastName: 'Carter' &#125;  ],  Sigfield: [    &#123; firstName: 'Jane', lastName: 'Sigfield' &#125;,    &#123; firstName: 'Jonathan', lastName: 'Sigfield' &#125;,    &#123; firstName: 'Bruno', lastName: 'Sigfield' &#125;  ],  Semicolon: [ &#123; firstName: 'Before', lastName: 'Semicolon' &#125; ]&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="🔥-19-—-Shuffle-an-array"><a href="#🔥-19-—-Shuffle-an-array" class="headerlink" title="🔥 19 — Shuffle an array"></a>🔥 19 — Shuffle an array</h2><p>Shuffling is nice when you want to randomize things especially if you are building games or want to simulate a real-world scenario where you get things in a nonspecific order. It can also be a good way to test some code. This snippet is based on the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle algorithm</a>,</p><p><img src="https://miro.medium.com/max/2308/1*mnqDHMOKbCeaW4cfeMTedg.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> m <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="🔥-20-—-Debounce"><a href="#🔥-20-—-Debounce" class="headerlink" title="🔥 20 — Debounce"></a>🔥 20 — Debounce</h2><p>Debouncing things ensures that in a specific interval only a single thing happens. For example, you have a button that when clicked it calls the API with a request. In case a user repeatedly clicks the button it means one request for every click but if you denounce it means that once they stop the click and wait a certain time pass then the request is made.</p><p><strong><em>P.S: Debounce function can be used with anything.</em></strong></p><p><img src="https://miro.medium.com/max/2308/1*2yxbl84TxrYCvQ1P98L6Jg.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">duration <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/debounce%20callback">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> clickHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-—-Handle-Event-Once"><a href="#21-—-Handle-Event-Once" class="headerlink" title="21 — Handle Event Once"></a>21 — Handle Event Once</h2><p>In case you are listening to events but only want to react to them once, this snippet will do the trick.</p><p><img src="https://miro.medium.com/max/2644/1*gRlIrW8LfSuHhnVb9Dj3PA.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/once%20event">Code on Gtihub</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">once</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="22-—-Handle-Event-until"><a href="#22-—-Handle-Event-until" class="headerlink" title="22 — Handle Event until"></a>22 — Handle Event until</h2><p>Similar to the “<em>once”</em> snippet above, you can make some alterations that make you respond to an event only until a condition is met. <strong>The below example</strong> handles click on a button incrementing the number until it reaches 6 then stops.</p><p><img src="https://miro.medium.com/max/2580/1*codIAuS7Hi05irSkxIgSwQ.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/until%20event">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>textContent <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">checker</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">until</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> checker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://miro.medium.com/max/1200/1*qKQ1Z0R2Gf3cDIzeTJUYiA.gif"></p><h2 id="23-—-Observe-DOM-element"><a href="#23-—-Observe-DOM-element" class="headerlink" title="23 — Observe DOM element"></a>23 — Observe DOM element</h2><p>This simple snippet is based on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">MutationObserver API</a> and it is just an <a href="/10-javascript-design-patterns-to-improve-your-code-with-44c6f6c2ea94">abstraction/facade</a> with some simple tricks to handle the changes. It detects when an element attribute or content changes. It does not detect things like offsetWidth, height changes.</p><p><img src="https://miro.medium.com/max/3296/1*QkKGp0CYtXJsDToOssGJyg.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/observe%20element">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">observeElement</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span><span class="token comment">/* triggers&#123;  type: "attributes",   oldValue: null,   newValue: "display: block;"&#125;*/</span>btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'another text &lt;span>label&lt;/span> after'</span><span class="token punctuation">;</span><span class="token comment">/* triggers&#123;  type: "content",   oldValue: null,   newValue: ["another text ", span, " after"]&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-—Simple-Observable-like-RxJs"><a href="#24-—Simple-Observable-like-RxJs" class="headerlink" title="24 —Simple Observable (like RxJs)"></a>24 —Simple Observable (like RxJs)</h2><p>You dont need to install <a href="https://rxjs-dev.firebaseapp.com/guide/observable">RxJs to do observables</a>. You definitely need it for more complex stuff but for simple observables, you can do this.</p><p><a href="/10-javascript-design-patterns-to-improve-your-code-with-44c6f6c2ea94"><strong>Learn More Design Patterns Like This here</strong></a></p><p><img src="https://miro.medium.com/max/3124/1*7qdzF-jIXzwy9a5ikw62CQ.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/observable">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// gets ignored since its complete</span>  observer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obs<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 10, 20</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obs<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// never executes</span>obs<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-—-Extend-DOM-element-with-data"><a href="#25-—-Extend-DOM-element-with-data" class="headerlink" title="25 — Extend DOM element with data"></a>25 — Extend DOM element with data</h2><p>By leveraging the <a href="https://www.youtube.com/watch?v=QYfZ_gXwxBs">power of WeakMap</a> and the wish to extend some type of objects like the DOM Element with some data or capabilities this is your snippet. <strong>It lets you add new capabilities to any built-in or third-party libraries without changing them directly.</strong></p><p><strong>I used a version of this</strong> during my <a href="https://www.youtube.com/watch?v=SLJMQXpdzeo"><strong>File System implementation video</strong></a> to connect files system data with DOM Elements for easier manipulation.</p><p>If powered up with Proxy, this snippet becomes even more powerful, you can <a href="/10-javascript-design-patterns-to-improve-your-code-with-44c6f6c2ea94">learn about that in this other article</a>.</p><p><img src="https://miro.medium.com/max/2692/1*2LAwf8CkjVEeK1tt-COu1g.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/extend%20object">Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> btn <span class="token operator">=</span> <span class="token function">extendObject</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token function">extendObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// extends API with "position"</span>btn<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'position'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> btn<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'position'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;x: 8, y: 8, width: 34.53125, height: 21, top: 8, …&#125;</span><span class="token comment">// Add ability to get last item to array</span>array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'lastItem'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> array<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'lastItem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Javascript is full of tricks and as a Javascript Developer, you almost feel like a Magician. The goal is to continue learning and be thirsty for knowledge. Learning Javascript is a fun and interesting journey so let me help you by <strong>welcoming you to Before Semicolon.</strong></p><!-- **Youtube Channel**: [Before Semicolon](https://www.youtube.com/channel/UCrU33aw1k9BqTIq2yKXrmBw)**Website**: [beforesemicolon.co-m](https://beforesemicolon.com/)- -->]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debounce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22 Utility Functions To Ace Your JavaScript Coding Interview</title>
      <link href="22-utility-functions-to-ace-your-javascript-coding-interview/"/>
      <url>22-utility-functions-to-ace-your-javascript-coding-interview/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://javascript.plainenglish.io/22-utility-functions-to-ace-your-javascript-coding-interview-21ca676ad70">22 Utility Functions To Ace Your JavaScript Coding Interview</a></p></blockquote><hr><blockquote><p>JavaScript Coding Assessment Cheatsheet 2021</p></blockquote><p>One type of JavaScript coding interview question you might encounter will involve you writing 1–2 lines of code for a given question. These questions are usually simple enough to answer in 5 minutes, but sometimes we struggle with them due to the pressure of the interview. These functions will help to prepare for your JavaScript Interviews in 2021.</p><p>To reduce the pressure at times let’s get prepared ahead of time!</p><p><img src="https://miro.medium.com/max/6000/0*undOkOxQpiMNKFyg"></p><p>Photo by <a href="https://unsplash.com/@patrickperkins?utm_source=medium&utm_medium=referral">Patrick Perkins</a> on <a href="https://unsplash.com/?utm_source=medium&utm_medium=referral">Unsplash</a></p><h2 id="1-Remove-Duplicates-from-an-Array"><a href="#1-Remove-Duplicates-from-an-Array" class="headerlink" title="1. Remove Duplicates from an Array"></a>1. Remove Duplicates from an Array</h2><p><strong>Arrays</strong> : these are some handy methods that we can use to remove duplicates from an array.</p><h3 id="Using-lodash"><a href="#Using-lodash" class="headerlink" title="Using lodash"></a>Using lodash</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arrayuniq <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">uniq</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2, 1, 5, 6, 7, 8, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Using-the-filter"><a href="#Using-the-filter" class="headerlink" title="Using the filter"></a>Using the filter</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2, 1, 5, 6, 7, 8, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Using-Set"><a href="#Using-Set" class="headerlink" title="Using Set"></a>Using Set</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> setuniq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//[2, 1, 5, 6, 7, 8, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="Removing-duplicate-values-with-reduce"><a href="#Removing-duplicate-values-with-reduce" class="headerlink" title="Removing duplicate values with reduce"></a>Removing duplicate values with reduce</h3><p>You can also remove duplicate values of an array with <code>reduce()</code>. But since you want to return an array instead of a number, you need to define the initial value as an empty array. Take a look at the following code example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myScores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> noDupeArray <span class="token operator">=</span> myScores<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>accumulator<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    accumulator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> accumulator<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>accumulator</code> starts as an empty array. If the current value is not yet included in the <code>accumulator</code>, you <code>push</code> the value into it.</p><p>The <code>reduce</code> method can return any data type that you want to return, as long as it’s a single value (a string, a number, an array or an object, or even boolean).</p><h2 id="2-Remove-Duplicates-from-Array-of-Objects"><a href="#2-Remove-Duplicates-from-Array-of-Objects" class="headerlink" title="2. Remove Duplicates from Array of Objects"></a>2. Remove Duplicates from Array of Objects</h2><ul><li><strong>Arrays of Objects:</strong> these are some handy methods that we can use to remove duplicates from an array of objects.</li></ul><ol><li><strong>Using lodash</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'test'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'test'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'abc'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> uniqueUsersByID <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">uniqBy</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":3,"name":"sara"&#125;,&#123;"id":4,"name":"test"&#125;,&#123;"id":5,"name":"abc"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>We can check unique data with multiple properties with this code.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> uniquewithMultipleProperties <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">uniqWith</span><span class="token punctuation">(</span>  users<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>id <span class="token operator">===</span> b<span class="token punctuation">.</span>id <span class="token operator">||</span> a<span class="token punctuation">.</span>name <span class="token operator">===</span> b<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":3,"name":"sara"&#125;,&#123;"id":4,"name":"test"&#125;,&#123;"id":5,"name":"abc"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>Using a filter</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> filteruniquebyID <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=></span> t<span class="token punctuation">.</span>id <span class="token operator">===</span> v<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">===</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":3,"name":"sara"&#125;,&#123;"id":4,"name":"test"&#125;,&#123;"id":5,"name":"abc"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>We can check unique data with multiple properties with this code.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> filteruniquebyIDName <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=></span> t<span class="token punctuation">.</span>id <span class="token operator">===</span> v<span class="token punctuation">.</span>id <span class="token operator">||</span> t<span class="token punctuation">.</span>name <span class="token operator">===</span> v<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">===</span> i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":3,"name":"sara"&#125;,&#123;"id":4,"name":"test"&#125;,&#123;"id":5,"name":"abc"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>Using Set</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> set1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token operator">=></span> m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>id<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"bob"&#125;,&#123;"id":3,"name":"sara"&#125;,&#123;"id":4,"name":"test"&#125;,&#123;"id":5,"name":"abc"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>You can check stackblitz here.</p><p><a href="https://stackblitz.com/edit/remove-duplicates-arrayofobjects">https://stackblitz.com/edit/remove-duplicates-arrayofobjects</a></p><h2 id="3-Find-an-item-in-Array"><a href="#3-Find-an-item-in-Array" class="headerlink" title="3. Find an item in Array"></a>3. Find an item in Array</h2><ul><li>below are some methods to find an item in the array</li></ul><ol><li><strong>includes:</strong> this method determines whether an array includes a certain value among its entries, returning <code>true</code> or <code>false</code> as appropriate.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>Array.includes</code></a> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true, 否则返回 false.</p></blockquote><ol start="2"><li><strong>every:</strong> this method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testevery1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>some:</strong> this method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testsome1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>lodash includes:</strong> checks if <code>value</code> is in <code>collection</code> .Returns <code>true</code> if <code>value</code> is found, else <code>false</code> .</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> lodashtest9 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// truelet lodashtest10 =_.includes(array, 3, 2); // false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><strong>findIndex:</strong> this method returns the <strong>index</strong> of the first element in the array <strong>that satisfies the provided testing function</strong> . Otherwise, it returns <code>-1</code> , indicating that no element passed the test.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testindex <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li><strong>find:</strong> this method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined">undefined</a> are returned.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testfind <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> el <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>7. filter:</strong> this method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testfilter1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[5, 6, 7, 8, 9, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li><strong>map:</strong> this method <strong>creates a new array</strong> populated with the results of calling a provided function on every element in the calling array.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> val<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[5, 6, 7, 8, 9, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can check stackblitz here.</p><p><a href="https://stackblitz.com/edit/find-item-array">https://stackblitz.com/edit/find-item-array</a></p><h2 id="4-Find-an-item-in-the-Array-of-Objects"><a href="#4-Find-an-item-in-the-Array-of-Objects" class="headerlink" title="4. Find an item in the Array of Objects"></a>4. Find an item in the Array of Objects</h2><ul><li>these are the methods that can be used to find an item in the array of objects.</li></ul><ol><li><strong>every:</strong> this method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testevery2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val<span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>some:</strong> this method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testsome2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val<span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>lodash includes:</strong> checks if <code>value</code> is in <code>collection</code> .Returns <code>true</code> if <code>value</code> is found, else <code>false</code> .</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> lodashtest11 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">let</span> lodashtest12 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'bc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>findIndex:</strong> this method returns the <strong>index</strong> of the first element in the array <strong>that satisfies the provided testing function</strong> . Otherwise, it returns <code>-1</code> , indicating that no element passed the test.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testindex2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val<span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><strong>find:</strong> this method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined">undefined</a> are returned.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testfind2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;"id":3,"name":"sara"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>6. filter:</strong> this method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testfilter2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val<span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li><strong>map:</strong> this method <strong>creates a new array</strong> populated with the results of calling a provided function on every element in the calling array.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> val2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can check stackblitz here.</p><p><a href="https://stackblitz.com/edit/find-item-array">https://stackblitz.com/edit/find-item-array</a></p><h2 id="5-Sort-Array-items"><a href="#5-Sort-Array-items" class="headerlink" title="5. Sort Array items"></a>5. Sort Array items</h2><p>Arrays can be sort using the sort method.</p><p>The <code>sort()</code> method sorts the elements of an array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">_in place</a> and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code unit values.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'March'</span><span class="token punctuation">,</span> <span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">,</span> <span class="token string">'Dec'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>months<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["Dec", "Feb", "Jan", "March"]</span><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [1, 100000, 21, 30, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Sort-Array-Of-Objects-with-specific-properties"><a href="#6-Sort-Array-Of-Objects-with-specific-properties" class="headerlink" title="6. Sort Array Of Objects with specific properties"></a>6. Sort Array Of Objects with specific properties</h2><ul><li>these are the methods that can be used to sort an array of objects using specific property from objects.</li></ul><p><strong>1. Simple Sort:</strong> this method sorts the elements of an array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in place</a> and returns the sorted array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'toronto'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'TR'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'75201'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'123451'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'anand'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'AN'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'94210'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'345678'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'sudbury'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'SB'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'00110'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'789045'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> sorttest2 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id <span class="token operator">></span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sort test 2 '</span><span class="token punctuation">,</span> sorttest2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'anand'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'AN'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'94210'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'345678'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'toronto'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'TR'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'75201'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'123451'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'sudbury'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'SB'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'00110'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'789045'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. localCompare:</strong> this method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> sorttest2 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id <span class="token operator">></span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'anand'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'AN'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'94210'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'345678'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'toronto'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'TR'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'75201'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'123451'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'sudbury'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'SB'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'00110'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'789045'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. Sort with multiple fields</strong></p><p>The <code>parseInt()</code> function parses a string argument and returns an integer of the specified <a href="https://en.wikipedia.org/wiki/Radix">radix</a> (the base in mathematical numeral systems).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> sorttest4 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> city_order <span class="token operator">=</span> left<span class="token punctuation">.</span>city<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> price_order <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> city_order <span class="token operator">||</span> <span class="token operator">-</span>price_order<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'anand'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'AN'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'94210'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'345678'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'sudbury'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'SB'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'00110'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'789045'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'toronto'</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token string">'TR'</span><span class="token punctuation">,</span>    zip<span class="token operator">:</span> <span class="token string">'75201'</span><span class="token punctuation">,</span>    price<span class="token operator">:</span> <span class="token string">'123451'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. Lodash sortBy:</strong> Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iterate.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> sorttest6 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"city"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"city"</span><span class="token operator">:</span> <span class="token string">"anand"</span><span class="token punctuation">,</span>    <span class="token string">"state"</span><span class="token operator">:</span> <span class="token string">"AN"</span><span class="token punctuation">,</span>    <span class="token string">"zip"</span><span class="token operator">:</span> <span class="token string">"94210"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token string">"345678"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>    <span class="token string">"city"</span><span class="token operator">:</span> <span class="token string">"toronto"</span><span class="token punctuation">,</span>    <span class="token string">"state"</span><span class="token operator">:</span> <span class="token string">"TR"</span><span class="token punctuation">,</span>    <span class="token string">"zip"</span><span class="token operator">:</span> <span class="token string">"75201"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token string">"123451"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span>    <span class="token string">"city"</span><span class="token operator">:</span> <span class="token string">"sudbury"</span><span class="token punctuation">,</span>    <span class="token string">"state"</span><span class="token operator">:</span> <span class="token string">"SB"</span><span class="token punctuation">,</span>    <span class="token string">"zip"</span><span class="token operator">:</span> <span class="token string">"00110"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token string">"789045"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Sort-Array-of-Dates"><a href="#7-Sort-Array-of-Dates" class="headerlink" title="7. Sort Array of Dates"></a>7. Sort Array of Dates</h2><p><strong>1. Using Sort</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isDescending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//set to true for Descending</span><span class="token keyword">let</span> dates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1/7/2021'</span><span class="token punctuation">,</span> <span class="token string">'1/6/2021'</span><span class="token punctuation">,</span> <span class="token string">'8/18/2020'</span><span class="token punctuation">,</span> <span class="token string">'8/6/2020'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> sorteddates <span class="token operator">=</span> dates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span>  isDescending    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sorteddates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["8/6/2020", "8/18/2020", "1/6/2021", "1/7/2021"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. Using Lodash</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'test1'</span><span class="token punctuation">,</span> date<span class="token operator">:</span> <span class="token string">'1/7/2021'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'test2'</span><span class="token punctuation">,</span> date<span class="token operator">:</span> <span class="token string">'1/6/2021'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'test3'</span><span class="token punctuation">,</span> date<span class="token operator">:</span> <span class="token string">'1/5/2020'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dateObj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateObj<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sort date'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"name":"test3","date":"1/5/2020"&#125;,&#123;"name":"test2","date":"1/6/2021"&#125;,&#123;"name":"test1","date":"1/7/2021"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. Using Lodash (sort by month and year)</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> yearAndMonth <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> year<span class="token operator">:</span> <span class="token number">2016</span><span class="token punctuation">,</span> month<span class="token operator">:</span> <span class="token string">'FEBRUARY'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> year<span class="token operator">:</span> <span class="token number">2015</span><span class="token punctuation">,</span> month<span class="token operator">:</span> <span class="token string">'MARCH'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> year<span class="token operator">:</span> <span class="token number">2021</span><span class="token punctuation">,</span> month<span class="token operator">:</span> <span class="token string">'JANUARY'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> year<span class="token operator">:</span> <span class="token number">2021</span><span class="token punctuation">,</span> month<span class="token operator">:</span> <span class="token string">'FEBRUARY'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> value <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>yearAndMonth<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>month <span class="token operator">+</span> a<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Sorted Result: '</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"year":2015,"month":"MARCH"&#125;,&#123;"year":2016,"month":"FEBRUARY"&#125;,&#123;"year":2021,"month":"JANUARY"&#125;,&#123;"year":2021,"month":"FEBRUARY"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can check stackblitz here.</p><p><a href="https://stackblitz.com/edit/sort-array">https://stackblitz.com/edit/sort-array</a></p><h2 id="8-Remove-an-item-from-an-Array"><a href="#8-Remove-an-item-from-an-Array" class="headerlink" title="8. Remove an item from an Array"></a>8. Remove an item from an Array</h2><p><strong>1. pop:</strong> this method removes the <strong>last</strong> element from an array and returns that element. This method changes the length of the array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arraypoptest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testpop <span class="token operator">=</span> arraypoptest<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array pop'</span><span class="token punctuation">,</span> testpop<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> arraypoptest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10 - [2, 1, 2, 5, 6, 7, 8, 9, 9];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. shift:</strong> this method removes the <strong>first</strong> element from an array and returns that removed element. This method changes the length of the array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arrayshifttest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testshift <span class="token operator">=</span> arrayshifttest<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array shift'</span><span class="token punctuation">,</span> testshift<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> arrayshifttest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2 - [1, 2, 5, 6, 7, 8, 9, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. slice:</strong> this method returns a shallow copy of a portion of an array into a new array object selected from <code>start</code> to <code>end</code> ( <code>end</code> not included) where <code>start</code> and <code>end</code> represent the index of items in that array. The original array will not be modified.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arrayslicetest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testslice <span class="token operator">=</span> arrayslicetest<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array slice'</span><span class="token punctuation">,</span> testslice<span class="token punctuation">,</span> arrayslicetest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//not changed original array</span><span class="token comment">//[2, 1, 2] - [2, 1, 2, 5, 6, 7, 8, 9, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. splice:</strong> this method changes the contents of an array by removing or replacing existing elements and/or adding new elements <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in place</a> .</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arraysplicetest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testsplice <span class="token operator">=</span> arrayslicetest<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>5. filter:</strong> this method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p><p><strong>arrays:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> testarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testarr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> filtered <span class="token operator">=</span> testarr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> filtered2 <span class="token operator">=</span> testarr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'filter example 1'</span><span class="token punctuation">,</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[6, 7, 8, 9, 9, 10]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'filter example 2'</span><span class="token punctuation">,</span> filtered2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 5, 6, 7, 8, 9, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>filter with multiple values removal:</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> forDeletion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> mularr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>mularr <span class="token operator">=</span> mularr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>forDeletion<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'multiple value deletion with filter'</span><span class="token punctuation">,</span> mularr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6. delete operator:</strong> The JavaScript <code>delete</code> removes a property from an object; if no more references to the same property are held, it is eventually released automatically.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> ar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> ar<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// delete element with index 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2, 1, 2, 5, undefined, 7, 8, 9, 9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7. lodash remove:</strong> <code>_remove</code> removes all elements from <code>array</code> that <code>predicate</code> returns truthy for and returns an array of the removed elements.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arrlodashtest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> evens <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>arrlodashtest<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lodash remove array"</span><span class="token punctuation">,</span> arrlodashtest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 5, 7, 9, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-Remove-an-item-from-the-Array-of-Objects"><a href="#9-Remove-an-item-from-the-Array-of-Objects" class="headerlink" title="9. Remove an item from the Array of Objects"></a>9. Remove an item from the Array of Objects</h2><p><strong>1. pop:</strong> this method removes the <strong>last</strong> element from an array and returns that element. This method changes the length of the array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users1 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testpop1 <span class="token operator">=</span> users1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array of objects pop'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testpop1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>users1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;"id":4,"name":"sara"&#125; - [&#123;"id":1,"name":"ted"&#125;,&#123;"id":2,"name":"mike"&#125;,&#123;"id":3,"name":"bob"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. shift:</strong> this method removes the <strong>first</strong> element from an array and returns that removed element. This method changes the length of the array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users2 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testshift1 <span class="token operator">=</span> users2<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array of objects shift'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testshift1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>users2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;"id":1,"name":"ted"&#125; - [&#123;"id":2,"name":"mike"&#125;,&#123;"id":3,"name":"bob"&#125;,&#123;"id":4,"name":"sara"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. slice:</strong> this method returns a shallow copy of a portion of an array into a new array object selected from <code>start</code> to <code>end</code> ( <code>end</code> not included) where <code>start</code> and <code>end</code> represent the index of items in that array. The original array will not be modified.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users3 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testslice1 <span class="token operator">=</span> users3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array of objects slice'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testslice1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//not changed original array</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":2,"name":"mike"&#125;,&#123;"id":3,"name":"bob"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. splice:</strong> this method changes the contents of an array by removing or replacing existing elements and/or adding new elements <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in place</a> .</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users4 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> testspice1 <span class="token operator">=</span> users3<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'array of objects splice'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testsplice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":2,"name":"mike"&#125;,&#123;"id":3,"name":"bob"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. filter:</strong> this method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users7 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> filterObj <span class="token operator">=</span> users7<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'filter example array of objects'</span><span class="token punctuation">,</span> filterObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":1,"name":"ted"&#125;,&#123;"id":3,"name":"bob"&#125;,&#123;"id":4,"name":"sara"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6. lodash remove:</strong> <code>_remove</code> removes all elements from <code>array</code> that <code>predicate</code> returns truthy for and returns an array of the removed elements.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users8 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ted'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'mike'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'sara'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> evensObj <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>users8<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n<span class="token punctuation">.</span>id <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lodash remove array of object'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>evensObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":2,"name":"mike"&#125;,&#123;"id":4,"name":"sara"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can check stackblitz here.</p><p><a href="https://stackblitz.com/edit/array-remove-item">https://stackblitz.com/edit/array-remove-item</a></p><h2 id="10-Find-Number-of-Characters-From-Given-String-in-Array"><a href="#10-Find-Number-of-Characters-From-Given-String-in-Array" class="headerlink" title="10. Find Number of Characters From Given String in Array"></a>10. Find Number of Characters From Given String in Array</h2><p><strong>1. String match method</strong></p><p>The <code>match()</code> method retrieves the result of matching a <em>string</em> against a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">regular expression</a> . (source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/">MDN</a> )</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'atit patel'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2. String split method</strong></p><p>The <code>split()</code> method divides a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> into an ordered list of substrings, puts these substrings into an array, and returns the array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token string">'atit patel'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3. indexOf method</strong></p><p>The <code>indexOf()</code> method returns the index within the calling <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a>object of the first occurrence of the specified value, starting the search at <code>fromIndex</code> . Returns <code>-1</code> if the value is not found.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> stringsearch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  str <span class="token operator">=</span> <span class="token string">'atit patel'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>  index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  count<span class="token operator">++</span><span class="token punctuation">,</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>stringsearch<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. filter method</strong></p><p>The <code>filter()</code> method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mainStr <span class="token operator">=</span> <span class="token string">'atit patel'</span><span class="token punctuation">;</span><span class="token keyword">const</span> test3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>mainStr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">l</span><span class="token punctuation">)</span> <span class="token operator">=></span> l <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>5. reduce method</strong></p><p>The <code>reduce()</code> method executes a <strong>reducer</strong> function (that you provide) on each element of the array, resulting in a single output value.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mainStr1 <span class="token operator">=</span> <span class="token string">'atit patel'</span><span class="token punctuation">;</span><span class="token keyword">const</span> test4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>mainStr1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'a'</span> <span class="token operator">?</span> <span class="token operator">++</span>a <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-Find-Number-of-Occurrences-of-each-Character-From-Given-String-in-Array"><a href="#11-Find-Number-of-Occurrences-of-each-Character-From-Given-String-in-Array" class="headerlink" title="11. Find Number of Occurrences of each Character From Given String in Array"></a>11. Find Number of Occurrences of each Character From Given String in Array</h2><p><strong>1. We can add reduce method which we can return object after iterations</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'atit patel'</span><span class="token punctuation">;</span><span class="token keyword">let</span> test5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  a<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;a: 2,e: 1,i: 1,l: 1,p: 1,t: 3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. It is the same as method 6 with having OR operator</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> test6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;a: 2,e: 1,i: 1,l: 1,p: 1,t: 3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>You can play with stackblitz here.</p><p><a href="https://stackblitz.com/edit/numberofoccurance-string">https://stackblitz.com/edit/numberofoccurance-string</a></p><h2 id="12-Rename-Object-Properties-in-Array-of-Objects"><a href="#12-Rename-Object-Properties-in-Array-of-Objects" class="headerlink" title="12. Rename Object Properties in Array of Objects"></a>12. Rename Object Properties in Array of Objects</h2><p><strong>1. Using Map:</strong> this method <strong>creates a new array</strong> populated with the results of calling a provided function on every element in the calling array.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> countries <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'india'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'canada'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'america'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> transformed <span class="token operator">=</span> countries<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  label<span class="token operator">:</span> id<span class="token punctuation">,</span>  value<span class="token operator">:</span> name<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>transformed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'india'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'canada'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'america'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. Using a map with arguments</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> transformed2 <span class="token operator">=</span> countries<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> label<span class="token punctuation">,</span> name<span class="token operator">:</span> value <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  label<span class="token punctuation">,</span>  value<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>transformed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'india'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'canada'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'america'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. Using lodash:</strong> <code>_.mapKeys</code> method creates an object with the same values as <code>object</code> and keys generated by running each own enumerable string keyed property of <code>object</code> thru <code>iteratee</code> .</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test1 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">mapKeys</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> key <span class="token operator">+</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//_&#123;a1: 1, b2: 2&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>What if we want to rename Object keys? Let’s check out the solution for that.</p><p><strong>4. Using lodash for objects for values</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  atit<span class="token operator">:</span> <span class="token punctuation">&#123;</span> user<span class="token operator">:</span> <span class="token string">'atit'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mahesh<span class="token operator">:</span> <span class="token punctuation">&#123;</span> user<span class="token operator">:</span> <span class="token string">'mahesh'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> test2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">mapValues</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//_&#123;atit: 40, mahesh: 15&#125;_</span><span class="token comment">//shorthand</span><span class="token keyword">const</span> test3 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">mapValues</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> test3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//_&#123;atit: 40, mahesh: 15&#125;_</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. Using Object destructuring:</strong> The <strong>destructuring assignment</strong> syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">rename</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> a_b_c<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a_b_c<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;a_b_c: 1, val: 2&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>you can play with stackblitz here.</p><p><a href="https://stackblitz.com/edit/rename-object-keys">https://stackblitz.com/edit/rename-object-keys</a></p><h2 id="13-How-to-merge-two-arrays-and-create-a-new-array"><a href="#13-How-to-merge-two-arrays-and-create-a-new-array" class="headerlink" title="13. How to merge two arrays and create a new array?"></a>13. How to merge two arrays and create a new array?</h2><p>This can be achieved simply by using the spread operator.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-A-sum-of-an-array-of-numbers"><a href="#14-A-sum-of-an-array-of-numbers" class="headerlink" title="14. A sum of an array of numbers"></a>14. A sum of an array of numbers</h2><ol><li> <strong>reduce</strong> can be used to iterate through the array, adding the current element value to the sum of the previous element values.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2. Using Lodash</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sum == 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Let’s check some of the complex scenarios which can be helpful in Coding Assessments</p></blockquote><h2 id="15-Compare-two-arrays-of-objects-remove-duplicates-merge-objects-based-on-property"><a href="#15-Compare-two-arrays-of-objects-remove-duplicates-merge-objects-based-on-property" class="headerlink" title="15. Compare two arrays of objects, remove duplicates, merge objects based on property"></a>15. Compare two arrays of objects, remove duplicates, merge objects based on property</h2><p>We do get a requirement to compare two different arrays of objects and want to merge both objects if they match specific property values. It can be achieved using the filter method.</p><p>The <code>filter()</code> method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function. (source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">MDN</a> )</p><p><em>Let’s create test data.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'53'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'52'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> res <span class="token operator">=</span> array2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> array1<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> val<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [</span><span class="token comment">//   &#123; id: '53', active: 'a', value: 10 &#125;,</span><span class="token comment">//   &#123; id: '51', active: 'a', value: 11 &#125;,</span><span class="token comment">// ];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-Compare-two-arrays-of-objects-merge-and-update-values-assuming-array-3-4-shares-same-ID"><a href="#16-Compare-two-arrays-of-objects-merge-and-update-values-assuming-array-3-4-shares-same-ID" class="headerlink" title="16. Compare two arrays of objects, merge and update values (assuming array 3,4 shares same ID)"></a>16. Compare two arrays of objects, merge and update values (assuming array 3,4 shares same ID)</h2><p>We do get requirements sometimes to merge the two different with new property values. We can create a new set of arrays of objects using the map and we can use the find method to match the specific property before updating the new value.</p><p>The <code>map()</code> method <strong>creates a new array</strong> populated with the results of calling a provided function on every element in the calling array.</p><p>The <code>find()</code> method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined">undefined</a> are returned. (source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/">MDN</a> )</p><p><em>Let’s create the test data.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array3 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> array4 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'52'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array3<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> id<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    newValue<span class="token operator">:</span> array4<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [</span><span class="token comment">//   &#123; id: '50', newValue: 12 &#125;,</span><span class="token comment">//   &#123; id: '51', newValue: 13 &#125;,</span><span class="token comment">// ];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-Compare-arrays-of-objects-and-find-unique-objects"><a href="#17-Compare-arrays-of-objects-and-find-unique-objects" class="headerlink" title="17. Compare arrays of objects and find unique objects"></a>17. Compare arrays of objects and find unique objects</h2><p>If we want to compare two arrays of objects and check which are the unique objects from them, we can use a filter to achieve these functions.</p><p><em>Let’s create test data.</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array5 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array6 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'52'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ids <span class="token operator">=</span> array5<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> filtered <span class="token operator">=</span> array6<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> ids<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [</span><span class="token comment">//   &#123; id: '50', active: 'a', value: 12 &#125;,</span><span class="token comment">//   &#123; id: '51', active: 'a', value: 15 &#125;,</span><span class="token comment">// ];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-Compare-and-update-property-based-on-matched-values"><a href="#18-Compare-and-update-property-based-on-matched-values" class="headerlink" title="18. Compare and update property based on matched values"></a>18. Compare and update property based on matched values</h2><p>When we want to compare two arrays of objects and update the specific property based on the matched values we can use these functions.</p><p><em>Let’s create test data</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array7 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> idSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array8<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> res1 <span class="token operator">=</span> array7<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span>o<span class="token punctuation">,</span>  value<span class="token operator">:</span> idSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">:</span> o<span class="token punctuation">.</span>value<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":"50","active":"a","value":"0"&#125;,&#123;"id":"51","active":"a","value":15&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-Compare-two-arrays-objects-and-get-the-differences"><a href="#19-Compare-two-arrays-objects-and-get-the-differences" class="headerlink" title="19. Compare two arrays objects and get the differences"></a>19. Compare two arrays objects and get the differences</h2><p>When we want to compare two different arrays of objects and get are differences between them we can use these functions.</p><p><em>Let’s create test data</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'52'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> valuesArray1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a<span class="token punctuation">[</span>c<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> valuesArray2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a<span class="token punctuation">[</span>c<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> a  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span>valuesArray2<span class="token punctuation">[</span>c<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>    b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token operator">!</span>valuesArray1<span class="token punctuation">[</span>c<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":"52","active":"a","value":13&#125;]//shorthandlet ab = b.filter(o => !a.find(o2 => o.id === o2.id));console.log("6", ab);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-Compare-two-arrays-of-objects-merge-and-remove-duplicates"><a href="#20-Compare-two-arrays-of-objects-merge-and-remove-duplicates" class="headerlink" title="20. Compare two arrays of objects merge and remove duplicates"></a>20. Compare two arrays of objects merge and remove duplicates</h2><p>If we get requirements to compare two arrays of objects and remove the duplicates from them and merge both the arrays we can use this method.</p><p><em>Let’s create test data</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'52'</span><span class="token punctuation">,</span> active<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1IDs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> combined <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr1IDs<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>combined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":"50","active":"a","value":10&#125;,&#123;"id":"51","active":"a","value":11&#125;,&#123;"id":"52","active":"a","value":13&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Using lodash</strong></li></ul><p>Lodash supports <code>_differenceBy</code> and <code>_differenceWith</code> methods to find the difference between two arrays.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> lodashtest1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> lodashtest2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'50'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'51'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'52'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> lodashresult <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">differenceBy</span><span class="token punctuation">(</span>lodashtest2<span class="token punctuation">,</span> lodashtest1<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lodashresult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":"52"&#125;]</span><span class="token keyword">let</span> dif <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">differenceWith</span><span class="token punctuation">(</span>lodashtest2<span class="token punctuation">,</span> lodashtest1<span class="token punctuation">,</span> <span class="token punctuation">.</span>isEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#123;"id":"52"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-Compare-objects-and-find-unique-values"><a href="#21-Compare-objects-and-find-unique-values" class="headerlink" title="21. Compare objects and find unique values"></a>21. Compare objects and find unique values</h2><p>When we do work with nested objects sometimes it is difficult to figure out how we can iterate and compare both nested objects and get some unique objects among them. We can use <code>Object.keys</code> and <code>Object.values</code> methods for the iterations.</p><p><em>Let’s create test data</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> val1<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> stream<span class="token operator">:</span> <span class="token punctuation">&#123;</span> prop1<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> prop2<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> val1<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> stream<span class="token operator">:</span> <span class="token punctuation">&#123;</span> prop1<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> prop2<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Data</span> <span class="token punctuation">&#123;</span>  stream<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> boolean <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Let’s create functions:</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">objFilter</span><span class="token punctuation">(</span><span class="token parameter">objA<span class="token operator">:</span> Data<span class="token punctuation">,</span> objB<span class="token operator">:</span> Data</span><span class="token punctuation">)</span><span class="token operator">:</span> Data <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> out<span class="token operator">:</span> Data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> stream<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objA<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span>    Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>objA<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>objB<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span>      <span class="token operator">?</span> <span class="token punctuation">(</span>out<span class="token punctuation">.</span>stream<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>objA<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">objFilter</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prop2</span><span class="token comment">//&#123;"stream":&#123;"prop2":true&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you would like to play with stackbliz check out here: <a href="https://stackblitz.com/edit/compare-objects-javascript">https://stackblitz.com/edit/compare-objects-javascript</a></p><h2 id="22-How-to-Handle-Multiple-Service-Calls-Inside-a-Loop"><a href="#22-How-to-Handle-Multiple-Service-Calls-Inside-a-Loop" class="headerlink" title="22. How to Handle Multiple Service Calls Inside a Loop"></a>22. How to Handle Multiple Service Calls Inside a Loop</h2><ol><li>If we don’t want to wait for all the service calls to finish</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token keyword">of</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">serviceURL/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newData <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateDetails</span><span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateDetails</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getDetails</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//call service to get data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>If we want to wait until all service calls done</li></ol><p>we can use <code>promise.all</code> to wait until all promises have been resolved.</p><p>The <code>Promise.all()</code> the method takes an iterable of promises as an input and returns a single <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> that resolves to an array of the results of the input promises. (source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">MDN</a> )</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> dataPromises <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">serviceURL/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entry<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> resultData <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>dataPromises<span class="token punctuation">)</span><span class="token punctuation">;</span>  resultData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateDetails</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateDetails</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getDetails</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//call service to get data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内卷的各阶层的众生相</title>
      <link href="%E5%86%85%E5%8D%B7%E7%9A%84%E5%90%84%E9%98%B6%E5%B1%82%E7%9A%84%E4%BC%97%E7%94%9F%E7%9B%B8/"/>
      <url>%E5%86%85%E5%8D%B7%E7%9A%84%E5%90%84%E9%98%B6%E5%B1%82%E7%9A%84%E4%BC%97%E7%94%9F%E7%9B%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://program-think.blogspot.com/2021/01/weekly-share-149.html">每周转载: 内卷的天朝, 各阶层的众生相 (网文 17 篇)</a></p></blockquote><p>超过一季度没发《每周转载》了, 今天赶紧发一篇, 聊聊 2020 年的网络热词 “内卷”.</p><p>本文转载的文章, 很大部分来自【墙内】网站. 为了防止这些文章将来被真理部 “和谐” 掉, 俺对每篇转载的文章都标注了 “网页存档” 的链接.</p><h2 id="何为-“内卷”？"><a href="#何为-“内卷”？" class="headerlink" title="何为 “内卷”？"></a>何为 “内卷”？</h2><p>《<a href="https://www.thepaper.cn/newsDetail_forward_9648585">人类学家项飙谈内卷: 一种不允许失败和退出的竞争 @ 澎湃新闻</a>》(<a href="https://web.archive.org/web/20210115085527/https://www.thepaper.cn/newsDetail_forward_9648585">网页存档</a>)<br>(编程随想注: 以下是该报道的部分摘录, 段落内部的粗体是俺标注滴)</p><blockquote><p>2020 年, 可能没有第二个人类学术语比 “内卷” 更加出圈了, 它本来是人类学家解释为什么一个社会或组织既无突变式发展, 也无渐进式的增长, 只是在一个简单层次上自我重复的概念发明.<em>现在则意味着 “白热化的竞争”, 人们在日常生活的方方面面拼尽全力, 以使自己在社会上获取少量竞争优势, 挤占他人的生存空间, 同时造成精神内耗和浪费. 人们可以在当代生活的方方面面识别出内卷, 可以说是从幼儿园一路”卷” 到职场、连婚恋也可以”卷到天上去”.</em></p><p><em>澎湃新闻请到了人类学家项飙来谈谈内卷, 今天的内卷和它在被发明之初的含义有什么区别？我们又如何描述当代生活中的内卷？</em><br>人类学家项飙非常擅长使用比喻和日常观察来深化和细化我们对于概念的理解. 他把内卷描述为一种 “不断抽打自己的陀螺式的死循环”, 他更是站在人类学视野下竞争的大框架内理解 “内卷”, 指出内卷现象是人类社会的例外现象, 它的背后是高度一体化的缺乏退出机制的竞争.</p><p>编程随想注: 这篇文章以问答形式展开. 由于篇幅很长, 俺只摘录项飙的部分回答内容)</p><p><strong>今天的内卷是一个陀螺式的死循环</strong></p><p>……</p><p>内卷这个概念最早是格尔茨通过对爪哇岛的农业经济的总结里面提出来. 他要解释的是为什么农耕社会长期没有大的突破. 农耕经济是越来越精细化的, 在每个 (土地) 单位上投入的人力越来越多, 我们可能会想象说投入的人力越多, 你的产出也会是高的, 可实际上这一点的提高, 因为人力多投入而增加的产出, 就也只够人力本身的消费了, 就是说你多了一张嘴就被这张嘴消费了, 如此而已. 所以就造成了一种平衡状态, 多少年一直如此.<br>为什么叫内卷？是说你在耕作的时候, 大家对每一个细节都越来越关注, 可是到最后产出跟你投入是没有关系的, 甚至是负增长. 如果你要到一个荒野上去开垦荒地, 粗放地耕种, 其实你的产出和投入的比例反而更高. 我在读书的时候, 我的老师北大孙立平教授就说, 你看中国农民, 他们种田跟种花一样. 精耕细作这四个字, 是对亚洲农业很好的概括. 后来学者黄宗智研究长江三角洲的及农业经济的发展, 他把内卷的概念引到了对中国的农业经济史的分析, 他的分析跟 Mark Elvins”高水平陷阱” 的意思, 基本上是相通的.”高水平陷阱” 是说, 中国在很早就在农业技术、行政管理, 还有社会组织、人力动员方面达到了很高的水平, 但它达到高水平之后一直就没有突破. 农业的生活和生产方式就没有变化. Mark Elvins 的解释是指在 17 世纪以后, 中国基本上开垦了所有能开垦的土地, 土地没有增长, 但是人口一直在增长. 人口的增长靠什么来维持？主要就是靠精耕细作, 靠这种非常内卷的方式.<br>人口增长是跟文化有关系的, 因为我们文化是要多子多福, 然后人口的增长倒过来就使得人力变得非常便宜, 所以没有技术创新的动力, 觉得有事儿就是靠人力. 这是中国农业跟欧洲农业很大的一个差别. 比如说, 扁担在欧洲基本上是不存在的, 你找不到扁担这个东西, 而中国在任何农业家庭里都有扁担. 在欧洲所有重的活都是动物做的, 很少需要人做, 然后欧洲后来有了蒸汽机, 要机械, 就是说靠自然的物理的能源来解决.<br>杜赞奇把内卷的概念转化为行政和政治上. 他要解释 <em>清朝末年的新政要加强国家的控制, 所以它要建各种各样的官僚机构, 国家投入了很多钱, 建立官僚机构, 但是国家基层的行政能力并没有增强, 对这个地方社会的服务没有增强. 这是国家建设中的内卷. 这导致什么后果？它有了那么多的官吏, 就不得不从农民那里汲取更多的税务来养这些管理人员. 但这些官吏很快就变成拿了工资为自己服务而不是为农村社会服务. 最后导致了农村社会的解体和革命, 因为攫取越来越多, 但是没有反馈.</em><br>(编程随想注: 上述这段话从 “行政治理” 的角度谈中国历史的 “治乱循环”. 同样的话题, 俺在更早之前的博文《<a href="https://program-think.blogspot.com/2020/04/Government-and-System-Robustness.html">“政治体制” 与”系统健壮性”——基于 “复杂性科学” 的思考</a>》也聊过, 而且比上述更详细, 并结合了 “复杂系统” 的相关理论)</p><p>……</p><p>如果要跟原来讲的内卷做一个比较, 就提出一个新的问题了. 传统上谈内卷是说为什么会形成一个高水平陷阱, 一代重复一代, 从 17 世纪以后没有竞争, 大家都只是维持糊口的水平.<br>而今天我们看到的, 是一个死循环的陷阱, 你不是每天都在重复你的工作, 你在不断发现新的抹油和辅食的品种, 成天在微信群里面看别人在用的最新的东西, 你如果重复的话, 你心里就很慌. 而且孩子不断的长大, 选幼儿园就开始烦, 然后到了小学就纠结, 然后到小升初的时候, 就是说是快逼疯的时候了. 这个当然跟农耕社会里边的高水平相结合不一样.<br><strong>如果说原来内卷指的是一个重复的, 没有竞争的, 不能摆脱农耕社会这么一个结构性格局;那么今天的内卷是一个陀螺式的死循环</strong>, 我们要不断抽打自己, 让自己就这么空转, 每天不断地自己动员自己. 所以它是一个高度动态的陷阱, 非常耗能. 在小农社会里面, 它体力上很累, 但是不会有今天这种在精神上的这种折磨.</p><p>……</p><p><strong>内卷背后: 高度一体化的竞争</strong></p><p>……</p><p>在职场这个角度, 我们可以说内卷是用来对现在资本主义的批判. 但是用资本主义这个词太宽泛了, 不太精确. 因为资本主义最早起源的地方, 比方英国, 然后现代资本主义发展的最好的, 可能是德国, 在这些国家并没有出现这种 “内卷” 现象, 所以它是有一点中国特色的.<br>内卷背后, 可能指的是:<strong>高度一体化的市场竞争成为生活导向, 成为社会的基本组织方式和生活和资源分配方式</strong>.<br>首先当然是市场竞争. 但是很多竞争其实不是市场性的, 比方说你教育在严格意义上并不是市场性的, 考试都是国家或者学校设定的. 但是它会模拟市场竞争, 把这个东西搞成像市场竞争一样, 让大家来参与.<br>然后 “高度一体化” 非常重要.<strong>我们今天讲的内卷的一个很重要的前提条件是不分化, 大家认准一个目标, 为同一个唯一的目标活着</strong>. 否则的话, 如果你在职场不高兴, 你去干点别的, 开个面馆不行吗？不可以, 大家一定要挤在一个道上.<br>大家现在对 “三和日结工” 其实是有一种恐惧的, 就是说你怎么就这样退出竞争了, 这个怎么行？(编程随想注:”三和日结工”俗称”三和大神”, 后续俺会转载其它文章介绍这个群体)<strong>在中国, 大家面临的压力不仅是说你要往上走, 而且不允许你往下走</strong>.最近一位读了研究生的同学告诉我, 他去麦当劳应聘, 麦当劳看了他的学历之后, 第一句话就问: 你有没有考虑你父母怎么想. 这句话是问得很重的, 不是说你这个书都白读了, 学费都白交了, 直接是牵涉到情感问题和道德问题, 好像是一种背叛. 就是说你要把自己的社会阶层往下走, 在道德意义上是背叛, 到了这个程度.<br>全国人民朝着一个目标去, 要多赚钱, 要买一百多平的房子, 要买车, 一定要成家等等. 这个线规划好了, 大家高度一体化, 都要在这样一个市场里面争夺同一样东西.</p><p>……</p><p><strong>我们的竞争不允许失败和退出</strong></p><p>……</p><p>如果看一些比较成熟的社会, 为什么大家相对安生了？大家安生了并不是因为说大家知道没有希望了, 而是说把你的希望你的努力重新分配. 你看到自己的特长, 看到自己的兴趣, 然后有很多不同的渠道, 活得好的方式也是很不一样的. 大家各自去找渠道, 这样的情况下会有安生. 他并不是说努力没有用了, 而是说大家还是要努力, 但是努力的方式不一样, 你找出自己的途径来. 我们最大的问题是末班车过了, 但是我们又不愿意开出新的赛道来.<br><strong>所谓内卷性不仅仅是说竞争激烈不激烈的问题, 而是说白竞争, 明明知道最后的收获也没有什么, 大家还是要竞争</strong>.不知道除了竞争之外, 还有别的什么方式值得去生活. 如果你退出竞争的话, 你有道德压力.</p><p>……</p><p><strong>现在内卷的一个很重要的特征, 就是没有退出的机制, 不允许你退出</strong>.刚才讲到那位同学要去麦当劳工作, 面试官第一句话就是说你父母怎么想？你要往下走, 要退出竞争, 过自己的生活, 你面对的道德压力是非常大的. 现在对 “三和青年” 的各种讨论背后也是有一种焦虑, 就觉得这些人怎么就这样退出竞争了.<strong>因为整个社会的稳定, 整个社会的所谓发达都是靠这种白热化的竞争维系起来的</strong>.</p><p>……</p><p>竞争不完全是水平的, 双边关系的. 竞争从来都是一个三角关系, 因为竞争它需要一个一个的第三方来确定. 在最普遍的模型里面, 比方说像体育竞争, 当然你需要一个第三方, 一个裁判, 或者说一个经济的集团社团, 确定竞争规则. 这个是第三方. 今天我们同学和同学之间的竞争, 其实完全是由第三方来控制的. 我们原来认为竞争是因为资源有限, 是因为大家所谓供给需求关系不均衡. 但是如果我是一个村长的话, 如果我今天发明出一种方法, 让所有的人互相竞争, 最高的奖赏是我对他的认可, 这样我作为一个村长是不是非常舒服？所谓的短缺, 都是人为的. 什么样是好的生活, 什么样的东西是有体面的, 这不都是人造的 (人为设定的)？<br>这种竞争导致一种非常高度的整合能力, 就把所有的人都统一思想, 所有的人一起消耗精力和生命, 也不想别的, 让大家就是这么的忙碌着.</p><p>……</p></blockquote><p>编程随想注:</p><p>针对上述摘录的最后两段 (竞争的【三角关系】), 再稍微补充几句——</p><p>天朝的特色是: 先通过洗脑, 让大多数人都认同某个【高度一元化】的评价体系, 于是大多数人都愿意为该评价体系内的某个目标付诸毕生的努力. 当绝大部分人的目标高度【同质化】, 就如同大部分人都挤在同一个赛道上, 自然会有【无谓的内耗】——这就是 “内卷” 的根源.</p><p>通过这种方式,<em>极少数人 (权贵) 可以实现对大多数人的【奴役】. 而大多数人深深地陷入 “内卷” 的困境(陷入内耗), 当然没有精力去思考为啥他们会深陷这种困境. 如果他们没有精力去思考, 就更加不可能去反抗.</em></p><p><em>不得不感叹: 这是一种高明的奴役方式！</em></p><p>俺上述这些分析, 对于项飙同学这种聪明人, 当然也明白. 但为啥他在这篇访谈中没有说破捏？很简单, 如果他把这层窗户纸捅破 (道出问题的根源), 这篇访谈直接就被真理部封杀了, 根本发不出来.</p><p>大约十年前 (2011 年左右), 俺就一直唠叨这样一句话:<strong>你可以不关心政治, 但是政治会来关心你</strong>.如今大部分人都深陷于”内卷” 的困境中, 充分体现出”政治体制对每个人的影响”.</p><h2 id="天朝的财富分布-严重的两极分化"><a href="#天朝的财富分布-严重的两极分化" class="headerlink" title="天朝的财富分布, 严重的两极分化"></a>天朝的财富分布, 严重的两极分化</h2><p>刚才俺提到了 “一元化的评价体系 ＆ 高度同质化的目标”. 但光有这些还不够. 为了让大部分屁民死心塌地参与到无意义的内耗中, 还需要用一些心理学招数作为辅助手段. 比如说: 如今很多人都有严重的【焦虑感 ＆ 不安全感】.<br>本章节分享 “天朝社会的财富分布”, 有助于你更好地理解这种 “焦虑感 ＆ 不安全感”.</p><p>《<a href="http://economy.caixin.com/2020-06-15/101567552.html">统计局回应 6 亿人月收入 1000 元: 有数据印证 @ 财新网</a>》(<a href="https://web.archive.org/web/20200718231124/http://economy.caixin.com/2020-06-15/101567552.html">网页存档</a>)<br>(编程随想注: 以下是该报道的全文)</p><blockquote><p>近期国务院总理李克强在全国两会后的记者招待会上 “<strong>有 6 亿人平均每个月的收入也就 1000 元左右</strong> “ 的表述, 引起社会热议. 国家统计局新闻发言人付凌晖 6 月 15 日表示, 这可以从全国住户收支与生活状况调查数据得到印证.<br>付凌晖表示,《中国统计年鉴》《中国统计摘要》等刊登的 2019 年住户收支调查相关数据显示, 低收入组和中间偏下收入组共 40% 家庭户对应的人口为 6.1 亿人, 年人均收入为 11485 元, 月人均收入近 1000 元. 其中, 低收入组户月人均收入低于 1000 元, 中间偏下收入组户月人均收入高于 1000 元.</p></blockquote><p>《<a href="https://www.163.com/dy/article/FLG3UH8P0521AGAE.html">中国人的收入到底有多高 @ 网易</a>》(<a href="https://web.archive.org/web/20210130085955/https://www.163.com/dy/article/FLG3UH8P0521AGAE.html">网页存档</a>)<br>(编程随想注: 以下是该报道的部分摘录, 粗体是俺标注滴)</p><blockquote><p><strong>中国有多少穷人？</strong></p><p>总理李克强给了一个算得上官方权威的回答: 中国有「6 亿中低收入及以下人群, 他们平均每个月的收入也就 1000 元左右」. 这个数字让很多人感到惊讶, 他们难以想象「每个月 1000 元是怎么活下来的」.<br>后续媒体报道引用统计数据来说明总理回答的严谨性. 如根据国家统计局公布的住户抽样调查数据, 2019 年收入最低的 40% 家庭的年人均可支配收入为 11579 元, 月人均可支配收入为 965 元. 也就是说, 中国平均每月可支配收入在 1000 元左右的人群超过了 40%.<br>更常见的引用数据来自北京师范大学中国收入分配研究院, 他们的《中国家庭收入调查》(Chinese Household Income Project, 简称 CHIPs) 通常被视为国内最权威的收入分配研究. CHIPs 的数据也同样印证了总理回答的准确:</p><ul><li>中国有 39.1% 的人口月收入低于 1000 元, 换算成人口数即为 5.47 亿人, 同时月收入在 1000-1090 元的人口为 5250 万人, 因此 1090 元以下的总人口为 6 亿人, 占全国人口比重为 42.85%.</li></ul><p><img src="https://lh5.googleusercontent.com/X-cUh2XbATAAt74kAHElLV70Z28Yn2Qdt6-bVZ4YIFjZWzaAX8nrcDTKDiG3U_EvXqI-di8MmM4vlyClS-Pw5WHWB4ZMqoO7Q_l6pzK67KXv8HN9Do0FriFiSHvVyzyRg5ug7zYRnLo" alt="(表格来自万海远、孟凡强, 北京师范大学中国收入分配研究院)"></p><p>   &lt;!–&gt; (表格来自万海远、孟凡强, 北京师范大学中国收入分配研究院) –&gt;</p><p>网民依据 CHIPs 的表格还注意到另一个问题: 中国有多少富人？「解析」似乎更加令人惊讶, 他们发现:<strong>原来人均可支配收入超过每月两万的只有 70 万人, 占总人口比例 0.05%</strong>.<br>这不是平常所说的「中产阶级」吗？「中产阶级」的人数居然都只有这么点？到底是哪里出了问题？</p><p><strong>「月收入 1000」的含义</strong></p><p>看新闻的大多数人并没有弄明白总理所说的「月收入」的意思, 因而高估了那「6 亿」人的贫穷程度, 同时低估了那「70 万」人的富裕程度.<br>总理说的「每个月的收入」, 指的是「家庭人均可支配月收入」.<br>其中「可支配收入」不易误解, 已经算得上一个常见的概念, 它可以粗略地理解为一个居民在税后拿到的各项收入, 无论这份收入是工资、开店办厂得来的, 还是拿到的补助、补偿、捐助, 甚至包括「单位发的」实物福利.<br>但「家庭人均」才意味着这些数据的实际统计方法: 它是由调查人员追踪访问得到的一个家庭的可支配收入, 再除以家庭成员的人数, 得到的「人均收入」.<br>比如说, 一对中西部农村夫妇外出到工厂打工, 家中留守一对子女, 由一位老人照顾, 这样的家庭就有五名成员, 工厂工资 3000 元出头, 一平均, 他们全家都是月收入 1000 元左右的中低收入人群.<br>而基于现实考虑, 上有老下有小的农村家庭也不太能放任所有壮年劳动力全部外出, 更常见的情形应该是妻子在老家务农, 丈夫跨省务工. 这样即使丈夫成为了熟练工乃至工匠, 每月能挣到六七千, 算得上较高收入的打工者, 其家庭人均月收入仍然在「1000 元左右」.<br>根据北师大 CHIPs 的调查数据, 不难为这「六亿人」作一个画像: 他们绝大多数来自农村、中西部地区, 家庭规模在各阶层中是最大的 (户均 4.59 人) , 能挣钱拿工资的比例却是最低的 (37.37%) , 与上面讲到的两种例子高度相符, 再加上学历普遍不高, 也限制了他们务工挣钱的上限.</p><p><strong>「月收入两万」的含义</strong></p><p>那要做到「人均可支配收入」超过两万, 这样的家庭又该富到什么程度呢？<br>考虑到国内富裕家庭较多生育二胎, 可以以一个四口之家为例, 在社保、个税缴纳规范的城市里, 一对夫妻挣钱, 养两个孩子, 也就是夫妻双方的<strong>税后</strong>月收入都在 4 万元以上, 两人加一块,<strong>税前</strong> 年收入至少要超过 125 万. 如果这对夫妻的收入并不均衡, 比如妻子税后月收入「只」有 2 万元, 则丈夫<strong>税前</strong> 月薪必须超过 8.3 万, 属于百万年薪的「金领」阶层.<br>他们当然是凤毛麟角一般的有钱人.</p><p><strong>真实的「中产」</strong></p><p>即使看了前面的解释, 很多人大概还是会诧异, 觉得中低收入人群比他想象的要多, 而「金领」阶层远比他想象的要少.<br>这也不奇怪,<strong>我们日常在舆论里, 见到的多是关于「中产阶级」的迷思性描述, 再加上为「中产」量身打造的消费宣传, 很容易拉高了大众对中国人收入状况的估计</strong>.<br>到底赚多少能算中产？其实在大约十年前, 学术界就有一个相对合理的国内中产阶级标准——家庭<strong>年收入</strong>超过 8000 美元, 在今天折合人民币约 5.5 万. 多少有点巧合, 按照西南财经大学中国家庭金融调查与研究中心发布的数据, 这刚好是 2018 年中国家庭收入的中位数.<br>不过在今天来看, 一个家庭只有这样的年收入显然有些寒酸, 他们在生活方式上应该更接近总理说的那六亿人, 而与大众印象里的「中产」相去甚远.<br>但能够符合「中产」印象的人实在是太少了. 人们把上万月薪视作「中产」的基本门槛, 然而根据中国家庭追踪调查 2018 年数据, 哪怕是全家人<strong>税后月收入</strong>加起来能超过一万元, 都已经超过了全国 87.5% 的家庭. 如果夫妻双方的<strong>税后工资</strong>(社保、个税规范缴纳) 均超过一万元, 那他们必定属于中国前 5% 的高收入人群.<br>未婚青年可能对家庭收入的概念缺乏感知, 中国家庭追踪调查里还有一项「全国城镇劳动力主要工作收入」, 同样可以颠覆很多人对自己收入的认识: 一个月税后挣到 5000 元以上 (包括奖金) , 就超过了全国 80% 的工薪族. 至于税后工资过万, 那可以超过 97.5%.<br>显然, 绝大多数中国人的收入水平, 都与电影、电视剧甚至媒体热炒的公共话题对不上号</p><p>……</p></blockquote><p>编程随想注:<br>上述这篇分析了: 为啥 “家庭人均可支配月收入超过 2 万”, 仅仅才 70 万人, 占全国总人口不到千分之一 (再次提醒注意:【家庭人均】和【可支配】这两个定语)<br>虽然这这 70 万人已经可以算是【金领】, 但即使在这 70 万人里面, 依然存在严重的【两极分化】. 请看如下这篇文章.</p><p>《<a href="http://www.sohu.com/a/303827373_100001551">银行年报透露高端客户资产信息——14 万人拥有 3 万亿存款, 人均 2000 万 @ 搜狐</a>》(<a href="https://web.archive.org/web/20190329050507/http://www.sohu.com/a/303827373_100001551">网页存档</a>)<br>(编程随想注: 以下是该报道的部分摘录, 粗体是俺标注滴)</p><blockquote><p>2019-03-26</p><p>……</p><p>在三家银行 (注: 招商、平安、浦发) 的零售客户中, 私人银行客户均是零售业务资产构成的重要板块. 尽管门槛标准有所不同, 但总体来看,<strong>不到万分之五的私人银行客户占据了行内 3 成左右的零售客户总资产</strong>, 目前三家银行共计 14 万高端客户, 支配着高达 3 万亿元的资产.</p><p>……</p><p>在零售客户中, 招行的金葵花及以上客户 (总资产在 50 万元及以上的零售客户) 达到 236.26 万户, 较上年末增长 11.09%. 上述客户的总资产余额为 5.51 万亿元, 占全行管理零售客户总资产余额的 80.98%,<strong>这意味着 1.9% 的客户占据了 81% 的资产</strong>.</p><p>……</p><p>平安银行 2015 年年报显示, 截至 2015 年, 平安银行的私人银行客户 1.45 万用户, 管理资产超过 2500 亿元, 平均每位私人银行客户管理的资产约为 1726 万元. 若平安银行的私行客户户均资产未出现明显下降, 目前该行的私行客户资产已经超过 5100 亿元, 占零售客户资产的 36%,<strong>这意味着, 万分之四的客户占据了 36% 的资产, 相比招商银行更为集中</strong>.</p><p>……</p><p>截至 2018 年末, 浦发银行的个人客户达到 7688.93 万户, 个人金融资产余额 1.80 万亿. 以 5000 亿元作为基准计算, 该行的私行客户资产约占总零售客户资产的 27.73%, 即<strong>占客户总数不到万分之五的私行客户占据了近三成的零售资产</strong>.</p><p>……</p></blockquote><p>编程随想注:<br>刚才这篇引用的都是大型银行的年报, 数据的准确度很高, 而且覆盖面很广, 具有【统计学意义】.<br>从数据上看, 贫富分化已经非常严重;但俺要提醒大伙儿: 以上数据所反应的贫富分化, 依然被【严重低估】——<br>其一,<br>因为天朝最穷的 6 亿民众 (也就是光头强总理所说的 “6 亿中低收入人群”), 他们中的大部分人, 显然没有银行存款. 因此, 上述三家大型银行的统计数据, 无法覆盖到这部分穷人. 如果把这部分穷人也算进去, 你会发现: 富豪在【总人口】中所占的比例, 实际上更低.<br>其二,<br>如果某人在银行的存款达到【千万级别】, 很显然, 这笔钱只是此人总资产的一部分. 有千万级存款的人, 多半还有 N 套房子 (N 可能是两位数). 除此之外, 通常还会有其它的一些资产组合. 甚至包括一些【灰色】资产 (很难被统计到的资产).<br>综上所述, 从 “存款统计” 看”贫富分化”, 依然会严重低估.</p><h2 id="【教育】的内卷-以”高校”-为例"><a href="#【教育】的内卷-以”高校”-为例" class="headerlink" title="【教育】的内卷 (以”高校” 为例)"></a>【教育】的内卷 (以”高校” 为例)</h2><p>在上个月 (2020 年 12 月) 的博文《<a href="https://program-think.blogspot.com/2020/12/Study-and-Life.html">学习与人生——700 篇博文之感悟</a>》中, 俺刚刚吐槽过天朝的 “傻逼教育体制”(此处的”傻逼” 是双关语——既指”教育的运作方式”, 也指”教育的产物”).<br>当天朝的各个阶层都在内卷, 教育界自然也逃不出这个命运, 而且教育界的内卷会更惨烈. 因为每个阶层都寄希望于——通过教育来实现阶层上升 (或者起码保持阶层不下降).7 年前 (2014 年 1 月) 俺曾经写过一篇《<a href="https://program-think.blogspot.com/2014/01/misunderstanding-about-making-money.html">为啥急功近利反而赚不到钱——给拜金主义者的忠告</a>》, 其中有一句很重要的话:<strong>人满为患的康庄大道反而变成羊肠小道,而人迹罕至的羊肠小道却如同康庄大道</strong>. 当绝大部分家庭都寄希望于”通过教育来改变阶层”, 这条路就是上述所说的——“人满为患的康庄大道反而变成羊肠小道”.<br>俺猜很多读者肯定想问: 这下该咋办捏？<br>在这种局面下, 那些足够聪明的人会去寻找 “人迹罕至的羊肠小道”——这也就是俺经常唠叨的【间接路线战略】.</p><p>《<a href="https://www.sohu.com/a/419676894_105067">绩点为王——中国顶尖高校年轻人的囚徒困境 @ 搜狐</a>》(<a href="https://web.archive.org/web/20210130070710/https://www.sohu.com/a/419676894_105067">网页存档</a>)<br>(编程随想注: 以下是该报道的部分摘录, 粗体是俺标注滴)</p><blockquote><p>“在北大和清华, 一个经常被提到的名词就是’卷’, 简言之就是一种因竞争而起的精力消耗和浪费.” 李华说. 人人都处于经济学所说的囚徒困境中. 他还记得新生入学的时候, 大家都有一种期待, 在琳琅满目的课表里选自己有兴趣的,”在社团里做得风生水起, 搞一些大事情”. 但辅导员老师、学长们很快就会让大家冷却冲动, 理性地聚焦到一件事上: 绩点. 北京大学元培学院院长李猛曾总结:”北京大学学生的学习特点——以绩点为中心, 不同层次的学生都关注绩点, 关注每一门课的绩点.”<br>“绩点” 让前途、出路这些看似还遥远的事情迅速压在刚刚从高考中脱身的孩子们身上.”不管你未来走哪一条路, 绩点都是基本保障.” 李华解释说,”选修双学位要看你在院系里的排名, 最热门的经济学双学位或者中文双学位, 没有 3.6 申请起来确实会比较乏力, 而且要看大一的成绩.” 保研首先需要被所在的院系推荐, 一般来说, 需要总绩点排名达到前 60%. 然后, 还需要看接收院系的要求, 这个标准在 10%～ 40%. 如果学生想去一个热门的院系,”没有 3.7 可能是很乏力的”. 出国念书根据不同的项目有不同的要求, 好学校的要求自然不会低. 至于找工作, 绩点是履历上最一目了然的指标.”申请实习的时候就能感觉到, 有互联网大厂会要求你填写成绩在百分之几的水平. 据说在金融行业, 绩点直接决定了你能去什么档次的公司.”</p><p>……</p><p><strong>绩点的背后是高等教育功能的变化. 一个显著的标志是大学对学生的考核标准变了</strong>.80 年代, 考试评分单纯依据学生对知识与技能的掌握程度. 从 1998 年开始, 成绩评定有了优秀率和不及格率的要求. 根据 2007 年的规定, 优秀率一般不应超过 30%, 不及格率一般不超过 10%. 这个原则意味着考试评价不仅考查对知识的掌握, 更要评价学生在群体学习中的相对位置, 考试演变成当下同辈之间的竞争, 分数成了未来竞争的工具.<br>在清华、北大这样的高校中, 分数的厮杀自然会格外惨烈. 用刘云杉的话说:”这是一个由各级各类’状元” 组成的群体. 考试既是他们证成加冕的盛典, 又是塑造他们心智品质、身心惯习的日常战场. 身经百战的他们, 个个身怀绝技, 人人出手不凡.” 要获胜, 只能寻找窍门, 不断加码. 李华常遇到的一种情况是: 一门课程老师要求提交 3000 字的论文, 但是有同学发现提交 5000 字论文能拿到更高分数, 于是所有人都卷入了字数竞争.<br>高绩点不仅要求埋头苦学, 更要求理性经营, 在得失之间谨小慎微地做出选择. 刘云杉在研究中分析:”学年或总评学习绩点 = 所学课程学分绩点之和 / 所学课程学分之和. 所有课程参与计算,<strong>就课程对绩点的贡献来看, 除了学分大小有差异之外, 课程的其他特征都被夷平了</strong>.”</p><p>……</p><p>大学里应运而生了一种课程, 名曰 “水课”. 有学生这样告诉刘云杉:”我们要有刷绩点的课, 这就是’水课’, 上课讲讲 PPT, 考试考考 PPT……PPT(拼音) 就是”骗骗他”, 跟看电影似的, 看时高兴, 看完就忘, 能记住多少？…… 我现在修了 100 多学分, 高质量的不到 20 个学分.”<br><strong>在被绩点统治的世界里, 一个学生可能很成功, 但根本没成长</strong>.刘云杉访谈过一个孩子, 进入大学后, 发现 “课堂只教很简单的语句、规则, 大量的练习需要自己下去应用、搭建. 我主动性差, 不愿意去学新的东西;如果设计完成一个项目, 需要学习一种相匹配的新语言, 我觉得好烦好难. 小组共同完成的大作业, 我最后做个 PPT, 实质贡献是零, 在组里我很尴尬, 别人也很尴尬. 后来, 我就不再选这类课了, 因为我也不想拖累别人”.<br>在大学, 他完全按照高考逻辑获得了绩点上的 “成功”:”我专业的实际水平可能是倒数, 但绩点一定要排在前面. 大三有一门必修课, 平时作业抄室友的, 课程考试 70% 都出自往年的试卷, 助教可能再出 20% 的新题, 老师再出 10% 的新题. 我在 BBS 上把能找到的试题全部打印出来, 追着助教一道一道问清楚;我还巧妙地将助教出的 20% 考题给套出来了, 最后这门课竟然得了 95 分！裸分第二名！我自己都惊呆了, 因为我真的什么都没学会.”</p><p>同样的逻辑并不只在绩点上体现. 今天的大学, 学生可以做学生工作、参加各种比赛、申请出国项目、实习等等, 每一项都可以出现在未来的履历上, 成为日后参选社会精英的资本.<strong>是否能够学到东西、是否属于自己的兴趣范畴, 不再是从事这些活动的唯二评价标准, 它在履历上的含金量是必须要考虑的. 于是, 这又成了一种 “卷”</strong>.为了不落后于同学, 陷于被动, 每个人不得不把自己的简历尽可能地填满.</p><p>……</p><p>有位老师当过省招生组组长, 参加过竞赛生、自主招生、科创等项目的面试. 他告诉刘云杉, 早几年自主招生时, 经常能见到非常有特点的学生. 大概从 2015 年开始, 他就不愿意再参加了.”因为招生所面对的学生几乎是一模一样的, 所有解析都一样. 为什么？培训机构. 现在很多孩子, 包括自主招生、冬令营、竞赛中的孩子越来越会揣摩: 老师你怎么想？我怎么迎合你？这很可怕.”<br>在被打磨成相似的 “原材料” 的过程里, 孩子们失去了宝贵的鲜活经验和成长的多种可能性. 甘阳在中山大学博雅学院当院长的时候面试学生, 看到很多孩子都有钢琴十级证书, 一开始他为这么多家庭都有艺术教育感到很欣喜, 可深入了解后, 他发现几乎没有一个孩子真的对音乐有兴趣.<br><strong>从前, 老师们认为最好的中学生是课外书读了很多的孩子. 现在, 绝大多数进入顶级高校的孩子都没有丰富的阅读经验,”真的读了很多书的, 反而考不进来”</strong>.甘阳常常问学生中学的时候读过什么, 得到的解析经常是高考有关的, 要不就是 “四大名著”——“我最不想听到说四大名著, 都是概念性的东西, 有没有真读过, 我一问就知道.”<br>在多年的训练里, 年轻人真实的学习能力被剥夺.<strong>刘云杉有种强烈的感觉, 孩子们越来越不善于读书</strong>.”教育最重要的是动手、动心、动脑, 但他们往往只会动脑. 书本里的东西需要和自己的人生经验、人生困惑结合在一起, 才能变成自己的东西. 很多孩子在方法上很熟练, 你给他们一个复杂的文本, 他们会画思维导图, 拆解一套逻辑结构给你, 很像那么回事, 可实际上他们无法把书本和经验联系在一起. 我必须让他们举两个例子, 把理论变成一个故事, 再用自己的话讲给我听, 反复倒腾几遍, 我才能确认他们是不是真的懂了.”</p><p>……</p><p><strong>在工具理性和成功学的浸淫下, 志趣变成稀缺品</strong>.一位理科学院院长告诉刘云杉, 曾有一个绩点高达 3.89 的学生来申请奖金学, 老师们一看, 几乎所有难的、具有挑战的课程, 他都巧妙地回避了, 所以成绩单很漂亮. 老师们追问他为什么不选有挑战的课, 他说, 那不是他的兴趣所在. 老师们又问:”什么是兴趣？” 他说, 兴趣就是被承认, 如果不被承认, 就说明没有胜任力, 自然也就没有兴趣.<br>“我得出结论, 他不是对知识感兴趣, 而是对分数感兴趣, 对绩点感兴趣.” 这位院长说:”我坚决主张, 不给他奖学金, 如果我们奖励这样的学生, 鼓励这样的做法, 我们学校就完了.”<br>“<strong>大学需要培养有创造性的人才, 创造的前提是敢于冒风险, 而成功学的要义恰恰是规避风险</strong>.” 刘云杉说.</p><p>……</p></blockquote><p>编程随想注:<br>在前不久的博文《<a href="https://program-think.blogspot.com/2020/12/Study-and-Life.html">学习与人生——700 篇博文之感悟</a>》一文中, 俺专门吐槽过 IT 行业里面的 “名校科班精英”(名牌大学计算机系高材生). 大部分”名校科班精英” 的工作能力【很差】(只有小部分是真的优秀). 看完上述这篇《绩点为王》, 有助于你明白其中的原因. 如果连清华北大都如此明显的【高分低能】, 其它名牌大学可想而知.<br>上述文章还提到了 “那些考了钢琴十级证书的小孩, 几乎没人对音乐有兴趣”. 为啥会这样捏？俺在上述《学习与人生》中也谈到了——关于 “培训班和补习班的【毒性】”.<br>另外, 很多身为家长的读者, 自己并没有理解 “什么是兴趣”. 建议这些人看看《<a href="https://program-think.blogspot.com/2015/12/Hobbies-and-Interests.html">什么是【真正的】兴趣爱好？以及它有啥好处？</a>》</p><p>《<a href="https://www.thepaper.cn/newsDetail_forward_10004246">刘云杉谈 “教育内卷”: 教育解决不了社会结构问题 @ 澎湃新闻</a>》(<a href="https://web.archive.org/web/20210130105502/https://www.thepaper.cn/newsDetail_forward_10004246">网页存档</a>)<br>(编程随想注: 以下是该报道的部分摘录, 粗体是俺标注滴)</p><blockquote><p>现在的中国和 1980 年代是完全不同的, 但也不是 “固化”, 如果真的固化的话, 今天的家长这么努力”推娃” 反倒是没有道理的. 大家依然愿意投资教育, 是因为大家认为还是有希望凭借此来改变后代的命运.<br>之前大家都在自动上升的扶梯上, 但这种上升的状态不可能总在持续, 我们的下一代会面临更复杂的问题, 面对更多的不确定性. 底层在教育中有实现平等的诉求, 中产阶层则要投资与经营, 防止地位下滑, 而精英群体则要严格地维持自身的地位. 这些诉求都在教育场域之中展开博弈.<br>然而问题的症结在于 “教育内卷”(即过度或者不当的竞争) 的出现,<strong>教育的筛选功能与培养功能完全脱节, 有筛选无培养, 或者说围绕筛选而进行训练, 这就把教育内在的育人逻辑侵蚀了</strong>.<br>“教育内卷” 之下, 教育本身已经被扭曲成了各方利益博弈的赌场, 赌资是孩子的成绩和成就, 其后是家庭的投入、经营以及相应的社会资源.<br>……</p></blockquote><h2 id="【白领】的内卷-以”拼多多”-为例"><a href="#【白领】的内卷-以”拼多多”-为例" class="headerlink" title="【白领】的内卷 (以”拼多多” 为例)"></a>【白领】的内卷 (以”拼多多” 为例)</h2><p>编程随想注:<br>2021 年元旦前后,”拼多多”在不到两周时间, 发生一起员工猝死以及一起员工自杀. 所以本章节转载的文章, 大都与 “拼多多” 有关.</p><p>《<a href="https://chinadigitaltimes.net/chinese/661474.html">大厂里的数据奴隶 @ 中国数字时代</a>》(<a href="https://web.archive.org/web/20210130093202/https://chinadigitaltimes.net/chinese/661474.html">网页存档</a>)</p><p>《<a href="https://chinadigitaltimes.net/chinese/661472.html">重磅爆料, 我在拼多多的三年 @ 中国数字时代</a>》(<a href="https://web.archive.org/web/20210130093309/https://chinadigitaltimes.net/chinese/661472.html">网页存档</a>)</p><p>《<a href="https://www.huxiu.com/article/374050.html">拼多多的厕所上了热搜, 996 的大厂员工没有如厕自由 @ 虎嗅</a>》(<a href="https://web.archive.org/web/20201227122720/https://www.huxiu.com/article/374050.html">网页存档</a>)</p><p>《<a href="https://chinadigitaltimes.net/chinese/661405.html">一位五个月共休息了五天的拼多多员工决定离职 @ 中国数字时代</a>》(<a href="https://web.archive.org/web/20210128090048/https://chinadigitaltimes.net/chinese/661405.html">网页存档</a>)</p><p>《<a href="https://finance.sina.com.cn/tech/2021-01-14/doc-ikftssan6024495.shtml">拼多多员工自杀背后——什么在逼迫年轻人至死方休？ @ 新浪</a>》(<a href="https://web.archive.org/web/20210130104251/https://finance.sina.com.cn/tech/2021-01-14/doc-ikftssan6024495.shtml">网页存档</a>)</p><p>编程随想注:<br>俺要提醒大伙儿, 天朝的黑心企业太多啦, 远远不止 “拼多多” 这一家. 比如下面这篇转载, 揭露的是华为.<br>《<a href="https://program-think.blogspot.com/2019/12/weekly-share-140.html">每周转载: 华为李洪元案——工作 996、离职 251、维权 404(大量网友评论, 多图)</a>》</p><h2 id="【蓝领】的内卷-以”外卖送餐”-为例"><a href="#【蓝领】的内卷-以”外卖送餐”-为例" class="headerlink" title="【蓝领】的内卷 (以”外卖送餐” 为例)"></a>【蓝领】的内卷 (以”外卖送餐” 为例)</h2><p>《<a href="https://finance.sina.com.cn/chanjing/gsnews/2020-09-08/doc-iivhvpwy5554456.shtml">外卖骑手, 困在系统里 @ 新浪</a>》(<a href="https://web.archive.org/web/20210114062604/https://finance.sina.com.cn/chanjing/gsnews/2020-09-08/doc-iivhvpwy5554456.shtml">网页存档</a>)</p><p>《<a href="https://www.infzm.com/contents/192781">外卖骑手被迫加速的驱动之手——AI 还是利益 @ 南方周末</a>》(<a href="https://web.archive.org/web/20210131121647/https://www.infzm.com/contents/192781">网页存档</a>)</p><p>《<a href="https://finance.sina.com.cn/tech/2021-01-16/doc-ikftssan7090696.shtml">自焚的饿了么骑手——工资被扣 5000 元, 多次讨要未果而轻生 @ 新浪</a>》(<a href="https://web.archive.org/web/20210127205335/https://finance.sina.com.cn/tech/2021-01-16/doc-ikftssan7090696.shtml">网页存档</a>)</p><p>编程随想注:<br>“外卖骑手” 面临的困境, 其实很类似于 “996 员工”. 他们的共同点是——【被压榨到极致】.<br>为啥这些大企业可以对员工进行如此极致的压榨捏？直接原因是【工会的缺位】. 关于这点, 俺至少已经写过如下两篇博文, 进行深入的分析.<br>《<a href="https://program-think.blogspot.com/2019/04/996-Working-Hour-System.html">“996 工作制” 只不过是【劫贫济富】的缩影——“马云奇葩言论” 随想</a>》<br>《<a href="https://program-think.blogspot.com/2020/11/Game-Theory.html">博弈论入门教程——从基本概念到具体案例</a>》</p><p>如果你进一步追问:”咱们天朝的工会, 为啥会缺位捏？”. 更深入的原因, 也就是俺经常唠叨的——如今天朝虽然挂着 “马列主义 or 社会主义” 之类的招牌, 其实搞的是【权贵资本主义】的把戏.<br>开博十多年, 俺已经写了几十篇博文了, 吐槽党国的政治体制. 比如下面这几篇:<br>《<a href="https://program-think.blogspot.com/2018/07/Robbing-the-Poor-Funding-the-Rich.html">相当奇葩的天朝,【劫贫济富】的国度</a>》</p><!-- 《[看看全国人大代表都是啥货色——兼谈 "议会道路的改良" 行不通](https://program-think.blogspot.com/2012/03/national-people-congress.html)》《[习包子露馅——习近平在内的权贵家族如何转移巨额海外资产](https://program-think.blogspot.com/2014/01/china-princelings-offshore-companies.html)》   --><p>……</p><p>顺便说一下:<br>【墙内】有很多文章对 996 的问题进行分析, 但都【没有】触及上述问题的根源. 上述根源不难想到, 为啥【墙内】的文章都没有提及捏？还是因为【真理部】——敢于说出问题本质的那些墙内文章, 都已经被审查、被封杀了.<br>因此, 如果某个网民只依赖【墙内】的信息来源, 就很容易被误导.</p><h2 id="底层众生相"><a href="#底层众生相" class="headerlink" title="底层众生相"></a>底层众生相</h2><p>《<a href="http://news.163.com/17/0830/14/CT3I1J3E000187VE.html">深圳 “三和” 纪事 @ 网易</a>》(<a href="https://web.archive.org/web/20181016164850/http://news.163.com/17/0830/14/CT3I1J3E000187VE.html">网页存档</a>)</p><p>编程随想注:<br>本文开头转载的那篇《人类学家项飙谈内卷》, 其中已经提到了 “三和大神”. 所以俺专门找来一篇相关的报道.<br>“三和大神” 虽然出自深圳, 但在其它一二线城市也有类似的群体.</p><p>《<a href="https://www.sohu.com/a/430664293_665455/">杀马特、三和大神、提桶者——二代农民工的出路在哪里？ @ 搜狐</a>》(<a href="https://web.archive.org/web/20210130074519/https://www.sohu.com/a/430664293_665455/">网页存档</a>)</p><p>编程随想注:<br>如副标题所示, 这篇讲的是 “大部分农民工子女的现状”.<br>关于 “三和大神”, 前面一篇已经介绍过;所谓的”提桶者” 指的是——他们的全部家当可以放在一个塑料桶里面.</p><p>《<a href="https://www.sohu.com/a/401396658_788514">我发现了一群都市隐者, 栖居在城市的皱褶里 @ 搜狐</a>》(<a href="https://web.archive.org/web/20210130071717/https://www.sohu.com/a/401396658_788514">网页存档</a>)</p><p>编程随想注:<br>这篇主要讲 “城市中的流浪汉”(无家可归者), 介绍他们的生活居所.</p><h2 id="“内卷”-的后果"><a href="#“内卷”-的后果" class="headerlink" title="“内卷” 的后果"></a>“内卷” 的后果</h2><p>当 “内卷” 越来越严重, 必然会产生很多宏观层面的社会问题. 由于本篇只是《每周转载》, 不是原创博文, 俺只简单聊几点:</p><ul><li>阶层固化</li></ul><p>当 “内卷” 越来越严重,”阶层固化”也会变得越来越明显.引申阅读:《<a href="https://program-think.blogspot.com/2013/12/chinese-social-stratification.html">点评中国社会九大阶层——没有公平、难以流动、无法稳定</a>》</p><ul><li>人口结构恶化</li></ul><p>关于这个话题, 俺在《<a href="https://program-think.blogspot.com/2019/10/70th-anniversary-of-PRC.html">“盛大庆典” 难掩【内忧外患】——天朝沦陷 70 周年随想</a>》一文中已经聊过了. 考虑到某些老读者比较健忘, 某些新读者没看过那篇. 再重复唠叨几句.最近十多年, 网上流传一句 “高房价是最好的避孕药”. 推而广之,”生活压力是最好的避孕药”.全面放开 “二孩” 已经好几年了, 而生育率依然【猛降】, 这就足够说明问题啦.当生育率持续下降, 很多人只关注 “总人口数的变化”. 其实”人口总数” 反而不是最重要滴;比这更重要的是【人口结构】. 如今天朝有着庞大的老龄化群体, 而年轻人却越来越少. 这个结构非常畸形, 并且会让【抚养比】快速恶化 (注:”抚养比” 越恶化, 则每个年轻人的赡养压力越大)</p><ul><li>稳定性下降</li></ul><p>天朝这种 “权贵资本主义” 的模式, 说到底是建立在【割韭菜】的基础上(广大屁民都是韭菜).如今韭菜都不愿意生小孩了. 于是在未来几代人, 可收割的韭菜会越来越少. 到时候, 朝廷靠什么来维持庞大的官僚系统？靠什么来维持庞大的维稳经费？到了某一天,”维稳经费” 不够用了, 政权的稳定性如何保障捏？</p><ul><li>幸福感递减</li></ul><p>韭菜减少了, 但朝廷的开销不会减少, 甚至会变得更多 (千万不要低估”官僚系统的贪婪”). 在这种情况下,(平均而言) 单棵韭菜遭遇的剥削就变得更沉重了. 体现到【代际】这个维度, 你就会感觉到”代际间的幸福感递减”. 通俗地说: 80 后比 70 后悲催, 90 后比 80 后悲催, 00 后比 90 后悲催……(以此类推) 当幸福感随着代际而递减, 从某种程度上也会降低父母的 “生育意愿”;于是韭菜会变得更少——最终形成某种消极的正反馈 (恶性循环).</p><p><strong>俺博客上, 和本文相关的帖子 (需翻墙)</strong>:<br>《<a href="https://program-think.blogspot.com/2020/04/Government-and-System-Robustness.html">“政治体制”与 “系统健壮性”——基于”复杂性科学” 的思考</a>》<br>《<a href="https://program-think.blogspot.com/2020/12/Study-and-Life.html">学习与人生——700 篇博文之感悟</a>》<br>《<a href="https://program-think.blogspot.com/2014/01/misunderstanding-about-making-money.html">为啥急功近利反而赚不到钱——给拜金主义者的忠告</a>》<br>《<a href="https://program-think.blogspot.com/2019/04/996-Working-Hour-System.html">“996 工作制” 只不过是【劫贫济富】的缩影——“马云奇葩言论” 随想</a>》</p><!-- 《[相当奇葩的天朝,【劫贫济富】的国度](https://program-think.blogspot.com/2018/07/Robbing-the-Poor-Funding-the-Rich.html)》   --><!-- 《[点评中国社会九大阶层——没有公平、难以流动、无法稳定](https://program-think.blogspot.com/2013/12/chinese-social-stratification.html)》   --><!-- 《["盛大庆典" 难掩【内忧外患】——天朝沦陷 70 周年随想](https://program-think.blogspot.com/2019/10/70th-anniversary-of-PRC.html)》   --><!-- 《[若政治制度不公平, 则经济改革无意义——谈谈天朝这个大赌场](https://program-think.blogspot.com/2013/11/political-reform-or-economic-reform.html)》   --><p>《<a href="https://program-think.blogspot.com/2015/12/Hobbies-and-Interests.html">什么是【真正的】兴趣爱好？以及它有啥好处？</a>》</p><!-- 《[读书笔记:＜反脆弱——从不确定性中获益＞](https://program-think.blogspot.com/2018/12/Book-Review-Antifragile-Things-That-Gain-from-Disorder.html)》   --><p>《<a href="https://program-think.blogspot.com/2019/12/weekly-share-140.html">每周转载: 华为李洪元案——工作 996、离职 251、维权 404(大量网友评论, 多图)</a>》</p><!-- 《[看看全国人大代表都是啥货色——兼谈 "议会道路的改良" 行不通](https://program-think.blogspot.com/2012/03/national-people-congress.html)》   --><!-- 《[习包子露馅——习近平在内的权贵家族如何转移巨额海外资产](https://program-think.blogspot.com/2014/01/china-princelings-offshore-companies.html)》 -->]]></content>
      
      
      <categories>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 Javascript Design Patterns To Improve Your Code With</title>
      <link href="10-javascript-design-patterns-to-improve-your-code-with/"/>
      <url>10-javascript-design-patterns-to-improve-your-code-with/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://beforesemicolon.medium.com/10-javascript-design-patterns-to-improve-your-code-with-44c6f6c2ea94">10 Javascript Design Patterns To Improve Your Code With</a></p></blockquote><p><img src="https://miro.medium.com/max/2560/1*zoM5PQmjz_QnQ1TeO9K5Ug@2x.jpeg" alt="Image for post"></p><p>There are common patterns you can use in Javascript that will improve your code substantially. These are techniques to simplify and better structure your code in a way that makes it reusable, modular, easier to consume and test, and will speed up your code and your coding process.</p><blockquote><p>您可以在 Javascript 中使用一些常见的模式,这些模式会大大改善您的代码.这些技术可以简化和更好地构造代码,从而使其可重用,模块化,易于使用和测试,并加快代码和编码过程的速度.</p></blockquote><h2 id="Types-of-Patterns"><a href="#Types-of-Patterns" class="headerlink" title="Types of Patterns"></a>Types of Patterns</h2><p>There are three(3) types of patterns. Creational, structural, and behavioral.</p><ul><li><strong>Creational</strong>— Addresses problems related to creating objects.</li><li><strong>Structural</strong>— Addresses the relationship between entities and how together they can compose a larger structure.</li><li><strong>Behavioral</strong>— Addresses how objects communicate and interact with each other.</li></ul><blockquote><p><strong>创建型模式</strong>- 处理对象的创建,根据实际情况使用合适的方式创建对象.常规的对象创建方式可能会导致设计上的问题,或增加设计的复杂度.创建型模式通过以某种方式控制对象的创建来解决问题.</p></blockquote><blockquote><p><strong>结构型模式</strong>- 通过识别系统中组件间的简单关系来简化系统的设计.</p></blockquote><blockquote><p><strong>行为型模式</strong>- 用于识别对象之间常见的交互模式并加以实现,如此,增加了这些交互的灵活性.</p></blockquote><h2 id="Factory-Pattern"><a href="#Factory-Pattern" class="headerlink" title="Factory Pattern"></a>Factory Pattern</h2><p>This is one of the most common creational d esign patterns and one of my favorites when it comes to creating objects. This pattern allows you to separate the implementation and creation of a particular object. It also allows for a controlled way to create objects abstracting away any complexity or the need to interact with a particular object or API directly.</p><p>Another thing it allows us to do is to create an object whose class or constructor is only known at runtime. If you ever used <a href="https://expressjs.com/">Express.js</a> for <a href="https://nodejs.org/en/">Node</a> you used its app factory( <em>createApplication</em> ) when you created the express app. The constructor that creates the app for you is created at runtime and the factory exposes just enough stuff for you to interact with and handles all the mess away from you.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This is what the express app factory looks like on the surface. It has its internal API and parts that take care of different things and when you request an app it then goes ahead and assembles your object — hence the name factory — and returns what you asked for. The advantage of that is you always have the same way to create the app and they can change the internal part however they please and you never know about it.</p><p><img src="https://miro.medium.com/max/3356/1*GydTaWM1idjscSLcCe66Fw.png" alt="Image for post"></p><p><a href="https://github.com/expressjs/express/blob/master/lib/express.js">Code from Express GitHub</a></p><h2 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h2><p>If you ever used <a href="https://rxjs-dev.firebaseapp.com/">RxJs</a> you already felt the power of the observer pattern. What it allows you to do is, well, observe another object. With this pattern, you have the <a href="https://rxjs-dev.firebaseapp.com/guide/observable">Observable</a> which is the object that handles the observing which consumes an <a href="https://rxjs-dev.firebaseapp.com/guide/observer">Observer</a> which does all the notifications. Surprisingly, you can create an observable in a couple of lines:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Observable</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">subscribe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> obs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">observer</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">unsubscribe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    observer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>where the Observer can look something like this:</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Observer</span><span class="token punctuation">(</span>onNext<span class="token punctuation">,</span> <span class="token function-variable function">onError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">onComplete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onNext <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    onError <span class="token operator">=</span> onNext<span class="token punctuation">.</span>error <span class="token operator">||</span> onError<span class="token punctuation">;</span>    onComplete <span class="token operator">=</span> onNext<span class="token punctuation">.</span>complete <span class="token operator">||</span> onComplete<span class="token punctuation">;</span>    onNext <span class="token operator">=</span> onNext<span class="token punctuation">.</span>next <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">onNext</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">error</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">complete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>which then you use it like so:</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obs<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obs<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <a href="https://rxjs-dev.firebaseapp.com/guide/overview">RxJs</a> team has a more elaborated implementation which also involves <a href="https://rxjs-dev.firebaseapp.com/guide/operators">pipes/operators</a> and other features like a <a href="https://rxjs-dev.firebaseapp.com/guide/scheduler">scheduler</a> and many more.</p><h2 id="Module-Pattern"><a href="#Module-Pattern" class="headerlink" title="Module Pattern"></a>Module Pattern</h2><p>If you ever used <a href="https://nodejs.org/en/">NodeJs</a> then you already know the module pattern, same for many client libraries to build your app. The module pattern allows you to encapsulate functionally and organize code in modules — parts that make your application. In NodeJs, when you create a file and dump your code in there, on execution your code is wrapped in a module using the <a href="https://en.wikipedia.org/wiki/Immediately_invoked_function_expression">IIFE (Immediately Invoked Function Expression)</a> that looks like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> global<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __dirname<span class="token punctuation">,</span> __filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// your Node code goes here</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>…where <a href="https://nodejs.org/docs/latest-v13.x/api/modules.html#modules_require_id">require</a> , <a href="https://nodejs.org/docs/latest-v13.x/api/globals.html">global</a> , <a href="https://nodejs.org/docs/latest-v13.x/api/modules.html#modules_module">module</a> , <a href="https://nodejs.org/docs/latest-v13.x/api/modules.html#modules_exports">exports</a> , <a href="https://nodejs.org/docs/latest-v13.x/api/modules.html#modules_dirname">__dirname</a> , and <a href="https://nodejs.org/docs/latest-v13.x/api/modules.html#modules_filename">__filename</a> are objects that are injected into your module that you can access to expose parts of your code, import parts from other code, and access global info of the environment.</p><p>In the browser you can create something like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> globalData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  x<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// &lt;- access injections</span>  <span class="token comment">// private stuff in the module</span>  <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> global<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// expose what you want</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    prop<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>globalData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- inject into your module</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The module pattern is perfect for grouping code for a specific feature and has control over what can be accessed from the outside. A module does not even have to return anything. You may pass it some object or data and it will execute it in its own ecosystem continuously which can be great.</p><h2 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern</h2><p>The proxy pattern introduces you to a new type of programming called metaprogramming. Javascript comes with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> object which literally gives you a superpower and pushes you to the next level. It helps you control access to another object — called subject —by implementing the same interface. The Proxy helps you intercept operations to the subject which makes it great for:</p><ul><li><strong>Validation</strong>— validate data to the subject to make sure it is valid before it reaches the subject;</li><li><strong>Security</strong>— ensures that any access to the subject is authorized and the one doing it has all necessary privileges;</li><li><strong>Caching</strong>— keep an internal cache to make future expensive operations do not go through the expensive calculation in the subject;</li><li><strong>Lazy initialization</strong>— ensure that expensive initialization of the subject is delayed for when it is actually needed;</li><li><strong>Debugging/Logging</strong>— intercept all the data in and out to create a realistic report of usage of the subject;</li><li><strong>Remote Object Access</strong>— makes remote objects appear local;</li></ul><p>The proxy pattern deserves a post of its own and by far it is my favorite of all patterns and super fun to work with. It can be used with the third party API or object/library to ensure things are checked and handled before handed to the third party and the results coming out has a certain format your application needs. This is a great way to patch or extend third-party things without touching their code.</p><p>Let’s take a look at a simple validator to ensure the age of the person is set with a valid value anytime.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'The age is not an integer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">'The age seems invalid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// The default behavior to store the value</span>    obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment">// Indicate success</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> validator<span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'young'</span><span class="token punctuation">;</span> <span class="token comment">// Throws an exception</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment">// Throws an exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Facade-Pattern"><a href="#Facade-Pattern" class="headerlink" title="Facade Pattern"></a>Facade Pattern</h2><p>This is a simple pattern used to shield you from complex API and to unify multiple separate APIs. If you ever used <a href="https://jquery.com/">jQuery</a> then you used a Facade. jQueryis a facade for the complex DOM API and it simplifies all the complexity of working with DOM by exposing the same API which is easier to reason with.</p><p>So, facades let you abstract away any complexity of the subsystem allowing you to interact with it directly instead of the system. This is probably the most common pattern when it comes to libraries of the web. This pattern can help you turn powerful and complex things out there into something much simpler to consume.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// facade around the XMLHttpRequest API</span><span class="token comment">// with support for Promise and POST</span><span class="token comment">// JSON and Multipart Data</span><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">res</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">rej</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      req<span class="token punctuation">.</span>onerror <span class="token operator">=</span> rej<span class="token punctuation">;</span>      req<span class="token punctuation">.</span>onabort <span class="token operator">=</span> rej<span class="token punctuation">;</span>      req<span class="token punctuation">.</span>onabort <span class="token operator">=</span> rej<span class="token punctuation">;</span>      req<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> rej<span class="token punctuation">;</span>      req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// code here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'https://www.domain.com/api/endpoint'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> some<span class="token operator">:</span> <span class="token string">'data'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Iterator-Pattern"><a href="#Iterator-Pattern" class="headerlink" title="Iterator Pattern"></a>Iterator Pattern</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">Iterators</a> are pretty much everywhere in Javascript. It is such a fundamental pattern that it is built-in into the language itself. You can use it to iterate anything from the <a href="https://www.youtube.com/playlist?list=PLpWvGP6yhJUigZr2vQgbqpTv_HLQ6eZsz">array</a> , <a href="https://www.youtube.com/watch?v=8NX808LlUFQ&list=PLpWvGP6yhJUi-rLE0VTNQDUcHwuMSXm92&index=1">dictionaries</a> to <a href="https://www.youtube.com/watch?v=XNBQDAQOKaE">tree data Structures</a> . What is cool about it is it provides the same interface for you to iterate any data container instead of looping arrays and traversing trees and graphs.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// simple iterator that takes a</span><span class="token comment">// function to get the next value</span><span class="token comment">// which is called on every iteration</span><span class="token comment">// and completes if the function</span><span class="token comment">// returns null</span><span class="token keyword">function</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token parameter">getNextValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getNextValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Iterators are stateful objects since we have to keep track of the current item and you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">generators</a> to implement them which makes them even more powerful.</p><p><a href="https://codepen.io/beforesemicolon/pen/ExgzMRb?editors=1010">A perfect example</a> of this is let’s say you have to iterate over a list of 1 thousand numbers from 1 to 1000. The naive way would be actually create an array of actually 1 thousand items and iterate it. But with an iterator, you can calculate the next item when you are actually accessing which allows you to save on memory.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> thousandList <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// using generator to implement an iterator</span>thousandList<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token operator">++</span>number<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> number <span class="token keyword">of</span> thousandList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 1 to 1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token operator">...</span>thousandList<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, ..., 1000]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Another use case for iterators is, let’s say you have a tree and you have to pass it to something else in your application. So you decide to make a copy of the three beforehand to make sure whatever modifications do not affect the original tree.</p><p>The problem with cloning the tree is that it grows, and copying to pass the tree can become expensive. Instead, you can pass an iterator that allows the recipient to traverse the tree one node at a time where you only clone the node when they are accessing it and remove the need to clone the whole thing at once.</p><p>An even better solution would be to use a proxy to the above solution but iterators are super powerful as well and you rarely need to implement your own for native data structures as they all give an iterator option to use or are iterable.</p><h2 id="Prototype-Pattern"><a href="#Prototype-Pattern" class="headerlink" title="Prototype Pattern"></a>Prototype Pattern</h2><p>Prototype Oriented Programming is a type of <a href="https://www.youtube.com/watch?v=lcXy4XdXvwQ">Object-Oriented Programming</a> and Javascript is a prototypical inheritance language. Way before class was introduced, the only way to do <a href="https://www.youtube.com/watch?v=lcXy4XdXvwQ">OOP</a> was through prototype, and as matter of fact, the Javascript class is just syntactic sugar on top of prototype and constructor function. <strong>So why use this instead of classes then?</strong></p><ul><li>Learn Javascript prototypical inheritance nature;</li><li>Improve your ability to debug Javascript weird behaviors;</li><li>Understand how everything works under the hood;</li><li>Full control over the members of the object;</li><li>Allows you to create library and frameworks more efficiently by manipulating lower-level code;</li><li>Ability to extend from multiple sources for much better composability;</li><li>Better control on what you are inheriting with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a> second argument.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// total is public because we declared it on the "this"</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// precision is private because is a local variable/constant</span>  <span class="token keyword">const</span> precision <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// to precision is a public function expression with access to</span>  <span class="token comment">// private properties</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">toPrecision</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>precision<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// create a getter for the property "result"</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// create a static member</span><span class="token comment">// only available on Calculator. It cannot be inherited</span>Calculator<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// prototype methods</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">subtract</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">*=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">/=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ScienticCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this is equivalent to calling super()</span>  <span class="token comment">// when you extend another class</span>  <span class="token comment">// it will copy all properties from inside Calculator</span>  <span class="token comment">// into ScienticCalculator</span>  <span class="token comment">// You can call as many constructor functions</span>  <span class="token comment">// to inherit properties from multiple ones</span>  <span class="token function">Calculator</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// make ScienticCalculator extend Calculator</span><span class="token comment">// similar to what happens when you do</span><span class="token comment">// "class Calculator extends ScienticCalculator"</span><span class="token class-name">ScienticCalculator</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ScienticCalculator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ScienticCalculator<span class="token punctuation">;</span><span class="token keyword">const</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> scientificCalc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScienticCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calc<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scientificCalc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// checks logs below</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://miro.medium.com/max/2804/1*C8qEc1bufC2jfv7Q1U3pnA.png" alt="Image for post"></p><p><a href="https://codepen.io/beforesemicolon/pen/OJRYqyd?editors=0010">Code on CodePen</a></p><h2 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h2><p>The decorator can push you into meta-programming which is a technique to use other programs as data to another. Both decorator and Proxy are a way to meta-program and you can use Proxy to implement a decorator. As a matter of fact, there are few ways to implement decorators:</p><ul><li><strong>Composition</strong> — wrapping an object around another which it inherits from to implement new or changed things to it (inheritance);</li><li><strong>Object Augmentation</strong> — attach or change things directly on the object (monkey patching);</li><li><strong>Proxy Object</strong> — intercept and react to object actions in order to alter the behavior or result (Proxying).</li></ul><p>Javascript allows for decorators which you can actually try through <a href="https://www.typescriptlang.org/docs/handbook/decorators.html">Typescript</a> or by using the <a href="https://babeljs.io/docs/en/babel-plugin-syntax-decorators/">decorator’s Babel plugin</a> as it is still in the <a href="https://github.com/tc39/proposal-decorators">early steps(proposal)</a> . Amazingly, it does it through the manipulation of object properties definition (prototype) and descriptors.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// An example with no decorator Support</span><span class="token comment">// through Object Augmentation</span><span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">'logger'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">x</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token string">' - get:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token string">' - set:'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// decorate property and method</span>    <span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'total'</span><span class="token punctuation">,</span> <span class="token string">'total'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'add argument:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">+=</span> x<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>calc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// logs</span><span class="token comment">// add argument: 20</span><span class="token comment">// total - get: 0</span><span class="token comment">// total - set: 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Decorators, similarly to Proxy, allows you to add different behavior or information to things without directly changing them and can be very powerful. We are talking Pro level stuff here.</p><h2 id="Composite-Pattern"><a href="#Composite-Pattern" class="headerlink" title="Composite Pattern"></a>Composite Pattern</h2><p>The composite pattern is awesome and even better if you are using Typescript since the types help give it more meaning and make it more obvious. When I made <a href="https://www.youtube.com/watch?v=cVTbdo17mYs">my video on creating a file system</a> I used this pattern to give users the feeling they are interacting with one thing (the system) but it was actually composed of different parts that are simply implementing the same interface.</p><p>When you use React and are creating class components, notice that all of them are implementing the same interface — the Component — and you compose these different class components to shape your application. The Component is the interface that all your custom components implement and you are using composition to create your app.</p><h2 id="MV-Frameworks"><a href="#MV-Frameworks" class="headerlink" title="MV* Frameworks"></a>MV* Frameworks</h2><p>These are actually frameworks but they are a type of design pattern. I really believe in the proper usage of the MV* patterns when building things. I believe in the separation of concerns, sticking to the pattern, and independence of the parts. They are few different types of these and depending on the project, you may need to pick the right one.</p><ul><li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"><strong>MVC</strong></a> — The Model View Controller lets the data(M) be manipulated by the controller(C) and the data(M) updates the UI(V). The users see the UI (V) and the interactions are handled by the controller(C).</li><li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter"><strong>MVP</strong></a> — The Model View Presenter is a type of MVC. The difference is that the presenter(P) is the middle man. It controllers how they view renders and all the interaction and updates the data(M) accordingly and handles to update the UI with data changes.</li><li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"><strong>MVVM</strong></a> — The Model View View-Model is probably the most popular and modern and it is the pattern people use in the Frontend the most. It is actually very similar to the MVP in the way that the View-Model talks with the data but the view-model uses data binding and it is more event-driven which means it has no reference to the view and can be tested in isolation. In MVP the Presenter is known by the view and it is a more tightly couple setup.</li><li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93adapter"><strong>MVA</strong></a> — The Model View Adapter is another variation of the MVC pattern and they pretty much try to solve the same problem differently. The adapter sits in the middle and there is no connection between the model and the view.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>There are so many patterns to use with your code that can drastically change the way your program works, scales, and can be maintained. The patterns can be seen as recipes which if you follow correctly, the chances of you building something great is high. If you ever asked <em>“How I do this”</em> it is probably a sign you not aware of patterns and learning patterns levels you up from the coder(API consumer level).</p><p>Patterns are also great if you are involved in implementing big solutions or are interested in architecting and designing systems.</p><p><strong>My Youtube Channel</strong> : <a href="https://www.youtube.com/channel/UCrU33aw1k9BqTIq2yKXrmBw">Before Semicolon</a><br><strong>Website</strong> : <a href="https://beforesemicolon.com/">beforesemicolon.com</a></p><blockquote><p><a href="https://github.com/MudOnTire/frontend-design-patterns">前端需要了解的 9 种设计模式</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Complete Guide to Grid</title>
      <link href="complete-guide-grid/"/>
      <url>complete-guide-grid/</url>
      
        <content type="html"><![CDATA[<script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://css-tricks.com/snippets/css/complete-guide-grid">A Complete Guide to Grid | CSS-Tricks</a></p></blockquote><p>Our comprehensive guide to CSS grid, focusing on all the settings both for the grid parent container and the grid child elements.</p><p>CSS Grid Layout is the most powerful layout system available in CSS. It is a 2-dimensional system, meaning it can handle both columns and rows, unlike <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">flexbox</a> which is largely a 1-dimensional system. You work with Grid Layout by applying CSS rules both to a parent element (which becomes the Grid Container) and to that element’s children (which become Grid Items).</p><blockquote><p>CSS 网格布局是 CSS 中功能最强大的布局系统. 它是一个二维系统, 这意味着它既可以处理列又可以处理行, 而 flexbox 很大程度上是一维系统. 通过将 CSS 规则应用于父元素 (成为 Grid 容器) 和该元素的子元素(成为 Grid Items), 您可以使用 Grid 布局.</p></blockquote><img src="/images/flex-layout.png" width="400" alt="Representative Flex Layout Example"><img src="/images/grid-layout.png" width="400" alt="Representative Grid Layout Example"><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. CSS has always been used to layout our web pages, but it’s never done a very good job of it. First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">Flexbox</a> is also a very great layout tool, but its one-directional flow has <a href="https://css-tricks.com/quick-whats-the-difference-between-flexbox-and-grid/">different use cases</a> — and they actually <a href="https://css-tricks.com/css-grid-replace-flexbox/">work together</a> quite well! Grid is the very first CSS module created specifically to solve the layout problems we’ve all been hacking our way around for as long as we’ve been making websites.</p><blockquote><p>CSS Grid Layout（又名“Grid”或“CSS Grid”）是一种基于二维网格的布局系统，与过去的任何 Web 布局系统相比，它完全改变了我们设计用户界面的方式。 CSS 一直被用来布局我们的网页，但它从来没有做得很好。首先，我们使用表格，然后是浮动、定位和内联块，但所有这些方法本质上都是黑客，遗漏了许多重要的功能（例如垂直居中）。 Flexbox 也是一个非常棒的布局工具，但它的单向流有不同的用例——它们实际上可以很好地协同工作！ Grid 是第一个专门为解决布局问题而创建的 CSS 模块，我们一直在制作网站。</p></blockquote><p>The intention of this guide is to present the Grid concepts as they exist in the latest version of the specification. So I won’t be covering the out-of-date Internet Explorer syntax (even though you can absolutely <a href="https://css-tricks.com/css-grid-in-ie-debunking-common-ie-grid-misconceptions/">use Grid in IE 11</a>) or other historical hacks.</p><blockquote><p>本指南的目的是介绍规范最新版本中存在的网格概念. 因此, 我不会介绍过时的 IE 语法, 并且会尽力在规范成熟时定期更新本指南.</p></blockquote><h2 id="Basics-and-Browser-Support"><a href="#Basics-and-Browser-Support" class="headerlink" title="Basics and Browser Support"></a>Basics and Browser Support</h2><p>As of March 2017, most browsers shipped native, unprefixed support for CSS Grid: Chrome (including on Android), Firefox, Safari (including on iOS), and Opera. Internet Explorer 10 and 11 on the other hand support it, but it’s an old implementation with an outdated syntax. The time to build with grid is now!</p><blockquote><p>截至 2017 年 3 月, 大多数浏览器都提供了对 CSS Grid 的原生, 无前缀支持: Chrome(包括 Android),Firefox,Safari(包括 iOS) 和 Opera. 另一方面, Internet Explorer 10 和 11 支持它, 但是它是一个过时的实现, 语法已经过时. 现在是使用网格的时候了！</p></blockquote><p>To get started you have to define a container element as a grid with <code>[display: grid](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-display)</code>, set the column and row sizes with <code>[grid-template-columns](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-template-columns-rows)</code> and <code>[grid-template-rows](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-template-columns-rows)</code>, and then place its child elements into the grid with <code>[grid-column](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-column-row)</code> and <code>[grid-row](https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-column-row)</code>. Similarly to flexbox, the source order of the grid items doesn’t matter. Your CSS can place them in any order, which makes it super easy to rearrange your grid with media queries. Imagine defining the layout of your entire page, and then completely rearranging it to accommodate a different screen width all with only a couple lines of CSS. Grid is one of the most powerful CSS modules ever introduced.</p><blockquote><p>首先, 您必须将容器元素定义为 <code>display: grid</code>, 使用 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 设置列和行的大小, 然后将其子元素放入带有 <code>grid-column</code> 和 <code>grid-rows</code> 的网格中. 与 flexbox 类似, 网格项目的原始顺序无关紧要. 您的 CSS 可以按任何顺序放置它们, 这使得通过媒体查询重新排列网格非常容易. 想象一下定义整个页面的布局, 然后完全重新排列它以适应不同的屏幕宽度, 而只需要几行 CSS. 网格是有史以来最强大的 CSS 模块之一.</p></blockquote><p>This browser support data is from <a href="https://caniuse.com/#feat=css-grid">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p><blockquote><p>该浏览器支持数据来自 <a href="https://caniuse.com/#feat=css-grid">Caniuse</a> . 数字表示浏览器支持该版本及更高版本的功能.</p></blockquote><h2 id="Important-Terminology"><a href="#Important-Terminology" class="headerlink" title="Important Terminology"></a>Important Terminology</h2><p>Before diving into the concepts of Grid it’s important to understand the terminology. Since the terms involved here are all kinda conceptually similar, it’s easy to confuse them with one another if you don’t first memorize their meanings defined by the Grid specification. But don’t worry, there aren’t many of them.</p><blockquote><p>在深入了解 Grid 的概念之前, 重要的是要了解术语. 由于此处涉及的术语在概念上有点相似, 因此, 如果您不首先记住 Grid 规范定义的含义, 就很容易将它们混淆. 但请放心, 它们并不多.</p></blockquote><h3 id="Grid-Container-网格容器"><a href="#Grid-Container-网格容器" class="headerlink" title="Grid Container 网格容器"></a><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Container">Grid Container</a> 网格容器</h3><p>The element on which <code>display: grid</code> is applied. It’s the direct parent of all the grid items. In this example <code>container</code> is the grid container.</p><blockquote><p>在元素上声明 <code>display:grid</code> 的元素. 它是所有网格项的直接父项. 在此示例中,<code>container</code> 是网格容器.</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Grid-Line"><a href="#Grid-Line" class="headerlink" title="Grid Line"></a><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Lines">Grid Line</a></h3><p>The dividing lines that make up the structure of the grid. They can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. Here the yellow line is an example of a column grid line.</p><blockquote><p>组成网格结构的分隔线. 它们可以是垂直的 (“列网格线”) 或水平的(“行网格线”), 并位于行或列的任一侧. 这里的黄线是列网格线的示例.</p></blockquote><img src="/images/terms-grid-line.svg" width="400" alt="网格线"><h3 id="Grid-Track-网格轨道"><a href="#Grid-Track-网格轨道" class="headerlink" title="Grid Track 网格轨道"></a><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Track">Grid Track</a> 网格轨道</h3><p>The space between two adjacent grid lines. You can think of them like the columns or rows of the grid. Here’s the grid track between the second and third row grid lines.</p><blockquote><p>两条相邻的网格线之间的间隔. 您可以将它们视为网格的列或行. 这是第二行和第三行网格线之间的网格线.</p></blockquote><img src="/images/terms-grid-track.svg" width="400" alt="网格轨道"><h3 id="Grid-Area"><a href="#Grid-Area" class="headerlink" title="Grid Area"></a><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Areas">Grid Area</a></h3><p>The total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. Here’s the grid area between row grid lines 1 and 3, and column grid lines 1 and 3.</p><blockquote><p>四格线包围的总空间. 网格区域可以由任意数量的网格单元组成. 这是行网格线 1 和 3 以及列网格线 1 和 3 之间的网格区域.</p></blockquote><img src="/images/terms-grid-area.svg" width="400" alt="网格区域"><h3 id="Grid-Item"><a href="#Grid-Item" class="headerlink" title="Grid Item"></a><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Item">Grid Item</a></h3><p>The children (i.e. <em>direct</em> descendants) of the grid container. Here the <code>item</code> elements are grid items, but <code>sub-item</code> isn’t.</p><blockquote><p>网格容器的子代 (即直接后代). 这里的 <code>item</code> 元素是网格项目, 但 <code>sub-item</code> 不是.</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Grid-Cell"><a href="#Grid-Cell" class="headerlink" title="Grid Cell"></a><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Cell">Grid Cell</a></h3><p>The space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. Here’s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3.</p><blockquote><p>两个相邻的行和两个相邻的列网格线之间的空间. 它是网格的单个 “单位”. 这是行网格线 1 和 2, 列网格线 2 和 3 之间的网格单元.</p></blockquote><img src="/images/terms-grid-cell.svg" width="400" alt="网格单元"><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Column">Grid Column</a> 网格列沿着纵轴运行</p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Row">Grid Row</a> 网格行沿着横轴运行</p></blockquote><h2 id="Grid-Properties"><a href="#Grid-Properties" class="headerlink" title="Grid Properties"></a>Grid Properties</h2><h3 id="Properties-for-the-Parent-Grid-Container"><a href="#Properties-for-the-Parent-Grid-Container" class="headerlink" title="Properties for the Parent(Grid Container)"></a>Properties for the Parent(Grid Container)</h3><h4 id="display"><a href="#display" class="headerlink" title="display"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a></h4><p>Defines the element as a grid container and establishes a new grid formatting context for its contents.</p><blockquote><p>将元素定义为网格容器, 并为其内容建立新的网格格式上下文.</p></blockquote><p>Values:</p><ul><li><strong>grid</strong> – generates a block-level grid</li><li><strong>inline-grid</strong> – generates an inline-level grid</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid | inline-grid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note: The ability to pass grid parameters down through nested elements (aka subgrids) has been moved to <a href="https://www.w3.org/TR/css-grid-2/#subgrids">level 2 of the CSS Grid specification.</a> Here’s <a href="https://css-tricks.com/grid-level-2-and-subgrid/">a quick explanation</a>.</p><blockquote><p>注意: 通过嵌套元素 (又称为子网格) 向下传递网格参数的功能已移至 CSS 网格规范的第 2 级. 这是一个简短的说明.</p></blockquote><h4 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns grid-template-rows"></a><code>grid-template-columns</code> <code>grid-template-rows</code></h4><p>Defines the columns and rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns"><code>grid-template-columns</code></a> 属性定义每一列的列宽,<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows"><code>grid-template-rows</code></a> 属性定义每一行的行高.</p></blockquote><p>Values:</p><ul><li><strong><code>&lt;track-size&gt;</code></strong> – can be a length, a percentage, or a fraction of the free space in the grid (using the [fr- <strong><code>&lt;line-name&gt;</code></strong> – an arbitrary name of your choosing</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> ... | ...<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> ... | ...<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Examples:</p><p>When you leave an empty space between the track values, the grid lines are automatically assigned positive and negative numbers:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 40px 50px auto 50px 40px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 25% 100px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/template-columns-rows-01.svg" width="400" alt="Grid with user named lines"><p>But you can choose to explicitly name the lines. Note the bracket syntax for the line names:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [row1-start] 25% [row1-end] 100px [third-line] auto [last-line]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/template-column-rows-02.svg" width="400" alt="Grid with user named lines"><p>Note that a line can have more than one name. For example, here the second line will have two names: row1-end and row2-start:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [row1-start] 25% [row1-end row2-start] 25% [row2-end]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If your definition contains repeating parts, you can use the <code>repeat()</code> notation to streamline things:</p><blockquote><p><code>repeat()</code> 接受两个参数, 第一个参数是重复的次数, 第二个参数是所要重复的值.</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 20px [col-start]<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Which is equivalent to this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 20px [col-start] 20px [col-start] 20px [col-start]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If multiple lines share the same name, they can be referenced by their line name and count.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> col-start 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The <code>fr</code> unit allows you to set the size of a track as a fraction of the free space of the grid container. For example, this will set each item to one third the width of the grid container:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr 1fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The free space is calculated <em>after</em> any non-flexible items. In this example the total amount of free space available to the <code>fr</code> units doesn’t include the 50px:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 50px 1fr 1fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a><code>grid-template-areas</code></h4><p>Defines a grid template by referencing the names of the grid areas which are specified with the <code>grid-area</code> property. Repeating the name of a grid area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas"><code>grid-template-areas</code></a> 属性用于定义区域., 一个区域由单个或多个单元格组成.</p></blockquote><p>Values:</p><ul><li><strong><grid-area-name></strong> – the name of a grid area specified with <code>grid-area</code></li><li><strong>.</strong> – a period signifies an empty grid cell</li><li><strong>none</strong> – no grid areas are defined</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">'| . | none | ...'</span>    <span class="token string">'...'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-b</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> main<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-c</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-d</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> footer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 50px 50px 50px 50px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">'header header header header'</span>    <span class="token string">'main main . sidebar'</span>    <span class="token string">'footer footer footer footer'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>That’ll create a grid that’s four columns wide by three rows tall. The entire top row will be composed of the <strong>header</strong> area. The middle row will be composed of two <strong>main</strong> areas, one empty cell, and one <strong>sidebar</strong> area. The last row is all <strong>footer</strong>.</p><img src="/images/dddgrid-template-areas.svg" width="400" alt="Example of grid-template-areas"><p>Each row in your declaration needs to have the same number of cells.</p><p>You can use any number of adjacent periods to declare a single empty cell. As long as the periods have no spaces between them they represent a single cell.</p><p>Notice that you’re not naming lines with this syntax, just areas. When you use this syntax the lines on either end of the areas are actually getting named automatically. If the name of your grid area is <strong>foo</strong>, the name of the area’s starting row line and starting column line will be <strong>foo-start</strong>, and the name of its last row line and last column line will be <strong>foo-end</strong>. This means that some lines might have multiple names, such as the far left line in the above example, which will have three names: header-start, main-start, and footer-start.</p><h4 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template"><code>grid-template</code></a></h4><p>A shorthand for setting <code>grid-template-rows</code>, <code>grid-template-columns</code>, and <code>grid-template-areas</code> in a single declaration.</p><p>Values:</p><ul><li><strong>none</strong> – sets all three properties to their initial values</li><li><strong><grid-template-rows> / <grid-template-columns></strong> – sets <code>grid-template-columns</code> and <code>grid-template-rows</code> to the specified values, respectively, and sets <code>grid-template-areas</code> to <code>none</code></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span> none | &lt;grid-template-rows> / &lt;grid-template-columns><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It also accepts a more complex but quite handy syntax for specifying all three. Here’s an example:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template</span><span class="token punctuation">:</span>    [row1-start] <span class="token string">'header header header'</span> 25px [row1-end]    [row2-start] <span class="token string">'footer footer footer'</span> 25px [row2-end]    / auto 50px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>That’s equivalent to this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [row1-start] 25px [row1-end row2-start] 25px [row2-end]<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> auto 50px auto<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">'header header header'</span>    <span class="token string">'footer footer footer'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since <code>grid-template</code> doesn’t reset the <em>implicit</em> grid properties (<code>grid-auto-columns</code>, <code>grid-auto-rows</code>, and <code>grid-auto-flow</code>), which is probably what you want to do in most cases, it’s recommended to use the <code>grid</code> property instead of <code>grid-template</code>.</p><h4 id="column-gap-row-gap"><a href="#column-gap-row-gap" class="headerlink" title="column-gap row-gap"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap"><code>column-gap</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap"><code>row-gap</code></a></h4><blockquote><p><code>grid-column-gap</code> <code>grid-row-gap</code></p></blockquote><p>Specifies the size of the grid lines. You can think of it like setting the width of the gutters between the columns/rows.</p><blockquote><p><code>row-gap</code> 属性设置行与行的间隔 (行间距),<code>column-gap</code> 属性设置列与列的间隔 (列间距).</p></blockquote><p>Values:</p><ul><li><strong><line-size></strong> – a length value</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* standard */</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> &lt;line-size><span class="token punctuation">;</span>  <span class="token property">row-gap</span><span class="token punctuation">:</span> &lt;line-size><span class="token punctuation">;</span>  <span class="token comment">/* old */</span>  <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> &lt;line-size><span class="token punctuation">;</span>  <span class="token property">grid-row-gap</span><span class="token punctuation">:</span> &lt;line-size><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 50px 100px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 80px auto 80px<span class="token punctuation">;</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">row-gap</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/dddgrid-gap.svg" width="400" alt="Example of grid-column-gap and grid-row-gap"><p>The gutters(网格间距) are only created <em>between</em> the columns/rows, not on the outer edges.</p><p>Note: The <code>grid-</code> prefix will be removed and <code>grid-column-gap</code> and <code>grid-row-gap</code> renamed to <code>column-gap</code> and <code>row-gap</code>. The unprefixed properties are already supported in Chrome 68+, Safari 11.2 Release 50+ and Opera 54+.</p><h4 id="gap"><a href="#gap" class="headerlink" title="gap"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gap"><code>gap</code></a></h4><blockquote><p><code>grid-gap</code></p></blockquote><p>A shorthand for <code>row-gap</code> and <code>column-gap</code></p><blockquote><p>在两个网格单元之间的 网格横向间距 或 网格纵向间距 可使用 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 属性来创建, 或者直接使用两个合并的缩写形式 <code>gap</code>.</p></blockquote><p>Values:</p><ul><li><strong><grid-row-gap> <grid-column-gap></strong> – length values</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* standard */</span>  <span class="token property">gap</span><span class="token punctuation">:</span> &lt;grid-row-gap> &lt;grid-column-gap><span class="token punctuation">;</span>  <span class="token comment">/* old */</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> &lt;grid-row-gap> &lt;grid-column-gap><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Example:</p><blockquote><p>在下面的例子中, 我会创建一个纵向间距为 15px、横向间距为 10px 的网格元素.</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 50px 100px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 80px auto 80px<span class="token punctuation">;</span>  <span class="token property">gap</span><span class="token punctuation">:</span> 15px 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If no <code>row-gap</code> is specified, it’s set to the same value as <code>column-gap</code></p><p><strong>Note</strong>: The <code>grid-</code> prefix is deprecated (but who knows, may never actually be removed from browsers). Essentially <code>grid-gap</code> renamed to <code>gap</code>. The unprefixed property is already supported in Chrome 68+, Safari 11.2 Release 50+, and Opera 54+.</p><h4 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items"><code>justify-items</code></a></h4><p>Aligns grid items along the <em>inline (row)</em> axis (as opposed to <code>align-items</code> which aligns along the <em>block (column)</em> axis). This value applies to all grid items inside the container.</p><blockquote><p><code>justify-items</code> 属性设置单元格内容的水平位置 (左中右).</p></blockquote><p>Values:</p><ul><li><strong>start</strong> – aligns items to be flush with the start edge of their cell</li><li><strong>end</strong> – aligns items to be flush with the end edge of their cell</li><li><strong>center</strong> – aligns items in the center of their cell</li><li><strong>stretch</strong> – fills the whole width of the cell (this is the default)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Examples:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-items-start.svg" width="400" alt="Example of justify-items set to start"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-items-end.svg" width="400" alt="Example of justify-items set to end"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-items-center.svg" width="400" alt="Example of justify-items set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-items-stretch.svg" width="400" alt="Example of justify-items set to stretch"><p>This behavior can also be set on individual grid items via the <code>justify-self</code> property.</p><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><code>align-items</code></a></h4><p>Aligns grid items along the <em>block (column)</em> axis (as opposed to <code>justify-items</code> which aligns along the <em>inline (row)</em> axis). This value applies to all grid items inside the container.</p><blockquote><p><code>align-items</code> 属性设置单元格内容的垂直位置 (上中下).</p></blockquote><p>Values:</p><ul><li><strong>start</strong> – aligns items to be flush with the start edge of their cell</li><li><strong>end</strong> – aligns items to be flush with the end edge of their cell</li><li><strong>center</strong> – aligns items in the center of their cell</li><li><strong>stretch</strong> – fills the whole height of the cell (this is the default)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Examples:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-items-start.svg" width="400" alt="Example of align-items set to start"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-items-end.svg" width="400" alt="Example of align-items set to end"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-items-center.svg" width="400" alt="Example of align-items set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-items-stretch.svg" width="400" alt="Example of align-items set to stretch"><p>This behavior can also be set on individual grid items via the <code>align-self</code> property.</p><h4 id="place-items"><a href="#place-items" class="headerlink" title="place-items"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-items"><code>place-items</code></a></h4><p><code>place-items</code> sets both the <code>align-items</code> and <code>justify-items</code> properties in a single declaration.</p><blockquote><p><code>place-items</code> 属性是 <code>align-items</code> 属性和 <code>justify-items</code> 属性的合并简写形式.</p></blockquote><p>Values:</p><ul><li><strong><align-items> / <justify-items></strong> – The first value sets <code>align-items</code>, the second value <code>justify-items</code>. If the second value is omitted, the first value is assigned to both properties.</li></ul><p>All major browsers except Edge support the <code>place-items</code> shorthand property.</p><p>For more details, see <code>align-items</code> and <code>justify-items</code>.</p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"><code>justify-content</code></a></h4><p>Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like <code>px</code>. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the <em>inline (row)</em> axis (as opposed to <code>align-content</code> which aligns the grid along the <em>block (column)</em> axis).</p><blockquote><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置 (左中右).</p></blockquote><p>Values:</p><ul><li><strong>start</strong> – aligns the grid to be flush with the start edge of the grid container</li><li><strong>end</strong> – aligns the grid to be flush with the end edge of the grid container</li><li><strong>center</strong> – aligns the grid in the center of the grid container</li><li><strong>stretch</strong> – resizes the grid items to allow the grid to fill the full width of the grid container</li><li><strong>space-around</strong> – places an even amount of space between each grid item, with half-sized spaces on the far ends</li><li><strong>space-between</strong> – places an even amount of space between each grid item, with no space at the far ends</li><li><strong>space-evenly</strong> – places an even amount of space between each grid item, including the far ends</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Examples:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-start.svg" width="400" alt="Example of justify-content set to start"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-end.svg" width="400" alt="Example of justify-content set to end"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-center.svg" width="400" alt="Example of justify-content set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-stretch.svg" width="400" alt="Example of justify-content set to stretch"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-space-around.svg" width="400" alt="Example of justify-content set to space-around"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-space-between.svg" width="400" alt="Example of justify-content set to space-between"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-content-space-evenly.svg" width="400" alt="Example of justify-content set to space-evenly"><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content"><code>align-content</code></a></h4><p>Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like <code>px</code>. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the <em>block (column)</em> axis (as opposed to <code>justify-conten</code> which aligns the grid along the <em>inline (row)</em> axis).</p><blockquote><p><code>align-content</code> 属性是整个内容区域的垂直位置 (上中下).</p></blockquote><p>Values:</p><ul><li><strong>start</strong> – aligns the grid to be flush with the start edge of the grid container</li><li><strong>end</strong> – aligns the grid to be flush with the end edge of the grid container</li><li><strong>center</strong> – aligns the grid in the center of the grid container</li><li><strong>stretch</strong> – resizes the grid items to allow the grid to fill the full height of the grid container</li><li><strong>space-around</strong> – places an even amount of space between each grid item, with half-sized spaces on the far ends</li><li><strong>space-between</strong> – places an even amount of space between each grid item, with no space at the far ends</li><li><strong>space-evenly</strong> – places an even amount of space between each grid item, including the far ends</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Examples:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to start](/images/align-content-start.svg) --><img src="/images/align-content-start.svg" width="400" alt="Example of align-content set to start"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to end](/images/align-content-end.svg) --><img src="/images/align-content-end.svg" width="400" alt="Example of align-content set to end"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to center](/images/align-content-center.svg) --><img src="/images/align-content-center.svg" width="400" alt="Example of align-content set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to stretch](/images/align-content-stretch.svg) --><img src="/images/align-content-stretch.svg" width="400" alt="Example of align-content set to stretch"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to space-around](/images/align-content-space-around.svg) --><img src="/images/align-content- space-around.svg" width="400" alt="Example of align-content set to  space-around"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to space-between](/images/align-content-space-between.svg) --><img src="/images/align-content-space-between.svg" width="400" alt="Example of align-content set to space-between"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><!-- ![Example of align-content set to space-evenly](/images/align-content-space-evenly.svg) --><img src="/images/align-content-space-evenly.svg" width="400" alt="Example of align-content set to space-evenly"><h4 id="place-content"><a href="#place-content" class="headerlink" title="place-content"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-content"><code>place-content</code></a></h4><p><code>place-content</code> sets both the <code>align-content</code> and <code>justify-content</code> properties in a single declaration.</p><blockquote><p><code>place-content</code> 属性是 <code>align-content</code> 属性和 <code>justify-content</code> 属性的合并简写形式.</p></blockquote><p>Values:</p><ul><li><strong><align-content> / <justify-content></strong> – The first value sets <code>align-content</code>, the second value <code>justify-content</code>. If the second value is omitted, the first value is assigned to both properties.</li></ul><p>All major browsers except Edge support the <code>place-content</code> shorthand property.</p><p>For more details, see <code>align-content</code> and <code>justify-content</code>.</p><h4 id="grid-auto-columns-grid-auto-rows"><a href="#grid-auto-columns-grid-auto-rows" class="headerlink" title="grid-auto-columns grid-auto-rows"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns"><code>grid-auto-columns</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows"><code>grid-auto-rows</code></a></h4><p>Specifies the size of any auto-generated grid tracks (aka <em>implicit grid tracks</em>). Implicit tracks get created when there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid. (see <a href="https://css-tricks.com/difference-explicit-implicit-grids/">The Difference Between Explicit and Implicit Grids</a>)</p><blockquote><p>有时候, 一些项目的指定位置, 在现有网格的外部. 比如网格只有 3 列, 但是某一个项目指定在第 5 行. 这时, 浏览器会自动生成多余的网格, 以便放置项目.<code>grid-auto-columns</code> 属性和 <code>grid-auto-rows</code> 属性用来设置, 浏览器自动创建的多余网格的列宽和行高. 它们的写法与 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 完全相同. 如果不指定这两个属性, 浏览器完全根据单元格内容的大小, 决定新增网格的列宽和行高.</p></blockquote><p>Values:</p><ul><li><strong><track-size></strong> – can be a length, a percentage, or a fraction of the free space in the grid (using the `[fr</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-auto-columns</span><span class="token punctuation">:</span> &lt;track-size>...<span class="token punctuation">;</span>  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> &lt;track-size>...<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>To illustrate how implicit grid tracks get created, think about this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 60px 60px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 90px 90px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/grid-auto-columns-rows-01.svg" width="400" alt="Example of 2x2 grid"><p>This creates a 2 x 2 grid.</p><p>But now imagine you use <code>grid-column</code> and <code>grid-row</code> to position your grid items like this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 1 / 2<span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> 2 / 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-b</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 5 / 6<span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> 2 / 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/grid-auto-columns-rows-02.svg" width="400" alt="Example of implicit tracks"><p>We told .item-b to start on column line 5 and end at column line 6, <em>but we never defined a column line 5 or 6</em>. Because we referenced lines that don’t exist, implicit tracks with widths of 0 are created to fill in the gaps. We can use <code>grid-auto-columns</code> and <code>grid-auto-rows</code> to specify the widths of these implicit tracks:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-auto-columns</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/grid-auto-columns-rows-03.svg" width="400" alt="grid-auto-columns-rows"><h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow"><code>grid-auto-flow</code></a></h4><p>If you have grid items that you don’t explicitly place on the grid, the <em>auto-placement algorithm</em> kicks in to automatically place the items. This property controls how the auto-placement algorithm works.</p><blockquote><p>划分网格以后, 容器的子元素会按照顺序, 自动放置在每一个网格. 默认的放置顺序是 “先行后列”, 即先填满第一行, 再开始放入第二行, 即下图数字的顺序.</p></blockquote><p>Values:</p><ul><li><strong>row</strong> – tells the auto-placement algorithm to fill in each row in turn, adding new rows as necessary (default) 先行后列</li><li><strong>column</strong> – tells the auto-placement algorithm to fill in each column in turn, adding new columns as necessary 先列后行</li><li><strong>dense</strong> – tells the auto-placement algorithm to attempt to fill in holes earlier in the grid if smaller items come up later</li></ul><blockquote><p>如果后面出现了稍小的元素, 则会试图去填充网格中前面留下的空白. 这样做会填上稍大元素留下的空白, 但同时也可能导致原来出现的次序被打乱. 如果省略它, 使用一种「稀疏」算法, 在网格中布局元素时, 布局算法只会「向前」移动, 永远不会倒回去填补空白. 这保证了所有自动布局元素「按照次序」出现, 即使可能会留下被后面元素填充的空白.</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> row | column | row dense | column dense<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note that <strong>dense</strong> only changes the visual order of your items and might cause them to appear out of order, which is bad for accessibility.</p><p>Examples:</p><p>Consider this HTML:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item-a  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item-b  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item-c  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item-d  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-e<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>item-e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You define a grid with five columns and two rows, and set <code>grid-auto-flow</code> to <code>row</code> (which is also the default):</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 60px 60px 60px 60px 60px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 30px 30px<span class="token punctuation">;</span>  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When placing the items on the grid, you only specify spots for two of them:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> 1 / 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item-e</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> 1 / 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Because we set <code>grid-auto-flow</code> to <code>row</code>, our grid will look like this. Notice how the three items we didn’t place (<strong>item-b</strong>, <strong>item-c</strong> and <strong>item-d</strong>) flow across the available rows:</p><img src="/images/grid-auto-flow-01.svg" width="400" alt="Example of grid-auto-flow set to row"><p>If we instead set <code>grid-auto-flow</code> to <code>column</code>, <strong>item-b</strong>, <strong>item-c</strong> and <strong>item-d</strong> flow down the columns:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 60px 60px 60px 60px 60px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 30px 30px<span class="token punctuation">;</span>  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/grid-auto-flow-02.svg" width="400" alt="Example of grid-auto-flow set to column"><h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid"><code>grid</code></a></h4><p>A shorthand for setting all of the following properties in a single declaration: <code>grid-template-rows]</code>, <code>grid-template-columns</code>, <code>grid-template-areas</code>, <code>grid-auto-rows</code>, <code>grid-auto-columns]</code>, and <code>grid-auto-flow</code> (Note: You can only specify the explicit or the implicit grid properties in a single grid declaration).</p><p><code>grid</code> 属性是 <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code> 这六个属性的合并简写形式.</p><p>Values:</p><ul><li><strong>none</strong> – sets all sub-properties to their initial values.</li><li><strong><grid-template></strong> – works the same as the <code>grid-template</code> shorthand.</li><li><strong><grid-template-rows> / [ auto-flow &amp;&amp; dense? ] <grid-auto-columns>?</strong> – sets <code>grid-columns-rows</code> to the specified value. If the <code>auto-flow</code> keyword is to the right of the slash, it sets <code>grid-auto-flow</code> to <code>column</code>. If the <code>dense</code> keyword is specified additionally, the auto-placement algorithm uses a “dense” packing algorithm. If <code>grid-auto-columns</code> is omitted, it is set to <code>auto</code>.</li><li><strong>[auto-flow &amp;&amp; dense? ] <grid-auto-rows>? / <grid-template-columns></strong> – sets <code>grid-template-columns</code> to the specified value. If the <code>auto-flow</code> keyword is to the left of the slash, it sets <code>grid-auto-flow</code> to <code>row</code>. If the <code>dense</code> keyword is specified additionally, the auto-placement algorithm uses a “dense” packing algorithm. If <code>grid-auto-rows</code> is omitted, it is set to <code>auto</code>.</li></ul><p>Examples:</p><p>The following two code blocks are equivalent:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid</span><span class="token punctuation">:</span> 100px 300px / 3fr 1fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px 300px<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 3fr 1fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The following two code blocks are equivalent:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid</span><span class="token punctuation">:</span> auto-flow / 200px 1fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 200px 1fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The following two code blocks are equivalent:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid</span><span class="token punctuation">:</span> auto-flow dense 100px / 1fr 2fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> row dense<span class="token punctuation">;</span>  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 2fr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And the following two code blocks are equivalent:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid</span><span class="token punctuation">:</span> 100px 300px / auto-flow 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px 300px<span class="token punctuation">;</span>  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">grid-auto-columns</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It also accepts a more complex but quite handy syntax for setting everything at once. You specify <code>grid-template-areas</code>, <code>grid-template-rows</code> and <code>grid-template-columns</code>, and all the other sub-properties are set to their initial values. What you’re doing is specifying the line names and track sizes inline with their respective grid areas. This is easiest to describe with an example:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid</span><span class="token punctuation">:</span>    [row1-start] <span class="token string">'header header header'</span> 1fr [row1-end]    [row2-start] <span class="token string">'footer footer footer'</span> 25px [row2-end]    / auto 50px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>That’s equivalent to this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">'header header header'</span>    <span class="token string">'footer footer footer'</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [row1-start] 1fr [row1-end row2-start] 25px [row2-end]<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> auto 50px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Properties for the Children (Grid Items)</p><hr><p><strong>Note:</strong><br><code>float</code>, <code>display: inline-block</code>, <code>display: table-cell</code>, <code>vertical-align</code> and <code>column-*</code> properties have no effect on a grid item.</p><h3 id="Properties-for-the-Children-Grid-Items"><a href="#Properties-for-the-Children-Grid-Items" class="headerlink" title="Properties for the Children(Grid Items)"></a>Properties for the Children(Grid Items)</h3><h4 id="grid-column-start-grid-column-end-grid-row-start-grid-row-end"><a href="#grid-column-start-grid-column-end-grid-row-start-grid-row-end" class="headerlink" title="grid-column-start grid-column-end grid-row-start grid-row-end"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start"><code>grid-column-start</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end"><code>grid-column-end</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start"><code>grid-row-start</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end"><code>grid-row-end</code></a></h4><p>Determines a grid item’s location within the grid by referring to specific grid lines. <code>grid-column-start</code>/<code>grid-row-start</code> is the line where the item begins, and <code>grid-column-end</code>/<code>grid-row-end</code> is the line where the item ends.</p><p>Values:</p><ul><li><strong><line></strong> – can be a number to refer to a numbered grid line, or a name to refer to a named grid line</li><li><strong>span <number></strong> – the item will span across the provided number of grid tracks</li><li><strong>span <name></strong> – the item will span across until it hits the next line with the provided name</li><li><strong>auto</strong> – indicates auto-placement, an automatic span, or a default span of one</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> &lt;number> | &lt;name> | span &lt;number> | span &lt;name> | auto<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> &lt;number> | &lt;name> | span &lt;number> | span &lt;name> | auto<span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> &lt;number> | &lt;name> | span &lt;number> | span &lt;name> | auto<span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> &lt;number> | &lt;name> | span &lt;number> | span &lt;name> | auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Examples:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> five<span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> row1-start<span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/grid-column-row-start-end-01.svg" width="400" alt="Example of grid-row/column-start/end"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-b</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span col4-start<span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> span 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/grid-column-row-start-end-02.svg" width="400" alt="Example of grid-row/column-start/end"><p>If no <code>grid-column-end</code>/<code>grid-row-end</code> is declared, the item will span 1 track by default.</p><p>Items can overlap each other. You can use <code>z-index</code> to control their stacking order.</p><h4 id="grid-column-grid-row"><a href="#grid-column-grid-row" class="headerlink" title="grid-column grid-row"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column"><code>grid-column</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row"><code>grid-row</code></a></h4><p>Shorthand for <code>grid-column-start</code> + <code>grid-column-end</code>, and <code>grid-row-start</code> + <code>grid-row-end</code>, respectively.</p><blockquote><p><code>grid-column</code> 属性是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的合并简写形式,<code>grid-row</code> 属性是<br><code>grid-row-start</code> 属性和 <code>grid-row-end</code> 的合并简写形式.</p></blockquote><p>Values:</p><ul><li><strong><start-line> / <end-line></strong> – each one accepts all the same values as the longhand version, including span</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line> | &lt;start-line> / span &lt;value><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line> | &lt;start-line> / span &lt;value><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-c</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 3 / span 2<span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> third-line / 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/grid-column-row.svg" width="400" alt="Example of grid-column/grid-row"><p>If no end line value is declared, the item will span 1 track by default.</p><h4 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area"><code>grid-area</code></a></h4><p>Gives an item a name so that it can be referenced by a template created with the <code>grid-template-areas</code> property. Alternatively, this property can be used as an even shorter shorthand for <code>grid-row-start</code> + <code>grid-column-start</code> + <code>grid-row-end</code> + <code>grid-column-end</code>.</p><blockquote><p><code>grid-area</code> 属性指定项目放在哪一个区域.</p></blockquote><blockquote><p><code>grid-areas</code> 属性还可用作 <code>grid-row-start</code> + <code>grid-column-start</code> + <code>grid-row-end</code> + <code>grid-column-end</code> 的合并简写形式, 直接指定项目的位置.</p></blockquote><p>Values:</p><ul><li><strong><name></strong> – a name of your choosing</li><li><strong><row-start> / <column-start> / <row-end> / <column-end></strong> – can be numbers or named lines</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> &lt;name> | &lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Examples:</p><p>As a way to assign a name to the item:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-d</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>As the short-shorthand for <code>grid-row-start</code> + <code>grid-column-start</code> + <code>grid-row-end</code> + <code>grid-column-end</code>:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-d</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> 1 / col4-start / last-line / 6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/grid-area.svg" width="400" alt="Example of grid-area"><h4 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self"><code>justify-self</code></a></h4><p>Aligns a grid item inside a cell along the <em>inline (row)</em> axis (as opposed to <code>align-self</code> which aligns along the <em>block (column)</em> axis). This value applies to a grid item inside a single cell.</p><blockquote><p><code>justify-self</code> 属性设置单元格内容的水平位置 (左中右)</p></blockquote><p>Values:</p><ul><li><strong>start</strong> – aligns the grid item to be flush with the start edge of the cell</li><li><strong>end</strong> – aligns the grid item to be flush with the end edge of the cell</li><li><strong>center</strong> – aligns the grid item in the center of the cell</li><li><strong>stretch</strong> – fills the whole width of the cell (this is the default)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">examples: ```css .item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/justify-self-start.svg" width="400" alt="Example of justify-self set to start"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&lt;img src=”/images/justify-self-end.svg” width=”400” alt=”alt=”Example”&gt;</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-self-center.svg" width="400" alt="Example of justify-self set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/justify-self-stretch.svg" width="400" alt="Example of justify-self set to stretch"><p>To set alignment for <em>all</em> the items in a grid, this behavior can also be set on the grid container via the <code>justify-items</code> property.</p><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"><code>align-self</code></a></h4><p>Aligns a grid item inside a cell along the <em>block (column)</em> axis (as opposed to <code>justify-self</code> which aligns along the <em>inline (row)</em> axis). This value applies to the content inside a single grid item.</p><blockquote><p><code>align-self</code> 属性设置单元格内容的垂直位置 (上中下)</p></blockquote><p>Values:</p><ul><li><strong>start</strong> – aligns the grid item to be flush with the start edge of the cell</li><li><strong>end</strong> – aligns the grid item to be flush with the end edge of the cell</li><li><strong>center</strong> – aligns the grid item in the center of the cell</li><li><strong>stretch</strong> – fills the whole height of the cell (this is the default)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">examples: ```css .item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/images/align-self-start.svg" width="400" alt="Example of align-self set to start"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-self-end.svg" width="400" alt="Example of align-self set to end"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-self-center.svg" width="400" alt="Example of align-self set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/align-self-stretch.svg" width="400" alt="Example of align-self set to stretch"><p>To align <em>all</em> the items in a grid, this behavior can also be set on the grid container via the <code>align-items</code> property.</p><h4 id="place-self"><a href="#place-self" class="headerlink" title="place-self"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-self"><code>place-self</code></a></h4><p><code>place-self</code> sets both the <code>align-self</code> and <code>justify-self</code> properties in a single declaration.</p><blockquote><p><code>place-self</code> 属性是 <code>align-self</code> 属性和 <code>justify-self</code> 属性的合并简写形式.</p></blockquote><p>Values:</p><ul><li><strong>auto</strong> – The “default” alignment for the layout mode.</li><li><strong><align-self> / <justify-self></strong> – The first value sets <code>align-self</code>, the second value <code>justify-self</code>. If the second value is omitted, the first value is assigned to both properties.</li></ul><p>Examples:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">place-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/place-self-center.svg" width="400" alt="place self set to center"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-a</span> <span class="token punctuation">&#123;</span>  <span class="token property">place-self</span><span class="token punctuation">:</span> center stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/images/place-self-center-stretch.svg" width="400" alt="place set set to center stretch"><p>All major browsers except Edge support the <code>place-self</code> shorthand property.</p><h2 id="Special-Units-amp-Functions"><a href="#Special-Units-amp-Functions" class="headerlink" title="Special Units &amp; Functions"></a>Special Units &amp; Functions</h2><ul><li>When sizing rows and columns, you can use all the <a href="https://css-tricks.com/the-lengths-of-css/">lengths</a> you are used to, like <code>px</code>, rem, %, etc, but you also have keywords like <code>min-content</code>, <code>max-content</code>, <code>auto</code>, and perhaps the most useful, fractional units. <code>grid-template-columns: 200px 1fr 2fr min-content;</code></li><li>You also have access to a function which can help set boundaries for otherwise flexible units. For example to set a column to be 1fr, but shrink no further than 200px: <code>grid-template-columns: 1fr minmax(200px, 1fr);</code></li><li>There is <code>repeat()</code> function, which saves some typing, like making 10 columns: <code>grid-template-columns: repeat(10, 1fr);</code></li><li>Combining all of these things can be extremely powerful, like <code>grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));</code> See the demo at the top of the page about “The Most Powerful Lines in Grid”.</li></ul><h3 id="fr-units"><a href="#fr-units" class="headerlink" title="fr units"></a>fr units</h3><p>You’ll likely end up using a lot of <a href="https://css-tricks.com/introduction-fr-css-unit/">fractional units</a> in CSS Grid, like <code>1fr</code>. They essentially mean “portion of the remaining space”. So a declaration like:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 3fr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Means, loosely, <code>25% 75%</code>. Except that those percentage values are much more firm than fractional units are. For example, if you added padding to those percentage-based columns, now you’ve broken 100% width (assuming a <code>content-box</code> box model). Fractional units also much more friendly in combination with other units, as you can imagine:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 50px min-content 1fr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sizing-Keywords"><a href="#Sizing-Keywords" class="headerlink" title="Sizing Keywords"></a>Sizing Keywords</h3><p>When sizing rows and columns, you can use all the <a href="https://css-tricks.com/the-lengths-of-css/">lengths</a> you are used to, like <code>px</code>, rem, %, etc, but you also have keywords:</p><ul><li><code>min-content</code>: the minimum size of the content. Imagine a line of text like “The very long hotdog.”, the min-content is likely the width of the world “The”.</li><li><code>max-content</code>: the maximum size of the content. Imagine the sentence above, the <code>max-content</code> is the length of the whole sentence.</li><li><code>auto</code>: this keyword is a lot like <code>fr</code> units, except that they “lose” the fight in sizing against <code>fr</code> units when allocating the remaining space.</li><li><code>fit-content</code>: use the space available, but never less than min-content and never more than <code>max-content</code>.</li><li>fractional units: see above</li></ul><h3 id="Sizing-Functions"><a href="#Sizing-Functions" class="headerlink" title="Sizing Functions"></a>Sizing Functions</h3><ul><li>The <code>minmax()</code> function does exactly what it seems like: it sets a minimum and maximum value for what the length is able to be. This is useful for in combination with relative units. Like you may want a column to be only able to shrink so far. This is <a href="https://css-tricks.com/you-want-minmax10px-1fr-not-1fr/">extremely useful and probably what you want</a>:</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span> 3fr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>The <code>min()</code> function.</li><li>The <code>max()</code> function.</li></ul><h3 id="The-repeat-Function-and-Keywords"><a href="#The-repeat-Function-and-Keywords" class="headerlink" title="The repeat() Function and Keywords"></a>The repeat() Function and Keywords</h3><p>The <code>repeat()</code> function can save some typing:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span>1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr<span class="token punctuation">;</span><span class="token comment">/* easier: */</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span>8<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* especially when: */</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span><span class="token function">repeat</span><span class="token punctuation">(</span>8<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>10px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But <code>repeat()</code> can get extra fancy when combined with keywords:</p><ul><li><code>auto-fill</code>: Fit as many possible columns as possible on a row, even if they are empty.</li><li><code>auto-fit:</code> Fit whatever columns there are into the space. Prefer expanding columns to fill space rather than empty columns.</li></ul><p>This bears the most famous snippet in all of CSS Grid and one of the <a href="https://css-tricks.com/books/greatest-css-tricks/flexible-grids/">all-time great CSS tricks</a>:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>250px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The difference between the keywords is <a href="https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/">spelled out in detail here</a>.</p><h3 id="Masonry"><a href="#Masonry" class="headerlink" title="Masonry"></a>Masonry</h3><p>An experimental feature of CSS grid is masonry layout. Note that there are <a href="https://css-tricks.com/piecing-together-approaches-for-a-css-masonry-layout/">lots of approaches to CSS masonry</a>, but mostly of them are trickery and either have major downsides or aren’t what you quite expect.</p><p><a href="https://drafts.csswg.org/css-grid-3/#masonry-layout">The spec has an official way</a> now, and this is behind a flag in Firefox:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> masonry<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/">See Rachel’s article</a> for a deep dive.</p><h4 id="Subgrid"><a href="#Subgrid" class="headerlink" title="Subgrid"></a><a href="#subgrid"></a>Subgrid</h4><p>Subgrid is an extremely useful feature of grids that allows grid items to have a grid of their own that inherits grid lines from the parent grid.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent-grid</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.grid-item</span> <span class="token punctuation">&#123;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 2 / 7<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> subgrid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.child-of-grid-item</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* gets to participate on parent grid! */</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> 3 / 6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid#browser_compatibility">only supported in Firefox</a> right now, but it really <a href="http://meyerweb.com/eric/thoughts/2016/01/15/subgrids-considered-essential/">needs</a> to get everywhere.</p><p>It’s also useful to know about <code>display: contents;</code>. This is <em>not</em> the same as subgrid, but it can be a useful tool sometimes in a similar fashion.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid-parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span> contents<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- These grid-items get to participate on              the same grid!--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Fluid-columns-snippet"><a href="#Fluid-columns-snippet" class="headerlink" title="Fluid columns snippet"></a>Fluid columns snippet</h2><p>Fluid width columns that break into more or less columns as space is available, with no media queries!</p><blockquote><p>流体宽度列会分成或多或少的可用空间列, 没有媒体查询！</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.grid</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* This is better for small screens, once min() is better supported */</span>  <span class="token comment">/* grid-template-columns: repeat(auto-fill, minmax(min(200px, 100%), 1fr)); */</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>  <span class="token comment">/* This is the standardized property now, but has slightly less support */</span>  <span class="token comment">/* gap: 1rem */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Grid 九宫格</p></blockquote><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="xBmYJN" data-preview="true" data-editable="true"  data-prefill='{"title":"Grid 九宫格","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="grid">  &lt;div>1&lt;/div>  &lt;div>2&lt;/div>  &lt;div>3&lt;/div>  &lt;div>4&lt;/div>  &lt;div>5&lt;/div>  &lt;div>6&lt;/div>  &lt;div>7&lt;/div>  &lt;div>8&lt;/div>  &lt;div>9&lt;/div>&lt;/div></pre>  <pre data-lang="css">.grid {  display: grid;  grid-template-columns: repeat(3, 1fr);  grid-template-rows: repeat(3, 1fr);  grid-gap: 1rem;  height: 500px;}.grid > div {  background: #EDE7F6;  padding: 1rem;  border-radius: 1rem;}body {  margin: 1rem;}</pre></div><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>According to the CSS Grid Layout Module Level 1 specification, there are 5 animatable grid properties:</p><ul><li><code>grid-gap</code>, <code>grid-row-gap</code>, <code>grid-column-gap</code> as length, percentage, or calc.</li><li><code>grid-template-columns</code>, <code>grid-template-rows</code> as a simple list of length, percentage, or calc, provided the only differences are the values of the length, percentage, or calc components in the list.</li></ul><h3 id="Browser-Support-of-CSS-Grid-properties"><a href="#Browser-Support-of-CSS-Grid-properties" class="headerlink" title="Browser Support of CSS Grid properties"></a>Browser Support of CSS Grid properties</h3><blockquote><p><a href="https://caniuse.com/#feat=css-grid">Can I use… Support tables for HTML5, CSS3, etc</a></p><p><a href="https://caniuse.com/#feat=mdn-css_properties_gap_grid_context">gap</a></p><p><a href="https://caniuse.com/#feat=mdn-css_properties_grid-template-columns">grid-template-columns</a></p><p><a href="https://caniuse.com/#feat=mdn-css_properties_grid-template-rows">grid-template-rows</a></p></blockquote><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="XWpjWgq" data-preview="true" data-editable="true"  data-prefill='{"title":"CSS Grid Layout: Animation","tags":[],"scripts":[],"stylesheets":["https://codepen.io/matuzo/pen/vmpaWe/"]}'>  <pre data-lang="html">&lt;p>Check &lt;a href="https://codepen.io/matuzo/post/animating-css-grid-layout-properties">this post&lt;/a> for more details&lt;/p>&lt;button class="js-button">Animate&lt;/button>&lt;div class="grid js-grid">  &lt;article class="item">    &lt;h2>Element 1&lt;/h2>  &lt;/article>  &lt;article class="item">    &lt;h2>Element 2&lt;/h2>  &lt;/article>  &lt;article class="item">    &lt;h2>Element 3&lt;/h2>  &lt;/article>  &lt;article class="item">    &lt;h2>Element 4&lt;/h2>  &lt;/article>  &lt;article class="item">    &lt;h2>Element 5&lt;/h2>  &lt;/article>  &lt;article class="item">    &lt;h2>Element 6&lt;/h2>  &lt;/article>&lt;/div></pre>  <pre data-lang="css">.grid {  display: grid;  grid-template-columns: 200px 200px 200px;  grid-template-rows: 100px;  grid-gap: 20px;  transition: all 1s;}.grid--full {  grid-template-columns: 300px 300px 300px;  grid-template-rows: 200px;  grid-gap: 10px;}button {  background-color: #123456;  color: #ffffff;  margin: 2rem 0;  padding: 1.4rem;  border: none;  border-radius: 5px;  font-size: 1rem;}dt {  margin-bottom: 0.5rem;}</pre>  <pre data-lang="js">document.querySelector(".js-button").addEventListener("click", function () {  console.log("test");  document.querySelector(".js-grid").classList.toggle("grid--full");});</pre></div><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout">Basic Concepts of grid layout - CSS: Cascading Style Sheets | MDN</a></li><li><a href="https://1linelayouts.glitch.me/">1-Line Layouts</a>: 10 Modern CSS layout and sizing techniques that highlight just how robust and impactful a single-line of styling code can be</li><li><a href="https://www.w3.org/TR/css-grid/">CSS Grid Layout Module Level 2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25 JavaScript Tricks You Need To Know About</title>
      <link href="25-javascript-code-solutions-utility-tricks-you-need-to-know-about/"/>
      <url>25-javascript-code-solutions-utility-tricks-you-need-to-know-about/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://beforesemicolon.medium.com/25-javascript-code-solutions-utility-tricks-you-need-to-know-about-3023f7ed993e">25 JavaScript Tricks You Need To Know About</a></p></blockquote><hr><blockquote><p>Including some useful bits of code and utilities</p></blockquote><!-- ![](/images/1_9-NSfHBEMwyCSvbqnMNJ9Q@2x.jpeg) --><p>While coding, you will notice that there are some things you stumble upon over and over, and normally they beg for that quick solution. A lot of these things do not even need you to install a library to solve it. These are my top 25 collected over the years.</p><blockquote><p>写代码的时候总有一些东西是会重复出现的,次数多了你就会想找找捷径了.这类问题中有很大一部分解决起来甚至连库都不用装.下面就是我多年来收集的前 25 个捷径和小技巧.</p></blockquote><h2 id="1-Type-check-util"><a href="#1-Type-check-util" class="headerlink" title="1. Type check util"></a>1. Type check util</h2><p>JavaScript is not a strongly typed language and to get that your best solution is TypeScript which I recommend but, sometimes all you need is a simple type check which JavaScript allows you to do with the <em>“typeof”</em> keyword.</p><blockquote><p>JavaScript 不是强类型语言,对此我推荐的最佳解决方案是 TypeScript.但有时你只是想要一个简单的类型检查,这种时候 JavaScript 允许你使用 “typeof” 关键字.</p></blockquote><p>The problem with <em>“typeof”</em> is that if you use it for some primitives and function it works great but for array and objects it becomes hard to know the difference since they are both considered “objects”</p><blockquote><p>“typeof” 的问题在于,将其用于某些原语和函数时效果很好,但对于数组和对象来说,由于它们都被视为 “对象”,因此很难把握它们之间的区别.</p></blockquote><p><img src="/images/1_AwnthSYvn8KnfAX4X0LX0w.png" alt="Javascript Type checker Code on Github"></p><blockquote><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/type%20check">Javascript Type checker Code on Github</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isOfType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// create a plain object with no prototype</span>  <span class="token keyword">const</span> type <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for null type</span>  type<span class="token punctuation">.</span><span class="token function-variable function">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// check for undefined type</span>  type<span class="token punctuation">.</span><span class="token function-variable function">undefined</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// check for nil type. Either null or undefined</span>  type<span class="token punctuation">.</span><span class="token function-variable function">nil</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> type<span class="token punctuation">.</span><span class="token function">null</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for strings and string literal type. e.g: 's', "s", `str`, new String()</span>  type<span class="token punctuation">.</span><span class="token function-variable function">string</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span> x <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for number or number literal type. e.g: 12, 30.5, new Number()</span>  type<span class="token punctuation">.</span><span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// NaN &amp; Infinity have typeof "number" and this excludes that</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFinite</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for boolean or boolean literal type. e.g: true, false, new Boolean()</span>  type<span class="token punctuation">.</span><span class="token function-variable function">boolean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'boolean'</span> <span class="token operator">||</span> x <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for array type</span>  type<span class="token punctuation">.</span><span class="token function-variable function">array</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for object or object literal type. e.g: &#123;&#125;, new Object(), Object.create(null)</span>  type<span class="token punctuation">.</span><span class="token function-variable function">object</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for provided type instance</span>  type<span class="token punctuation">.</span><span class="token function-variable function">type</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> <span class="token constant">X</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token keyword">instanceof</span> <span class="token class-name">X</span><span class="token punctuation">;</span>  <span class="token comment">// check for set type</span>  type<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> type<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Set<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for map type</span>  type<span class="token punctuation">.</span><span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> type<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// check for date type</span>  type<span class="token punctuation">.</span><span class="token function-variable function">date</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> type<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> type<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#Real-world_usage">Real-world usage</a></p><h2 id="2-Check-for-empty"><a href="#2-Check-for-empty" class="headerlink" title="2. Check for empty"></a>2. Check for empty</h2><p>Sometimes you just need to know if something is empty and depending on what you are checking, you need to use different methods like, checking the length, size, or if it contains any child elements. This util unifies all of that allowing you to check the size of String, Object, Array, Map, and Set.</p><blockquote><p>有时你需要知道某些内容是否为空,并根据结果决定要使用的方法,例如检查长度、大小或是否包含任何子元素.下面这个工具打包了这些功能,你可以用它检查 String、Object、Array、Map 和 Set 的大小.</p></blockquote><p><img src="/images/1_6IpRGsphWNug0Kb3_ZZ3DA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span> x <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Map</span> <span class="token operator">||</span> x <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Get-any-list-last-item"><a href="#3-Get-any-list-last-item" class="headerlink" title="3. Get any list last item"></a>3. Get any list last item</h2><p>Other languages make this a method or function you can call on the array, but for JavaScript, you need to do some work.</p><blockquote><p>其他语言里这个功能被做成了可以在数组上调用的方法或函数,但在 JavaScript 里面,你得自己做点工作.</p></blockquote><p><img src="/images/1_5rnB_eRdfJ_fnEhvACKuZA.png"></p><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/last%20item%20getter">Last Item Getter Code on Github</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">lastItem</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Random-number-generator-with-a-range"><a href="#4-Random-number-generator-with-a-range" class="headerlink" title="4. Random number generator with a range"></a>4. Random number generator with a range</h2><blockquote><p>生成范围随机数</p></blockquote><p>If sometimes you need to generate random numbers but you want these numbers to be in a range, you need this small utility.</p><blockquote><p>有时你需要生成随机数,但希望这些数字在一定范围内,那就可以用这个工具.</p></blockquote><p><img src="/images/1_-GwiytYdCykqOfRr2I-u_g.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">randomNumber</span><span class="token punctuation">(</span><span class="token parameter">max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">>=</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">randomNumber</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns a random integer from 1 to 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">randomNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns a random integer from 1 to 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Note:</strong> Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)</p><h2 id="5-Random-id-generator"><a href="#5-Random-id-generator" class="headerlink" title="5. Random id generator"></a>5. Random id generator</h2><p>Just need some id? No need to install a new library for that unless you need some more complex ID generators like UUID. Check these options which may be enough to get going. You can start from the current time in milliseconds or a specific Integer and increment, or you can generate an ID from alphanumeric characters.</p><blockquote><p>有时你只是需要一些 ID？除非你要的是更复杂的 ID 生成器(例如 UUID),否则用不着为此安装什么新库,下面这个选项足够了.你可以从当前时间(以毫秒为单位)或特定的整数和增量开始生成,也可以从字母生成 ID.</p></blockquote><p><img src="/images/1_apRh2O2Nvqa-8JIzJjmcBA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// create unique id starting from current time in milliseconds</span><span class="token comment">// incrementing it by 1 everytime requested</span><span class="token keyword">const</span> uniqueId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>mil <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> id<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// create unique incrementing id starting from provided value or zero</span><span class="token comment">// good for temporary things or things that id resets</span><span class="token keyword">const</span> uniqueIncrementingId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lastId <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> numb <span class="token operator">=</span> lastId<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>numb <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">length <span class="token operator">=</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// create unique id from letters and numbers</span><span class="token keyword">const</span> uniqueAlphaNumericId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> heyStack <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">randomInt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>heyStack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">length <span class="token operator">=</span> <span class="token number">24</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> length <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> heyStack<span class="token punctuation">[</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Create-a-range-of-numbers"><a href="#6-Create-a-range-of-numbers" class="headerlink" title="6. Create a range of numbers"></a>6. Create a range of numbers</h2><p>One thing I love in Python is the <a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=range#range">range</a> function and I often need it coding in JavaScript. Here is a simple implementation of it that is perfect for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"><em>for…of</em></a> loop and whenever you need numbers in a specific range.</p><blockquote><p>Python 里我很喜欢的一个功能是 range 函数,而在 JavaScript 里我经常需要自己写这个功能.下面是一个简单的实现,非常适合 for…of 循环以及需要特定范围内数字的情况.</p></blockquote><p><img src="/images/1_aoFa9BnaFNDKNB5QoiUddA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token parameter">maxOrStart<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> length<span class="token operator">:</span> maxOrStart <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> maxOrStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>      <span class="token punctuation">&#123;</span> length<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> maxOrStart<span class="token punctuation">)</span> <span class="token operator">/</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">*</span> step <span class="token operator">+</span> maxOrStart<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> length<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>end <span class="token operator">-</span> maxOrStart<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">+</span> maxOrStart<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Format-JSON-string-and-stringify-anything"><a href="#7-Format-JSON-string-and-stringify-anything" class="headerlink" title="7. Format JSON string and stringify anything"></a>7. Format JSON string and stringify anything</h2><p>I find myself using this a lot when working on something with NodeJs to log objects to the console. The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify</a> takes a third parameter that must be a number of spaces to indent the line with. The second parameter can be null but you can use it to handle things like <em>function</em>, <em>Set</em>, <em>Map</em>, and <em>Symbol</em> that the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify</a> method does not handle or simply ignores.</p><blockquote><p>我在使用 NodeJs 将对象记录到控制台时经常使用这种方法.JSON.stringify 方法需要第三个参数,该参数必须有多个空格以缩进行.第二个参数可以为 null,但你可以用它来处理 function、Set、Map、Symbol 之类 JSON.stringify 方法无法处理或完全忽略的内容.</p></blockquote><p><img src="/images/1_2gYWlB5Rt8vH2V2aCRzH9g.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> stringify <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">replacer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'symbol'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> spaces <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> replacer<span class="token punctuation">,</span> spaces<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-Execute-promise-sequentially"><a href="#8-Execute-promise-sequentially" class="headerlink" title="8. Execute promise sequentially"></a>8. Execute promise sequentially</h2><p>If you have a bunch of asynchronous or normal function that returns a promise that you need to execute one after the other, this utility can help a lot. It takes a list of functions or promises and sequentially resolves them using the array <a href="https://www.youtube.com/watch?v=DTmToxWZX9I&list=PLpWvGP6yhJUigZr2vQgbqpTv_HLQ6eZsz&index=7"><em>reduce</em></a> method.</p><blockquote><p>如果你有一堆异步或普通函数都返回 promise,要求你一个接一个地执行,这个工具就会很有用.它会获取函数或 promise 列表,并使用数组 reduce 方法按顺序解析它们.</p></blockquote><p><a href="https://github.com/beforesemicolon/javascript-solutions/blob/main/async%20sequentializer"><img src="/images/1_YgGpHQsOL2xboQ_6tTdKMA.png"></a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncSequentializer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">toPromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// if promise just return it</span>      <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// if function is not async this will turn its result into a promise</span>      <span class="token comment">// if it is async this will await for the result</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      list        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lastPromise<span class="token punctuation">,</span> currentPromise</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> lastPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// collect the results</span>            <span class="token keyword">return</span> <span class="token function">toPromise</span><span class="token punctuation">(</span>currentPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">toPromise</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// collect the final result and return the array of results as resolved promise</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>results<span class="token punctuation">,</span> res<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-Polling-data"><a href="#9-Polling-data" class="headerlink" title="9. Polling data"></a>9. Polling data</h2><p>If you ever need to keep checking for data updates but don’t have WebSocket available in your system, this util lets you do just that. It is great for cases where you upload a file and you want to keep checking if the file is done processing, or you are working with a third-party API like dropbox or uber and you want to keep checking whether the process is complete or the ride has reached the destination.</p><blockquote><p>如果你需要持续检查数据更新,但系统中没有 WebSocket,则可以使用这个工具来执行操作.它非常适合上传文件时,想要持续检查文件是否已完成处理的情况,或者使用第三方 API(例如 dropbox 或 uber)并且想要持续检查过程是否完成或骑手是否到达目的地的情况.</p></blockquote><p><img src="/images/1_j27qnZXgfrkq-OEvoXYUJA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> validate<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">2500</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">resolver</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// catch any error thrown by the "fn" function</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fn does not need to be asynchronous or return promise</span>      <span class="token comment">// call validator to see if the data is at the state to stop the polling</span>      <span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolver<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token comment">// if validator returns anything other than "true" or "false" it stops polling</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-Wait-for-all-Promises-to-complete"><a href="#10-Wait-for-all-Promises-to-complete" class="headerlink" title="10. Wait for all Promises to complete"></a>10. Wait for all Promises to complete</h2><p>This is not quite a code solution but a good to know about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise API</a>. It is constantly evolving and I used to have a code solution for the now available methods “<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled">allSettled</a>“, “<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">race</a>“ and “<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any">any</a>“ but I am glad just to tell you about them instead of sharing a code implementation of them.</p><blockquote><p>这个算不上是代码解决方案,更多是对 Promise API 的强化.这个 API 在不断进化,以前我还为 “allSettled””race” 和”any”做了代码实现,现在直接用 API 的就好了.</p></blockquote><p><img src="/images/1_UeYZPiyZLVYokxrA4QWeyQ.png"></p><h2 id="11-Swap-array-values-place"><a href="#11-Swap-array-values-place" class="headerlink" title="11. Swap array values place"></a>11. Swap array values place</h2><blockquote><p>交换赋值</p></blockquote><p>ES6 made it easy to swap values from places in the array. Not that this is a hard thing to do but it is a good one to know about.</p><blockquote><p>ES6 开始,从数组中的不同位置交换值变得容易多了.这个做起来不难,但是了解一下也不错,</p></blockquote><p><img src="/images/1_TyTAZaKwZY4nYC75tgCxeQ.png"></p><h2 id="12-Conditional-Object-key"><a href="#12-Conditional-Object-key" class="headerlink" title="12. Conditional Object key"></a>12. Conditional Object key</h2><p>This trick is my favorite and I find myself using it a lot when working with React updating states. It simply lets you conditionally insert a key into a spread object by wrapping the condition in parenthesis.</p><blockquote><p>我最喜欢这条技巧了,我在使用 React 更新状态时经常用它.你可以将条件包装在括号中来有条件地将一个键插入一个 spread 对象.</p></blockquote><p><img src="/images/1_qwdEmj-VMC0Bmonobrvzew.png"></p><h2 id="13-Use-variables-as-the-object-key"><a href="#13-Use-variables-as-the-object-key" class="headerlink" title="13. Use variables as the object key"></a>13. Use variables as the object key</h2><p>Another one that comes handy is for cases when you have a string variable and want to use it as a key in the object to set a value.</p><blockquote><p>当你有一个字符串变量,并想将其用作对象中的键以设置一个值时可以用它.</p></blockquote><p><img src="/images/1_OzsJoyx2dZ0-4eAVnev8_w.png"></p><h2 id="14-Check-for-key-in-object"><a href="#14-Check-for-key-in-object" class="headerlink" title="14. Check for key in object"></a>14. Check for key in object</h2><p>This one can be problematic but this is a good trick to know of which helps you check for object keys.</p><blockquote><p>这是一个很好的技巧,可以帮助你检查对象键.</p></blockquote><p><img src="/images/1_9FOqfqGSBLkIZPSiXPvMyg.png"></p><h2 id="15-Remove-Array-duplicates"><a href="#15-Remove-Array-duplicates" class="headerlink" title="15. Remove Array duplicates"></a>15. Remove Array duplicates</h2><p>It’s common to have duplicated value in an array which you can get rid of with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> data structure. It works great with many data types and set has a different way to check equality which helps a lot. For cases where you may have different instances or objects, you can still use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> to track a specific thing and filter duplicated objects out.</p><blockquote><p>数组中经常有重复的值,你可以使用 Set 数据结构来消除它.它适用于许多数据类型,并且 set 有多种检查相等性的方法,很好用.对于不同实例或对象的情况,你还是可以使用 Set 来跟踪特定事物并过滤出重复的对象.</p></blockquote><p><img src="/images/1_7YdW_SF8PRduX36eB8KDoA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numberArrays <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token number">Infinity</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">NaN</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token number">89</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token number">Infinity</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> objArrays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">//prints [undefined, Infinity, 12, NaN, false, 5, 7, null, 89, 9];</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>numberArrays<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// prints [ &#123; id: 1 &#125;, &#123; id: 4 &#125;, &#123; id: 1 &#125;, &#123; id: 5 &#125;, &#123; id: 4 &#125; ]</span>  <span class="token comment">//nothing changes because even though the ids repeat in some objects</span>  <span class="token comment">//the objects are different instances, different objects</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>objArrays<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> idSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">// prints [ &#123; id: 1 &#125;, &#123; id: 4 &#125;, &#123; id: 5 &#125; ] using id to track id uniqueness</span>  objArrays<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> existingId <span class="token operator">=</span> idSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    idSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span>existingId<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-Do-“break”-and-“continue”-in-Array-forEach"><a href="#16-Do-“break”-and-“continue”-in-Array-forEach" class="headerlink" title="16. Do “break” and “continue” in Array forEach"></a>16. Do <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break">“break”</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue">“continue”</a> in Array forEach</h2><p>I really like using the array <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">“<em>.forEach</em>“</a> method but sometimes I need to quit early or continue to the next loop and don’t want to use the <em>for…loop</em> for it. You can replicate the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue">“continue”</a> statement behavior with an early return but if you want to replicate the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break">“break”</a> behavior you need to use the array <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"><em>“.some”</em></a> method instead.</p><blockquote><p>我真的很喜欢使用数组 “.forEach” 方法,但有时我需要提早退出或继续进行下一个循环,而不想用 for…loop.你可以复制 “continue” 语句行为来提前返回,但如果要复制 “break” 行为,则需要使用数组 “.some” 方法.</p></blockquote><p><img src="/images/1_g9yN2sGNJd4LlNlml8ssyA.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//logs 1, 3 and 5</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> number <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//skip to the next item</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// stops the Loop</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//logs 1, 3 and 5</span>numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//skip to the next item</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//stops the Loop</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-Destructuring-with-alias-name-and-default-values"><a href="#17-Destructuring-with-alias-name-and-default-values" class="headerlink" title="17. Destructuring with alias name and default values"></a>17. Destructuring with alias name and default values</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">Destructuring</a> is one of the best JavaScript features and the cool thing is you can set alias using “colon” and default values using the “equal” sign for the properties.</p><blockquote><p>Destructuring(解构)是 JavaScript 最好用的功能之一,而且你可以使用 “冒号” 设置别名,并使用 “等号” 设置属性默认值.</p></blockquote><p><img src="/images/1_hN3zRSth00foqkLh6Rx0vA.png"></p><h2 id="18-Optional-Chaining-and-nullish-coalescing"><a href="#18-Optional-Chaining-and-nullish-coalescing" class="headerlink" title="18. Optional Chaining and nullish coalescing"></a>18. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">Optional Chaining</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">nullish coalescing</a></h2><p>A couple of amazing and very anticipated JavaScript features you must start using right now to solve commonly used hacks when it comes to deep checking object property and dealing with null and undefined values.</p><blockquote><p>深入检查对象属性并处理 null 和 undefined 值时,你可以使用几个非常好用的 JavaScript 功能来解决常见的问题.</p></blockquote><p><img src="/images/1_DdXkzbBdgjEF-XFAF8bAAg.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        value<span class="token operator">:</span> <span class="token string">'sample'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      int<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">// even though the " int.value " exists ,it is falsy therefore fails to be printed</span>  obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>container<span class="token punctuation">.</span>int<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token string">'no int value'</span><span class="token punctuation">,</span> <span class="token comment">// prints  no int value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">// the ?? make sure to fallback to the right side only if left is null or undefined</span>  obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>container<span class="token punctuation">.</span>int<span class="token punctuation">.</span>value <span class="token operator">??</span> <span class="token string">'no int value'</span><span class="token punctuation">,</span> <span class="token comment">// prints 0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">// "wrapper" does not exist inside " data"</span>  obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token comment">// throws " Cannot )read property 'name' of undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">// this is better but can be a problem if object is deep</span>  <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>wrapper <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'no name'</span><span class="token punctuation">,</span> <span class="token comment">//  prints ' no name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token comment">// using optional chaining " ? "is better</span>  obj<span class="token operator">?.</span>data<span class="token operator">?.</span>wrapper<span class="token operator">?.</span>name <span class="token operator">||</span> <span class="token string">'no name'</span><span class="token punctuation">,</span> <span class="token comment">// prints ' no name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-Extend-class-with-functions"><a href="#19-Extend-class-with-functions" class="headerlink" title="19. Extend class with functions"></a>19. Extend class with functions</h2><p>I always tell people, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">JavaScript classes</a> are just <a href="https://www.w3schools.com/js/js_object_constructors.asp">constructor functions</a> and prototypes under the hood. Is not a real concept like in Java. One way to prove it to just use a constructor function to extend a class. It comes in handy for private stuff which in class is weird with the whole “#” thing and it compiles to less code when used with <em>babel</em> or <em>WebPack</em>.</p><blockquote><p>我经常对别人讲,JavaScript 类只是构造函数和底层的原型,不是像 Java 中那样的真实概念.一个证据是,你可以只使用一个构造函数来扩展一个类.在私有内容里这个很好用,在类里 “#” 这些看着很奇怪,并且用于 babel 或 WebPack 时,编译出来的代码更少.</p></blockquote><p><img src="/images/1_Bvfwz2vj9uKkA6SO-2k-WA.png"></p><h2 id="20-Extend-constructor-functions"><a href="#20-Extend-constructor-functions" class="headerlink" title="20. Extend constructor functions"></a>20. Extend constructor functions</h2><p>The thing with class is you can only extend a single other class. With constructor function, you can compose a function using multiple other constructor functions making it much more flexible to work with at times. You do that by either using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><em>.apply</em></a> or the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><em>.call</em></a> method of the function prototype. You can even extend only parts of the function as well as long as it is an object.</p><blockquote><p>类的一个问题是你只能扩展一个其他类.使用构造函数,你可以使用多个构造函数来构成一个函数,这样就会灵活多了.你可以使用函数原型的. apply 或. call 方法来实现.你甚至可以只扩展函数的一部分,只要它是一个对象即可.</p></blockquote><p><img src="/images/1_gThtN_mu3DEafBJYvS463w.png"></p><h2 id="21-Loop-anything"><a href="#21-Loop-anything" class="headerlink" title="21. Loop anything"></a>21. Loop anything</h2><p>Sometimes you just want to loop anything, Set, Map, Object, Array, String, etc, as long as it is iterable. This very simple <em>forEach</em> function utility allows you to do just that. If the callback returns <em>true</em> it will just break out of the loop.</p><blockquote><p>有时,你需要循环任何可迭代的内容(Set、Map、Object、Array、String 等).这个非常简单的 forEach 函数工具就可以做到这一点.如果回调返回 true,它将退出循环.</p></blockquote><p><img src="/images/1_p8Pew5bGxMyEQL6Jbo_fLQ.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> entries<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-Make-function-argument-required"><a href="#22-Make-function-argument-required" class="headerlink" title="22. Make function argument required"></a>22. Make function argument required</h2><p>This is an awesome way to make sure a function is called with what it need to do the work. You can use the feature of the default argument value to call a function that simply throws an error. If you call the function with what it needs, the value will replace that function and nothing happens. Calling with undefined has the same effect as well.</p><blockquote><p>这是一种确保函数调用了完成工作所需内容的绝佳方法.你可以使用默认参数值的特性来调用函数,然后就会抛出一个错误.如果调用该函数时带上了它需要的值,则该值将替换该函数,并且什么也不会发生.使用 undefined 调用也有相同的效果.</p></blockquote><p><img src="/images/1_Xpzsc6sz3gL89BV92Pizvg.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">required</span><span class="token punctuation">(</span>argName <span class="token operator">=</span> <span class="token string">'param'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>argName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" is required</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">iHaveRequiredOptions</span><span class="token punctuation">(</span>arg1 <span class="token operator">=</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">iHaveRequiredOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws "arg1" is required</span><span class="token function">iHaveRequiredOptions</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 12, 10</span><span class="token function">iHaveRequiredOptions</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 12, 24</span><span class="token function">iHaveRequiredOptions</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws "arg1" is required</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-Create-modules-or-singletons"><a href="#23-Create-modules-or-singletons" class="headerlink" title="23. Create modules or singletons"></a>23. Create modules or singletons</h2><p>There are often times that you need to initialize something on load, set it up with everything it needs, and then use it everywhere in the application without ever needing to do anything to it. You can use the power of the <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFE function</a> to do just that and it will change your life. This is the module pattern very useful to isolate things and only expose what you will need to interact with.</p><blockquote><p>很多时候,你需要在加载时初始化某些内容,设置它需要的各种事物,然后就可以在应用程序中到处使用它,而无需再做什么补充工作.你可以使用 IIFE 函数来做到这一点,这个函数太好用了.这种模块模式用来隔离事物非常好用,它可以只暴露需要交互的内容.</p></blockquote><p><img src="/images/1_09BP27dVOHLmJbAc8Y-CMQ.png"></p><h2 id="24-Deep-clone-object"><a href="#24-Deep-clone-object" class="headerlink" title="24. Deep clone object"></a>24. Deep clone object</h2><p>Here are something devs often install some libraries like “<a href="https://lodash.com/">lodash</a>“ to be able to do this, but it is actually effortless to do in plain JavaScript. It is a simple recursive function that as long as it is an object, re-initializes it as a clone using its <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor">constructor</a>, then repeats the process for all properties.</p><blockquote><p>开发人员通常会安装一些类似 “lodash” 的库来执行这一操作,但使用纯 JavaScript 来实现确实也很容易.这是一个简单的递归函数:只要是一个对象,就使用函数的构造器将其重新初始化为一个克隆,然后对所有属性重复该过程.</p></blockquote><p><img src="/images/1_4JIgeWc1Lt_sc6nSTMuwmw.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> clone <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    clone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>clone<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-Deep-freeze-object"><a href="#25-Deep-freeze-object" class="headerlink" title="25. Deep freeze object"></a>25. Deep freeze object</h2><p>If you love immutability, this is a must-have utility but immutability is a big topic so make sure to follow <strong>Before Semicolon</strong> here on <a href="https://beforesemicolon.medium.com/">Medium</a> and on <a href="https://www.youtube.com/channel/UCrU33aw1k9BqTIq2yKXrmBw">Youtube</a> for us to address these things.</p><blockquote><p>如果你喜欢不变性,那么这个工具你一定要常备.</p></blockquote><p><img src="/images/1_E8KNhdCuc5LR35iT6r0eXw.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> clone <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    clone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>clone<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Complete Guide to Flexbox</title>
      <link href="a-guide-to-flexbox/"/>
      <url>a-guide-to-flexbox/</url>
      
        <content type="html"><![CDATA[<script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox | CSS-Tricks</a></p></blockquote><p>Our comprehensive guide to CSS flexbox layout. This complete guide explains everything about flexbox, focusing on all the different possible properties for the parent element (the flex container) and the child elements (the flex items). It also includes history, demos, patterns, and a browser support chart.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The <code>Flexbox Layout</code> (Flexible Box) module (<a href="https://www.w3.org/TR/css-flexbox/">a W3C Candidate Recommendation</a> as of <del>October 2017</del> 19 November 2018) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p><p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow.</p><p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).</p><blockquote><p><strong>Note:</strong> Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">Grid</a> layout is intended for larger scale layouts.</p></blockquote><h2 id="Basics-amp-Terminology"><a href="#Basics-amp-Terminology" class="headerlink" title="Basics &amp; Terminology"></a>Basics &amp; Terminology</h2><p>Since flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).</p><p>If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p><p><img src="/images/00-basic-terminology.svg" alt="A diagram explaining flexbox terminology. The size across the main axis of flexbox is called the main size, the other direction is the cross size. Those sizes have a main start, main end, cross start, and cross end."></p><!-- ![A diagram explaining flexbox terminology. The size across the main axis of flexbox is called the main size, the other direction is the cross size. Those sizes have a main start, main end, cross start, and cross end.](https://developer.mozilla.org/files/3739/flex_terms.png)   --><p>Items will be laid out following either the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Main_Axis"><code>main axis</code></a> (from <code>main-start</code> to <code>main-end</code>) or the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Cross_Axis"><code>cross axis</code></a> (from <code>cross-start</code> to <code>cross-end</code>).</p><ul><li><strong>main axis</strong>（主轴） – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the <code>flex-direction</code> property (see below).</li><li><strong>main-start | main-end</strong> – The flex items are placed within the container starting from main-start and going to main-end.</li><li><strong>main size</strong> – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.</li><li><strong>cross axis</strong>（交叉轴）（和主轴 main axis 垂直） – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.</li><li><strong>cross-start | cross-end</strong> – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.</li><li><strong>cross size</strong> – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</li></ul><h2 id="Flexbox-properties"><a href="#Flexbox-properties" class="headerlink" title="Flexbox properties"></a>Flexbox properties</h2><h3 id="Properties-for-the-Parent-flex-container"><a href="#Properties-for-the-Parent-flex-container" class="headerlink" title="Properties for the Parent(flex container)"></a>Properties for the Parent(flex container)</h3><div style="width:400px;margin:auto;"><p><img src="/images/01-container.svg" alt="Properties for the Parent(flex container)"></p></div><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">display</a></p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token comment">/* or inline-flex */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note that CSS columns have no effect on a flex container.</p><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><div style="width:400px;margin:auto;"><p><img src="/images/flex-direction.svg" alt="the four possible values of flex-direction being shown: top to bottom, bottom to top, right to left, and left to right"></p></div><p>This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><code>flex-direction</code></a> 属性指定了内部元素是如何在 flex 容器中布局的，定义了主轴的方向</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span> <span class="token comment">/* 从左到右 */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span> <span class="token comment">/* 从右到左 */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> <span class="token comment">/* 从上到下 */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span> <span class="token comment">/* 从下到上 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>row</code> (default): left to right in <code>ltr</code>; right to left in <code>rtl</code>.</li><li><code>row-reverse</code>: right to left in <code>ltr</code>; left to right in <code>rtl</code>.</li><li><code>column</code>: same as <code>row</code> but top to bottom.</li><li><code>column-reverse</code>: same as <code>row-reverse</code> but bottom to top.</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><div style="width:400px;margin:auto;"><p><img src="/images/flex-wrap.svg" alt="two rows of boxes, the first wrapping down onto the second"></p></div><p>By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"><code>flex-wrap</code></a> 指定 flex 元素单行显示还是多行显示 . 如果允许换行，这个属性允许你控制行的堆叠方向。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> <span class="token comment">/* flex 的元素被摆放到到一行 单行显示，这可能导致溢出 flex 容器。*/</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span> <span class="token comment">/* flex 元素 被打断到多个行中 多行显示 */</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap-reverse<span class="token punctuation">;</span> <span class="token comment">/* 和 wrap 的行为一样，但是从下到上 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>nowrap</code> (default): all flex items will be on one line.</li><li><code>wrap</code>: flex items will wrap onto multiple lines, from top to bottom.</li><li><code>wrap-reverse</code>: flex items will wrap onto multiple lines from bottom to top.</li></ul><p>There are some <a href="https://css-tricks.com/almanac/properties/f/flex-wrap/">visual demos of <code>flex-wrap</code> here</a>.</p><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>This is a shorthand for the <code>flex-direction</code> and <code>flex-wrap</code> properties, which together define the flex container’s main and cross axes. The default value is <code>row nowrap</code>.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow"><code>flex-flow</code></a> 属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写</p></blockquote><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><div style="width:400px;margin:auto;"><p><img src="/images/justify-content.svg" alt="flex items within a flex container demonstrating the different spacing options"></p></div><p>This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"><code>justify-content</code></a> 属性定义了分配顺着弹性容器主轴的元素之间及其周围的空间。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 居中排列 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/* 从行首起始位置开始排列 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment">/* 从行尾位置开始排列 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> <span class="token comment">/* 均匀排列每个元素首个元素放置于起点，末尾元素放置于终点 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> <span class="token comment">/* 均匀排列每个元素每个元素周围分配相同的空间 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span> <span class="token comment">/* 均匀排列每个元素每个元素之间的间隔相等 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>flex-start</code> (default): items are packed toward the start of the flex-direction.</li><li><code>flex-end</code>: items are packed toward the end of the flex-direction.</li><li><code>start</code>: items are packed toward the start of the <code>writing-mode</code> direction.</li><li><code>end</code>: items are packed toward the end of the <code>writing-mode</code> direction.</li><li><code>left</code>: items are packed toward left edge of the container, unless that doesn’t make sense with the <code>flex-direction</code>, then it behaves like <code>start</code>.</li><li><code>right</code>: items are packed toward right edge of the container, unless that doesn’t make sense with the <code>flex-direction</code>, then it behaves like <code>start</code>.</li><li><code>center</code>: items are centered along the line（居中排列）</li><li><code>space-between</code>: items are evenly distributed in the line; first item is on the start line, last item on the end line.</li><li><code>space-around</code>: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.</li><li><code>space-evenly</code>: items are distributed so that the spacing between any two items (and the space to the edges) is equal.</li></ul><p>Note that that browser support for these values is nuanced. For example, <code>space-between</code> never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content">has detailed charts</a>. The safest values are <code>flex-start</code>, <code>flex-end</code>, and <code>center</code>.</p><p>There are also two additional keywords you can pair with these values: <code>safe</code> and <code>unsafe</code>. Using <code>safe</code> ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”).</p><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><div style="width:400px;margin:auto;"><p><img src="/images/align-items.svg" alt="demonstration of differnet alignment options, like all boxes stuck to the top of a flex parent, the bottom, stretched out, or along a baseline"></p></div><p>This defines the default behavior for how flex items are laid out along the <strong>cross axis</strong> on the current line. Think of it as the <code>justify-content</code> version for the cross-axis (perpendicular to the main-axis).</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><code>align-items</code></a> controls the alignment of items on the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Cross_Axis">Cross Axis</a>. </p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/* Pack flex items from the start */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment">/* Pack flex items from the end */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* Pack items around the center */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>stretch</code> (default): stretch to fill the container (still respect min-width/max-width)</li><li><code>flex-start</code> / <code>start</code> / <code>self-start</code>: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the <code>flex-direction</code> rules or the <code>writing-mode</code> rules.</li><li><code>flex-end</code> / <code>end</code> / <code>self-end</code>: items are placed at the end of the cross axis. The difference again is subtle and is about respecting <code>flex-direction</code> rules vs. <code>writing-mode</code> rules.</li><li><code>center</code>: items are centered in the cross-axis</li><li><code>baseline</code>: items are aligned such as their baselines align</li></ul><p>The <code>safe</code> and <code>unsafe</code> modifier keywords can be used in conjunction with all the rest of these keywords (although note <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">browser support</a>), and deal with helping you prevent aligning elements such that the content becomes inaccessible.</p><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><div style="width:400px;margin:auto;"><p><img src="/images/align-content.svg" alt="examples of the align-content property where a group of items cluster at the top or bottom, or stretch out to fill the space, or have spacing."></p></div><p>This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how <code>justify-content</code> aligns individual items within the main-axis.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content"><code>align-content</code></a> 属性设置了浏览器如何沿着 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">弹性盒子布局</a> 的纵轴和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">网格布局</a> 的主轴在内容项之间和周围分配空间。</p></blockquote><p><strong>Note:</strong> this property has no effect when there is only one line of flex items.</p><blockquote><p>Note: This property only takes effect on multi-line flexible containers, where flex-flow is set to either wrap or wrap-reverse). A single-line flexible container (i.e. where flex-flow is set to its default value, no-wrap) will not reflect align-content.</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/* Pack flex items from the start */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment">/* Pack flex items from the end */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* Pack items around the center */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> <span class="token comment">/* Distribute items evenly The first item is flush with the start, the last is flush with the end */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> <span class="token comment">/* Distribute items evenly Items have a half-size space on either end */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span> <span class="token comment">/* Distribute items evenly Items have equal space around them */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>flex-start</code> / <code>start</code>: items packed to the start of the container. The (more supported) <code>flex-start</code> honors the <code>flex-direction</code> while <code>start</code> honors the <code>writing-mode</code> direction.</li><li><code>flex-end</code> / <code>end</code>: items packed to the end of the container. The (more support) <code>flex-end</code> honors the <code>flex-direction</code> while end honors the <code>writing-mode</code> direction.</li><li><code>center</code>: items centered in the container（将项目放置在中点）</li><li><code>space-between</code>: items evenly distributed; the first line is at the start of the container while the last one is at the end（均匀分布项目第一项与起始点齐平，最后一项与终止点齐平）</li><li><code>space-around</code>: items evenly distributed with equal space around each line（均匀分布项目项目在两端有一半大小的空间）</li><li><code>space-evenly</code>: items are evenly distributed with equal space around them（均匀分布项目项目周围有相等的空间）</li><li><code>stretch</code> (default): lines stretch to take up the remaining space</li></ul><p>The <code>safe</code> and <code>unsafe</code> modifier keywords can be used in conjunction with all the rest of these keywords (although note <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">browser support</a>), and deal with helping you prevent aligning elements such that the content becomes inaccessible.</p><h3 id="Properties-for-the-Children-flex-items"><a href="#Properties-for-the-Children-flex-items" class="headerlink" title="Properties for the Children(flex items)"></a>Properties for the Children(flex items)</h3><div style="width:400px;margin:auto;"><p><img src="/images/02-items.svg" alt="Properties for the Children(flex items)"></p></div><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><div style="width:400px;margin:auto;"><p><img src="/images/order.svg" alt="Diagram showing flexbox order. A container with the items being 1 1 1 2 3, -1 1 2 5, and 2 2 99."></p></div><p>By default, flex items are laid out in the source order. However, the <code>order</code> property controls the order in which they appear in the flex container.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/order"><code>order</code></a> 属性规定了弹性容器中的可伸缩项目在布局时的顺序。元素按照 <code>order</code> 属性的值的增序进行布局</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">order</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span> <span class="token comment">/* default is 0 */</span>  <span class="token property">order</span><span class="token punctuation">:</span> -5<span class="token punctuation">;</span> <span class="token comment">/* &lt;integer> values */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><div style="width:400px;margin:auto;"><p><img src="/images/flex-grow.svg" alt="two rows of items, the first has all equally-sized items with equal flex-grow numbers, the second with the center item at twice the width because its value is 2 instead of 1."></p></div><p>This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.</p><p>If all items have <code>flex-grow</code> set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"><code>flex-grow</code></a> 设置弹性项目在主轴的弹性放大比例。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span> <span class="token comment">/* Negative values are invalid. Defaults to 0. */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Negative numbers are invalid.</p><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>This defines the ability for a flex item to shrink if necessary.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink"><code>flex-shrink</code></a> 设置弹性项目在主轴的弹性缩小比例。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token comment">/* Negative values are invalid. Defaults to 1. */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Negative numbers are invalid.</p><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The <code>auto</code> keyword means “look at my width or height property” (which was temporarily done by the <code>main-size</code> keyword until deprecated). The <code>content</code> keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren <code>max-content</code>, <code>min-content</code>, and <code>fit-content</code> do.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"><code>flex-basis</code></a> 指定了 flex 元素在主轴方向上的初始大小。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* Specify &lt;'width'> */</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span>  <span class="token comment">/* Intrinsic sizing keywords */</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> fill<span class="token punctuation">;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>  <span class="token comment">/* Automatically size based on the flex item's content */</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> content<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If set to <code>0</code>, the extra space around content isn’t factored in. If set to <code>auto</code>, the extra space is distributed based on its <code>flex-grow</code> value.<a href="/images/rel-vs-abs-flex.svg">See this graphic.</a></p><blockquote><p>如果设置为 <code>0</code>, 则不考虑内容周围的多余空间。如果设置为 <code>auto</code>, 则多余的空间将根据其 <code>flex-grow</code> 值进行分配。</p></blockquote><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>This is the shorthand for <code>flex-grow,</code> <code>flex-shrink</code> and <code>flex-basis</code> combined. The second and third parameters (<code>flex-shrink</code> and <code>flex-basis</code>) are optional. The default is <code>0 1 auto</code>, but if you set it with a single number value, it’s like <code>1 0</code>.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex"><code>flex</code></a> 规定了弹性元素如何伸长或缩短以适应 flex 容器中的可用空间。这是一个简写属性，用来设置 <code>flex-grow</code>, <code>flex-shrink</code> 与 <code>flex-basis</code></p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* Keyword values */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token comment">/* One value, unitless number: flex-grow */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>  <span class="token comment">/* One value, width/height: flex-basis */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span>  <span class="token comment">/* Two values: flex-grow | flex-basis */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1 30px<span class="token punctuation">;</span>  <span class="token comment">/* Two values: flex-grow | flex-shrink */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 2 2<span class="token punctuation">;</span>  <span class="token comment">/* Three values: flex-grow | flex-shrink | flex-basis */</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 2 2 10%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>It is recommended that you use this shorthand property</strong> rather than set the individual properties. The shorthand sets the other values intelligently.</p><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><div style="width:400px;margin:auto;"><p><img src="/images/align-self.svg" alt="One item with a align-self value is positioned along the bottom of a flex parent instead of the top where all the rest of the items are."></p></div><p>This allows the default alignment (or the one specified by <code>align-items</code>) to be overridden for individual flex items.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"><code>align-self</code></a> 属性设置项目在其包含块中在交叉轴方向上的对齐方式 （覆盖网格或弹性项目的 <code>align-items</code> 值）</p></blockquote><p>Please see the <code>align-items</code> explanation to understand the available values.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* Keyword values */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token comment">/* Positional alignment */</span>  <span class="token comment">/* align-self does not take left and right values */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* Put the item around the center */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span> <span class="token comment">/* Put the item at the start */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span> <span class="token comment">/* Put the item at the end */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> self-start<span class="token punctuation">;</span> <span class="token comment">/* Align the item flush at the start */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> self-end<span class="token punctuation">;</span> <span class="token comment">/* Align the item flush at the end */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/* Put the flex item at the start */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment">/* Put the flex item at the end */</span>  <span class="token comment">/* Baseline alignment */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note that <code>float</code>, <code>clear</code> and <code>vertical-align</code> have no effect on a flex item.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Let’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox.</p><blockquote><p>让我们从一个非常简单的示例开始，解决几乎一个日常问题：完美居中。如果使用 flexbox, 再简单不过了。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> <span class="token comment">/* Or whatever */</span><span class="token punctuation">&#125;</span><span class="token selector">.child</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token comment">/* Or whatever */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token comment">/* Or whatever */</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment">/* Magic! */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="wvGBVvP" data-preview="true" data-editable="true"  data-prefill='{"title":"perfect centering","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="flex-container">  &lt;div class="flex-item">1&lt;/div>  &lt;div class="flex-item">2&lt;/div>  &lt;div class="flex-item">3&lt;/div>  &lt;div class="flex-item">4&lt;/div>&lt;/div></pre><pre data-lang="css">.flex-container {  display: flex;  height: 200px; /* Or whatever */  border: 1px solid red;}.flex-item {  width: 100px; /* Or whatever */  height: 100px; /* Or whatever */  margin: auto; /* Magic! */  border: 1px solid red;}</pre></div><p>This relies on the fact a margin set to <code>auto</code> in a flex container absorb extra space. So setting a vertical margin of <code>auto</code> will make the item perfectly centered in both axes.</p><p>Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.flex-container</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* We first create a flex layout context */</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token comment">/* Then we define the flow direction         and if we allow the items to wrap       * Remember this is the same as:       * flex-direction: row;       * flex-wrap: wrap;       */</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>  <span class="token comment">/* Then we define how is distributed the remaining space */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens.</p><hr><p>使用 Flexbox 实现九宫格布局</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="gOMZgwJ" data-preview="true" data-editable="true"  data-prefill='{"title":"Flex 九宫格 ","description":"","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="flex-container">  &lt;div class="flex-item">1&lt;/div>  &lt;div class="flex-item">2&lt;/div>  &lt;div class="flex-item">3&lt;/div>  &lt;div class="flex-item">4&lt;/div>  &lt;div class="flex-item">5&lt;/div>  &lt;div class="flex-item">6&lt;/div>  &lt;div class="flex-item">7&lt;/div>  &lt;div class="flex-item">8&lt;/div>  &lt;div class="flex-item">9&lt;/div>&lt;/div></pre>  <pre data-lang="css">.flex-container {  display: flex;  flex-flow: row wrap;  justify-content: space-around;}.flex-item {  background: tomato;  padding: 1%;  width: 31%;  height: 150px;  margin-top: 10px;  line-height: 150px;  color: white;  font-size: 3em;  text-align: center;}</pre></div><hr><p>Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* Large */</span><span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>  <span class="token comment">/* This aligns items to the end line on main-axis */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Medium screens */</span><span class="token atrule"><span class="token rule">@media</span> all <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* When on medium sized screens, we center it by evenly distributing empty space around items */</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Small screens */</span><span class="token atrule"><span class="token rule">@media</span> all <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* On small screens, we are no longer using row direction but column */</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="css-tricks" data-slug-hash="YqaKYR" data-preview="true" data-editable="true"  data-prefill='{"title":"Demo Flexbox 2","description":"","tags":[],"head":"\n","scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;ul class="navigation">  &lt;li>&lt;a href="#">Home&lt;/a>&lt;/li>  &lt;li>&lt;a href="#">About&lt;/a>&lt;/li>  &lt;li>&lt;a href="#">Products&lt;/a>&lt;/li>  &lt;li>&lt;a href="#">Contact&lt;/a>&lt;/li>&lt;/ul></pre>  <pre data-lang="css">  .navigation {    display: flex;    flex-flow: row wrap;    justify-content: flex-end;    list-style: none;    margin: 0;    background: deepskyblue;  }  .navigation a {    text-decoration: none;    display: block;    padding: 1em;    color: white;  }  .navigation a:hover {    background: #1565C0;  }  @media all and (max-width: 800px) {    .navigation {      justify-content: space-around;    }  }  @media all and (max-width: 600px) {    .navigation {      flex-flow: column wrap;      padding: 0;    }    .navigation a {      text-align: center;      padding: 10px;      border-top: 1px solid rgba(255, 255, 255,0.3);      border-bottom: 1px solid rgba(0, 0, 0, 0.1);    }    .navigation li:last-of-type a {      border-bottom: none;    }  }</pre></div><p>Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* We tell all items to be 100% width, via flex-basis */</span><span class="token selector">.wrapper > *</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* We rely on source order for mobile-first approach     * in this case:     * 1. header     * 2. article     * 3. aside 1     * 4. aside 2     * 5. footer     */</span><span class="token comment">/* Medium screens */</span><span class="token atrule"><span class="token rule">@media</span> all <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* We tell both sidebars to share a row */</span>  <span class="token selector">.aside</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Large screens */</span><span class="token atrule"><span class="token rule">@media</span> all <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* We invert order of first sidebar and main       * And tell the main element to take twice as much width as the other two sidebars       */</span>  <span class="token selector">.main</span> <span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 2 0px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.aside-1</span> <span class="token punctuation">&#123;</span>    <span class="token property">order</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.main</span> <span class="token punctuation">&#123;</span>    <span class="token property">order</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.aside-2</span> <span class="token punctuation">&#123;</span>    <span class="token property">order</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">order</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="vWEMWw" data-preview="true" data-editable="true"  data-prefill='{"title":"Demo Flexbox 3","description":"","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="wrapper">  &lt;header class="header">Header&lt;/header>  &lt;article class="main">    &lt;p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.&lt;/p>  &lt;/article>  &lt;aside class="aside aside-1">Aside 1&lt;/aside>  &lt;aside class="aside aside-2">Aside 2&lt;/aside>  &lt;footer class="footer">Footer&lt;/footer>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">  .wrapper {    display: flex;    flex-flow: row wrap;    text-align: center;  }  .wrapper > * {    padding: 10px;    flex: 1 100%;  }  .header {    background: tomato;  }  .footer {   background: lightgreen;  }  .main {    text-align: left;    background: deepskyblue;  }  .aside-1 {    background: gold;  }  .aside-2 {    background: hotpink;  }  @media all and (min-width: 600px) {    .aside {flex: 1 0 0;}  }  @media all and (min-width: 800px) {    .main {flex: 3 0px;}    .aside-1 {order: 1;}    .main {order: 2;}    .aside-2 {order: 3;}    .footer {order: 4;}  }  body {    padding: 2em;  }</pre></div><h2 id="Flexbox-Tricks"><a href="#Flexbox-Tricks" class="headerlink" title="Flexbox Tricks"></a>Flexbox Tricks</h2><ul><li><a href="https://css-tricks.com/adaptive-photo-layout-with-flexbox/">Adaptive Photo Layout with Flexbox</a></li><li><a href="https://css-tricks.com/balancing-on-a-pivot-with-flexbox/">Balancing on a Pivot with Flexbox</a></li><li><a href="https://css-tricks.com/using-flexbox-and-text-ellipsis-together/">Using Flexbox and text ellipsis together</a></li><li><a href="https://css-tricks.com/useful-flexbox-technique-alignment-shifting-wrapping/">Useful Flexbox Technique: Alignment Shifting Wrapping</a></li><li><a href="https://css-tricks.com/designing-a-product-page-layout-with-flexbox/">Designing A Product Page Layout with Flexbox</a></li><li><a href="https://css-tricks.com/flexbox-truncated-text/">Flexbox and Truncated Text</a></li><li><a href="https://css-tricks.com/flexbox-and-absolute-positioning/">Flexbox and absolute positioning</a></li><li><a href="https://css-tricks.com/filling-space-last-row-flexbox/">Filling the Space in the Last Row with Flexbox</a></li></ul><h2 id="Prefixing-Flexbox"><a href="#Prefixing-Flexbox" class="headerlink" title="Prefixing Flexbox"></a>Prefixing Flexbox</h2><p>Flexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an <a href="https://css-tricks.com/old-flexbox-and-new-flexbox/">“old”, “tweener”, and “new”</a> versions.</p><p>Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through <a href="https://css-tricks.com/autoprefixer/">Autoprefixer</a>, which handles the fallbacks very well.</p><p>Alternatively, here’s a Sass <code>@mixin</code> to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">flexbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -moz-box<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">@mixin</span> <span class="token function">flex</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-box-flex</span><span class="token punctuation">:</span> <span class="token variable">$values</span><span class="token punctuation">;</span>  <span class="token property">-moz-box-flex</span><span class="token punctuation">:</span> <span class="token variable">$values</span><span class="token punctuation">;</span>  <span class="token property">-webkit-flex</span><span class="token punctuation">:</span> <span class="token variable">$values</span><span class="token punctuation">;</span>  <span class="token property">-ms-flex</span><span class="token punctuation">:</span> <span class="token variable">$values</span><span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token variable">$values</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">@mixin</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-box-ordinal-group</span><span class="token punctuation">:</span> <span class="token variable">$val</span><span class="token punctuation">;</span>  <span class="token property">-moz-box-ordinal-group</span><span class="token punctuation">:</span> <span class="token variable">$val</span><span class="token punctuation">;</span>  <span class="token property">-ms-flex-order</span><span class="token punctuation">:</span> <span class="token variable">$val</span><span class="token punctuation">;</span>  <span class="token property">-webkit-order</span><span class="token punctuation">:</span> <span class="token variable">$val</span><span class="token punctuation">;</span>  <span class="token property">order</span><span class="token punctuation">:</span> <span class="token variable">$val</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@include</span> <span class="token function">flexbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@include</span> <span class="token function">flex</span><span class="token punctuation">(</span>1 200px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">@include</span> <span class="token function">order</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Related-Properties"><a href="#Related-Properties" class="headerlink" title="Related Properties"></a>Related Properties</h2><ul><li><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a></li><li><a href="https://css-tricks.com/almanac/properties/g/gap/">gap</a></li><li><a href="https://css-tricks.com/almanac/properties/g/grid-row-column/">grid-row / grid-column</a></li><li><a href="https://css-tricks.com/almanac/properties/g/grid-rows-columns/">grid-template-columns / grid-template-rows</a></li><li><a href="https://css-tricks.com/almanac/properties/j/justify-items/">justify-items</a></li><li><a href="https://css-tricks.com/almanac/properties/p/place-items/">place-items</a> The CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-items"><code>place-items</code></a> shorthand property allows you to align items along both the block and inline directions at once (i.e. the <code>align-items</code> and <code>justify-items</code> properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.</li></ul><blockquote><p>In flexbox layouts, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items"><code>justify-items</code></a> property is <em>ignored</em> (<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_in_Flexbox">more</a> about alignment in Flexbox)</p></blockquote><h2 id="Other-Resources"><a href="#Other-Resources" class="headerlink" title="Other Resources"></a>Other Resources</h2><ul><li><a href="https://www.w3.org/TR/css3-flexbox/">Flexbox in the CSS specifications</a></li><li><a href="https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_flexible_boxes">Basic concepts of flexbox - CSS: Cascading Style Sheets | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox">Flexbox - Learn web development | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Flex">Flex - MDN Web Docs Glossary: Definitions of Web-related terms | MDN</a></li><li><a href="https://dev.opera.com/articles/view/flexbox-basics/">Flexbox at Opera</a></li><li><a href="https://weblog.bocoup.com/dive-into-flexbox/">Diving into Flexbox by Bocoup</a></li><li><a href="/using-flexbox/">Mixing syntaxes for best browser support on CSS-Tricks</a></li><li><a href="https://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html">Flexbox by Raphael Goetter (FR)</a></li><li><a href="https://bennettfeely.com/flexplorer/">Flexplorer by Bennett Feely</a></li></ul><h2 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h2><p>Flexbox is certainly not without its bugs. The best collection of them I’ve seen is Philip Walton and Greg Whitworth’s <a href="https://github.com/philipwalton/flexbugs">Flexbugs</a>. It’s an open-source place to track all of them, so I think it’s best to just link to that.</p><h2 id="Browser-Support"><a href="#Browser-Support" class="headerlink" title="Browser Support"></a>Browser Support</h2><ul><li><a href="https://caniuse.com/#feat=flexbox">CSS Flexible Box Layout Module - CR</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flexbox </tag>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All front end Interview questions asked during my recent job hunt</title>
      <link href="all-front-end-interview-questions-asked-during-my-recent-job-hunt/"/>
      <url>all-front-end-interview-questions-asked-during-my-recent-job-hunt/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/devabhijeet/all-front-end-interview-questions-asked-during-my-recent-job-hunt-1kge">原文链接</a></p></blockquote><blockquote><p><a href="https://github.com/devAbhijeet/job-hunt-interview-questions-2020">All front end Interview questions asked during my recent job hunt</a></p></blockquote><h2 id="Front-end-interview-1-Part-Series"><a href="#Front-end-interview-1-Part-Series" class="headerlink" title="Front end interview (1 Part Series)"></a>Front end interview (1 Part Series)</h2><h3 id="Interview-questions-for-front-end"><a href="#Interview-questions-for-front-end" class="headerlink" title="Interview questions for front end"></a>Interview questions for front end</h3><hr><p>This readme is a compilation of all the question asked during my recent COVID-19 job hunt. I’ve also attached（附上） a list of resources that I’d referred for the preparations.</p><blockquote><p>在今天的文章中，我想跟大家聊聊自己最近在 COVID-19 疫情下的求职经历中遇到的问题。另外，我还把自己的准备工作整理成一份资源清单供大家参考。<br>The questions are divided into following sections.</p></blockquote><ul><li>JS</li><li>Coding</li><li>Assignments</li><li>Miscellaneous</li></ul><blockquote><p>The solution are not production ready code and just represents a rough idea of my approach. Try implementing your own approach.</p><p>Edits made on 20/08/2020. <a href="https://github.com/devAbhijeet/job-hunt-interview-questions-2020/commit/f4be0455a740db89e6c1dc48108123168b0e2ee9">Click</a> to view changes</p></blockquote><blockquote><p>这里提出的解法并不能直接生产使用，只代表我个人的粗略想法。大家不妨尝试用自己的办法解决这些问题。</p></blockquote><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol><li>Given a multidimensional array with depth of n, flatten it. Once flattened make it available as a method on <code>array</code> instance</li></ol><blockquote><ol><li>给定一个深度为 n 的多维数组，将其展平。展平后，将其作为 array 实例上的可用方法。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * [1,2,[3,4]] -> [1,2,3,4] */</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>isArray <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">:</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>flatten<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">Array.prototype.flat()</a> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: [0, 1, 2, 3, 4]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: [0, 1, 2, [3, 4]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ol start="2"><li>Create a promise from scratch</li></ol><blockquote><ol start="2"><li>从零开始创建一项 promise.</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CustomPromise</span> <span class="token punctuation">&#123;</span>  state <span class="token operator">=</span> <span class="token string">'PENDING'</span><span class="token punctuation">;</span>  value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  thenCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  errorCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolver</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'RESOLVED'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>thenCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'REJECTED'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>errorCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>thenCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>errorCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolver<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> rand <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rand <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token string">'Success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="3"><li>Filter movie list by average rating, name. Sort filtered list by any field inside movie object</li></ol><blockquote><ol start="3"><li>按 平均评分 及 名称 对电影列表进行过滤。按电影对象内的任意字段对过滤后的列表进行排序。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// O(M)</span><span class="token keyword">function</span> <span class="token function">getMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [&#123;id, name, year&#125;]</span><span class="token punctuation">&#125;</span><span class="token comment">// O(R)</span><span class="token keyword">function</span> <span class="token function">getRatings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [&#123;id, movie_id, rating&#125;]   0 &lt;= rating &lt;= 10   // e.g 9.3</span><span class="token punctuation">&#125;</span><span class="token comment">/** * minAvgRating -> *    avgRating >= minAvgRating * * sort -> *    name -> ascending order movies by name *   -name -> descending * *    avgRating * * search -> *   'ave' -> 'Avengers' *   'avengers' -> 'Avengers' *   'AvengersInfinitywar' -> 'Avengers' */</span><span class="token keyword">const</span> <span class="token function-variable function">toLower</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">getAvrgRating</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">movie<span class="token punctuation">,</span> movingWithRatings</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> movingWithRatings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> movieMatch <span class="token operator">=</span> movie<span class="token punctuation">.</span>id <span class="token operator">===</span> value<span class="token punctuation">.</span>movie_id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>movieMatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      acc <span class="token operator">+=</span> value<span class="token punctuation">.</span>rating<span class="token punctuation">;</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> movingWithRatings<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      acc <span class="token operator">=</span> acc <span class="token operator">/</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> acc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isSubString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  str1 <span class="token operator">=</span> <span class="token function">toLower</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  str2 <span class="token operator">=</span> <span class="token function">toLower</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length <span class="token operator">></span> str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str2<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> moviesList <span class="token operator">=</span> <span class="token function">getMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> movingWithRatings <span class="token operator">=</span> <span class="token function">getRatings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">queryMovies</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> search<span class="token punctuation">,</span> sort<span class="token punctuation">,</span> minAvgRating <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> filteredMovies <span class="token operator">=</span> movingWithRatings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">movie</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getAvrgRating</span><span class="token punctuation">(</span>movie<span class="token punctuation">,</span> movingWithRatings<span class="token punctuation">)</span> <span class="token operator">>=</span> minAvgRating<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  filteredMovies <span class="token operator">=</span> filteredMovies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">movie</span><span class="token punctuation">)</span> <span class="token operator">=></span>    moviesList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listItem</span><span class="token punctuation">)</span> <span class="token operator">=></span> listItem<span class="token punctuation">.</span>id <span class="token operator">===</span> movie<span class="token punctuation">.</span>movie_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  filteredMovies <span class="token operator">=</span> filteredMovies<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">movie</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token function">isSubString</span><span class="token punctuation">(</span><span class="token function">toLower</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">toLower</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  filteredMovies <span class="token operator">=</span> filteredMovies<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> isDescending <span class="token operator">=</span> sort<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'-'</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sortCopy <span class="token operator">=</span> isDescending <span class="token operator">?</span> sort<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> sort<span class="token punctuation">;</span>    <span class="token keyword">const</span> value1 <span class="token operator">=</span> a<span class="token punctuation">[</span>sortCopy<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value2 <span class="token operator">=</span> b<span class="token punctuation">[</span>sortCopy<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDescending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> value1 <span class="token operator">></span> value2 <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> value1 <span class="token operator">&lt;</span> value2 <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filteredMovies <span class="token operator">=</span> filteredMovies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">movie</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>movie<span class="token punctuation">,</span>    avgRating<span class="token operator">:</span> movingWithRatings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ratedMovie</span><span class="token punctuation">)</span> <span class="token operator">=></span> ratedMovie<span class="token punctuation">.</span>movie_id <span class="token operator">===</span> movie<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rating<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> filteredMovies<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="4"><li>Given an end point URL to fetch all the <code>posts</code> and <code>comments</code>. Do the following.</li></ol><blockquote><ol start="4"><li>给定一个用于获取所有 posts 与 comments 的端点 URL. 解决以下问题：</li></ol></blockquote><ul><li>Map all the comments to the posts it belongs to. The resultant data after mapping should be of below structure.</li></ul><blockquote><p>将所有评论 (comments) 映射至其所归属的帖子 (posts), 映射后的结果数据应具有以下结构。</p></blockquote><details><summary>Answer</summary><p><a href="https://github.com/devAbhijeet/cure-fit-interview-challenge/tree/master/">Answer</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//service.js</span><span class="token keyword">const</span> <span class="token constant">POSTS_URL</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://jsonplaceholder.typicode.com/posts</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COMMENTS_URL</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://jsonplaceholder.typicode.com/comments</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetchAllPosts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">POSTS_URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetchAllComments</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">COMMENTS_URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fetchAllPosts<span class="token punctuation">,</span> fetchAllComments <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./service'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>posts<span class="token punctuation">,</span> comments<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">fetchAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fetchAllComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">grabAllCommentsForPost</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">postId</span><span class="token punctuation">)</span> <span class="token operator">=></span>    comments<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token operator">=></span> comment<span class="token punctuation">.</span>postId <span class="token operator">===</span> postId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> mappedPostWithComment <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> allComments <span class="token operator">=</span> <span class="token function">grabAllCommentsForPost</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    acc<span class="token punctuation">[</span>post<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> allComments<span class="token punctuation">;</span>    <span class="token keyword">return</span> acc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mappedPostWithComment '</span><span class="token punctuation">,</span> mappedPostWithComment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="5"><li>Implement a method <code>getHashCode</code> on string instance. The method should be available on all strings.</li></ol><blockquote><p>❓5. 在字符串实例上实现方法 getHashCode. 此方法应适用于所有字符串类型。</p></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'sample'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getHashCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getHashCode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'String instance '</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="6"><li> What does the below expressions evaluate to</li></ol><blockquote><ol start="6"><li>以下表达式的计算结果是什么？</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token string">'1'</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token string">'2'</span> <span class="token operator">></span> <span class="token string">'3'</span><span class="token punctuation">;</span><span class="token string">'two'</span> <span class="token operator">></span> <span class="token string">'three'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span><span class="token number">1</span>true<span class="token boolean">false</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="7"><li>Implement <code>bind</code> and <code>reduce</code>.</li></ol><blockquote><ol start="7"><li>实现 bind 与 reduce.</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//bind</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> context <span class="token operator">=</span> arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>innerParam</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>params<span class="token punctuation">,</span> <span class="token operator">...</span>innerParam<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//reduce</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> initState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> callback <span class="token operator">=</span> func<span class="token punctuation">;</span>  <span class="token keyword">let</span> init <span class="token operator">=</span> initState<span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    init <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> init<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="8"><li>Implement debounce function</li></ol><blockquote><ol start="8"><li>实现 debounce（防抖）函数。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timerId<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">debounce</span><span class="token punctuation">(</span>apiCall<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="9"><li>Implement throttling function</li></ol><blockquote><ol start="9"><li>实现 throttling（节流）函数。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timerId<span class="token punctuation">;</span>  <span class="token keyword">let</span> allowEvents <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allowEvents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      allowEvents <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      timerId <span class="token operator">=</span> <span class="token function">setTimeOut</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        allowEvents <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="10"><li>Design API polling mechanism. The API is called after a fixed interval. The API is a stock API that fetches the latest price of stock. Upon fetching the results, render the UI.</li></ol><blockquote><ol start="10"><li>设计一套 API 轮询机制，以固定时间间隔调用该 API. 此 API 属于股票 API, 可获取最新股票价格。在提取完毕后，将结果呈现在 UI 当中。<br>The question demands the design aspect of the solution and not the code. It was open ended question.</li></ol></blockquote><blockquote><p>这个问题的解主要偏重设计而非代码，属于典型的开放式问题。</p></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//With setInterval, throttling and flags</span><span class="token parameter">setInterval</span><span class="token operator">=></span><span class="token parameter">Endpoint</span><span class="token operator">=></span>Render<span class="token comment">//with the inversion of control</span><span class="token parameter">Endpoint</span><span class="token operator">=></span><span class="token parameter">Render</span><span class="token operator">=></span><span class="token parameter">setTimeout</span><span class="token operator">=></span><span class="token parameter">Endpoint</span><span class="token operator">=></span><span class="token parameter">Render</span><span class="token operator">=></span>SetTimeout<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="11"><li>Convert class based inheritance code given below to ES5 code.</li></ol><blockquote><ol start="11"><li>将以下给出的、基于类的继承代码转换为 ES5 代码。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Children</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="12"><li>What does following code evaluates to?</li></ol><blockquote><ol start="12"><li>以下代码的计算结果是什么？</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Q.1</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Q.2</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Q.3</span><span class="token keyword">function</span> <span class="token function">Abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Q.4</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  x<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token function-variable function">getX</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> obj<span class="token punctuation">.</span>getX<span class="token punctuation">;</span><span class="token comment">//Q.5</span><span class="token comment">//How to get the a to log 2 in the above code</span><span class="token comment">//Q.6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Q.7</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Q.8</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">mutate</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mutate</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//A.1</span><span class="token number">0</span> <span class="token number">1</span><span class="token comment">//A.2</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">//A.3</span>window object is logged<span class="token comment">//A.4</span>logs <span class="token number">2</span> and <span class="token number">1</span><span class="token comment">//A.5</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A.6</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">,</span> <span class="token constant">C</span><span class="token comment">//A.7</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token comment">//A.8</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol><li> Given an array of numbers implement the following</li></ol><blockquote><ol start="13"><li>给定一个数字数组，请执行以下操作：</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> filteredArray <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">between</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">></span> start <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;</span> end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h3><ol><li>Consider the following series:</li></ol><blockquote><ol><li> 考虑以下级数：</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">A</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token constant">B</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token constant">C</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token constant">B</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> and so on<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Write a program that:</p><p>outputs the number corresponding to a given letter</p><p>given a string of letters like ‘GREP’, computes the sum of the numbers corresponding to all the letters in the string (i.e., G + R + E + P), as given by the above series and</p><p>given a large number (that would fit into a standard 32-bit integer), finds the shortest string of letters corresponding to it.</p><p>You may use a greedy approach for the last part. Compute the values of the numbers corresponding to letters as and when required and DO NOT pre-compute beforehand and store them in a data structure.</p><blockquote><p>请编写一款程序，以：</p><p>给出与给定字母相对应的数字；</p><p>给定一个类似”GREP”的字母字符串，请结合以上级数，计算与该字符串中所有字母相对应的数字之和（即 G+R+E+P);</p><p>给定一个较大数（可大至标准 32 位整数）, 请找到与之对应的最短字母字符串。</p><p>您可能会在最后一题中使用贪心算法。请根据实际情况，在必要时计算与字母相对应的数字值，请勿事先进行预计算并将结果存储在数据结构当中。</p></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//A = 1</span><span class="token comment">//B = A*2 +2</span><span class="token comment">//C = B*2+ 3</span><span class="token comment">//D = C*2+ 3</span><span class="token keyword">var</span> <span class="token function-variable function">genCharArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">charA<span class="token punctuation">,</span> charZ</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    i <span class="token operator">=</span> charA<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> charZ<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> charMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> charArray <span class="token operator">=</span> <span class="token function">genCharArray</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>charArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">char<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  charMap<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">charSequence</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> char <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    char <span class="token operator">=</span> charMap<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> char <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">charSequence</span><span class="token punctuation">(</span>char <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> input <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">charSequence</span><span class="token punctuation">(</span>charMap<span class="token punctuation">[</span>input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> charTotalSequence <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> acc <span class="token operator">+</span> <span class="token function">charSequence</span><span class="token punctuation">(</span>charMap<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>charTotalSequence<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="2"><li>Given an array find a pair such that it sums to a given number</li></ol><blockquote><ol start="2"><li>给定一个数组，请找到另一结对数组，保证两个数组的加和为特定数。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">let</span> numsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pairs <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> numToFind <span class="token operator">=</span> target <span class="token operator">-</span> num<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numToFind<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>acc<span class="token punctuation">,</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> numToFind<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    numsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>acc<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pairs '</span><span class="token punctuation">,</span> pairs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="3"><li>Find the local maxima in a given array. A local maxima is a element that is greater than it’s left and right neighbours. I provided a O(n) solution which was quite straight forward before going for optimisation.</li></ol><blockquote><ol start="3"><li> 在给定数组中找到局部最大值。所谓局部最大值，是指大于其左右相邻数的元素。这里我给出一个 O(n) 解，无需优化即可简单解决这个问题。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">//Outputs: 5</span><span class="token keyword">if</span> x<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">else</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> and x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="4"><li>Rotate a matrix clockwise by 90 degree. The solution should be in place.</li></ol><blockquote><ol start="4"><li>对某一数组顺时针旋转 90 度，旋转后的数组即为解。<br><a href="https://leetcode.com/problems/rotate-image/">leetcode</a></li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">[</span>  <span class="token comment">//The solution is to first take the transpose of the matrix.</span>  <span class="token comment">//After taking the transpose the resulting matrix is as follows.</span>  <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>  <span class="token comment">//After the transpose step, All we have to do is to reverse the array @ each entry.</span>  <span class="token comment">//The resulting matrix after after reversal is as follows.</span>  <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//The above matrix is rotated 90 degree</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]</span><span class="token comment">/** * 48. Rotate Image * @param &#123;number[][]&#125; matrix * @return &#123;void&#125; Do not return anything, modify matrix in-place instead. */</span><span class="token keyword">var</span> <span class="token function-variable function">rotate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">rotate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [ [ 7, 4, 1 ], [ 8, 5, 2 ], [ 9, 6, 3 ] ]</span><span class="token comment">// [</span><span class="token comment">//   [7, 4, 1],</span><span class="token comment">//   [8, 5, 2],</span><span class="token comment">//   [9, 6, 3]</span><span class="token comment">// ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/BaffinLee/leetcode-javascript/blob/master/001-100/48.%20Rotate%20Image.md">48. Rotate Image</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[][]&#125; matrix * @return &#123;void&#125; Do not return anything, modify matrix in-place instead. */</span><span class="token keyword">var</span> <span class="token function-variable function">rotate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">var</span> n2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 2 3     7 8 9</span>  <span class="token comment">// 4 5 6  => 4 5 6</span>  <span class="token comment">// 7 8 9     1 2 3</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 7 8 9     7 4 1</span>  <span class="token comment">// 4 5 6  => 8 5 2</span>  <span class="token comment">// 1 2 3     9 6 3</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> tmp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">;</span>  matrix<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token punctuation">;</span>  matrix<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Explain:</strong></p><p>见注释</p><p>顺时针 90°: 先上下倒置，再对角倒置</p><p>逆时针 90°: 先左右倒置，再对角倒置</p><p><strong>Complexity:</strong></p><ul><li>Time complexity : O(n^2).</li><li>Space complexity : O(1).</li></ul></details><hr><ol start="5"><li>Maximum subarray sum modulo m</li></ol><details><summary>Answer</summary><p><a href="https://www.geeksforgeeks.org/maximum-subarray-sum-modulo-m/">Answer</a></p></details><hr><ol start="6"><li>Given an array find three element in array that sum to a given target</li></ol><blockquote><ol start="6"><li>对于给定数组，请找到数组中加和等于给定目标的三个元素。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">twoPointer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> totalSum <span class="token operator">=</span> current <span class="token operator">+</span> x<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalSum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      found<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>current<span class="token punctuation">,</span> x<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>totalSum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      r<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      l<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> leftPointer <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rightPointer <span class="token operator">=</span> x<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">+</span> x<span class="token punctuation">[</span>leftPointer<span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span>rightPointer<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      found<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>current<span class="token punctuation">,</span> x<span class="token punctuation">[</span>leftPointer<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>rightPointer<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">twoPointer</span><span class="token punctuation">(</span>leftPointer<span class="token punctuation">,</span> rightPointer<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> found<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="7"><li>Given a string and an integer k, find number of substrings in which all the different characters occurs exactly k times.</li></ol><blockquote><ol start="7"><li>给定一个字符串与一个整数 k, 找到所有不同字符恰好出现 k 次的子字符串数。<br><a href="https://www.geeksforgeeks.org/number-substrings-count-character-k/">link</a></li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">subStrHasSameCharCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">,</span> totalHop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> charMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> endIndex<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> currentChar <span class="token operator">=</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>charMap<span class="token punctuation">[</span>currentChar<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      charMap<span class="token punctuation">[</span>currentChar<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      charMap<span class="token punctuation">[</span>currentChar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> totalCount <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>charMap<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> totalCount <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>charMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">==</span> totalHop<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">characterWithCountK</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> initialHop <span class="token operator">=</span> k<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>initialHop <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> startIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token keyword">let</span> endIndex <span class="token operator">=</span> j <span class="token operator">+</span> initialHop<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">></span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      count <span class="token operator">=</span> <span class="token function">subStrHasSameCharCount</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">?</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    initialHop <span class="token operator">+=</span> k<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  count <span class="token operator">=</span> <span class="token function">subStrHasSameCharCount</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> initialHop<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">?</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> count<span class="token punctuation">;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aabbcc'</span><span class="token punctuation">;</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">characterWithCountK</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="8"><li>Given two input strings, s1 and s2, containing characters from a-z in different orders, find if rearranging string in s1 results in a string that is equal to s2.</li></ol><blockquote><ol start="8"><li>给定两个输入字符串 s1 与 s2, 其中包含来自 a 到 z 且以不同顺序排列的字符，请证明能否在 s1 中通过字符重新排列获得等于 s2 的字符串。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'dadbcbc'</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">'ccbbdad'</span><span class="token punctuation">;</span><span class="token keyword">let</span> charMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">canBeRearranged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>length <span class="token operator">!==</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> charFromString1 <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> charFromString2 <span class="token operator">=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>charFromString1 <span class="token keyword">in</span> charMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      charMap<span class="token punctuation">[</span>charFromString1<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      charMap<span class="token punctuation">[</span>charFromString1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>charFromString2 <span class="token keyword">in</span> charMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      charMap<span class="token punctuation">[</span>charFromString2<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      charMap<span class="token punctuation">[</span>charFromString2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">in</span> charMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>charMap<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">canBeRearranged</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="9"><li>Given an array or variable input size, write a function to shuffle the array.</li></ol><blockquote><ol start="9"><li>给定一个数组或可变输入大小，编写一项函数以实现数组洗牌。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> m <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="10"><li>Calculate the sum of all elements in a multidimensional array of infinite depth.</li></ol><blockquote><ol start="10"><li>计算无限尝试的多维数组中，所有元素的加和。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">calculateSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> currentVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> isEntryArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEntryArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">+=</span> currentVal<span class="token punctuation">;</span>      <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="11"><li>Flatten a nested object of varying debt.</li></ol><blockquote><ol start="11"><li>展平一个表示变化债务的嵌套对象。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">calculateSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> currentVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> isEntryArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEntryArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">+=</span> currentVal<span class="token punctuation">;</span>      <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="12"><li>Given a json input, where each entry represents a directory such that each directory in turn can have a nested entry of it’s own. Create the resulting directory structure.</li></ol><blockquote><ol start="12"><li>给定一项 json 输入，其中每个条目代表一个目录，而各个目录又可以拥有自己的嵌套条目。请据此创建一套目录结构。</li></ol></blockquote><details><summary>Answer</summary><p><a href="https://jsbin.com/gajiweq/1/edit?js,console">Answer</a></p></details><hr><ol start="13"><li>Given an array of object containing list of employee data such that each employee has list of reportee. Use this information to construct a hierarachy of employees.</li></ol><blockquote><ol start="13"><li>给定一个对象数组，其中包含员工数据列表，以保证每位员工都拥有对应的报告对象列表。使用此信息以构建员工层级结构。</li></ol></blockquote><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> employeesData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Abhishek (CTO)'</span><span class="token punctuation">,</span> reportees<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Abhiram (COO)'</span><span class="token punctuation">,</span> reportees<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Abhimanyu (Engineering Manager)'</span><span class="token punctuation">,</span> reportees<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Abhinav (Senior Engineer)'</span><span class="token punctuation">,</span> reportees<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Abhijeet (CEO)'</span><span class="token punctuation">,</span> reportees<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*A (CEO)----B (CTO)--------D (Engineering Manager)------------E (Senior Software Engineer)----C (COO)*/</span><span class="token keyword">const</span> <span class="token function-variable function">findCeo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentEmp</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> parentEmployee <span class="token operator">=</span> employeesData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">emp</span><span class="token punctuation">)</span> <span class="token operator">=></span> emp<span class="token punctuation">.</span>reportees<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>currentEmp<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentEmployee <span class="token operator">&amp;&amp;</span> parentEmployee<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">findCeo</span><span class="token punctuation">(</span>parentEmployee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> currentEmp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">logHierarchy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentEmp<span class="token punctuation">,</span> indent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>indent<span class="token punctuation">)</span> <span class="token operator">+</span> currentEmp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  indent <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentEmp<span class="token punctuation">.</span>reportees<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> employee <span class="token operator">=</span> employeesData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">emp</span><span class="token punctuation">)</span> <span class="token operator">=></span> emp<span class="token punctuation">.</span>id <span class="token operator">===</span> currentEmp<span class="token punctuation">.</span>reportees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">logHierarchy</span><span class="token punctuation">(</span>employee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> indent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">employee</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ceo <span class="token operator">=</span> <span class="token function">findCeo</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">logHierarchy</span><span class="token punctuation">(</span>ceo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">traverse</span><span class="token punctuation">(</span>employeesData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="14"><li>Print a given matrix in spiral form</li></ol><blockquote><ol start="14"><li>以螺旋形式输出给定的数组。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> inputMatrix <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> exprectOutput <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">spiralParser</span><span class="token punctuation">(</span><span class="token parameter">inputMatrix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> rows <span class="token operator">=</span> inputMatrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> cols <span class="token operator">=</span> rows <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> inputMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//singleEmptyRow => Edge case 1 //[]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//singleElementRowNoCol => Edge case 2 //[[]]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//singleElementRow => Edge case 3 //[[1]]</span>      output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bottom <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> direction <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//0 => left->right</span>  <span class="token comment">//1 => top->bottom</span>  <span class="token comment">//2 => right->left</span>  <span class="token comment">//3 => bottom->top</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//left->right</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputMatrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//top->bottom</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//right->left</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span> i <span class="token operator">>=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputMatrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      bottom<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//bottom->top</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> bottom<span class="token punctuation">;</span> i <span class="token operator">>=</span> top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    direction <span class="token operator">=</span> <span class="token punctuation">(</span>direction <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">spiralParser</span><span class="token punctuation">(</span>inputMatrix2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="15"><li>Find maximum consecutive repeating char in a give string.</li></ol><blockquote><ol start="15"><li>在给定字符串中找到最大的连续重复字符。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'bbbaaaaccadd'</span><span class="token punctuation">;</span> <span class="token comment">//max repeating char is a with count 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//sudo code</span>maxNow <span class="token operator">=</span> <span class="token keyword">if</span> input string length is <span class="token number">1</span> or greater than <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span>maxOverall <span class="token operator">=</span> <span class="token keyword">if</span> input string length is <span class="token number">1</span> or greater than <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token keyword">for</span> char <span class="token keyword">in</span> inputString starting <span class="token keyword">from</span> index <span class="token number">1</span>  <span class="token keyword">if</span> char equals prevChar    maxNow<span class="token operator">++</span>    maxOverall <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxOverall<span class="token punctuation">,</span> maxNow<span class="token punctuation">)</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> char not equals prevChar    maxNow <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="16"><li>Given a input array of varying length, segregate all the 2’s at the end of the array.</li></ol><blockquote><ol start="16"><li>给定一个长度可变的输入数组，将所有 2 分隔在数组末尾。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> inputArr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//ouput => [9,1,5,3,1,7,4,3,8,29,4,6,54,32,100,2,2,2,2,2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> slowRunner <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fastRunner <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fastRunner <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fastRunner<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>fastRunner<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>fastRunner<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>fastRunner<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    slowRunner<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><ol start="17"><li>Reverse a linked list</li></ol><blockquote><ol start="17"><li>反转一个链接列表。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Input = 1 -> 2 -> 3 -> 4 -> 5 -> 6</span><span class="token comment">//Output = 1 &lt;- 2 &lt;- 3 &lt;- 4 &lt;- 5 &lt;- 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><details><summary>Answer</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//sudo code</span><span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  current<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>  prev <span class="token operator">=</span> current<span class="token punctuation">;</span>  current <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ol><li>Design a parking lot system with following requirements:</li></ol><ul><li>It can hold up to N vehicles. Handle availability of parking lot.</li><li>Entry and exit log of vehicles.</li><li>Automated ticketing system for every vehicle entering/exiting the parking lot will have vehicle registration with vehicle details like: Registration No., Color, allocated parking slot.</li></ul><p>I should be able to query:</p><ul><li>Registration No. of all vehicles of a particular color.</li><li>Parking slot of a vehicle given registration no.</li><li>Parking slots for vehicles given a color.</li><li>List of available slots in the parking lot.</li></ul><p>Requirements:</p><ul><li>Can use anything to structure the code: Classes/Structs.</li><li>Your solution should be extendable for future use cases.</li></ul><p>Few code design principles:</p><ul><li>Modularity of code.</li><li>Naming conventions.</li><li>SOLID principles.</li></ul><blockquote><ol><li>设计一套停车场系统，要求满足以下需求：</li></ol><ul><li><p>最多可容纳 N 辆车。实现对泊车位的可用性管理。</p></li><li><p>保留车辆的出入记录。</p></li><li><p>自动工单系统会自动对每辆出入汽车进行登记，包括以下详细信息：注册号、颜色、已分配的停车位。</p></li></ul><p>这套系统应支持查询以下结果：</p><ul><li><p>查询所有特定颜色汽车的注册号。</p></li><li><p>使用特定注册号查询该车辆的停车位。</p></li><li><p>查询特定颜色汽车的停车位。</p></li><li><p>列出当前停车场内所有可用空位的列表。</p></li></ul><p>要求：</p><ul><li><p>可以使用任何代码结构：Classes/Structs.</p></li><li><p>您的解法应具备可扩展性，用以支持未来更多用例。</p></li></ul><p>代码设计原则：</p><ul><li><p>代码模块化。</p></li><li><p>命名约定。</p></li><li><p>SOLID 原则。</p></li></ul></blockquote><details><summary>Answer</summary><p><a href="https://github.com/devAbhijeet/parking-lot-design-js">Answer</a></p></details><hr><ol start="2"><li>Create a react component <code>Ping</code> that makes an API call to a given URL. If the API calls returns status code 200 that means the user is online. However, if the API call receives status code other than 200 it means, the user is offline.</li></ol><blockquote><ol start="2"><li>创建一款 react 组件 Ping, 用于对特定 URL 执行 API 调用。如果 API 调用返回的状态代码为 200, 则表示用户在线。如果 API 调用返回的状态代码不是 200, 则表示用户处于脱机状态。<br>Try changing <code>status</code> form dev tools network panel</li></ol></blockquote><blockquote><blockquote><p>尝试更改开发工具网络页面中的 status 表单。</p></blockquote></blockquote><details><summary>Answer</summary><p><a href="https://codesandbox.io/s/admiring-davinci-xnjef">Answer</a></p></details><hr><ol start="3"><li>Create a dynamic form builder from a <code>json</code> input. The form can be grouped based on <code>id</code>. Each group can have a nested group of it’s own.</li></ol><blockquote><ol start="3"><li>使用 json 输入创建一款动态表单构建器。表单可以根据 ID 进行分组，且每个组中可以包含一个嵌套组。</li></ol></blockquote><details><summary>Answer</summary><p><a href="https://codesandbox.io/s/great-noyce-75kup">Answer</a></p></details><hr><ol start="4"><li>Create a minimal excel sheet in pure javascript that supports <code>adding</code> and <code>removing</code> rows, columns. There was time limit on this question of 40 minutes.</li></ol><blockquote><ol start="4"><li>以纯 JavaScript 代码创建一份精简 excel 表格，该表格应支持对行与列的添加及删除功能。需要在 40 分钟内完成。</li></ol></blockquote><details><summary>Answer</summary><p><a href="https://codesandbox.io/s/smoosh-thunder-krv8m">Answer</a></p></details><hr><ol start="5"><li>You have to make a search input box which will search over a list of users.</li></ol><blockquote><ol start="5"><li>请制作一个搜索输入框，以供在用户列表中执行搜索。<br>The user object has the following fields</li></ol></blockquote><ul><li>id: a unique id</li><li>name: user’s name</li><li>items: list of items ordered by user</li><li>address: address of the user</li><li>pincode: user address pin code</li></ul><p>You have to implement search on all of the fields.</p><p>The search results will show up as a list of User Cards.</p><p>To Summarize<br>On typing in the search input box, the search results list opens up. The search could be just a string matching search.</p><p>The list of cards can be navigated through keyboard or mouse<br>only one card should highlight at a time if both mouse and keyboard are used for navigation</p><p>(keyboard will take preference if mouse is kept hovered on the list, similarly mouse will take preference if keyboard navigation is not used).</p><p>This behaviour is similar to how youtube search works</p><p>When no search results are found, an empty card is displayed<br>The card list would be scrollable.</p><p>The highlighted card (via keyboard/mouse) will scroll into view</p><blockquote><p>用户对象中包含以下字段：</p><ul><li>id: 一条唯一 id</li><li>name: 用户名</li><li>items: 用户订购商品清单</li><li>address: 用户地址</li><li>pincode: 用户地址邮政编码</li></ul><p>您的搜索方案必须涵盖所有字段。</p><p>搜索结果以用户卡列表的形式显示。</p><p>总结</p><p>在搜索输入框内键入内容后，其会打开搜索结果列表。您的解法可以仅实现字符串匹配搜索。</p><p>用户卡列表可以通过键盘或鼠标进行导航。如果同时使用鼠标与键盘进行导航，则每次只突出显示一张用户卡（如果鼠标悬念在列表上，则键盘优先；如果未使用键盘操作，则鼠标优先）.</p><p>其行为类似于 YouTube 网站的搜索方式。</p><p>当未找到搜索结果时，显示空白卡。</p><p>卡列表应支持滚动。</p><p>突出显示的卡片（通过键盘 / 鼠标）将自动滚动至视图区域内。</p></blockquote><details><summary>Answer</summary><p><a href="https://codesandbox.io/s/silly-moon-31m7u">Answer</a></p></details><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><ol><li>How would you architect a front end application <a href="https://dev.to/vycke/how-to-create-a-scalable-and-maintainable-front-end-architecture-4f47">click</a></li><li>Implement Lazy loading <a href="https://css-tricks.com/the-complete-guide-to-lazy-loading-images/">click</a></li><li>What is Server Side Rendering.</li><li>How to deploy a react app to production.</li><li>What are service worker/web worker.</li><li>How to optimise a web app and make it more performant.</li><li>Explain different type of client side cache strategies.</li><li>What is CORS.</li><li>What are higher order component in react.</li><li>How does connect function work in redux.</li><li>What are pure components in React.</li><li>Difference between proto and prototype</li><li>Difference between inline vs inline block vs block</li><li>Difference between flex and grid layout</li><li>Different positioning system in CSS</li><li>Specificity and selectors priority in CSS</li><li>Difference between display none vs visibility hidden vs opacity</li></ol><blockquote><ol><li><p> 您如何设计前端应用程序的架构？</p></li><li><p> 实现懒加载</p></li><li><p> 服务器端渲染是什么？</p></li><li><p> 如何在生产环境中部署一款 React app.</p></li><li><p> 服务工作节点 /Web 工作节点是什么。</p></li><li><p> 如何优化 Web 应用程序并提高其性能表现。</p></li><li><p> 请尝试解释不同类型的客户端缓存策略。</p></li><li><p> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS 是什么</a>.</p></li><li><p> React 中有哪些高阶组件。</p></li><li><p>Redux 中的连接功能如何起效。</p></li><li><p>React 中的纯组件是什么。</p></li></ol></blockquote><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p><a href="https://github.com/devAbhijeet/learning-resources">link</a></p><h2 id="Front-end-interview-2-Part-Series"><a href="#Front-end-interview-2-Part-Series" class="headerlink" title="Front end interview (2 Part Series)"></a>Front end interview (2 Part Series)</h2><p>Hello there, if you have come to this post that means you are currently getting interviewed or are looking forward to get interviewed in the near future.</p><p>Keeping that in mind I’ve compiled a list of resources one can refer to get an upper hand during the interview process.</p><h3 id="Q-amp-A-format"><a href="#Q-amp-A-format" class="headerlink" title="Q&amp;A format"></a>Q&amp;A format</h3><ol><li><p><a href="https://github.com/ganqqwerty/123-Essential-JavaScript-Interview-Questions">123 essential javascript questions</a></p><blockquote><p>Tricky questions on hoisting, inheritance, closures, null vs undefined, NaN…</p></blockquote></li><li><p><a href="https://dev.to/macmacky/70-javascript-interview-questions-5gfi">70 javascript interview questions</a></p><blockquote><p>Dive deep into hoisting, inheritance, closures, promises, events…</p></blockquote></li><li><p><a href="https://github.com/lydiahallie/javascript-questions">javascript mcq</a></p><blockquote><p>Practical code snippets in Q&amp;A format.</p></blockquote></li></ol><hr><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ol><li><p><a href="https://blog.sessionstack.com/">alexander zlatkov’s how javascript works medium posts</a></p><blockquote><p>Internal working of JS includes event loop, v8 engine, classes and inheritance, storage engines, shadow dom, webRTC, garbage collection, service workers, web workers, web socket, HTTP/HTTP2, network layer, browser engine, rendering engine…</p></blockquote></li><li><p><a href="https://www.youtube.com/c/akshaymarch7/videos">akshay saini’s youtube channel</a></p><blockquote><p>Learn about event delegation, event propagation, debouncing, throttling, call, apply, bind, polyfills, curring.</p></blockquote></li><li><p><a href="https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15">design pattern soumyajit pathak’s medium posts</a></p><blockquote><p>Brief overview of different design pattern</p></blockquote></li><li><p><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book">addy osmani</a></p><blockquote><p>Dive deep into design pattern such as singleton, mediator, revealing module, pub sub…</p></blockquote></li><li><p><a href="https://dev.to/lydiahallie">javascript concepts visualised</a></p><blockquote><p>not so easy concepts made easy with awesome visualiser.</p></blockquote></li><li><p><a href="https://dev.to/vycke/how-to-create-a-scalable-and-maintainable-front-end-architecture-4f47">how to architect a front end application</a></p><blockquote><p>Learn different layer of front end application and their roles in the overall architecture.</p></blockquote></li></ol><hr><h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML, CSS"></a>HTML, CSS</h3><ol><li><p><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model">boxmodel</a></p><blockquote><p>Learn about the box model</p></blockquote></li><li><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">flex</a></p><blockquote><p>Layout using flexbox</p></blockquote></li><li><p><a href="https://yoksel.github.io/grid-cheatsheet/">grid</a></p><blockquote><p>Layout using grid</p></blockquote></li><li><p><a href="https://css-tricks.com/specifics-on-css-specificity/">specificity</a></p><blockquote><p>Learn about CSS specificity and selector priorities</p></blockquote></li><li><p><a href="https://css-tricks.com/almanac/properties/p/position/">position</a></p><blockquote><p>Learn different positioning system used in CSS</p></blockquote></li><li><p><a href="https://alligator.io/css/display-inline-vs-inline-block/">inline vs inline-block</a></p><blockquote><p>Learn difference between inline vs inline block vs block</p></blockquote></li></ol><hr><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ol><li><p><a href="https://indepth.dev/what-every-front-end-developer-should-know-about-change-detection-in-angular-and-react/">react vs angular change detection</a></p><blockquote><p>Learn how angular and react differ from each other in the context of change detection mechanism</p></blockquote></li><li><p><a href="https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/">fiber architecture traversal</a></p><blockquote><p>Learn internal of React’s fiber tree traversal process</p></blockquote></li><li><p><a href="https://indepth.dev/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react/">fiber architecture reconciliation</a></p><blockquote><p>Learn internal of React’s fiber tree reconciliation process</p></blockquote></li><li><p><a href="https://indepth.dev/in-depth-explanation-of-state-and-props-update-in-react/">internal working of props and life cycle hooks</a></p><blockquote><p>Learn internal of props and state updation along with life cycle hooks</p></blockquote></li></ol><h3 id="Alogorithms"><a href="#Alogorithms" class="headerlink" title="Alogorithms"></a>Alogorithms</h3><ol><li><p><a href="https://www.youtube.com/c/TECHDOSE4u/playlists">tech dose</a></p><blockquote><p>Get to know the <strong>why</strong> of the solutions and how to develop intuition for algorithmic problems.</p></blockquote></li><li><p><a href="https://www.youtube.com/user/tusharroy2525/playlists">tushar roy’s</a></p><blockquote><p>Learn concepts of tree, graphs, dynamic programming. Different traversal strategies and problems.</p></blockquote></li><li><p><a href="https://www.youtube.com/user/mycodeschool/playlists">my code school</a></p><blockquote><p>Learn the math and run time analysis of algorithms</p></blockquote></li></ol><h3 id="All-front-end-interview-question"><a href="#All-front-end-interview-question" class="headerlink" title="All front end interview question"></a>All front end interview question</h3><p><a href="https://github.com/devAbhijeet/job-hunt-interview-questions-2020">link</a></p>]]></content>
      
      
      <categories>
          
          <category> Front-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✋🏼🔥 CS Visualized: CORS</title>
      <link href="cs-visualized-cors/"/>
      <url>cs-visualized-cors/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/cs-visualized-cors-5b8h">✋🏼🔥 CS Visualized: CORS - DEV</a></p></blockquote><p><img src="/images/pokn6wy4nwkx7s5bkd9w.png" alt="Cover image for ✋🏼🔥 CS Visualized: CORS"></p><p>It’s every developer’s frustration once in a while to see that big red <code>Access to fetched has been blocked by CORS policy</code> error in your console! 😬 Although there are some ways to quickly get rid of this error, let’s not take anything for granted today! Instead, let’s see what CORS is actually doing, and why it’s actually our friend 👏🏼</p><blockquote><p>每个开发人员都会不时感到沮丧,控制台中的因为 CORS 政策已阻止对获取访问的大红色错误！ 😬 尽管有一些方法可以快速消除此错误,但今天我们不要将任何事情视为理所当然！相反,让我们看看 CORS 实际在做什么,以及为什么它实际上是我们的朋友 👏🏼</p></blockquote><blockquote><p>❗️ In this blog post I won’t explain HTTP basics. In case you’d like to know more about HTTP requests and responses, I wrote <a href="https://www.lydiahallie.dev/blog/http11">a small blog post</a> about it a while ago though 🙂 In my examples I use HTTP/1.1 instead of HTTP/2, this doesn’t affect CORS.</p></blockquote><blockquote><p>❗️ 在此博客文章中,我不会解释 HTTP 基础知识.如果您想了解更多有关 HTTP 请求和响应的信息,尽管我在前不久写了一篇有关它的小博客文章 在我的示例中,我使用 HTTP / 1.1 代替 HTTP / 2,但这不会影响 CORS.</p></blockquote><hr><p>On the frontend, we often want to display data that’s located elsewhere! Before we can display this data, the browser first has to make a request to a server in order to fetch that data! The client sends an HTTP request with all the information that the server needs in order to send that data back to the client 🙂</p><blockquote><p>在前端,我们经常要显示其他地方的数据！在我们可以显示这些数据之前,浏览器首先必须向服务器发出请求以获取该数据！客户端发送 HTTP 请求,其中包含服务器需要的所有信息,以便将该数据发送回客户端.</p></blockquote><p>Let’s say we’re trying to fetch some user information on our <code>www.mywebsite.com</code> website from a server that’s located at <code>api.website.com</code>!</p><blockquote><p>假设我们正在尝试从 <code>api.website.com</code> 上的服务器上获取我们的 <code>www.mywebsite.com</code> 网站上的一些用户信息！</p></blockquote><p><img src="/images/qyeikeonofi8dfl0jz2t.gif" alt="从 api.website.com 上的服务器上获取我们的 www.mywebsite.com 网站上的一些用户信息"></p><p>Perfect! 😃 We just sent an HTTP request to the server, which then responded with the JSON data we asked for.</p><blockquote><p>完美！ 我们只是向服务器发送了 HTTP 请求,然后服务器用我们要求的 JSON 数据进行响应.</p></blockquote><p>Let’s try the <em>exact same</em> request but from <strong>another domain</strong>. Instead of making the request from <code>www.mywebsite.com</code>, we’re now making the request from a website located at <code>www.anotherdomain.com</code>.</p><blockquote><p>让我们尝试完全相同的请求,但来自另一个域.现在,我们不是从 <code>www.mywebsite.com</code> 发出请求,而是从位于 <code>www.anotherdomain.com</code> 的网站发出请求.</p></blockquote><p><img src="/images/lxhuh29biuwhefs3k9d9.gif" alt="从位于 www.anotherdomain.com 的网站发出请求 浏览器向我们显示了一个奇怪的错误"></p><p>Wait, what? We sent the exact same request, but this time the browser shows us a weird error?</p><blockquote><p>等一下我们发送了完全相同的请求,但是这次浏览器向我们显示了一个奇怪的错误？</p></blockquote><p>We just saw CORS in action! 💪🏼 Let’s see why this error occurred, and what it exactly means.</p><blockquote><p>我们刚刚看到 CORS 发挥了作用！ 💪🏼 让我们看看发生此错误的原因及其确切含义.</p></blockquote><hr><h2 id="✋🏼-Same-Origin-Policy"><a href="#✋🏼-Same-Origin-Policy" class="headerlink" title="✋🏼 Same-Origin Policy"></a>✋🏼 Same-Origin Policy</h2><p>The web enforces something called the <strong>same-origin policy</strong>. By default, we can only access resources that are located at the <strong>same origin</strong> as the origin of our request! 💪🏼 It’s totally okay to load an image that’s located at <code>https://mywebsite.com/image1.png</code>, for example.</p><blockquote><p>网络强制执行一种称为”同源策略”的策略.默认情况下,我们只能访问与请求源相同的资源！ 💪🏼 例如,完全可以加载位于 <code>https://mywebsite.com/image1.png</code> 的图像.</p></blockquote><p>A resource is cross-origin when it’s located at a different (sub)domain, protocol, or port!</p><blockquote><p><strong>当资源位于不同的(子)域,协议或端口时,它就是跨域的</strong>！</p></blockquote><p><img src="/images/ibyoyo1yqta9cdvh0tbv.jpeg" alt="当资源位于不同的(子)域,协议或端口时,它就是跨域的"></p><p>Cool, but why does the same-origin policy even exist?</p><blockquote><p>但是为什么存在同源政策？</p></blockquote><p>Let’s say that the same-origin policy didn’t exist, and you accidentally clicked one of the many virus links your aunt sent you on Facebook. This link redirects you to an “evil website” that has an iframe embedded which loads your bank’s website, and successfully logs you in by some set cookies! 😬</p><blockquote><p>假设不存在同源政策,您无意中单击了姑姑在 Facebook 上发送给您的众多病毒链接之一.此链接会将您重定向到一个嵌入了 iframe 的”邪恶网站”,该 iframe 会加载您的银行网站,并通过设置的 Cookie 成功登录您！ 😬</p></blockquote><p>The developers of this “evil website” made it possible for the website to access this iframe and interact with the DOM contents of your bank’s website in order to send money to their account on your behalf!</p><blockquote><p>这个”邪恶网站”的开发人员使该网站可以访问此 iframe,并与您银行网站的 DOM 内容进行交互,以便冒充您汇款到他们的帐户！</p></blockquote><p><img src="/images/50nmgrnkf6pb6gphno06.gif" alt="Alt Text"></p><p>Yeah… this is a huge security risk! We don’t want anyone to just be able to access everything 😧</p><blockquote><p>是的…这是巨大的安全风险！我们不希望任何人都能访问所有内容 😧</p></blockquote><p>Luckily, the same-origin policy helps us out here! This policy makes sure that we can only access resources from the <strong>same origin</strong>.</p><blockquote><p>幸运的是,同源政策可以帮助我们解决问题！这项政策确保我们只能访问同一来源的资源.</p></blockquote><p><img src="/images/8unei9l9enunbpr58o54.gif" alt="Alt Text"></p><p>In this case, the origin <code>www.evilwebsite.com</code> tried to access cross-origin resources from <code>www.bank.com</code>! The same-origin policy blocked this from happening and made sure that the evil website’s devs couldn’t just access our bank data 🥳</p><blockquote><p>在这种情况下,当 <code>www.evilwebsite.com</code> 试图从 <code>www.bank.com</code> 访问跨域资源！同源政策阻止了这种情况的发生,并确保邪恶网站的开发人员不能访问我们的银行数据</p></blockquote><p>Okay, so… what does this have to do with CORS?</p><blockquote><p>好的,那…这与 CORS 有什么关系？</p></blockquote><hr><h2 id="🔥-Client-side-CORS"><a href="#🔥-Client-side-CORS" class="headerlink" title="🔥 Client-side CORS"></a>🔥 Client-side CORS</h2><p>Although the same-origin policy actually only applies to scripts, browsers “extended” this policy for JavaScript requests: by default, we can only access fetched resources from the <strong>same origin</strong>!</p><blockquote><p>尽管同源策略实际上仅适用于脚本,但是浏览器将此策略”扩展”用于 JavaScript 请求:默认情况下,我们只能访问来自相同源的资源！</p></blockquote><p><img src="/images/0qe4yzasvrm7r0a76kui.gif" alt="我们只能访问来自相同源的资源"></p><p>Hmm, but… We often have to access cross-origin resources 🤔 Maybe our frontend needs to interact with our backend API in order to load the data? In order to allow cross-origin requests safely, the browser uses a mechanism called <strong>CORS</strong>! 🥳</p><blockquote><p>嗯,但是…我们经常必须访问跨域资源 🤔 也许我们的前端需要与后端 API 进行交互才能加载数据？为了安全地允许跨域请求,浏览器使用了一种称为 CORS 的机制！ 🥳</p></blockquote><p>CORS stands for <strong>Cross-Origin Resource Sharing</strong>. Although the browser disallows us from accessing resources that aren’t located at the same origin, we can use CORS to change those security restrictions a bit while still making sure that we’re accessing those resources safely 🎉</p><blockquote><p>CORS 代表跨域资源共享.尽管浏览器禁止我们访问不同来源的资源,我们可以使用 CORS 稍微更改这些安全限制,同时仍然确保我们可以安全地访问这些资源 🎉</p></blockquote><p>User agents (a browser, for example) can use the CORS mechanism in order to <strong>allow cross-origin requests</strong> which otherwise would’ve been blocked, based on the values of certain CORS-specific headers in the HTTP response! ✅</p><blockquote><p>用户代理(例如浏览器)可以使用 CORS 机制,以允许基于 HTTP 响应中某些 CORS 特定标头的值的跨域请求,否则该跨域请求将被阻止！ ✅</p></blockquote><p>When a cross-origin request is made, the client automatically adds an extra header to our HTTP request: <code>Origin</code>. The value of the <code>Origin</code> header is the origin where the request came from!</p><blockquote><p>进行跨域请求时,客户端会自动向我们的 HTTP 请求中添加一个额外的标头:Origin. Origin 标头的值是请求的来源！</p></blockquote><p><img src="/images/91qh9mo3q5lcl0ng4t0r.gif" alt="Alt Text"></p><p>In order for the browser to allow accessing cross-origin resources, it expects certain headers from the server’s response, which specify whether this server allows cross-origin requests!</p><blockquote><p>为了使浏览器允许访问跨域资源,它需要服务器响应中的某些标头,这些标头指定此服务器是否允许跨域请求！</p></blockquote><hr><h2 id="💻-Server-side-CORS"><a href="#💻-Server-side-CORS" class="headerlink" title="💻 Server-side CORS"></a>💻 Server-side CORS</h2><p>As a server developer, we can make sure that cross-origin requests are allowed by adding extra headers to the HTTP response, which all start with <code>Access-Control-*</code> 🔥 Based on the values of these CORS response headers, the browser can now allow certain cross-origin responses which would’ve normally been blocked by the same-origin policy!</p><blockquote><p>作为服务器开发人员,我们可以通过向 HTTP 响应添加额外的标头来确保允许跨域请求,这些标头均以 <code>Access-Control-*</code>开头 基于这些 CORS 响应标头的值,浏览器现在可以允许某些通常会被跨域策略阻止跨域响应！</p></blockquote><p>Although there are <a href="https://fetch.spec.whatwg.org/#http-responses">several CORS headers</a> we can use, there is one header that the browser needs in order to allow cross-origin resource access: <code>Access-Control-Allow-Origin</code>! 🙂</p><blockquote><p>尽管我们可以使用多个 CORS 标头,但是浏览器需要一个标头才能允许跨域资源访问:<code>Access-Control-Allow-Origin</code>！ 🙂</p></blockquote><p>The value of this header specifies <strong>which origins are allowed to access the resources</strong> that they’re requesting from the server.</p><blockquote><p>此标头的值指定允许哪些来源访问它们从服务器请求的资源.</p></blockquote><p>If we’re developing a server that <code>https://mywebsite.com</code> should have access to, we can add the value of that domain to the <code>Access-Control-Allow-Origin</code> header!</p><blockquote><p>如果我们正在开发<a href="https://mywebsite.com应该可以访问的服务器,则可以将该域的值添加到access-control-allow-origin标头中!/">https://mywebsite.com应该可以访问的服务器,则可以将该域的值添加到Access-Control-Allow-Origin标头中！</a></p></blockquote><p><img src="/images/bpw6vwe6w5tm3cadqg7j.gif" alt="Alt Text"></p><p>Awesome! 🎉 This header is now added to the response that the server sends back to the client. By adding this header, the <strong>same-policy origin will no longer restrict us from receiving resources</strong> that were located at the <code>https://api.mywebsite.com</code> origin, if we sent the request from <code>https://mywebsite.com</code>!</p><blockquote><p>太棒了！ 现在 header 已添加到服务器发送回客户端的响应标头中.通过添加此标头,如果我们从 <code>https://mywebsite.com</code> 发送请求,则相同策略来源将不再限制我们接收位于 <code>https://api.mywebsite.com</code> 来源的资源！</p></blockquote><p><img src="/images/akf0epavr00o2vo857lc.gif" alt="Alt Text"></p><p>The CORS mechanism within the browser checks whether the value of the <code>Access-Control-Allow-Origin</code> header equals the value of the <code>Origin</code> that was sent by the request 🤚🏼</p><blockquote><p>浏览器中的 CORS 机制检查 <code>Access-Control-Allow-Origin</code> 标头的值是否等于请求 sent 发送的 <code>Origin</code> 的值</p></blockquote><p>In this case, the origin of our request is <code>https://www.mywebsite.com</code>, which is listed in the <code>Access-Control-Allow-Origin</code> response header!</p><blockquote><p>在这种情况下,我们的请求的来源是 <code>https://www.mywebsite.com</code> ,它列在 <code>Access-Control-Allow-Origin</code> 响应标头中！</p></blockquote><p><img src="/images/foathske6a5prjf02dyf.gif" alt="Alt Text"></p><p>Perfect! 🎉 We were able to receive the cross-origin resources successfully! So what happens when we’re trying to access these resources from an origin that’s not listed in the <code>Access-Control-Allow-Origin</code> header? 🤔</p><blockquote><p>完美！ 🎉 我们能够成功接收跨域资源！那么,当我们尝试从未在 <code>Access-Control-Allow-Origin</code> 标头中列出的来源访问这些资源时,会发生什么情况？ 🤔</p></blockquote><p><img src="/images/lqtoobekf1h1d08lcl56.gif" alt="Alt Text"></p><p>Ahh yeah, CORS throws the notorious error that can be so frustrating at times! But now we actually see that it makes total sense</p><blockquote><p>嗯,是的,CORS 抛出了一个臭名昭著的错误,有时可能会令人沮丧！但是现在我们实际上看到这完全有意义</p></blockquote><pre class="line-numbers language-none"><code class="language-none">The &#39;Access-Control-Allow-Origin&#39; header has a value  &#39;https:&#x2F;&#x2F;www.mywebsite.com&#39; that is not equalto the supplied origin.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>In this case, the supplied origin was <code>https://www.anotherwebsite.com</code>. However, the server didn’t have this supplied origin in the list of allowed origins in the <code>Access-Control-Allow-Origin</code> header! CORS successfully blocked the request, and we cannot access the fetched data in our code 😃</p><blockquote><p>在这种情况下,提供的来源是 <code>https://www.anotherwebsite.com</code> .但是,服务器在 <code>Access-Control-Allow-Origin</code> 标头中的允许来源列表中没有提供的来源！ CORS 成功阻止了该请求,因此我们代码中的无法访问提取数据</p></blockquote><blockquote><p>CORS also allows us to add the wildcard <code>*</code> as the value for the allowed origins. This means that requests from <em>all origins</em> should have access to the requested resources, so be careful!</p></blockquote><blockquote><p>CORS 还允许我们将通配符 <code>*</code> 添加为允许的来源的值.这意味着来自所有来源的请求都应该可以访问所请求的资源,因此请小心！</p></blockquote><hr><p><code>Access-Control-Allow-Origin</code> is one of the many CORS headers we can provide. A server developer can extend the server’s CORS policies in order to (dis)allow certain requests! 💪🏼</p><blockquote><p><code>Access-Control-Allow-Origin</code> 是我们可以提供的许多 CORS 标头之一.服务器开发人员可以扩展服务器的 CORS 策略,以(禁止)某些请求！ 💪🏼</p></blockquote><p>Another common header is the <code>Access-Control-Allow-Methods</code> header! CORS will only allow cross-origin requests if they were sent with the listed methods.</p><blockquote><p>另一个常见的标头是 <code>Access-Control-Allow-Methods</code> 标头！如果 CORS 是使用列出的方法发送的,则仅允许跨域请求.</p></blockquote><p><img src="/images/yjjhg7yr3kjrh1nm44mo.gif" alt="Alt Text"></p><p>In this case, only requests with a <code>GET</code>, <code>POST</code>, or <code>PUT</code> method will be allowed! Other methods such as <code>PATCH</code> or <code>DELETE</code> will be blocked ❌</p><blockquote><p>在这种情况下,仅允许使用 <code>GET</code>,<code>POST</code> 或 <code>PUT</code> 方法的请求！诸如 <code>PATCH</code> 或 <code>DELETE</code> 之类的其他方法将被阻止 ❌</p></blockquote><blockquote><p>If you’re curious about what the other possible CORS headers are and what they’re used for, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers">check out this list</a>.</p></blockquote><blockquote><p>如果您对其他可能的 CORS 标头是什么以及它们的用途感到好奇,请查看此列表.</p></blockquote><p>Speaking of <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code> requests, CORS actually handles those requests differently! 🙃 These “<em>non-simple</em>“ requests initiate something called a <strong>preflight request</strong>!</p><blockquote><p>说到 <code>PUT</code>,<code>PATCH</code> 和 <code>DELETE</code> 请求,CORS 实际上以不同的方式处理这些请求！ 🙃 这些”非简单”请求会启动所谓的预检请求！</p></blockquote><hr><h2 id="🚀-Preflighted-Requests"><a href="#🚀-Preflighted-Requests" class="headerlink" title="🚀 Preflighted Requests"></a>🚀 Preflighted Requests</h2><p>CORS has two types of requests: a <strong>simple request</strong> and a <strong>preflighted request</strong>. Whether a request is simple or preflighted depends on some values within the request (don’t worry, you don’t have to memorize this lol).</p><blockquote><p>CORS 有两种类型的请求:简单请求和预检请求.请求是简单的还是预检的取决于请求中的某些值(不用担心,您不必记住这个).</p></blockquote><p>A request is simple when the request is a <code>GET</code> or <code>POST</code> method and doesn’t have any custom headers! Any other request, such as requests with a <code>PUT</code>, <code>PATCH</code>, or <code>DELETE</code> method, will be preflighted.</p><blockquote><p>如果请求是 <code>GET</code> 或 <code>POST</code> 方法且没有任何自定义标头,则请求是简单！其他任何请求(例如带有 <code>PUT</code>,<code>PATCH</code> 或 <code>DELETE</code> 方法的请求)将被预检.</p></blockquote><blockquote><p>In case you’re just curious about which requirements a request has to meet in order to be a simple request, MDN has <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests">a useful list</a>!</p></blockquote><blockquote><p>如果您只是想知道一个简单的请求必须满足哪些要求,MDN 会提供有用的清单！</p></blockquote><p>Okay sure, but what does “preflighted request” even mean, and why does this happen?</p><blockquote><p>好的,但是”预检请求”到底是什么意思,为什么会这样？</p></blockquote><hr><p>Before the actual request gets sent, the client generates a preflighted request! The preflighted request contains information about the actual request we’re about to in its <code>Access-Control-Request-*</code> headers 🔥</p><blockquote><p>在发送实际请求之前,客户端会生成预检请求！预检请求在其 <code>Access-Control-Request-*</code> 标头中包含有关我们实际要处理的请求的信息 🔥</p></blockquote><p>This gives the server information about the actual request that the browser is trying to make: what is the <strong>method</strong> of the request, what are the <strong>additional headers</strong>, and so on.</p><blockquote><p>这为服务器提供了有关浏览器试图发出的实际请求的信息:请求的方法是什么,附加的头是什么,等等.</p></blockquote><p><img src="/images/pp30p7ej496f8bqta4he.gif" alt="Alt Text"></p><p>The server receives this preflighted request, and sends an empty HTTP response back with the server’s CORS headers! The browser receives the preflight response, which contains no data besides the CORS headers, and checks whether the HTTP request should be allowed! ✅</p><blockquote><p>服务器接收到此预检请求,并使用服务器的 CORS 标头发送回空的 HTTP 响应！浏览器收到预检响应,该响应除了 CORS 标头外不包含任何数据,并检查是否应允许 HTTP 请求！ ✅</p></blockquote><p><img src="/images/py19auar8xhs933ilmsc.gif" alt="Alt Text"></p><p>If that’s the case, the browser sends the actual request to the server, which then responds with the data we asked for!</p><blockquote><p>如果是这种情况,浏览器会将实际请求发送到服务器,然后服务器用我们要求的数据进行响应！</p></blockquote><p><img src="/images/pfv1dcg77yjxbue5ryzf.gif" alt="Alt Text"></p><p>However, if it’s not the case, CORS will block the preflighted request, and the actual request never gets sent ✋🏼 The preflighted request is a great way to prevent us from accessing or modifying resources on servers that don’t have any CORS policies enabled (yet)! Servers are now protected from potentially unwanted cross-origin requests 😃</p><blockquote><p>但是,如果不是这种情况,CORS 将阻止预检请求,并且实际请求将永远不会发送 ✋🏼 预检请求是防止我们访问或修改未启用任何 CORS 策略的服务器上资源的一种好方法！现在可以保护服务器免受潜在的跨域请求的攻击 😃</p></blockquote><blockquote><p>💡 In order to reduce the number of roundtrips to our server, we can cache the preflighted responses by adding an <code>Access-Control-Max-Age</code> header to our CORS requests! We can cache the preflighted response this way, which the browser can use instead of sending a new preflighted request!</p></blockquote><blockquote><p>💡 为了减少往返服务器的次数,我们可以通过在 CORS 请求中添加 <code>Access-Control-Max-Age</code> 标头来缓存预检响应！我们可以通过这种方式缓存预检响应,浏览器可以使用它来代替发送新的预检请求！</p></blockquote><hr><h2 id="🍪-Credentials"><a href="#🍪-Credentials" class="headerlink" title="🍪 Credentials"></a>🍪 Credentials</h2><p>Cookies, authorization headers, and TLS certificates are by default only set on same-origin requests! However, we may want to use these credentials in our cross-origin request. Maybe we want to include cookies on the request that the server can use in order to identify the user!</p><blockquote><p>Cookie,授权标头和 TLS 证书默认情况下仅在同源请求上设置！但是,我们可能需要在跨域请求中使用这些凭据.也许我们想在服务器可以使用的请求中包含 cookie 以便识别用户！</p></blockquote><p>Although CORS doesn’t include credentials by default, we can change this by adding the <code>Access-Control-Allow-Credentials</code> CORS header! 🎉</p><blockquote><p>尽管 CORS 默认情况下不包括凭据,但我们可以通过添加 <code>Access-Control-Allow-Credentials</code> CORS 标头来更改此设置！ 🎉</p></blockquote><p>If we want to include cookies and other authorization headers to our cross-origin request, we need to set the <code>withCredentials</code> field to <code>true</code> on the request and add the <code>Access-Control-Allow-Credentials</code> header to the response.</p><blockquote><p>如果我们想在跨域请求中包含 cookie 和其他授权标头,则需要在请求上将 withCredentials 字段设置为 true,并将 Access-Control-Allow-Credentials 标头添加到响应中.</p></blockquote><p><img src="/images/vg3yo6qfqw12oh0f68yg.gif" alt="Alt Text"></p><p>All set! We can now include credentials in our cross-origin request 🥳</p><blockquote><p>搞定！现在,我们可以在跨域请求中包含凭据 🥳</p></blockquote><hr><p>Although I think we can all agree that CORS errors can be frustrating at times, it’s amazing that it enables us to safely make cross-origin requests in the browser (it should receive a bit more love lol) ✨</p><blockquote><p>尽管我认为我们都同意 CORS 错误有时会令人沮丧,但令人惊奇的是,它使我们能够在浏览器中安全地进行跨域请求(它应该会收到更多的欢笑)✨</p></blockquote><p>Obviously there is so much more to the same-origin policy and CORS than I was able to cover here in this blog post! Luckily, there are many great resources out there like <a href="https://livebook.manning.com/book/cors-in-action/part-1/">this one</a> or <a href="https://www.w3.org/wiki/CORS_Enabled">the W3 spec</a> if you want to read more about it 💪🏼</p><blockquote><p>显然,同源策略和 CORS 远远超出了我在本博文中能够介绍的范围！幸运的是,如果您想了解更多有关它的信息,那么这里有很多很棒的资源,例如《 W3 规范》.</p></blockquote><p>And as always, feel free to reach out to me! 😊</p><blockquote><p>和往常一样,随时与我联系！ 😊</p></blockquote><!--✨ [Twitter](https://www.twitter.com/lydiahallie)👩🏽‍💻 [Instagram](https://www.instagram.com/theavocoder)💻 [GitHub](https://www.github.com/lydiahallie)💡 [LinkedIn](https://www.linkedin.com/in/lydia-hallie)📷 [YouTube](https://www.youtube.com/channel/UC4EWKIKdKiDtAscQ9BIXwUw)💌 [Email](mailto:lydiahallie.dev@gmail.com%22) --><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">跨源资源共享(CORS)</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">浏览器的同源策略</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_response_header">CORS-safelisted response header</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Front-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 CSS Tricks You Need to Know About (Part 2)</title>
      <link href="10-css-tricks-you-need-to-know-about-part-2/"/>
      <url>10-css-tricks-you-need-to-know-about-part-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://radiant-brushlands-42789.herokuapp.com/beforesemicolon.medium.com/10-css-tricks-you-need-to-know-about-part-2-df52ee0b2937">10 CSS Tricks You Need to Know About (Part 2)</a></p></blockquote><p><img src="/images/1_TlS47MRDlCdz-XgJCedYpg@2x.jpeg" alt="Image for post"></p><p>Continuing our series on CSS tricks where you should probably read about the <a href="/10-css-tricks-you-need-to-know-about-382d6a34248a">first one</a> , I have collected more tricks that have the potential to blow your mind and ask why you never knew about them before.</p><h2 id="1-—-Check-for-user-color-theme-preference"><a href="#1-—-Check-for-user-color-theme-preference" class="headerlink" title="1 — Check for user color theme preference"></a>1 — Check for user color theme preference</h2><blockquote><p>切换主题</p></blockquote><p>If you ever need to detect whether the user prefers dark or light mode to style your site accordingly, CSS gives you this ability through the media query API.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">[<span class="token atrule"><span class="token rule">@media</span>] <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  // your code for dark mode here<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://www.youtube.com/watch?v=Jnn88lzJjWs&t=2s"><em>watch video</em></a></p><h2 id="2-—-Text-tooltips"><a href="#2-—-Text-tooltips" class="headerlink" title="2 — Text tooltips"></a>2 — Text tooltips</h2><p><a href="https://www.youtube.com/watch?v=8NtObSzk8Fo&t=276s">CSS tooltips</a> are easy and if pla n ned and use right, can do a whole lot for you. The limitation is that they can only show text but I went over so many details in a <a href="https://www.youtube.com/watch?v=8NtObSzk8Fo&t=276s">video</a> dedicated to this where I demonstrate how to add positioning, theme, and more. But this relies on pseudo-elements and the ability of their content being something you set in an attribute of their parent. Then all you do is the absolute position it and style it.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">data-tip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>This css tooltip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I have a Tooltip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* only add tooltip when there is a message */</span><span class="token selector">.tooltip[data-tip]:not([data-tip=''])::before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-tip<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px 10px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 250%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% + 12px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1_WBeNEyqWjqLgp18_yjl7hQ.png" alt="Image for post"></p><p><a href="https://www.youtube.com/watch?v=Jnn88lzJjWs&t=2s"><em>watch video</em></a></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="geoffgraham" data-slug-hash="PewgjE" data-preview="true" data-editable="true"  data-prefill='{"title":"多行文本溢出省略(按行数)","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;p>予观夫巴陵胜状,在洞庭一湖.衔远山,吞长江,浩浩汤汤,横无际涯,朝晖夕阴,气象万千,此则岳阳楼之大观也,前人之述备矣.然则北通巫峡,南极潇湘,迁客骚人,多会于此,览物之情,得无异乎？&lt;/p></pre>  <pre data-lang="css">p {  width: 400px;  display: -webkit-box;  -webkit-box-orient: vertical;  -webkit-line-clamp: 3;  overflow: hidden;}</pre></div>## 3 — The direction arrow<p>One thing that actually goes great with a tooltip is the little down arrow pointing to the button with the tooltip (image above). The conversation bubble arrow. It works by removing the <em>width</em> and <em>height</em> of the pseudo-element and adds borders only which with a <em>width</em> and <em>height</em> of zero forms 4 triangles which you can set the color to be transparent and then target a specific one to color, whether the top, right, bottom or left.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.tooltip[data-tip]:not([data-tip=''])::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.youtube.com/watch?v=Jnn88lzJjWs&t=2s"><em>watch video</em></a></p><h2 id="4-—-Custom-text-underline"><a href="#4-—-Custom-text-underline" class="headerlink" title="4 — Custom text underline"></a>4 — Custom text underline</h2><p>If you ever try to customize your text underline you will quickly run out of options and get frustrated. Some websites require custom text underlines as fonts normally don’t help and what you are trying to highlight often gets lost.</p><p>There are many ways to accomplish this but it is all about balancing out the pros and cons of each option till you land on a solution that works for you.</p><p>This first one uses the power of box and text-shadow to create the effect of underline and if you look closely, the underline even fills the little letter hoops and surrounds the letters gracefully.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.shadow-underline</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0 -0.23em white<span class="token punctuation">,</span> inset 0 -0.25em green<span class="token punctuation">,</span> inset 0 -0.3em white<span class="token punctuation">,</span> inset 0 -0.4em red<span class="token punctuation">;</span>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0.04em 0 white<span class="token punctuation">,</span> -0.04em 0 white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1_PGliNJwpim6ELaVvuvoA5A.png" alt="Image for post"></p><p>This next option uses the background linear gradient which is the option that allows you to do the most and be more creative.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.custom-underline</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> black 50%<span class="token punctuation">,</span> white 0<span class="token punctuation">)</span> 0 78%/4px 2px repeat-x<span class="token punctuation">,</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>        90deg<span class="token punctuation">,</span>        white 50%<span class="token punctuation">,</span>        black 0      <span class="token punctuation">)</span> 0 82%/4px 2px repeat-x<span class="token punctuation">;</span>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0.04em 0 white<span class="token punctuation">,</span> -0.04em 0 white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1_5MSDGZADHubcenVcz14DnA.png" alt="Image for post"></p><p><a href="https://www.youtube.com/watch?v=WnI3a5V90AQ&t=7s"><em>watch video</em></a></p><h2 id="5-—No-HTML-for-wrapper-needed"><a href="#5-—No-HTML-for-wrapper-needed" class="headerlink" title="5 —No HTML for wrapper needed"></a>5 —No HTML for wrapper needed</h2><p>There are probably have been times where you wanted the container to take full width but what is inside the container to only go up to 1200px, for example. What devs normally do is wrap the content inside a wrapper container and set a max-width on it. Something similar to the following markup and CSS.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Lorem ipsum, dolor ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">main</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #3f51b5<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px 25px<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A better and less HTML intrusive solution would use CSS padding alone. The formula is something like this: <code>100vw — min(max-width, (100vw — (left-gap + right-gap))) / 2.</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">main</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #3f51b5<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>00vw - <span class="token function">min</span><span class="token punctuation">(</span>900px<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw - 50px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Both solutions</strong> would look like this when the browser is beyond and below <em>max-width</em> respectively. This solution requires no additional markup.</p><p><img src="/images/1_RRWh5YE-FG8j7b0X3B3ipA.png" alt="Image for post"></p><p><img src="https://miro.medium.com/max/2272/1*5Wsa1ZsD1qk9sJepeSIPww.png" alt="Image for post"></p><h2 id="6-—-Extend-the-clickable-area"><a href="#6-—-Extend-the-clickable-area" class="headerlink" title="6 — Extend the clickable area"></a>6 — Extend the clickable area</h2><p>Let’s say you have a clickable element that is small and on mobile, it appears too small to become easily clickable. You can increase the clickable area of the element without changing the element to look any differently just by using pseudo-elements. Since they are part of the element, when they get a click the click naturally propagates to the parent. You just have to make them invisible.</p><p>The following example simply extends the type circle dot button click area by 2(two) by positioning a pseudo-element on top and centered.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">button::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token comment">/* for demo purpose only - should be removed */</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1_LZOyHe7Zk-0XqEhsVVV3pQ.png" alt="Image for post"></p><h2 id="7-—-Responsive-text"><a href="#7-—-Responsive-text" class="headerlink" title="7 — Responsive text"></a>7 — Responsive text</h2><p>If you ever wanted your font size to adapt with the size of the site — which you should if you ever code frontend — then this simple formula got you covered;</p><pre class="line-numbers language-none"><code class="language-none">font-size: calc([minimum size] + ([maximum size] - [minimum size]) * ((100vw - [minimum viewport width]) &#x2F; ([maximum viewport width] - [minimum viewport width])));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>You can also get a closer result with a much simpler CSS option, clamp function, which has <a href="https://caniuse.com/mdn-css_types_clamp">decent support</a> .</p><pre class="line-numbers language-none"><code class="language-none">font-size: clamp(min, viewport-width-unit, max);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-—-Frosted-glass-effect"><a href="#8-—-Frosted-glass-effect" class="headerlink" title="8 — Frosted glass effect"></a>8 — Frosted glass effect</h2><p>Something that has been there forever and got adopted by designers and all at sudden 80% of all designs started including is the frosted glass effect. You simply use the backdrop filter and the color is determined by the background.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.15<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">backdrop-filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1_MlP9wPeQZENT2HDYpaTm7A.png" alt="Image for post"></p><h2 id="9-—-Image-grid-with-random-height-Mansory-Layout"><a href="#9-—-Image-grid-with-random-height-Mansory-Layout" class="headerlink" title="9 — Image grid with random height (Mansory Layout)"></a>9 — Image grid with random height (Mansory Layout)</h2><p>This is the famous Pinterest layout that you can use the old column property to accomplish quite easily.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token property">-webkit-column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>  <span class="token property">-moz-column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>  <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>  <span class="token property">-webkit-column-gap</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">-moz-column-gap</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token comment">/* match gap size */</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1_TMDMZzWsJQtVEaXXssvzTQ.png" alt="Image for post"></p><h2 id="10-—-Math-with-Calc"><a href="#10-—-Math-with-Calc" class="headerlink" title="10 — Math with Calc"></a>10 — Math with Calc</h2><p>Nothing in this world requires no math and the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()">CSS calc function</a> is magical. What makes it magical is the fact that you can mix unit types and do extensive calculations to help you position, resize, rotate elements easily. You already saw a good use case with <strong>tip #5 and tip #7</strong> but here a few useful bunches you can use.</p><p><em>Position background precisely:</em></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; position 20px from the right and 10px from the bottombackground-position: calc(100% - 20px) calc(100% - 10px);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>Flex items (better than flex: 1) — Greate to fit items in the remaining available space.</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.header</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Rotate without needing to know the exact angle</em></p><pre class="line-numbers language-none"><code class="language-none">transform: rotate(calc(3turn + 45deg));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>Create your own utility class for column layout:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[data-columns='1'] .col</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">[data-columns='2'] .col</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">[data-columns='3'] .col</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">[data-columns='4'] .col</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">[data-columns='5'] .col</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">[data-columns='6'] .col</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>User variables for more magic:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.foo</span> <span class="token punctuation">&#123;</span>  <span class="token property">--widthA</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">--widthB</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--widthA<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--widthC</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--widthB<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--widthC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>CSS is fun and full of magic and it is always great when you feel like you know something more and the process of discovering CSS tricks is simply a good one. Sometimes it is about exploring the options, reading the specs and sometimes it can appear like it is pure luck, but CSS is growing and the tricks will never end.</p><p>See you in part 3! Meanwhile, check my <a href="https://www.youtube.com/c/BeforeSemicolon/">Youtube Channel</a> for more.</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tricks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 CSS Tricks You Need to Know About</title>
      <link href="10-css-tricks-you-need-to-know-about/"/>
      <url>10-css-tricks-you-need-to-know-about/</url>
      
        <content type="html"><![CDATA[<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://beforesemicolon.medium.com/10-css-tricks-you-need-to-know-about-382d6a34248a">10 CSS Tricks You Need to Know About</a></p></blockquote><p><img src="/images/1_wWyiw9bRi5ENRIpBdyOA1g@2x.jpeg" alt="Image for post"></p><p>I started to share <a href="/25-javascript-code-solutions-utility-tricks-you-need-to-know-about-3023f7ed993e">25 Javascript tricks and solutions you need to know about</a> which were well received so I decided to share some CSS tricks as well. I really believe that a lot of people adopt a library or framework because they want a solution but are not aware of how simple these solutions can be. I am constantly sharing tricks so follow my <a href="https://www.youtube.com/channel/UCrU33aw1k9BqTIq2yKXrmBw">YouTube channel</a> for video tutorials.</p><h2 id="1-—-Truncate-with-Ellipsis-single-line"><a href="#1-—-Truncate-with-Ellipsis-single-line" class="headerlink" title="1 — Truncate with Ellipsis (single line)"></a>1 — Truncate with Ellipsis (single line)</h2><blockquote><p>单行文本省略</p></blockquote><p>If you want to maintain a single line of text but want to show 3 dots(ellipsis) at the end in case the text ends up being too big, you need this trick. This is one of the examples which illustrate a bad CSS API design due to the fact you need all these combinations of properties for this to work.</p><p>The element must be a <em>block</em> or <em>inline-block</em>, the <em>text-overflow</em> does not work without the <em>overflow</em> being <em>hidden</em> and the element must have a defined width or a max-width set. The <em>white-space</em> value of <em>nowrap</em> (reads No Wrap not Now Rap) simply forces the text not to break into a new line</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* use max-width so the ellipsis  only shows when reached that size */</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="geoffgraham" data-slug-hash="vjEMXg" data-preview="true" data-editable="true"  data-prefill='{"title":"单行文本溢出省略","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="box">　予观夫巴陵胜状,在洞庭一湖.衔远山,吞长江,浩浩汤汤,横无际涯,朝晖夕阴,气象万千,此则岳阳楼之大观也,前人之述备矣.然则北通巫峡,南极潇湘,迁客骚人,多会于此,览物之情,得无异乎？&lt;/div></pre>  <pre data-lang="css">.box {  background-color: #fff;  box-shadow: 2px 2px 10px #246756;  overflow: hidden;  padding: 2em;  /* */  text-overflow: ellipsis;  white-space: nowrap;  width: 400px;}</pre></div><h2 id="2-—-Truncate-with-an-ellipsis-multiple-lines"><a href="#2-—-Truncate-with-an-ellipsis-multiple-lines" class="headerlink" title="2 — Truncate with an ellipsis (multiple lines)"></a>2 — Truncate with an ellipsis (multiple lines)</h2><blockquote><p>多行文本省略</p></blockquote><p>If you want ellipsis on multiple lines there is an entire, weird CSS solution to this. You can check this <a href="https://css-tricks.com/line-clampin/">article on CSS-Tricks</a> for more alternative options and details.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* old display option */</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span> <span class="token comment">/* max number of lines to show */</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token comment">/* needed for it to work */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="geoffgraham" data-slug-hash="PewgjE" data-preview="true" data-editable="true"  data-prefill='{"title":"多行文本溢出省略(按行数)","tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;p>予观夫巴陵胜状,在洞庭一湖.衔远山,吞长江,浩浩汤汤,横无际涯,朝晖夕阴,气象万千,此则岳阳楼之大观也,前人之述备矣.然则北通巫峡,南极潇湘,迁客骚人,多会于此,览物之情,得无异乎？&lt;/p></pre>  <pre data-lang="css">p {  width: 400px;  display: -webkit-box;  -webkit-box-orient: vertical;  -webkit-line-clamp: 3;  overflow: hidden;}</pre></div><h2 id="3-—-Center-vertically"><a href="#3-—-Center-vertically" class="headerlink" title="3 — Center vertically"></a>3 — Center vertically</h2><blockquote><p>垂直居中</p></blockquote><p>The options to center vertically are vast depending on your situation really. Let’s look at a few of my favorites which do not include some other weird or, in my opinion, unmaintainable hacks.</p><p><em>Vertically center anything inside a display flex container:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.flex-vertically-center</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">align-items</a></p></blockquote><p><em>Vertical alignment an inline, inline-block, or table-cell box:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* only for block tags */</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://css-tricks.com/almanac/properties/v/vertical-align/">vertical-align</a></p></blockquote><p><em>Vertically center absolute element inside a relative container:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* change to fixed to center relative to the view */</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-—-Center-horizontally"><a href="#4-—-Center-horizontally" class="headerlink" title="4 — Center horizontally"></a>4 — Center horizontally</h2><blockquote><p>🔥 水平居中</p></blockquote><p>Similar to vertically align you will need to align things horizontally as well. These are my favorite minus the weird stuff.</p><p><em>Center block items:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.block-element</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token comment">/* use display only if element is not block already */</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Center text and inline or inline-block elements:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>Horizontally center absolute element inside a relative container:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* change to fixed to center relative to the view */</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Horizontally center anything inside a display flex container:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.flex-vertically-center</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"><code>justify-content</code></a> 属性定义了分配顺着弹性容器主轴的元素之间及其周围的空间。</p></blockquote><h2 id="5-—-Style-next-or-previous-siblings"><a href="#5-—-Style-next-or-previous-siblings" class="headerlink" title="5 — Style next or previous siblings"></a>5 — Style next or previous siblings</h2><blockquote><p>修改同级元素样式</p></blockquote><p>I don’t know about you. but I came across many situations in which I needed to style the elements after and before a certain element. The after is pretty simple and the before will blow your mind.</p><p><em>Let pretend you have a <strong>container with 10 buttons</strong> and the <strong>5th</strong> has a class of “current”. To style <strong>all the buttons after “current”</strong> you do:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.current ~ button</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* the style you want */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="html,result" data-user="zhuangyin" data-slug-hash="BaLMmZp" data-preview="true" data-editable="true" data-prefill='{"tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div>  &lt;button>0&lt;/button>  &lt;button>1&lt;/button>  &lt;button>2&lt;/button>  &lt;button>3&lt;/button>  &lt;button class="current">4&lt;/button>  &lt;button>5&lt;/button>  &lt;button>6&lt;/button>  &lt;button>7&lt;/button>  &lt;button>8&lt;/button>  &lt;button>9&lt;/button>&lt;/div></pre>  <pre data-lang="css">.current ~ button {   background: red;}</pre></div> _To style **just the item after** (the 6th button):_<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.current + button</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* the style you want */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="html,result" data-user="zhuangyin" data-slug-hash="BaLMmZp" data-preview="true" data-editable="true"  data-prefill='{"tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div>  &lt;button>0&lt;/button>  &lt;button>1&lt;/button>  &lt;button>2&lt;/button>  &lt;button>3&lt;/button>  &lt;button class="current">4&lt;/button>  &lt;button>5&lt;/button>  &lt;button>6&lt;/button>  &lt;button>7&lt;/button>  &lt;button>8&lt;/button>  &lt;button>9&lt;/button>&lt;/div></pre>  <pre data-lang="css">.current + button {   background: red;}</pre></div><p>CSS does not have a “<em>previous</em>“ selector but we can take advantage of its cascading nature to use the order to do this. Since we already know how to target all the elements after, we can style all the buttons we want the buttons before “current” to have then we overwrite this style to look normal. The below code will make only <strong>the buttons before “current” have a red background</strong>.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.current,.current ~ button</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="html,result" data-user="zhuangyin" data-slug-hash="BaLMmZp" data-preview="true" data-editable="true"  data-prefill='{"tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div>  &lt;button>0&lt;/button>  &lt;button>1&lt;/button>  &lt;button>2&lt;/button>  &lt;button>3&lt;/button>  &lt;button class="current">4&lt;/button>  &lt;button>5&lt;/button>  &lt;button>6&lt;/button>  &lt;button>7&lt;/button>  &lt;button>8&lt;/button>  &lt;button>9&lt;/button>&lt;/div></pre>  <pre data-lang="css">button {  background: red;}.current,.current ~ button {  background: initial;}</pre></div><h2 id="6-—-Style-elements-in-a-specific-range"><a href="#6-—-Style-elements-in-a-specific-range" class="headerlink" title="6 — Style elements in a specific range"></a>6 — Style elements in a specific range</h2><blockquote><p>修改同级范围内元素样式</p></blockquote><p>You can target a certain range of elements to style as well. For example, you have 10 boxes and want <strong>the second to the fifth box</strong> to have a red background and all the others to have a green background, then you do:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box:nth-of-type(n + 2):nth-of-type(-n + 5)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="html,result" data-user="zhuangyin" data-slug-hash="BaLMmZp" data-preview="true" data-editable="true"  data-prefill='{"tags":[],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div>  &lt;button>0&lt;/button>  &lt;button>1&lt;/button>  &lt;button>2&lt;/button>  &lt;button>3&lt;/button>  &lt;button class="current">4&lt;/button>  &lt;button>5&lt;/button>  &lt;button>6&lt;/button>  &lt;button>7&lt;/button>  &lt;button>8&lt;/button>  &lt;button>9&lt;/button>&lt;/div></pre>  <pre data-lang="css">button:nth-of-type(n + 2):nth-of-type(-n + 5) {  background: red;}</pre></div><p>The above works with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type"><em>nth-of-type</em></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child"><em>nth-child</em></a> pseudo-class.</p><h2 id="7-—-box-sizing"><a href="#7-—-box-sizing" class="headerlink" title="7 — box-sizing"></a>7 — box-sizing</h2><blockquote><p>元素的总宽度和总高度</p></blockquote><p>One thing that used to drive me crazy was that I set an element to be for example 200px and then in the browser, it would be something else because of padding or border, then I found out about <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing">box-sizing</a>.</p><p><em>The following will create a box that is <strong>240 by 240</strong>(adds padding to width and height):</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>The following will create a box that is <strong>200 by 200</strong>(includes padding and border into the size I set):</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing">box-sizing</a></p></blockquote><p>This is why on all my <a href="https://www.youtube.com/playlist?list=PLpWvGP6yhJUhDOU6LeJxEksCLxWxZo5y0">CSS tutorial videos</a> You hear me mention setting the following:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">Targets all elements and pseudo-elements*,*::after,*::before</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-—-aspect-ratio"><a href="#8-—-aspect-ratio" class="headerlink" title="8 — aspect ratio"></a>8 — aspect ratio</h2><blockquote><p>长宽比</p></blockquote><p>If you want for a box to have a certain width to height ratio you can go about it several ways and only one of them is obvious. If you want to make a box a certain ratio you can set the top padding using a (height * width) / 100% formula using the calc function. To set a limit on the width you put inside a container where you set the width.</p><p><em>Create a 16 by 9 rectangle of 200px wide:</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>9 / 16<span class="token punctuation">)</span> * 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also use the after pseudo-element to create the ratio size</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>9 / 16<span class="token punctuation">)</span> * 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The issue with that is that everything inside must be shifted up or absolutely positioned to the box. Fortunately, CSS gave us the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio">aspect-ratio property</a> we can use, and unfortunately, it has very poor support as of 2020.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 16 / 9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9-—-text-around-an-image"><a href="#9-—-text-around-an-image" class="headerlink" title="9 — text around an image"></a>9 — text around an image</h2><blockquote><p>文本围绕图片</p></blockquote><p>Text wrapping around the image is super cool and probably one of the most underrated CSS features ever and it is super easy to do. We use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float">float property</a> to float the image inside a text then we use the powerful <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside">shape-outside property</a> with the image URL. The float property already does a lot but the shape-outside will escape pixels in your image.</p><p><img src="/images/1_b1hr_4MaG8jhcsnA58YlUw.png" alt="Image for post"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">shape-outside</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>some-url-to-your-image<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float">float</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside">shape-outside</a></p></blockquote><h2 id="10-—-is-matches-any-and-where"><a href="#10-—-is-matches-any-and-where" class="headerlink" title="10 — is, matches, any and :where"></a>10 — is, matches, any and :where</h2><blockquote><p>将选择器列表作为参数，并选择该列表中任意一个选择器可以选择的元素。</p></blockquote><p>CSS has the <em>:matches</em> pseudo-class function which was recently renamed to <em>:is</em> and in some old browsers it is named <em>:any ** (with prefix)</em> but they all work exactly the same. What this allows you to do is simplify your CSS selectors, for example, you can change this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">section h1,article h1,aside h1,nav h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>into this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:is(section, article, aside, nav) h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The <em>:where</em> works similarly but the specificity is always zero where the <em>:is</em> specificity is of the overall selector. You can read more on the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:is">MDN page</a>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>CSS is fun and powerful and it is constantly growing and improving. I have collected a lot of tricks over the years and by doing things yourself you are constantly learning and enjoying the experience of discovery.</p><p>I will continue to share more tricks in the article and <a href="https://www.youtube.com/channel/UCrU33aw1k9BqTIq2yKXrmBw">video</a> format so let’s stay in touch so I can continue to share my experience with you.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">超文本传输协议</a></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tricks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 ⭐️🎀 JavaScript Visualized: Promises &amp; Async/Await</title>
      <link href="javascript-visualized-promises-async-await/"/>
      <url>javascript-visualized-promises-async-await/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke">7 ⭐️🎀 JavaScript Visualized: Promises &amp; Async/Await</a></p></blockquote><p><img src="/images/lbkswjafvaeynxnrjuoq.png" alt="Cover image for ⭐️🎀  JavaScript Visualized: Promises &amp; Async/Await"></p><p>Ever had to deal with JS code that just… didn’t run the way you expected it to? Maybe it seemed like functions got executed at random, unpredictable times, or the execution got delayed. There’s a chance you were dealing with a cool new feature that ES6 introduced: <strong>Promises</strong>!</p><p>My curiosity from many years ago has paid off and my sleepless nights have once again given me the time to make some animations. Time to talk about Promises: <strong>why</strong> would you use them, <strong>how</strong> do they work “under the hood”, and how can we write them in the most <strong>modern</strong> way?</p><blockquote><p>If you haven’t read my previous post on the JavaScript Event Loop yet, it may be useful to read that first! I’ll be covering the event loop again assuming some basic knowledge about the call stack, Web API and the queue, but this time we’ll also be covering some exciting extra features 🤩</p></blockquote><p>If you’re already somewhat familiar with promises, here are some shortcuts to save you some precious scrolling time.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>When writing JavaScript, we often have to deal with tasks that rely on other tasks! Let’s say that we want to get an image, compress it, apply a filter, and save it 📸</p><blockquote><p>在编写 JavaScript 时，我们经常要处理依赖其他任务的任务！假设我们想要获取一个图像，压缩它，应用过滤器，然后保存它 📸</p></blockquote><p>The very first thing we need to do, is <em>get</em> the image that we want to edit. A <code>getImage</code> function can take care of this! Only once that image has been loaded successfully, we can pass that value to a <del><code>resizeImage</code></del> <code>compressImage</code> function. When the image has been resized successfully, we want to apply a filter to the image in the <code>applyFilter</code> function. After the image has been compressed and we’ve added a filter, we want to save the image and let the user know that everything worked correctly! 🥳</p><blockquote><p>我们需要做的第一件事就是 <em>获取</em> 我们想要编辑的图像。 <code>getImage</code> 函数可以解决这个问题！只有成功加载该图像后，我们才能将该值传递给 <code>compressImage</code> 函数。成功调整图像大小后，我们希望在 <code>applyFilter</code> 函数中对图像应用过滤器。在图像被压缩并添加过滤器后，我们想在 <code>saveImage</code> 函数保存图像并让用户知道一切正常！ 🥳</p></blockquote><p>In the end, we’ll end up with something like this:</p><p><img src="/images/ixceqsql5hpdq8txx43s.png" alt="回调函数版本的 getImage"></p><p>Hmm… Notice anything here? Although it’s… <em>fine</em>, it’s not great. We end up with many nested callback functions that are dependent on the previous callback function. This is often referred to as a <a href="http://callbackhell.com/"><em>callback hell</em></a>, as we end up with tons of nested callback functions that make the code quite difficult to read!</p><blockquote><p>嗯…… 注意到这里有什么吗？虽然…… 还好，但不是很好。我们最终得到了许多依赖于前一个回调函数的嵌套回调函数。这通常被称为回调地狱，因为我们最终会得到大量嵌套的回调函数，这使得代码很难阅读！</p></blockquote><p>Luckily, we now got something called <strong>promises</strong> to help us out! Let’s take a look at what promises are, and how they can help us in situations like these! 😃</p><blockquote><p>幸运的是，我们现在有了一个叫做 promises 的东西来帮助我们！让我们来看看 Promise 是什么，以及它们如何在这样的情况下帮助我们！ 😃</p></blockquote><hr><h3 id="Promise-Syntax"><a href="#Promise-Syntax" class="headerlink" title="Promise Syntax"></a>Promise Syntax</h3><p>ES6 introduced <strong>Promises</strong>. In many tutorials, you’ll read something like:</p><blockquote><p>“A promise is a placeholder for a value that can either resolve or reject at some time in the future”</p></blockquote><p>Yeah… That explanation never made things clearer for me. In fact it only made me feel like a Promise was a weird, vague, unpredictable piece of magic. So let’s look at what promises <em>really</em> are.</p><p>We can create a promise, using a <code>Promise</code> constructor that receives a callback. Okay cool, let’s try it out!</p><blockquote><p>我们可以创建一个 promise，使用一个接收回调的 Promise 构造函数。不错，快来试试吧！</p></blockquote><p><img src="/images/79zi452hphe7ecylhozy.gif"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Promise &#123;&lt;pending>&#125;</span><span class="token comment">// __proto__: Promise</span><span class="token comment">// [[PromiseState]]: "pending"</span><span class="token comment">// [[PromiseResult]]: undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Wait woah, what just got returned?</p><p>A <code>Promise</code> is an object that contains a <strong>status</strong>, (<code>[[PromiseStatus]]</code>) and a <strong>value</strong> (<code>[[PromiseValue]]</code>). In the above example, you can see that the value of <code>[[PromiseStatus]]</code> is <code>&quot;pending&quot;</code>, and the value of the promise is <code>undefined</code>.</p><blockquote><p><code>Promise</code> 是一个包含状态 (<code>[[PromiseStatus]]</code>) 和值 (<code>[[PromiseValue]]</code>) 的对象。在上面的例子中，可以看到 <code>[[PromiseStatus]]</code> 的值为 <code>&quot;pending&quot;</code>，promise 的值为 <code>undefined</code>。</p></blockquote><p>Don’t worry - you’ll never have to interact with this object, you can’t even access the <code>[[PromiseStatus]]</code> and <code>[[PromiseValue]]</code> properties! However, the values of these properties are important when working with promises.</p><blockquote><p>别担心 - 你永远不必与这个对象打交道，你甚至不能访问 <code>[[PromiseStatus]]</code> 和 <code>[[PromiseValue]]</code> 属性！但是，在使用 Promise 时，这些属性的值很重要。</p></blockquote><hr><p>The value of the <code>PromiseStatus</code>, the <strong>state</strong>, can be one of three values:</p><ul><li>✅ <code>fulfilled</code>: The promise has been <code>resolved</code>. Everything went fine, no errors occurred within the promise 🥳</li><li>❌ <code>rejected</code> : The promise has been <code>rejected</code>. Argh, something went wrong..</li><li>⏳ <code>pending</code>: The promise has neither resolved nor rejected (yet), the promise is still <code>pending</code>.</li></ul><p>Alright this all sounds great, but <em>when</em> is a promise status <code>&quot;pending&quot;</code>, <code>&quot;fulfilled&quot;</code> or <code>&quot;rejected&quot;</code>? And why does that status even matter?</p><blockquote><p>好吧，这一切听起来都不错，但是承诺状态何时是 “待定”、“已实现” 或 “已拒绝”？为什么这种状态很重要？</p></blockquote><p>In the above example, we just passed the simple callback function <code>() =&gt; &#123;&#125;</code> to the <code>Promise</code> constructor. However, this callback function actually receives two arguments. The value of the first argument, often called <code>resolve</code> or <code>res</code>, is the method to be called when the Promise should <strong>resolve</strong>. The value of the second argument, often called <code>reject</code> or <code>rej</code>, is the value method to be called when the Promise should <strong>reject</strong>, something went wrong.</p><blockquote><p>在上面的例子中，我们只是将简单的回调函数 <code>() =&gt; &#123;&#125;</code> 传递给了 <code>Promise</code> 构造函数。然而，这个回调函数实际上接收两个参数。第一个参数的值，通常称为 <code>resolve</code> 或 <code>res</code>，是 Promise 应该解析时要调用的方法。第二个参数的值，通常称为 <code>reject</code> 或 <code>rej</code>，是当 Promise 应该拒绝时调用的值方法，出现问题。</p></blockquote><p><img src="/images/duen4peq0bdr55cka5ya.png"></p><p>Let’s try and see that gets logged when we invoke either the <code>resolve</code> or <code>reject</code> method! In my example, I called the <code>resolve</code> method <code>res</code>, and the <code>reject</code> method <code>rej</code>.</p><blockquote><p>让我们试着看看当我们调用 <code>resolve</code> 或 <code>reject</code> 方法时会被记录下来！在我的示例中，我调用了解析方法 <code>res</code> 和拒绝方法 <code>rej</code>。</p></blockquote><p><img src="/images/z0b9v0h7aiq073l5tl2l.gif"></p><p>Awesome! We finally know how to get rid of the <code>&quot;pending&quot;</code> status and the <code>undefined</code> value! The <strong>status</strong> of a promise is <code>&quot;fulfilled&quot;</code> if we invoked the <code>resolve</code> method, and the status of the promise is <code>&quot;rejected</code>“ if we invoked the <code>rejected</code> method.</p><blockquote><p>惊人的！我们终于知道如何摆脱 <code>&quot;pending&quot;</code> 状态和 <code>undefined</code> 值了！如果我们调用了 <code>resolve</code> 方法，promise 的状态就是 <code>&quot;fulfilled&quot;</code> ，如果我们调用了 <code>rejected</code> 方法，promise 的状态就是 <code>&quot;rejected</code>“。</p></blockquote><p>The <strong>value</strong> of a promise, the value of <code>[[PromiseValue]]</code>, is the value that we pass to the either the <code>resolved</code> or <code>rejected</code> method as their argument.</p><blockquote><p>一个 promise 的值，即 <code>[[PromiseValue]]</code> 的值，是我们作为参数传递给 <code>resolved</code> 或 <code>rejected</code> 方法的值。</p></blockquote><blockquote><p>Fun fact, I let Jake Archibald proofread this article and he actually pointed out there’s a bug in Chrome that currently shows the status as <code>&quot;resolved&quot;</code> instead of <code>&quot;fulfilled&quot;</code>. Thanks to <a href="https://twitter.com/mathias">Mathias Bynens</a> it’s now fixed in Canary! 🥳🕺🏼</p><p><img src="https://pbs.twimg.com/media/EVJqgKLUwAEocsG.png" alt="unknown tweet media content"></p><p>Chrome and Safari call this a “resolved” promise, which is true, but kinda misleading…</p></blockquote><hr><p>Okay so, now we know a little bit better how to control that vague <code>Promise</code> object. But what is it used for?</p><blockquote><p>好的，现在我们对如何控制那个模糊的 <code>Promise</code> 对象有了更好的了解。但是它有什么用呢？</p></blockquote><p>In the introductory section, I showed an example in which we get an image, compress it, apply a filer, and save it! Eventually, this ended up being a nested callback mess.</p><blockquote><p>在介绍部分，我展示了一个示例，其中我们获取图像、压缩它、应用文件管理器并保存它！最终，这最终成为一个嵌套的回调混乱。</p></blockquote><p>Luckily, Promises can help us fix this! First, let’s rewrite the entire code block, so that each function returns a <code>Promise</code> instead.</p><blockquote><p>幸运的是，Promises 可以帮助我们解决这个问题！首先，让我们重写整个代码块，让每个函数都返回一个 Promise。</p></blockquote><p>If the image is loaded and everything went fine, let’s <strong>resolve</strong> the promise with the loaded image! Else, if there was an error somewhere while loading the file, let’s <strong>reject</strong> the promise with the error that occurred.</p><blockquote><p>如果图像已加载并且一切正常，让我们用加载的图像解决 promise！否则，如果在加载文件时某处出现错误，让我们拒绝发生错误的承诺。</p></blockquote><p><img src="/images/iebp0rzfnfqsrmmjplme.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getImage</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rs<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Let’s see what happens when we run this in the terminal!</p><p><img src="/images/wsu5nn26dp4elcwh764m.gif"></p><p>Cool! A promise got returned with the value of the parsed data, just like we expected.</p><blockquote><p>凉爽的！正如我们预期的那样，一个带有解析数据值的承诺被返回。</p></blockquote><p>But… what now? We don’t care about that entire promise object, we only care about the value of the data! Luckily, there are built-in methods to get a promise’s value. To a promise, we can attach 3 methods:</p><blockquote><p>但是……现在怎么办？我们不关心整个 promise 对象，我们只关心数据的价值！幸运的是，有一些内置方法可以获取 Promise 的值。对于 promise，我们可以附加 3 个方法：</p></blockquote><ul><li><code>.then()</code>: Gets called after a promise <em>resolved</em>.</li><li><code>.catch()</code>: Gets called after a promise <em>rejected</em>.</li><li><code>.finally()</code>: <em>Always</em> gets called, whether the promise resolved or rejected.</li></ul><p><img src="/images/mu1aqqnyfjsfon5hwrtw.png"></p><p>The <code>.then</code> method receives the value passed to the <code>resolve</code> method.</p><p><img src="/images/11vxhn9cun7stpjbdi80.gif"></p><p>The <code>.catch</code> method receives the value passed to the <code>rejected</code> method</p><p><img src="/images/v5y24jz4u89flazvdyn4.gif"></p><p>Finally, we have the value that got resolved by the promise without having that entire promise object! We can now do whatever we want with this value.</p><blockquote><p>最后，我们有了由 Promise 解析的值，而没有整个 Promise 对象！我们现在可以用这个值做任何我们想做的事情。</p></blockquote><hr><p>FYI, when you know that a promise will always resolve or always reject, you can write <code>Promise.resolve</code> or <code>Promise.reject</code> , with the value you want to reject or resolve the promise with!</p><blockquote><p>仅供参考，当您知道承诺将始终解决或始终拒绝时，您可以编写 <code>Promise.resolve</code> 或 <code>Promise.reject</code>，并使用您想要拒绝或解决承诺的值！</p></blockquote><p><img src="/images/90hxwjfadzslvdbkr4l8.png"></p><p>You’ll often see this syntax in the following examples 😄</p><hr><p>In the <code>getImage</code> example, we ended up having to nest multiple callbacks in order to run them. Luckily, the <code>.then</code> handlers can help us with that! 🥳</p><blockquote><p>在 <code>getImage</code> 示例中，我们最终不得不嵌套多个回调以运行它们。幸运的是，<code>.then </code>处理程序可以帮助我们解决这个问题！ 🥳</p></blockquote><p>The result of the <code>.then</code> itself is a promise value. This means that we can chain as many <code>.then</code>s as we want: the result of the previous <code>then</code> callback will be passed as an argument to the next <code>then</code> callback!</p><blockquote><p><code>.then</code> 本身的结果是一个 promise 值。这意味着我们可以根据需要链接任意数量的 <code>.then</code>：前一个 then 回调的结果将作为参数传递给下一个 <code>then</code> 回调！</p></blockquote><p><img src="/images/i6busbetmoya9vny2eku.png"></p><p>In the case of the <code>getImage</code> example, we can chain multiple <code>then</code> callbacks in order to pass the processed image onto the next function! Instead of ending up with many nested callbacks, we get a clean <code>then</code> chain.</p><blockquote><p>在 <code>getImage</code> 示例中，我们可以链接多个 <code>then</code> 回调，以便将处理后的图像传递给下一个函数！我们得到了一个干净的 <code>then</code> 链，而不是以许多嵌套的回调结束。</p></blockquote><p><img src="/images/u9l3lxwxlxgv2edv79xh.png" alt="Promise 版本的 getImage"></p><p>Perfect! This syntax already looks way better than the nested callbacks.</p><blockquote><p>完美的！这种语法看起来比嵌套回调更好。</p></blockquote><hr><h2 id="Microtasks-and-Macro-tasks"><a href="#Microtasks-and-Macro-tasks" class="headerlink" title="Microtasks and (Macro)tasks"></a>Microtasks and (Macro)tasks</h2><blockquote><p>微任务和（宏）任务</p></blockquote><p>Okay so we know a little better how to create a promise and how to extract values out of a promise. Let’s add some more code to the script, and run it again:</p><blockquote><p>好的，所以我们对如何创建承诺以及如何从承诺中提取值有了更好的了解。让我们向脚本添加更多代码，然后再次运行它：</p></blockquote><p><img src="/images/ey4ubnv5yjgi6hbh97xq.gif"></p><p>Wait what?! 🤯</p><p>First, <code>Start!</code> got logged. Okay we could’ve seen that one coming: <code>console.log(&#39;Start!&#39;)</code> is on the very first line! However, the second value that got logged was <code>End!</code>, and <em>not</em> the value of the resolved promise! Only after <code>End!</code> was logged, the value of the promise got logged. What’s going on here?</p><blockquote><p>首先，<code>Start!</code>被登录了。好吧，我们已经看到了：<code>console.log(&#39;Start!&#39;)</code> 在第一行！但是，记录的第二个值是 <code>End!</code>，而不是已解决的 Promise 的值！只有 <code>End!</code> 被记录，promise 的值被记录。这里发生了什么？</p></blockquote><p>We’ve finally seen the true power of promises! 🚀 Although JavaScript is single-threaded, we can add asynchronous behavior using a <code>Promise</code>!</p><blockquote><p>我们终于看到了 Promise 的真正力量！ 🚀 虽然 JavaScript 是单线程的，但我们可以使用 Promise 添加异步行为！</p></blockquote><hr><p>But wait, haven’t we seen that before? 🤔 In the <a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif">JavaScript event loop</a>, can’t we also use methods native to the browser such as <code>setTimeout</code> to create some sort of asynchronous behavior?</p><blockquote><p>但是等等，我们以前没见过吗？ 🤔 在 JavaScript 事件循环中，我们不能也使用浏览器原生的方法，例如 <code>setTimeout</code> 来创建某种异步行为吗？</p></blockquote><p>Yes! However, within the Event Loop, there are actually two types of queues: the <strong>(macro)task queue</strong> (or just called the <strong>task queue</strong>), and the <strong>microtask queue</strong>. The (macro)task queue is for <strong>(macro)tasks</strong> and the microtask queue is for <strong>microtasks</strong>.</p><blockquote><p>是的！然而，在事件循环内部，实际上有两种类型的队列：（宏）任务队列（或简称为任务队列）和微任务队列。 （宏）任务队列用于（宏）任务，微任务队列用于微任务。</p></blockquote><p>So what’s a <em>(macro)task</em> and what’s a <em>microtask</em>? Although there are a few more than I’ll cover here, the most common are shown in the table below!</p><blockquote><p>那么什么是（宏）任务，什么是微任务？虽然有一些比我在这里介绍的要多，但最常见的如下表所示！</p></blockquote><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>(Macro)task</td><td><code>setTimeout</code></td><td><code>setInterval</code></td><td><code>setImmediate</code></td></tr><tr><td>Microtask</td><td><code>process.nextTick</code></td><td><code>Promise callback</code></td><td><code>queueMicrotask</code></td></tr></tbody></table><p>Ahh, we see <code>Promise</code> in the microtask list! 😃 When a <code>Promise</code> resolves and calls its <code>then()</code>, <code>catch()</code> or <code>finally()</code>, method, the callback within the method gets added to the <strong>microtask queue</strong>! This means that the callback within the <code>then()</code>, <code>catch()</code> or <code>finally()</code> method isn’t executed immediately, essentially adding some async behavior to our JavaScript code!</p><blockquote><p>啊，我们在微任务列表中看到了 Promise！ 😃 当 Promise 解析并调用其 <code>then()</code>、<code>catch()</code> 或 <code>finally()</code> 方法时，该方法中的回调会被添加到微任务队列中！这意味着 <code>then()</code>、<code>catch()</code> 或 <code>finally()</code> 方法中的回调不会立即执行，实质上是向我们的 JavaScript 代码添加了一些异步行为！</p></blockquote><p>So when <em>is</em> a <code>then()</code>, <code>catch()</code> or <code>finally()</code> callback executed? The event loop gives a different priority to the tasks:</p><blockquote><p>那么什么时候执行 <code>then()</code>、<code>catch()</code> 或 <code>finally()</code> 回调？事件循环为任务赋予不同的优先级：</p></blockquote><ol><li>All functions in that are currently in the <strong>call stack</strong> get executed. When they returned a value, they get popped off the stack.</li><li>When the call stack is empty, <em>all</em> queued up <strong>microtasks</strong> are popped onto the callstack one by one, and get executed! (Microtasks themselves can also return new microtasks, effectively creating an infinite microtask loop 😬)</li><li>If both the call stack and microtask queue are empty, the event loop checks if there are tasks left on the (macro)task queue. The tasks get popped onto the callstack, executed, and popped off!</li></ol><blockquote><ul><li>当前在调用堆栈中的所有函数都将执行. 当它们返回一个值时, 它们就会从堆栈中弹出.</li><li>当调用堆栈为空时, 所有排队的微任务都会一一弹出到调用堆栈上, 然后执行！(微任务本身也可以返回新的微任务, 从而有效地创建无限的微任务循环 loop)</li><li>如果调用堆栈和微任务队列都为空, 则事件循环将检查 (宏) 任务队列上是否还有任务. 任务被弹出到调用堆栈上, 执行并弹出！</li></ul></blockquote><hr><p>Let’s take a look at a quick example, simply using:</p><ul><li><code>Task1</code>: a function that’s added to the call stack immediately, for example by invoking it instantly in our code.</li><li><code>Task2</code>, <code>Task3</code>, <code>Task4</code>: microtasks, for example a promise <code>then</code> callback, or a task added with <code>queueMicrotask</code>.</li><li><code>Task5</code>, <code>Task6</code>: a (macro)task, for example a <code>setTimeout</code> or <code>setImmediate</code> callback</li></ul><p><img src="/images/42eatw03fcha0e1qcrf0.gif"></p><p>First, <code>Task1</code> returned a value and got popped off the call stack. Then, the engine checked for tasks queued in the microtask queue. Once all the tasks were put on the call stack and eventually popped off, the engine checked for tasks on the (macro)task queue, which got popped onto the call stack, and popped off when they returned a value.</p><blockquote><p>首先，<code>Task1</code> 返回一个值并从调用堆栈中弹出。然后，引擎检查在微任务队列中排队的任务。一旦所有任务都被放入调用堆栈并最终弹出，引擎就会检查（宏）任务队列中的任务，这些任务被弹出到调用堆栈中，并在它们返回值时弹出。</p></blockquote><p>Okay okay enough pink boxes. Let’s use it with some real code!</p><p><img src="/images/g61wwyi8wchk2hpzeq4u.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Start!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Timeout!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Promise!'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'End!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//> "Start!"</span><span class="token comment">//> "End!"</span><span class="token comment">//> "Promise!"</span><span class="token comment">//> "Timeout!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this code, we have the macro task <code>setTimeout</code>, and the microtask promise <code>then()</code> callback. Once the engine reaches the line of the <code>setTimeout</code> function. Let’s run this code step-by-step, and see what gets logged!</p><blockquote><p>在这段代码中，我们有宏任务 <code>setTimeout</code> 和微任务 promise <code>then()</code> 回调。一旦引擎到达 <code>setTimeout</code> 函数的行。让我们一步一步地运行这段代码，看看记录了什么！</p></blockquote><hr><blockquote><p>Quick FYI - in the following examples I’m showing methods like <code>console.log</code>, <code>setTimeout</code> and <code>Promise.resolve</code> being added to the call stack. They’re internal methods and actually don’t appear in stack traces - so don’t worry if you’re using the debugger and you don’t see them anywhere! It just makes explaining this concept easier without adding a bunch of boilerplate code 🙂</p></blockquote><blockquote><p>快速参考 - 在以下示例中，我将展示诸如 <code>console.log</code>、<code>setTimeout</code> 和 <code>Promise.resolve</code> 之类的方法被添加到调用堆栈中。它们是内部方法，实际上不会出现在堆栈跟踪中 - 所以如果您正在使用调试器并且在任何地方都看不到它们，请不要担心！它只是使解释这个概念更容易，而无需添加一堆样板代码 🙂</p></blockquote><p>On the first line, the engine encounters the <code>console.log()</code> method. It gets added to the call stack, after which it logs the value <code>Start!</code> to the console. The method gets popped off the call stack, and the engine continues.</p><blockquote><p>在第一行，引擎遇到了 <code>console.log()</code> 方法。它被添加到调用堆栈中，之后它会记录值 <code>Start!</code> 到控制台。该方法从调用堆栈中弹出，引擎继续。</p></blockquote><p><img src="/images/6cbjuexvy6z9ltk0bi18.gif"></p><p>The engine encounters the <code>setTimeout</code> method, which gets popped on to the call stack. The <code>setTimeout</code> method is native to the browser: its callback function (<code>() =&gt; console.log(&#39;In timeout&#39;)</code>) will get added to the Web API, until the timer is done. Although we provided the value <code>0</code> for the timer, the call back still gets pushed to the Web API first, after which it gets added to the <strong>(macro)task queue</strong>: <code>setTimeout</code> is a macro task!</p><blockquote><p>引擎遇到 <code>setTimeout</code> 方法，该方法被弹出到调用堆栈中。 <code>setTimeout</code> 方法是浏览器本机的：它的回调函数 <code>(() =&gt; console.log(&#39;In timeout&#39;))</code> 将被添加到 Web API，直到计时器完成。尽管我们为计时器提供了值 <code>0</code>，但回调仍然首先被推送到 Web API，然后它会被添加到（宏）任务队列中：<code>setTimeout </code>是一个宏任务！</p></blockquote><p><img src="/images/yqoemb6f32lvovge8yrp.gif"></p><hr><p>The engine encounters the <code>Promise.resolve()</code> method. The <code>Promise.resolve()</code> method gets added to the call stack, after which is resolves with the value <code>Promise!</code>. Its <code>then</code> callback function gets added to the <strong>microtask queue</strong>.</p><blockquote><p>引擎遇到了 <code>Promise.resolve()</code> 方法。 <code>Promise.resolve()</code> 方法被添加到调用堆栈中，之后使用值 <code>Promise!</code> 解析。它的 <code>then</code> 回调函数被添加到微任务队列中。</p></blockquote><p><img src="/images/6wxjxduh62fqt531e2rc.gif"></p><hr><p>The engine encounters the <code>console.log()</code> method. It gets added to the call stack immediately, after which it logs the value <code>End!</code> to the console, gets popped off the call stack, and the engine continues.</p><blockquote><p>引擎遇到了 <code>console.log()</code> 方法。它会立即添加到调用堆栈中，然后记录值 <code>End！</code> 到控制台，从调用堆栈中弹出，然后引擎继续。</p></blockquote><p><img src="/images/a6jk0exl137yka3oq9k4.gif"></p><p>The engine sees the callstack is empty now. Since the call stack is empty, it’s going to check whether there are queued tasks in the <strong>microtask queue</strong>! And yes there are, the promise <code>then</code> callback is waiting for its turn! It gets popped onto the call stack, after which it logs the resolved value of the promise: the string <code>Promise!</code>in this case.</p><blockquote><p>引擎现在看到调用堆栈是空的。由于调用栈是空的，它会检查微任务队列中是否有排队的任务！是的，承诺<code>then</code> 回调正在等待轮到它！它被弹出到调用堆栈中，之后它会记录承诺的解析值：在这种情况下是字符串 <code>Promise!</code>。</p></blockquote><p><img src="/images/lczn4fca41is4vpicr6w.gif"></p><p>The engine sees the call stack is empty, so it’s going to check the microtask queue once again to see if tasks are queued. Nope, the microtask queue is all empty.</p><blockquote><p>引擎看到调用堆栈是空的，所以它会再次检查微任务队列以查看任务是否在队列中。不，微任务队列全是空的。</p></blockquote><p>It’s time to check the <strong>(macro)task queue</strong>: the <code>setTimeout</code> callback is still waiting there! The <code>setTimeout</code> callback gets popped on to the callstack. The callback function returns the <code>console.log</code> method, which logs the string <del><code>&quot;In timeout!&quot;</code></del> <code>&quot;Timeout!&quot;</code>. The <code>setTimeout</code> callback get popped off the callstack.</p><blockquote><p>是时候检查（宏）任务队列了：<code>setTimeout</code> 回调仍在那里等待！ <code>setTimeout</code> 回调被弹出到调用堆栈。回调函数返回 <code>console.log</code> 方法，该方法记录字符串 <del><code>&quot;In timeout!&quot;</code></del> <code>&quot;Timeout!&quot;</code>。 <code>setTimeout</code> 回调从调用堆栈中弹出。</p></blockquote><p><img src="/images/p54casaaz9oq0g8ztpi5.gif"></p><p>Finally, all done! 🥳 It seems like the output we saw earlier wasn’t so unexpected after all.</p><blockquote><p>最后，一切都完成了！ 🥳 看来我们之前看到的输出毕竟不是那么出人意料。</p></blockquote><hr><h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h2><p>ES7 introduced a new way to add async behavior in JavaScript and make working with promises easier! With the introduction of the <code>async</code> and <code>await</code> keywords, we can create <strong>async</strong> functions which implicitly return a promise. But.. how can we do that? 😮</p><blockquote><p>ES7 引入了一种在 JavaScript 中添加异步行为的新方法，并使使用 Promise 更容易！通过引入 <code>async</code> 和 <code>await</code> 关键字，我们可以创建隐式返回承诺的异步函数。但是..我们怎么能做到这一点？ 😮</p></blockquote><p>Previously, we saw that we can explicitly create promises using the <code>Promise</code> object, whether it was by typing <code>new Promise(() =&gt; &#123;&#125;)</code>, <code>Promise.resolve</code>, or <code>Promise.reject</code>.</p><blockquote><p>之前，我们看到我们可以使用 Promise 对象显式创建 Promise，无论是通过键入 <code>new Promise(() =&gt; &#123;&#125;)</code>、<code>Promise.resolve</code> 还是 <code>Promise.reject</code>。</p></blockquote><p>Instead of explicitly using the <code>Promise</code> object, we can now create asynchronous functions that <em>implicitly</em> return an object! This means that we no longer have to write any <code>Promise</code> object ourselves.</p><blockquote><p>我们现在可以创建隐式返回对象的异步函数，而不是显式使用 Promise 对象！这意味着我们不再需要自己编写任何 Promise 对象。</p></blockquote><p><img src="/images/72lqrcvy9lc8ehbpitd0.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token keyword">async</span> funcion <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Although the fact that <strong>async</strong> functions implicitly return promises is pretty great, the real power of <code>async</code> functions can be seen when using the <code>await</code> keyword! With the <code>await</code> keyword, we can <em>suspend(暂停)</em> the asynchronous function while we wait for the <code>await</code>ed value return a resolved promise. If we want to get the value of this resolved promise, like we previously did with the <code>then()</code> callback, we can assign variables to the <code>await</code>ed promise value!</p><blockquote><p>尽管 async 函数隐式返回 promise 的事实非常好，但是使用 await 关键字时可以看到 async 函数的真正威力！使用 await 关键字，我们可以暂停（暂停）异步函数，同时等待等待的值返回已解决的承诺。如果我们想获得这个已解析的 promise 的值，就像我们之前对 then() 回调所做的那样，我们可以为等待的 promise 值分配变量！</p></blockquote><p>So, we can <em>suspend</em> an async function? Okay great but.. what does that even mean?</p><p>Let’s see what happens when we run the following block of code:</p><p><img src="/images/e5duygomitj9o455107a.gif"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">one</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'One!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'In Function!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Before function!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'After function!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Before function!"</span><span class="token string">"In Function!"</span><span class="token string">"After function!"</span><span class="token string">"One!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hmm.. What’s happening here?</p><hr><p><img src="/images/d27d7xxiekczftjyic4b.gif"></p><p>First, the engine encounters a <code>console.log</code>. It gets popped onto the call stack, after which <code>Before function!</code> gets logged.</p><blockquote><p>首先，引擎遇到一个 <code>console.log</code>。它被弹出到调用堆栈中，之后是 <code>Before function!</code> 被记录。</p></blockquote><hr><p><img src="/images/9wqej2269vmntfcuxs9t.gif"></p><p>Then, we invoke the async function <code>myFunc()</code>, after which the function body of <code>myFunc</code> runs. On the very first line within the function body, we call another <code>console.log</code>, this time with the string <code>In function!</code>. The <code>console.log</code> gets added to the call stack, logs the value, and gets popped off.</p><blockquote><p>然后，我们调用异步函数 <code>myFunc()</code>，然后运行 <code>​​myFunc</code> 的函数体。在函数体的第一行，我们调用另一个 <code>console.log</code>，这次使用字符串 <code>In function!</code>。 <code>console.log</code> 被添加到调用堆栈中，记录值，然后弹出。</p></blockquote><hr><p><img src="/images/lch6lutxnl88j0durpyh.gif"></p><p>The function body keeps on being executed, which gets us to the second line. Finally, we see an <code>await</code> keyword! 🎉</p><blockquote><p>函数体继续执行，这让我们进入第二行。最后，我们看到了一个 await 关键字！ 🎉</p></blockquote><p>The first thing that happens is that the value that gets awaited gets executed: the function <code>one</code> in this case. It gets popped onto the call stack, and eventually returns a resolved promise. Once the promise has resolved and <code>one</code> returned a value, the engine encounters the <code>await</code> keyword.</p><blockquote><p>发生的第一件事是等待的值被执行：在这种情况下是函数 <code>one</code>。它被弹出到调用堆栈中，并最终返回一个已解决的承诺。一旦 promise 得到解决并返回一个值，引擎就会遇到 await 关键字。</p></blockquote><p>When encountering an <code>await</code> keyword, the <code>async</code> function gets <em>suspended</em>. ✋🏼 The execution of the function body <strong>gets paused</strong>, and the rest of the async function gets run in a <em>microtask</em> instead of a regular task!</p><blockquote><p>遇到 <code>await</code> 关键字时，异步函数会暂停。 ✋🏼 函数体的执行被暂停，异步函数的其余部分在微任务而不是常规任务中运行！</p></blockquote><hr><p><img src="/images/b6l3psgewvtrtmrr60tg.gif"></p><p>Now that the async function <code>myFunc</code> is suspended as it encountered the <code>await</code> keyword, the engine jumps out of the async function and continues executing the code in the execution context in which the async function got called: the <strong>global execution context</strong> in this case! 🏃🏽‍♀️</p><blockquote><p>现在异步函数 <code>myFunc</code> 在遇到 await 关键字时被挂起，引擎跳出异步函数并继续在调用异步函数的执行上下文中执行代码：在这种情况下为全局执行上下文！ 🏃🏽‍♀️</p></blockquote><hr><p><img src="/images/hlhrtuspjyrstifubdhs.gif"></p><p>Finally, there are no more tasks to run in the global execution context! The event loop checks to see if there are any microtasks queued up: and there are! The async <code>myFunc</code> function is queued up after resolving the valued of <code>one</code>. <code>myFunc</code> gets popped back onto the call stack, and continues running where it previously left off(中断).</p><blockquote><p>最后，在全局执行上下文中没有更多的任务要运行了！事件循环检查是否有任何微任务排队：确实有！ async myFunc 函数在解析值 1 后排队。 myFunc 被弹回调用堆栈，并在它之前停止的地方继续运行（中断）。</p></blockquote><p>The variable <code>res</code> finally gets its value, namely the value of the resolved promise that <code>one</code> returned! We invoke <code>console.log</code> with the value of <code>res</code>: the string <code>One!</code> in this case. <code>One!</code> gets logged to the console and gets popped off the call stack! 😊</p><blockquote><p>变量 res 终于得到了它的值，即返回的已解决的 promise 的值！我们使用 res 的值调用 console.log：字符串 One！在这种情况下。一！登录到控制台并从调用堆栈中弹出！ 😊</p></blockquote><p>Finally, all done! Did you notice how <code>async</code> functions are different compared to a promise <code>then</code>? The <code>await</code> keyword <em>suspends</em> the <code>async</code> function, whereas the Promise body would’ve kept on being executed if we would’ve used <code>then</code>!</p><blockquote><p>最后，一切都完成了！您是否注意到异步函数与 promise 相比有何不同？ await 关键字暂停了异步函数，而如果我们当时使用的话，Promise 主体将继续执行！</p></blockquote><hr><p>Hm that was quite a lot of information! 🤯 No worries at all if you still feel a bit overwhelmed when working with Promises, I personally feel that it just takes experience to notice patterns and feel confident when working with asynchronous JavaScript.</p><blockquote><p>嗯，这是相当多的信息！ 🤯 如果您在使用 Promises 时仍然感到有点不知所措，请完全不用担心，我个人认为只需要经验来注意模式并在使用异步 JavaScript 时感到自信。</p></blockquote><p>However, I hope that the “unexpected” or “unpredictable” behavior that you might encounter when working with async JavaScript makes a bit more sense now!</p><blockquote><p>但是，我希望您在使用异步 JavaScript 时可能遇到的“意外”或“不可预测”行为现在更有意义了！</p></blockquote><hr><ul><li><a href="https://zh.javascript.info/async">Promise,async/await</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async function</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await">await</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> Promises </tag>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🌳🚀 CS Visualized: Useful Git Commands</title>
      <link href="cs-visualized-useful-git-commands/"/>
      <url>cs-visualized-useful-git-commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1">🌳🚀 CS Visualized: Useful Git Commands</a></p></blockquote><p><img src="/images/rixan4h4z8y94eq89som.png" alt="Cover image for 🌳🚀 CS Visualized: Useful Git Commands"></p><p>Although Git is a very powerful tool, I think most people would agree when I say it can also be… a total nightmare 😐 I’ve always found it very useful to visualize in my head what’s happening when working with Git: how are the branches interacting when I perform a certain command, and how will it affect the history? Why did my coworker cry when I did a hard reset on <code>master</code>, <code>force push</code>ed to origin and <code>rimraf</code>‘d the <code>.git</code> folder?</p><blockquote><p>尽管 Git 是一个非常强力的工具,但如果我说这也可能是一场噩梦 ,我想大多数人也会同意.在使用 Git 的时候,我发现在我的大脑中想象发生了什么是非常有用的:在我执行特定命令的时候,分支之间是如何相互影响的,以及它会如何影响历史日志？当我在 master 分支做了硬重置(hard reset),强制推送(force push)到 master 分支并且 rimraf .git 目录之后,我的同事为什么会哭？</p></blockquote><p>I thought it would be the perfect use case to create some visualized examples of the most common and useful commands! 🥳 Many of the commands I’m covering have optional arguments that you can use in order to change their behavior. In my examples, I’ll cover the default behavior of the commands without adding (too many) config options! 😄</p><blockquote><p>我认为为最常用和最有用的命令创建一些可视化的图例将会成为完美的使用示例！ 我涉及到的许多命令拥有可选的参数,您可以使用这些参数来更改命令的行为.在示例中,我将会涉及没有添加(太多)配置项命令的默认行为！</p></blockquote><h2 id="Merging"><a href="#Merging" class="headerlink" title="Merging"></a>Merging</h2><p>Having multiple branches is extremely convenient to keep new changes separated from each other, and to make sure you don’t accidentally push unapproved or broken changes to production. Once the changes have been approved, we want to get these changes in our production branch!</p><blockquote><p>拥有多个分支是很方便的,这样可以将不同的新修改互相隔离开,而且还能确保你不会意外地向生产代码推送未经许可或破损的代码修改.但一旦这些修改得到了批准许可,我们就需要将其部署到我们的生产分支中！</p></blockquote><p>One way to get the changes from one branch to another is by performing a <code>git merge</code>! There are two types of merges Git can perform: a <strong>fast-forward</strong>, or a <strong>no-fast-forward</strong> 🐢</p><blockquote><p>可将一个分支的修改融入到另一个分支的一种方式是执行 <code>git merge</code> .Git 可执行两种类型的合并:<strong>fast-forward</strong> 和 <strong>no-fast-forward</strong>.</p></blockquote><p>This may not make a lot of sense right now, so let’s look at the differences!</p><blockquote><p>现在你可能分不清,但我们马上就来看看它们的差异所在.</p></blockquote><h3 id="Fast-forward-ff"><a href="#Fast-forward-ff" class="headerlink" title="Fast-forward (--ff)"></a>Fast-forward (<code>--ff</code>)</h3><p>A <strong>fast-forward merge</strong> can happen when the current branch has no extra commits compared to the branch we’re merging. Git is… <em>lazy</em> and will first try to perform the easiest option: the fast-forward! This type of merge doesn’t create a new commit, but rather merges the commit(s) on the branch we’re merging right in the current branch 🥳</p><blockquote><p>在当前分支相比于我们要合并的分支没有额外的提交时,可以执行 <code>fast-forward</code> 合并.Git 很懒,首先会尝试执行最简单的选项:fast-forward！这类合并不会创建新的提交,而是会将我们正在合并的分支上的提交直接合并到当前分支.</p></blockquote><p><img src="/images/894znjv4oo9agqiz4dql.gif"></p><p>Perfect! We now have all the changes that were made on the <code>dev</code> branch available on the <code>master</code> branch. So, what’s the <strong>no-fast-forward</strong> all about?</p><blockquote><p>完美！现在,我们在 <code>dev</code> 分支上所做的所有改变都合并到了 <code>master</code> 分支上.那么 no-fast-forward 又是什么意思呢？</p></blockquote><h3 id="No-fast-foward-no-ff"><a href="#No-fast-foward-no-ff" class="headerlink" title="No-fast-foward (--no-ff)"></a>No-fast-foward (<code>--no-ff</code>)</h3><p>It’s great if your current branch doesn’t have any extra commits compared to the branch that you want to merge, but unfortunately that’s rarely the case! If we committed changes on the current branch that the branch we want to merge doesn’t have, git will perform a <em>no-fast-forward</em> merge.</p><blockquote><p>如果你的当前分支相比于你想要合并的分支没有任何提交,那当然很好,但很遗憾现实情况很少如此！如果我们在当前分支上提交我们想要合并的分支不具备的改变,那么 git 将会执行 <em>no-fast-forward</em> 合并.</p></blockquote><p>With a no-fast-forward merge, Git creates a new <em>merging commit</em> on the active branch. The commit’s parent commits point to both the active branch and the branch that we want to merge!</p><blockquote><p>使用 no-fast-forward 合并时,Git 会在当前活动分支上创建新的 <em>merging commit</em> .这个提交的父提交既指向这个活动分支,也指向我们想要合并的分支！</p></blockquote><p><img src="/images/rf1o2b6eduboqwkigg3w.gif"></p><p>No big deal, a perfect merge! 🎉 The <code>master</code> branch now contains all the changes that we’ve made on the <code>dev</code> branch.</p><blockquote><p>没什么大不了的,完美的合并！现在,<del>我们在 <code>dev</code> 分支上所做的所有改变都合并到了 <code>master</code> 分支上.</del> <code>master</code> 分支包含我们在 <code>dev</code> 分支上所做的所有改变.</p></blockquote><h3 id="Merge-Conflicts"><a href="#Merge-Conflicts" class="headerlink" title="Merge Conflicts"></a>Merge Conflicts</h3><p>Although Git is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself 🙂 This can happen when the two branches we’re trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.</p><blockquote><p>尽管 Git 能够很好地决定如何合并分支以及如何向文件添加修改,但它并不总是能完全自己做决定.当我们想要合并的两个分支的同一文件中的同一行代码上有不同的修改,或者一个分支删除了一个文件而另一个分支修改了这个文件时,Git 就不知道如何取舍了.</p></blockquote><p>In that case, Git will ask you to help decide which of the two options we want to keep! Let’s say that on both branches, we edited the first line in the <code>README.md</code>.</p><blockquote><p>在这样的情况下,Git 会询问你想要保留哪种选择？假设在这两个分支中,我们都编辑了 README.md 的第一行.</p></blockquote><p><img src="/images/m3nxmp67mqof5sa3iik9.png"></p><p>If we want to merge <code>dev</code> into <code>master</code>, this will end up in a merge conflict: would you like the title to be <code>Hello!</code> or <code>Hey!</code>?</p><p>如果我们想把 <code>dev</code> 合并到 <code>master</code>,就会出现一个合并冲突:你想要标题是 <code>Hello!</code> 还是 <code>Hey!</code>？</p><p>When trying to merge the branches, Git will show you where the conflict happens. We can manually remove the changes we don’t want to keep, save the changes, add the changed file again, and commit the changes 🥳</p><blockquote><p>当尝试合并这些分支时,Git 会向你展示冲突出现的位置.我们可以手动移除我们不想保留的修改,保存这些修改,再次添加这个已修改的文件,然后提交这些修改.</p></blockquote><p><img src="/images/bcd5ajtoc0g5dxzmpfbq.gif"></p><p>Yay! Although merge conflicts are often quite annoying, it makes total sense: Git shouldn’t just <em>assume</em> which change we want to keep.</p><blockquote><p>完成！尽管合并冲突往往很让人厌烦,但这是合理的:Git 不应该瞎猜我们想要保留哪些修改.</p></blockquote><hr><h2 id="Rebasing"><a href="#Rebasing" class="headerlink" title="Rebasing"></a>Rebasing</h2><p>We just saw how we could apply changes from one branch to another by performing a <code>git merge</code>. Another way of adding changes from one branch to another is by performing a <code>git rebase</code>.</p><blockquote><p>我们刚看到可通过执行 <code>git merge</code> 将一个分支的修改应用到另一个分支.另一种可将一个分支的修改融入到另一个分支的方式是执行 <code>git rebase</code>.</p></blockquote><p>A <code>git rebase</code> <em>copies</em> the commits from the current branch, and puts these copied commits on top of the specified branch.</p><blockquote><p><code>git rebase</code> 会将当前分支的提交复制到指定的分支之上.</p></blockquote><p><img src="/images/dwyukhq8yj2xliq4i50e.gif"></p><p>Perfect, we now have all the changes that were made on the <code>master</code> branch available on the <code>dev</code> branch! 🎊</p><blockquote><p>完美,现在我们在 <code>dev</code> 分支上获取了 <code>master</code> 分支上的所有修改.</p></blockquote><p>A big difference compared to merging, is that Git won’t try to find out which files to keep and not keep. The branch that we’re rebasing always has the latest changes that we want to keep! You won’t run into any merging conflicts this way, and keeps a nice linear Git history.</p><blockquote><p>变基与合并有一个重大的区别:Git 不会尝试确定要保留或不保留哪些文件.我们执行 rebase 的分支总是含有我们想要保留的最新近的修改！这样我们不会遇到任何合并冲突,而且可以保留一个漂亮的、线性的 Git 历史记录.</p></blockquote><p>This example shows rebasing on the <code>master</code> branch. In bigger projects, however, you usually don’t want to do that. A <code>git rebase</code> <strong>changes the history of the project</strong> as new hashes are created for the copied commits!</p><blockquote><p>上面这个例子展示了在 <code>master</code> 分支上的变基.但是,在更大型的项目中,你通常不需要这样的操作.<code>git rebase</code> 在为复制的提交创建新的 hash 时会修改项目的历史记录.</p></blockquote><p>Rebasing is great whenever you’re working on a feature branch, and the master branch has been updated. You can get all the updates on your branch, which would prevent future merging conflicts! 😄</p><blockquote><p>如果你在开发一个 feature 分支并且 master 分支已经更新过,那么变基就很好用.你可以在你的分支上获取所有更新,这能防止未来出现合并冲突.</p></blockquote><h3 id="Interactive-Rebase"><a href="#Interactive-Rebase" class="headerlink" title="Interactive Rebase"></a>Interactive Rebase</h3><p>Before rebasing the commits, we can modify them! 😃 We can do so with an <em>interactive rebase</em>. An interactive rebase can also be useful on the branch you’re currently working on, and want to modify some commits.</p><blockquote><p>在为提交执行变基之前,我们可以修改它们！我们可以使用 <em>交互式变基</em> 来完成这一任务.交互式变基在你当前开发的分支上以及想要修改某些提交时会很有用.</p></blockquote><p>There are 6 actions we can perform on the commits we’re rebasing:</p><blockquote><p>在我们正在 rebase 的提交上,我们可以执行以下 6 个动作:</p></blockquote><ul><li><code>reword</code>: Change the commit message(<code>reword</code>:修改提交信息;)</li><li><code>edit</code>: Amend this commit(<code>edit</code>:修改此提交;)</li><li><code>squash</code>: Meld commit into the previous commit(<code>squash</code>:将提交融合到前一个提交中;)</li><li><code>fixup</code>: Meld commit into the previous commit, without keeping the commit’s log message(<code>fixup</code>:将提交融合到前一个提交中,不保留该提交的日志消息;)</li><li><code>exec</code>: Run a command on each commit we want to rebase(<code>exec</code>:在每个提交上运行我们想要 rebase 的命令;)</li><li><code>drop</code>: Remove the commit(<code>drop</code>:移除该提交.)</li></ul><p>Awesome! This way, we can have full control over our commits. If we want to remove a commit, we can just <code>drop</code> it.</p><blockquote><p>很棒！这样我们就能完全控制我们的提交了.如果你想要移除一个提交,只需 <code>drop</code> 即可.</p></blockquote><p><img src="/images/msofpv7k6rcmpaaefscm.gif"></p><p>Or if we want to squash multiple commits together to get a cleaner history, no problem!</p><blockquote><p>如果你想把多个提交融合到一起以便得到清晰的提交历史,那也没有问题！</p></blockquote><p><img src="/images/bc1r460xx1i0blu0lnnm.gif"></p><p>Interactive rebasing gives you a lot of control over the commits you’re trying to rebase, even on the current active branch!</p><blockquote><p>交互式变基能为你在 rebase 时提供大量控制,甚至可以控制当前的活动分支.</p></blockquote><hr><h2 id="Resetting"><a href="#Resetting" class="headerlink" title="Resetting"></a>Resetting</h2><p>It can happen that we committed changes that we didn’t want later on. Maybe it’s a <code>WIP</code> commit, or maybe a commit that introduced bugs! 🐛 In that case, we can perform a <code>git reset</code>.</p><blockquote><p>当我们不想要之前提交的修改时,就会用到这个命令.也许这是一个 <code>WIP</code> 提交或者可能是引入了 bug 的提交,这时候就要执行 <code>git reset</code>.</p></blockquote><p>A <code>git reset</code> gets rid of all the current staged files and gives us control over where <code>HEAD</code> should point to.</p><blockquote><p><code>git reset</code> 能让我们不再使用当前已暂存的文件,让我们可以控制 <code>HEAD</code> 应该指向的位置.</p></blockquote><h3 id="Soft-reset"><a href="#Soft-reset" class="headerlink" title="Soft reset"></a>Soft reset</h3><p>A <em>soft reset</em> moves <code>HEAD</code> to the specified commit (or the index of the commit compared to <code>HEAD</code>), without getting rid of the changes that were introduced on the commits afterward!</p><blockquote><p><em>软重置</em> 会将 <code>HEAD</code> 移至指定的提交(或与 <code>HEAD</code> 相比的提交的索引),而不会移除该提交之后加入的修改！</p></blockquote><p>Let’s say that we don’t want to keep the commit <code>9e78i</code> which added a <code>style.css</code> file, and we also don’t want to keep the commit <code>035cc</code> which added an <code>index.js</code> file. However, we do want to keep the newly added <code>style.css</code> and <code>index.js</code> file! A perfect use case for a soft reset.</p><blockquote><p>假设我们不想保留添加了一个 <code>style.css</code> 文件的提交 <code>9e78i</code>,而且我们也不想保留添加了一个 <code>index.js</code> 文件的提交 <code>035cc</code>.但是,我们确实又想要保留新添加的 <code>style.css</code> 和 <code>index.js</code> 文件！这是软重置的一个完美用例.</p></blockquote><p><img src="/images/je5240aqa5uw9d8j3ibb.gif"></p><p>When typing <code>git status</code>, you’ll see that we still have access to all the changes that were made on the previous commits. This is great, as this means that we can fix the contents of these files and commit them again later on!</p><blockquote><p>输入 <code>git status</code> 后,你会看到我们仍然可以访问在之前的提交上做过的所有修改.这很好,这意味着我们可以修复这些文件的内容,之后再重新提交它们！</p></blockquote><h3 id="Hard-reset"><a href="#Hard-reset" class="headerlink" title="Hard reset"></a>Hard reset</h3><p>Sometimes, we don’t want to keep the changes that were introduced by certain commits. Unlike a soft reset, we shouldn’t need to have access to them any more. Git should simply reset its state back to where it was on the specified commit: this even includes the changes in your working directory and staged files! 💣</p><blockquote><p>有时候我们并不想保留某些提交引入的修改.不同于软重置,我们应该再也无需访问它们.Git 应该直接将整体状态直接重置到特定提交之前的状态:这甚至包括你在工作目录中和已暂存文件上的修改.</p></blockquote><p><img src="/images/hlh0kowt3hov1xhcku38.gif"></p><p>Git has discarded the changes that were introduced on <code>9e78i</code> and <code>035cc</code>, and reset its state to where it was on commit <code>ec5be</code>.</p><blockquote><p>Git 丢弃了 <code>9e78i</code> 和 <code>035cc</code> 引入的修改,并将状态重置到了 <code>ec5be</code> 的状态.</p></blockquote><hr><h2 id="Reverting"><a href="#Reverting" class="headerlink" title="Reverting"></a>Reverting</h2><p>Another way of undoing changes is by performing a <code>git revert</code>. By reverting a certain commit, we create a <em>new commit</em> that contains the reverted changes!</p><blockquote><p>另一种撤销修改的方法是执行 <code>git revert</code>.通过对特定的提交执行还原操作,我们会创建一个包含已还原修改的 <em>新提交</em>.</p></blockquote><p>Let’s say that <code>ec5be</code> added an <code>index.js</code> file. Later on, we actually realize we didn’t want this change introduced by this commit anymore! Let’s revert the <code>ec5be</code> commit.</p><blockquote><p>假设 <code>ec5be</code> 添加了一个 <code>index.js</code> 文件.但之后我们发现其实我们再也不需要由这个提交引入的修改了.那就还原 <code>ec5be</code> 提交吧！</p></blockquote><p><img src="/images/3kkd2ahn41zixs12xgpf.gif"></p><p>Perfect! Commit <code>9e78i</code> reverted the changes that were introduced by the <code>ec5be</code> commit. Performing a <code>git revert</code> is very useful in order to undo a certain commit, without modifying the history of the branch.</p><blockquote><p>完美！提交 <code>9e78i</code> 还原了由提交 <code>ec5be</code> 引入的修改.在撤销特定的提交时,<code>git revert</code> 非常有用,同时也不会修改分支的历史.</p></blockquote><hr><h2 id="Cherry-picking"><a href="#Cherry-picking" class="headerlink" title="Cherry-picking"></a>Cherry-picking</h2><p>When a certain branch contains a commit that introduced changes we need on our active branch, we can <code>cherry-pick</code> that command! By <code>cherry-pick</code>ing a commit, we create a new commit on our active branch that contains the changes that were introduced by the <code>cherry-pick</code>ed commit.</p><blockquote><p>当一个特定分支包含我们的活动分支需要的某个提交时,我们对那个提交执行 <code>cherry-pick</code>！对一个提交执行 <code>cherry-pick</code> 时,我们会在活动分支上创建一个新的提交,其中包含由<code>拣选</code>出来的提交所引入的修改.</p></blockquote><p>Say that commit <code>76d12</code> on the <code>dev</code> branch added a change to the <code>index.js</code> file that we want in our <code>master</code> branch. We don’t want the <em>entire</em> we just care about this one single commit!</p><blockquote><p>假设 dev 分支上的提交 <code>76d12</code> 为 <code>index.js</code> 文件添加了一项修改,而我们希望将其整合到 <code>master</code> 分支中.我们并不想要整个 <code>dev</code> 分支,而只需要这个提交！</p></blockquote><p><img src="/images/2dkjx4yeaal10xyvj29v.gif"></p><p>Cool, the master branch now contains the changes that <code>76d12</code> introduced!</p><blockquote><p>现在 master 分支包含 <code>76d12</code> 引入的修改了.</p></blockquote><hr><h2 id="Fetching"><a href="#Fetching" class="headerlink" title="Fetching"></a>Fetching</h2><p>If we have a remote Git branch, for example a branch on Github, it can happen that the remote branch has commits that the current branch doesn’t have! Maybe another branch got merged, your colleague pushed a quick fix, and so on.</p><blockquote><p>如果你有一个远程 Git 分支,比如在 GitHub 上的分支,当远程分支上包含当前分支没有的提交时,可以使用取回.比如当合并了另一个分支或你的同事推送了一个快速修复时.</p></blockquote><p>We can get these changes locally, by performing a <code>git fetch</code> on the remote branch! It doesn’t affect your local branch in any way: a <code>fetch</code> simply downloads new data.</p><blockquote><p>通过在这个远程分支上执行 <code>git fetch</code>,我们就可在本地获取这些修改.这不会以任何方式影响你的本地分支: <code>fetch</code> 只是单纯地下载新的数据而已.</p></blockquote><p><img src="/images/bulx1voegfji4vwgndh4.gif"></p><p>We can now see all the changes that have been made since we last pushed! We can decide what we want to do with the new data now that we have it locally.</p><blockquote><p>现在我们可以看到自上次推送以来的所有修改了.这些新数据也已经在本地了,我们可以决定用这些新数据做什么了.</p></blockquote><hr><h2 id="Pulling"><a href="#Pulling" class="headerlink" title="Pulling"></a>Pulling</h2><p>Although a <code>git fetch</code> is very useful in order to get the remote information of a branch, we can also perform a <code>git pull</code>. A <code>git pull</code> is actually two commands in one: a <code>git fetch</code>, and a <code>git merge</code>. When we’re pulling changes from the origin, we’re first fetching all the data like we did with a <code>git fetch</code>, after which the latest changes are automatically merged into the local branch.</p><blockquote><p>尽管 <code>git fetch</code> 可用于获取某个分支的远程信息,但我们也可以执行 <code>git pull</code>.<code>git pull</code> 实际上是两个命令合成了一个:<code>git fetch</code> 和<code>git merge</code>.当我们从来源拉取修改时,我们首先是像 <code>git fetch</code> 那样取回所有数据,然后最新的修改会自动合并到本地分支中.</p></blockquote><p><img src="/images/zifpnl1h6a4tk4qdc9sy.gif"></p><p>Awesome, we’re now perfectly in sync with the remote branch and have all the latest changes! 🤩</p><blockquote><p>很好,我们现在与远程分支完美同步了,并且也有了所有最新的修改！</p></blockquote><hr><h2 id="Reflog"><a href="#Reflog" class="headerlink" title="Reflog"></a>Reflog</h2><p>Everyone makes mistakes, and that’s totally okay! Sometimes it may feel like you’ve screwed up your git repo so badly that you just want to delete it entirely.</p><blockquote><p>每个人都会犯错,但犯错其实没啥！有时候你可能感觉你把 git repo 完全搞坏了,让你想完全删了了事.</p></blockquote><p><code>git reflog</code> is a very useful command in order to show a log of all the actions that have been taken! This includes merges, resets, reverts: basically any alteration to your branch.</p><blockquote><p><code>git reflog</code> 是一个非常有用的命令,可以展示已经执行过的所有动作的日志.包括合并、重置、还原,基本上包含你对你的分支所做的任何修改.</p></blockquote><p><img src="/images/1aqek1py1knwl926ele7.gif"></p><p>If you made a mistake, you can easily redo this by resetting <code>HEAD</code> based on the information that <code>reflog</code> gives us!</p><blockquote><p>如果你犯了错,你可以根据 <code>reflog</code> 提供的信息通过重置 <code>HEAD</code> 来轻松地重做！</p></blockquote><p>Say that we actually didn’t want to merge the origin branch. When we execute the <code>git reflog</code> command, we see that the state of the repo before the merge is at <code>HEAD@&#123;1&#125;</code>. Let’s perform a <code>git reset</code> to point HEAD back to where it was on <code>HEAD@&#123;1&#125;</code>!</p><blockquote><p>假设我们实际上并不需要合并原有分支.当我们执行 <code>git reflog</code> 命令时,我们可以看到这个 repo 的状态在合并前位于 <code>HEAD@&#123;1&#125;</code>.那我们就执行一次 <code>git reset</code>,将 HEAD 重新指向在 <code>HEAD@&#123;1&#125;</code> 的位置.</p></blockquote><p><img src="/images/9z9rhtbw7mrigp0miijz.gif"></p><p>We can see that the latest action has been pushed to the <code>reflog</code>!</p><blockquote><p>我们可以看到最新的动作已被推送给 <code>reflog</code>.</p></blockquote><hr><p>Git has so many useful porcelain and plumbing commands, I wish I could cover them all! 😄 I know there are many other commands or alterations that I didn’t have time for to cover right now - let me know what your favorite/most useful commands are, and I may cover them in another post!</p><p>And as always, feel free to reach out to me! 😊</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 💡🎁 JavaScript Visualized: Generators and Iterators</title>
      <link href="javascript-visualized-generators-and-iterators/"/>
      <url>javascript-visualized-generators-and-iterators/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-generators-and-iterators-e36">6 💡🎁 JavaScript Visualized: Generators and Iterators</a></p></blockquote><p><img src="https://thepracticaldev.s3.amazonaws.com/i/6pba7yczwddtemu0cla2.jpeg" alt="Cover image for 💡🎁 JavaScript Visualized: Generators and Iterators"></p><p>ES6 introduced something cool called <strong>generator functions</strong> 🎉 Whenever I ask people about generator functions, the responses are basically: “I’ve seem them once, got confused, never looked at it again”, “oh gosh no I’ve read so many blog posts about generator functions and I still don’t get them”, “I get them but why would anyone ever use that” 🤔 Or maybe that’s just the conversations I’ve been having with myself because that’s how I used to think for a long time! But they’re actually quite cool.</p><p>So, what are <strong>generator functions</strong>? Let’s first just look at a regular, old-fashioned function 👵🏼</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/2ta7m1vxju6j1dzg7t7c.png"></p><p>Yep absolutely nothing special about this! It’s just a normal function that logs a value 4 times. Let’s invoke it!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/unsiscmakhlgxl4dcji7.gif" alt="Alt Text"></p><p>“But Lydia why did you just waste 5 seconds of my life by making me look at this normal boring function”, a very good question. Normal functions follow something called a <strong>run-to-completion</strong> model: when we invoke a function, it will always run until it completes (well, unless there’s an error somewhere). We can’t just randomly <em>pause</em> a function somewhere in the middle whenever we want to.</p><p>Now here comes the cool part: generator functions don’t follow the <strong>run-to-completion</strong> model! 🤯 Does this mean that we can randomly pause a generator function in the middle of executing it? Well, sort of! Let’s take a look at what generator functions are and how we can use them.</p><p>We create a generator function by writing an asterisk <code>*</code> after the <code>function</code> keyword.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/7j9pxfpvmecip71ldjwg.png"></p><p>But that’s not all we have to do to use generator functions! Generator functions actually work in a completely different way compared to regular functions:</p><ul><li>Invoking a generator function returns a <strong>generator object</strong>, which is an iterator.</li><li>We can use the <code>yield</code> keyword in a generator function to “pause” the execution.</li></ul><p>But what does that even mean!?</p><p>Let’s first go over the first one: _Invoking a generator function returns a <strong>generator object</strong>_. When we invoke a regular function, the function body gets executed and eventually returns a value. However when we invoke a generator function, a <strong>generator object</strong> gets returned! Let’s see what that looks like when we log the returned value.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/lyuivuuepy1hzpok8rc5.gif"><br>Now, I can hear you screaming internally (or externally 🙃) because this can look a little overwhelming. But don’t worry, we don’t really have to use any of the properties you see logged here. So what’s the generator object good for then?</p><p>First we need to take a small step back, and answer the second difference between regular functions and generator functions: <em>We can use the <code>yield</code> keyword in a generator function to “pause” the execution</em>.</p><p>With generator functions, we can write something like this (<code>genFunc</code> is short for <code>generatorFunction</code>):<br><img src="https://thepracticaldev.s3.amazonaws.com/i/1qo0upq0meh6gj2gs08o.png"><br>What’s that <code>yield</code> keyword doing there? The execution of the generator gets “paused” when it encounters a <code>yield</code> keyword. And the best thing is that the next time we run the function, it remembered where it previously paused, and runs from there on! 😃 Basically what’s happening here (don’t worry this will be animated later on):</p><ol><li> The first time it runs, it “pauses” on the first line and <em>yields</em> the string value <code>&#39;✨&#39;</code></li><li> The second time it runs, it starts on the line of the previous <code>yield</code> keyword. It then runs all the way down till the second <code>yield</code> keyword and <em>yields</em> the value <code>&#39;💕&#39;</code>.</li><li> The third time it runs, it start on the line of the previous yield keyword. It runs all the way down until it encounters the <code>return</code> keyword, and <em>returns</em> the value <code>&#39;Done!&#39;</code>.</li></ol><p>But… how can we invoke the function if we previously saw that invoking the generator function returned a generator object? 🤔 This is where the generator object comes into play!</p><p>The generator object contains a <code>next</code> method (on the prototype chain). This method is what we’ll use to iterate the generator object. However, in order to remember the state of where it previously left off after yielding a value, we need to assign the generator object to a variable. I’ll call it <code>genObj</code> short for <code>generatorObject</code>.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/y54clkzwbc9oemzgybh5.gif"></p><p>Yep, the same scary looking object as we saw before. Let’s see what happens when we invoke the <code>next</code> method on the <code>genObj</code> generator object!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/ryzc9gpzw4x5f0eqhzad.gif"></p><p>The generator ran until it encountered the first <code>yield</code> keyword, which happened to be on the first line! It <em>yielded</em> an object containing a <code>value</code> property, and a <code>done</code> property.</p><p><code>&#123; value: ... , done: ... &#125;</code></p><p>The <code>value</code> property is equal to the value that we yielded.<br>The <code>done</code> property is a boolean value, which is only set to <code>true</code> once the generator function <strong>returned</strong> a value (not yielded! 😊).</p><p>We stopped iterating over the generator, which makes it look like the function just paused! How cool is that. Let’s invoke the <code>next</code> method again! 😃</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/e7hz87c6xtd31qjx19va.gif"></p><p>First, we logged the string <code>First log!</code> to the console. This is neither a <code>yield</code> nor <code>return</code> keyword, so it continues! Then, it encountered a <code>yield</code> keyword with the value <code>&#39;💕&#39;</code>. An object gets <em>yielded</em> with the <code>value</code> property of <code>&#39;💕&#39;</code> and a <code>done</code> property. The value of the <code>done</code> property is <code>false</code>, since we haven’t <em>returned</em> from the generator yet.</p><p>We’re almost there! Let’s invoke <code>next</code> for the last time.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/33epxsx8znmhm0qojsuu.gif" alt="Alt Text"></p><p>We logged the string <code>Second log!</code> to the console. Then, it encountered a <code>return</code> keyword with the value <code>&#39;Done!&#39;</code>. An object gets returned with the <code>value</code> property of <code>&#39;Done!&#39;</code>. We actually <em>returned</em> this time, so the value of <code>done</code> is set to <code>true</code>!</p><p>The <code>done</code> property is actually very important. <strong>We can only iterate a generator object <em>once</em>.</strong> What?! So what happens when we call the <code>next</code> method again?</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/wooo83by4eh12akmg5wb.gif" alt="Alt Text"></p><p>It simply returns <code>undefined</code> forever. In case you want to iterate it again, you just have to create a new generator object!</p><hr><p>As we just saw, a generator function returns an iterator (the generator object). But.. wait an <em>iterator</em>? Does that mean we can use <code>for of</code> loops, and the spread operator on the returned object? Yas! 🤩</p><p>Let’s try to spread the yielded values in an array, using the <code>[... ]</code> syntax.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/xgk99j592vbx3qirw5or.gif" alt="Alt Text"></p><p>Or maybe by using a <code>for of</code> loop?!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/98k242jz3bqorkjhukwl.gif" alt="Alt Text"></p><p>Heck so many possibilities!</p><p>But what makes an iterator an iterator? Because we can also use <code>for-of</code> loops and the spread syntax with arrays, strings, maps, and sets. It’s actually because they implement the <em>iterator protocol</em>: the <code>[Symbol.iterator]</code>. Say that we have the following values (with very descriptive names lol 💁🏼‍♀️):<br><img src="https://thepracticaldev.s3.amazonaws.com/i/hs2sf1oj537c56yaej1h.png"></p><p>The <code>array</code>, <code>string</code>, and <code>generatorObject</code> are all iterators! Let’s take a look at the value of their <code>[Symbol.iterator]</code> property.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/a7inxsrvrp8ykg3xw6zu.gif" alt="Alt Text"></p><p>But then what’s the value of the <code>[Symbol.iterator]</code> on the values that aren’t iterable?</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/tpuzuy58g8m7grxvqw8x.gif" alt="Alt Text"></p><p>Yeah, it’s just not there. So.. Can we simply just add the <code>[Symbol.iterator]</code> property manually, and make non-iterables iterable? Yes, we can! 😃</p><p><code>[Symbol.iterator]</code> has to return an iterator, containing a <code>next</code> method which returns an object just like we saw before: <code>&#123; value: &#39;...&#39;, done: false/true &#125;</code>.</p><p>To keep it simple (as lazy me likes to do) we can simply set the value of <code>[Symbol.iterator]</code> equal to a generator function, as this returns an iterator by default. Let’s make the object an iterable, and the yielded value the entire object:<br><img src="https://thepracticaldev.s3.amazonaws.com/i/oysyy7v71o2q9q9mrcsx.png"></p><p>See what happens when we use the spread syntax or a for-of loop on our <code>object</code> object now!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/pw2qq1tkfbp8zccuecac.gif" alt="Alt Text"></p><p>Or maybe we only wanted to get the object keys. “Oh well that’s easy, we just yield <code>Object.keys(this)</code> instead of <code>this</code>“!<br><img src="https://thepracticaldev.s3.amazonaws.com/i/ankit4dn67unnwzfkv9y.png"></p><p>Hmm let’s try that.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/75kf40lqcqrudzqgkeb7.gif" alt="Alt Text"></p><p>Oh shoot. <code>Object.keys(this)</code> is an array, so the value that got yielded is an array. Then we spread this yielded array into another array, resulting in a nested array. We didn’t want this, we just wanted to yield each individual key!</p><p>Good news! 🥳 We can yield individual values from iterators within a generator using the <code>yield*</code> keyword, so the <code>yield</code> with an asterisk! Say that we have a generator function that first yield an avocado, then we want to yield the values of another iterator (an array in this case) individually. We can do so with the <code>yield*</code> keyword. We then <em>delegate</em> to another generator!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/jtyn5s5o3vdhjkbwwyb0.gif" alt="Alt Text"></p><p>Each value of the delegated generator gets yielded, before it continued iterating the <code>genObj</code> iterator.</p><p>This is exactly what we need to do in order to get all object keys individually!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/btr4ytbb04c44qfs96v2.gif" alt="Alt Text"></p><hr><p>Another use of generator functions, is that we can (sort of) use them as observer functions. A generator can wait for incoming data, and only if that data is passed, it will process it. An example:<br><img src="https://thepracticaldev.s3.amazonaws.com/i/fts36exs5chxacikjeo3.png"></p><p>A big difference here is that we don’t just have <code>yield [value]</code> like we saw in the previous examples. Instead, we assign a value called <code>second</code>, and yield value the string <code>First!</code>. This is the value that will get yielded the first time we call the <code>next</code> method.</p><p>Let’s see what happens when we call the <code>next</code> method for the first time on the iterable.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/ob5a4yi79it9q2ben137.gif" alt="Alt Text"></p><p>It encountered the <code>yield</code> on the first line, and yielded the value <code>First!</code>. So, what’s the value of the variable <code>second</code>?</p><p>That’s actually the value that we pass to the <code>next</code> method the <em>next time we call it</em>! This time, let’s pass the string <code>&#39;I like JavaScript&#39;</code>.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/l1840pp2k9h9bgpt1geo.gif" alt="Alt Text"></p><p>It’s important to see here that the first invocation of the <code>next</code> method doesn’t keep track of any input yet. We simply start the observer by invoking it the first time. The generator waits for our input, before it continues, and possibly processes the value that we pass to the <code>next</code> method.</p><hr><p>So why would you ever want to use generator functions?</p><p>One of the biggest advantages of generators is the fact that they are <strong>lazily evaluated</strong>. This means that the value that gets returned after invoking the <code>next</code> method, is only computed after we specifically asked for it! Normal functions don’t have this: all the values are generated for you in case you need to use it some time in the future.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/7b24mkp7io3gmnn8pzwa.gif" alt="Alt Text"></p><p>There are several other use cases, but I usually like to do it to have way more control when I’m iterating large datasets!</p><p>Imagine we have a list of book clubs! 📚 To keep this example short and not one huge block of code, each book club just has one member. A member is currently reading several books, which is represented in the <code>books</code> array!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/8opapd1iddlgj1ljixje.png"></p><p>Now, we’re looking for a book with the id <code>ey812</code>. In order to find that, we could potentially just use a nested for-loop or a <code>forEach</code> helper, but that means that we’d still be iterating through the data even after finding the team member we were looking for!</p><p>The awesome thing about generators, is that it doesn’t keep on running unless we tell it to. This means that we can evaluate each returned item, and if it’s the item we’re looking for, we simply don’t call <code>next</code>! Let’s see what that would look like.</p><p>First, let’s create a generator that iterates through the <code>books</code> array of each team member. We’ll pass the team member’s <code>book</code> array to the function, iterate through the array, and yield each book!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/vokf28crwuvbmksd57m5.png"></p><p>Perfect! Now we have to make a generator that iterates through the <code>clubMembers</code> array. We don’t really care about the club member itself, we just need to iterate through their books. In the <code>iterateMembers</code> generator, let’s delegate the <code>iterateBooks</code> iterator in order to just yield their books!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/fy8mxxjj0uvs6rarm6mi.png"></p><p>Almost there! The last step is to iterate through the bookclubs. Just like in the previous example, we don’t really care about the bookclubs themselves, we just care about the club members (and especially their books). Let’s delegate the <code>iterateClubMembers</code> iterator and pass the <code>clubMembers</code> array to it.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/x1lor0omqw9t5k2kq4iv.png"></p><p>In order to iterate through all this, we need to get the generator object iterable by passing the <code>bookClub</code> array to the <code>iterateBookClubs</code> generator. I’ll just call the generator object <code>it</code> for now, for iterator.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/omg23omwi8a1d7nn1it3.png"></p><p>Let’s invoke the <code>next</code> method, until we get a book with the id <code>ey812</code>.</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/72ghm4ev6el3no9esk1l.gif" alt="Alt Text"></p><p>Nice! We didn’t have to iterate through all the data in order to get the book we were looking for. Instead, we just looked for the data on demand! of course, calling the <code>next</code> method manually each time isn’t very efficient… So let’s make a function instead!</p><p>Let’s pass an <code>id</code> to the function, which is the id of the book we’re looking for. If the <code>value.id</code> is the id we’re looking for, then simply return the entire <code>value</code> (the book object). Else, if it’s not the correct <code>id</code>, invoke <code>next</code> again!</p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/hxyeemfr3q8pqqotk51j.png"></p><p><img src="https://thepracticaldev.s3.amazonaws.com/i/x1zh0ygt5yfq5vb2f5at.gif" alt="Alt Text"></p><p>Of course this was a tiny tiny data set. But just imagine that we have tons and tons of data, or maybe an incoming stream that we need to parse in order to just find one value. Normally, we’d have to wait for the entire dataset to be ready, in order to begin parsing. With generator functions, we can simply require small chunks of data, check that data, and the values are only generated when we invoke the <code>next</code> method!</p><hr><p>Don’t worry if you’re still all “what the heck is happening” mindset, generator functions are quite confusing until you’ve used them yourself and had some solid use cases for it! I hoped some terms are a bit clearer now, and as always: if you have any questions, feel free to reach out! 😃</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> Generators </tag>
            
            <tag> Iterators </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 Vue.js Best Practices for Pro Developers</title>
      <link href="12-vuejs-best-practices-for-pro-developers/"/>
      <url>12-vuejs-best-practices-for-pro-developers/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://medium.com/better-programming/12-vuejs-best-practices-for-pro-developers-28d1f629018c">12 Vue.js Best Practices for Pro Developers | by Matt Maribojoc | Better Programming | Medium</a></p></blockquote><p><a href="https://learnvue.co/2019/12/what-you-need-to-know-about-vue3-in-2020/">As VueJS continues to become more and more widespread</a>, there are several best practices emerging and becoming standard.</p><p>For this piece, I included some tips from a few great resources.</p><p>Hopefully, these best practices can help you write better Vue.js code. Not only will that make all your fellow developers love you, but you’ll definitely thank yourself down the line for making your life easier.</p><p>OK, enough introduction. Let’s dive right in.</p><hr><h2 id="1-Always-Use-key-Inside-v-for"><a href="#1-Always-Use-key-Inside-v-for" class="headerlink" title="1. Always Use :key Inside v-for"></a>1. Always Use :key Inside v-for</h2><p>Using the key attribute with the <code>v-for</code> <a href="https://learnvue.co/2020/01/creating-your-first-vuejs-custom-directive/">directive</a> helps your application be constant and predictable whenever you want to manipulate the data.</p><p>This is necessary so Vue can track your component state as well as have a constant reference to your different elements. An example where keys are extremely useful is when using animations or <a href="https://learnvue.co/2020/01/how-you-can-use-vue-transitions-right-now">Vue transitions</a>.</p><p>Without keys, Vue will just try to make the DOM as efficient as possible. This may mean elements in the <code>v-for</code> may appear out of order, or their behavior will be less predictable. If we have a unique key reference to each element, then we can better predict how exactly our Vue application will handle DOM manipulation.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- BAD --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product in products<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- GOOD! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product in products<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-Use-Kebab-Case-for-Events"><a href="#2-Use-Kebab-Case-for-Events" class="headerlink" title="2. Use Kebab Case for Events"></a>2. Use Kebab Case for Events</h2><p>When it comes to emitting custom events, it’s always best to use kebab case. This is because in the parent component, that’s the same syntax we use to listen to that event.</p><p>So for consistency across our components, and to make your code more readable, stick to using kebab case in both places.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'close-window'</span><span class="token punctuation">)</span><span class="token comment">// then in the parent</span><span class="token operator">&lt;</span>popup<span class="token operator">-</span>window @close<span class="token operator">-</span>window<span class="token operator">=</span><span class="token string">'handleEvent()'</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-Declare-Props-With-camelCase-and-Use-Kebab-Case-in-Templates"><a href="#3-Declare-Props-With-camelCase-and-Use-Kebab-Case-in-Templates" class="headerlink" title="3. Declare Props With camelCase, and Use Kebab Case in Templates"></a>3. Declare Props With camelCase, and Use Kebab Case in Templates</h2><p>This best practice simply just follows the conventions for each language. In JavaScript, camelCase is the standard, and in HTML, it’s kebab case. Therefore, we use them accordingly.</p><p>Luckily, Vue.js converts between kebab case and camelCase for us so we don’t have to worry about anything besides actually declaring them.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- BAD!   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PopupWindow</span> <span class="token attr-name">titleText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>props: &#123; 'title-text': String &#125;<span class="token comment">&lt;!-- GOOD!   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PopupWindow</span> <span class="token attr-name">title-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>props: &#123; titleText: String &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-Don’t-Use-v-if-With-v-for-Elements"><a href="#5-Don’t-Use-v-if-With-v-for-Elements" class="headerlink" title="5. Don’t Use v-if With v-for Elements"></a>5. Don’t Use v-if With v-for Elements</h2><p>It’s super tempting to want to use <code>v-if</code> with <code>v-for</code> in order to filter elements of an array.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- BAD! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product in products<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product.price &lt; 500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The problem with this is that Vue.js prioritizes the <code>v-for</code> directive over the <code>v-if</code> directive. So under the hood, it loops through every element and <em>then</em> checks the <code>v-if</code> conditional.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> product<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This means that even if we only want to render a few elements from a list, we’ll have to loop through the entire array.</p><p>This is no good.</p><p>A smarter solution would be to iterate over a <a href="https://learnvue.co/2019/12/mastering-computed-properties-in-vuejs/">computed property</a>. The above example would look something like this.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product in cheapProducts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">cheapProducts</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> product<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is good for a few reasons.</p><ul><li>Rendering is much more efficient because we don’t loop over every item</li><li>The filtered list will only be reevaluated when a dependency changes</li><li>It helps separate our component logic from the template, making our component more readable</li></ul><hr><h2 id="6-Validate-Your-Props-With-Good-Definitions"><a href="#6-Validate-Your-Props-With-Good-Definitions" class="headerlink" title="6. Validate Your Props With Good Definitions"></a>6. Validate Your Props With Good Definitions</h2><p>This is arguably the most important best practice to follow.</p><p>Why is it important?</p><p>Well, it basically saves future you from current you. When designing a large-scale project, it’s easy to forget the exact format, type, and other conventions you used for a prop.</p><p>And if you’re in a larger dev team, your coworkers aren’t mind readers, so make it clear to them how to use your components.</p><p>So save everyone the hassle of having to painstakingly trace your component to determine a prop’s formatting, and please just write prop validations.</p><p>Check out this example from the Vue docs.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  status<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string">'syncing'</span><span class="token punctuation">,</span>        <span class="token string">'synced'</span><span class="token punctuation">,</span>        <span class="token string">'version-conflict'</span><span class="token punctuation">,</span>        <span class="token string">'error'</span>      <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-Use-PascalCase-or-Kebab-Case-for-Components"><a href="#7-Use-PascalCase-or-Kebab-Case-for-Components" class="headerlink" title="7. Use PascalCase or Kebab Case for Components"></a>7. Use PascalCase or Kebab Case for Components</h2><p>A common naming convention for components is to use PascalCase or kebab case. No matter which one you choose for your project, it’s most important that you stay consistent all the time.</p><p>PascalCase works best, in my opinion, because it is supported by most IDE autocomplete features.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># BAD</span>mycomponent.vuemyComponent.vueMycomponent.vue<span class="token comment"># GOOD</span>MyComponent.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="8-Base-Components-Should-Be-Prefixed-Accordingly"><a href="#8-Base-Components-Should-Be-Prefixed-Accordingly" class="headerlink" title="8. Base Components Should Be Prefixed Accordingly"></a>8. Base Components Should Be Prefixed Accordingly</h2><p>Another naming convention is focused around naming base components — or components that are purely presentational and help set up common styles across your app.</p><p>According to the Vue style guide, <em>base components</em> are components that only contain:</p><ul><li>HTML elements</li><li>Additional base components</li><li>Third-party UI components</li></ul><p>The best practice for naming these components is to give them the prefix <code>Base</code>, <code>V</code>, or <code>App</code>. Once again, it’s all right to use either of these as long as you stay consistent throughout your project.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BaseButton.vueBaseIcon.vueBaseHeading.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The purpose of this naming convention is it keeps your base components alphabetically grouped in your file system. Also, by using a webpack import function, you can search for components matching your naming-convention pattern and automatically import all of them as globals in your Vue project.</p><hr><h2 id="9-Components-Declared-and-Used-Once-Should-Have-the-Prefix-“The”"><a href="#9-Components-Declared-and-Used-Once-Should-Have-the-Prefix-“The”" class="headerlink" title="9. Components Declared and Used Once Should Have the Prefix “The”"></a>9. Components Declared and Used Once Should Have the Prefix “The”</h2><p>Similar to base components, <em>single-instance components</em> (used once per page and not accepting any props) have their own naming convention.</p><p>These components are specific to your app and are normally things like a header, sidebar, or footer.</p><p>There should only ever be one active instance of this component.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TheHeader.vueTheFooter.vueTheSidebar.vueThePopup.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="10-Stay-Consistent-With-Your-Directive-Shorthand"><a href="#10-Stay-Consistent-With-Your-Directive-Shorthand" class="headerlink" title="10. Stay Consistent With Your Directive Shorthand"></a>10. Stay Consistent With Your Directive Shorthand</h2><p>A common technique among Vue developers is to use shorthand for directives. For example:</p><ul><li><code>@</code> is short for <code>v-on</code></li><li><code>:</code> is short for <code>v-bind</code></li><li><code>#</code> is short for <code>[v-slot](https://learnvue.co/2019/12/using-component-slots-in-vuejs%e2%80%8a-%e2%80%8aan-overview/)</code></li></ul><p>It’s great to use these shorthands in your Vue project. But to create some sort of convention across your project, you should either always use them or <strong>never</strong> use them. This will make your project more cohesive and readable.</p><hr><h2 id="11-Don’t-Call-a-Method-on-“created”-and-“watch”"><a href="#11-Don’t-Call-a-Method-on-“created”-and-“watch”" class="headerlink" title="11. Don’t Call a Method on “created” and “watch”"></a>11. Don’t Call a Method on “created” and “watch”</h2><p>A common mistake Vue developers make (or maybe it was just me) is they unnecessarily call a method in <code>created</code> and <code>watch</code>. The thought behind this is we want to run the <code>watch</code> hook as soon as a component is initialized.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// BAD!</span>created<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// stuff happens</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">watch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">property</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>However, Vue has a built-in solution for this. It’s a property of <a href="https://learnvue.co/2019/12/a-simple-vue-watcher-tutorial-for-beginners/">Vue watchers</a> that we often forget.</p><p>All we have to do is restructure our watcher a little bit and declare two properties:</p><ol><li> <code>handler (newVal, oldVal)</code> — this is our watcher method itself.</li><li> <code>immediate: true</code> — this makes our handler run when our instance is created.</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// GOOD!</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// stuff happens</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">watch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  property <span class="token punctuation">&#123;</span>    immediate<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="12-Template-Expressions-Should-Only-Have-Basic-JavaScript-Expressions"><a href="#12-Template-Expressions-Should-Only-Have-Basic-JavaScript-Expressions" class="headerlink" title="12. Template Expressions Should Only Have Basic JavaScript Expressions"></a>12. Template Expressions Should Only Have Basic JavaScript Expressions</h2><p>It’s natural to want to add as much inline functionality into your templates as possible. But this makes our template less declarative and more complex. Meaning our template just gets extremely cluttered.</p><p>For this, let’s check out another example of normalizing a string from the Vue style guide. Look how confusing it is.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// BAD!</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#123;</span>    fullName      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Basically, we want everything in our template to be intuitive as to what it’s displaying. To keep this, we should refactor complex expressions into appropriately named component options.</p><p>Another benefit of separating out complex expressions is it means these values can be reused.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// GOOD!</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> normalizedFullName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// The complex expression has been moved to a computed property</span>computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">normalizedFullName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>And there you have it.</p><p>Those were 12 of the most common best practices that’ll make your Vue code more maintainable, readable, and more professional.</p><p>Hopefully these tips were useful to you (because they’re definitely things that I always want to remember).</p><p>If you want to jump-start your Vue.js development, I’ve put together a <a href="https://learnvue.co/newsletter">VueJS cheatsheet</a> that I use all the time. It has the essential information I got tired of looking up, so I compiled it into a tidy little three-page PDF.</p><hr><!-- 10-tips-to-write-better-vue.md -->]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 🎉👨‍👩‍👧‍👧 JavaScript Visualized: Prototypal Inheritance</title>
      <link href="javascript-visualized-prototypal-inheritance/"/>
      <url>javascript-visualized-prototypal-inheritance/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-prototypal-inheritance-47co">5 🎉👨‍👩‍👧‍👧 JavaScript Visualized: Prototypal Inheritance</a></p></blockquote><p><img src="/images/yjxz6x93jaxk4wgmpnw5.png" alt="Cover image for 🎉👨‍👩‍👧‍👧 JavaScript Visualized: Prototypal Inheritance"></p><p>Ever wondered why we can use built-in methods such as <code>.length</code>, <code>.split()</code>, <code>.join()</code> on our strings, arrays, or objects? We never explicitly specified them, where do they come from? Now don’t say”It’s JavaScript lol no one knows, it’s magic 🧚🏻‍♂️”, it’s actually because of something called <em>prototypal inheritance</em>. It’s pretty awesome, and you use it more often than you realize!</p><blockquote><p>有没有想过为什么我们可以在字符串,数组或对象上使用诸如 <code>.length</code>, <code>.split()</code>, <code>.join()</code> 之类的内置方法？我们从未明确指定它们,它们来自何处？现在不要说 “这是 JavaScript 没有人知道,这是神奇的 🧚🏻‍♂️”,这实际上是由于所谓的 <em>原型继承</em>.它非常棒,而且您使用它的次数比您想像的要多！</p></blockquote><p>We often have to create many objects of the same type. Say we have a website where people can browse dogs!</p><p>For every dog, we need object that represents that dog! 🐕 Instead of writing a new object each time, I’ll use a constructor function (I know what you’re thinking, I’ll cover ES6 classes later on!) from which we can create Dog <strong>instances</strong> using the <code>new</code> keyword (this post isn’t really about explaining constructor functions though, so I won’t talk too much about that).</p><blockquote><p>我们经常必须创建许多相同类型的对象.假设我们有一个网站,人们可以浏览狗！ 对于每只狗,我们都需要代表那只狗的物体！ 🐕 不用每次都编写一个新对象,我将使用构造函数(我知道您在想什么,稍后将介绍 ES6 类！),我们可以使用 <code>new</code> 关键字从中创建 Dog ** 实例 **(本文并不是真正要解释构造函数,因此,我不会对此进行过多讨论.)</p></blockquote><p>Every dog has a name, a breed, a color, and a function to bark!</p><blockquote><p>每只狗都有名字,品种,颜色和吠叫功能！</p></blockquote><p><img src="/images/caurw7uuk62htpldgtln.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'Woof!'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When we created the <code>Dog</code> constructor function, it wasn’t the only object we created. Automatically, we also created another object, called the <em>prototype</em>! By default, this object contains a <em>constructor</em> property, which is simply a reference to the original constructor function, <code>Dog</code> in this case.</p><blockquote><p>当我们创建 <code>Dog</code> 构造函数时,它并不是我们创建的唯一对象.自动地,我们还创建了另一个对象,称为 _原型_！默认情况下,此对象包含一个 <em>构造函数</em> 属性,该属性只是对原始构造函数(在这种情况下为 <code>Dog</code>)的引用.</p></blockquote><p><img src="/images/9howj4i3zvlgun3svppp.gif"></p><p>The <code>prototype</code> property on the Dog constructor function is non-enumerable, meaning that it doesn’t show up when we try to access the objects properties. But it’s still there!</p><p>Okay so.. Why do we have this <em>property</em> object? First, let’s create some dogs that we want to show. To keep it simple, I’ll call them <code>dog1</code> and <code>dog2</code>. <code>dog1</code> is Daisy, a cute black Labrador! <code>dog2</code> is Jack, the fearless white Jack Russell 😎</p><blockquote><p>Dog 构造函数上的 <code>prototype</code> 属性是不可枚举的,这意味着当我们尝试访问对象属性时,该属性不会显示.但它仍然在那里！ 好吧.. 为什么会有这个 <em>property</em> 对象？首先,让我们创建一些要展示的狗.为简单起见,我将它们分别称为 <code>dog1</code> 和 <code>dog2</code>. <code>dog1</code> 是黛西,一个可爱的黑色拉布拉多犬！ <code>dog2</code> 是杰克,无所畏惧的白色杰克罗素㹴 😎</p></blockquote><p><img src="/images/lyajz4lade30ci2koirq.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Daisy'</span><span class="token punctuation">,</span> <span class="token string">'Labrador'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Jack Russell'</span><span class="token punctuation">,</span> <span class="token string">' white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Let’s log <code>dog1</code> to the console, and expand its properties!</p><blockquote><p>让我们将 <code>dog1</code> 输出到控制台,并展开其属性！</p></blockquote><p><img src="/images/tt4yfoz8ckmxfofv3f9v.gif"></p><p>We see the properties we added, like <code>name</code>, <code>breed</code>, <code>color</code>, and <code>bark</code>.. but woah what is that <code>__proto__</code> property! It’s non-enumerable, meaning that it usually doesn’t show up when we try to get the properties on the object. Let’s expand it! 😃</p><blockquote><p>我们看到了我们添加的属性,例如 <code>name</code>,<code>breed</code>,<code>color</code> 和 <code>bark</code>.. 但是,哇,<code>__proto__</code> 属性是什么！它是不可枚举的,这意味着当我们尝试获取对象的属性时,通常不会显示它.让我们展开它！ 😃</p></blockquote><p><img src="/images/dye57pcku5cfaz0er60c.gif"></p><p>Woah it looks exactly like the <code>Dog.prototype</code> object! Well guess what, <code>__proto__</code> is a reference to the <code>Dog.prototype</code> object. This is what <strong>prototypal inheritance</strong> is all about: each instance of the constructor has access to the prototype of the constructor! 🤯</p><blockquote><p>哇,看起来就像 <code>Dog.prototype</code> 对象一样！好吧,猜猜 <code>__proto__</code> 是对 <code>Dog.prototype</code> 对象的引用.这就是<strong>原型继承</strong>的全部内容:构造函数的每个实例都可以访问构造函数的原型！ 🤯</p></blockquote><p><img src="/images/t6kiav029gl2e0hv1xct.gif"></p><p>So why is this cool? Sometimes we have properties that all instances share. For example the <code>bark</code> function in this case: it’s the exact same for every instance, why create a new function each time we create a new dog, consuming memory each time? Instead, we can add it to the <code>Dog.prototype</code> object! 🥳</p><blockquote><p>那么为什么这很酷？有时我们拥有所有实例共享的属性.例如,在这种情况下,<code>bark</code> 函数:每个实例都完全相同,为什么每次创建新狗时都创建一个新函数,却每次都要消耗内存？相反,我们可以将其添加到 <code>Dog.prototype</code> 对象中！ 🥳</p></blockquote><p><img src="/images/59nlnyqioosaowj09xn8.gif"></p><p>Whenever we try to access a property on the instance, the engine first searches locally to see if the property is defined on the object itself. However, if it can’t find the property we’re trying to access, the engine <strong>walks down the prototype chain</strong> through the <code>__proto__</code> property!</p><blockquote><p>每当我们尝试访问实例上的属性时,引擎都会首先在本地搜索以查看该属性是否在对象本身上定义.但是,如果找不到我们要访问的属性,则引擎擎通过 <code>__proto__</code> 属性沿着原型链走下去！</p></blockquote><p><img src="/images/fabyyjot1s78mttyzzk8.gif"></p><p>Now this is just one step, but it can contain several steps! If you followed along, you may have noticed that I didn’t include one property when I expanded the <code>__proto__</code> object showing <code>Dog.prototype</code>. <code>Dog.prototype</code> itself is an object, meaning that it’s actually an instance of the <code>Object</code> constructor! That means that <code>Dog.prototype</code> also contains a <code>__proto__</code> property, which is a reference to <code>Object.prototype</code>!</p><blockquote><p>现在这只是一个步骤,但可以包含多个步骤！如果您照做的话,您可能会注意到,当我展开显示 <code>Dog.prototype</code> 的 <code>__proto__</code> 对象时,我没有包含一个属性. <code>Dog.prototype</code> 本身是一个对象,这意味着它实际上是 <code>Object</code> 构造函数的一个实例！这意味着 <code>Dog.prototype</code> 还包含 <code>__proto__</code> 属性,该属性是对 <code>Object.prototype</code> 的引用！</p></blockquote><p><img src="/images/8vk5w6loliot818f2lcd.gif"></p><p>Finally, we have an answer to where all the built-in methods come from: they’re on the prototype chain! 😃</p><p>For example the <code>.toString()</code> method. Is it defined locally on the <code>dog1</code> object? Hmm no.. Is it defined on the object <code>dog1.__proto__</code> has a reference to, namely <code>Dog.prototype</code>? Also no! Is it defined on the object <code>Dog.prototype.__proto__</code> has a reference to, namely <code>Object.prototype</code>? Yes! 🙌🏼</p><blockquote><p>最后,我们对所有内置方法的来源都有一个解析:它们位于原型链上！ 😃 例如 <code>.toString()</code> 方法.它是在 <code>dog1</code> 对象上本地定义的吗？嗯.是否在对象 <code>dog1.__ proto__</code> 上定义了它的引用,即 <code>Dog.prototype</code>？也没有！它是否在对象 <code>Dog.prototype.__ proto__</code> 所引用的对象 <code>Object.prototype</code> 上定义？是的！ 🙌🏼</p></blockquote><p><img src="/images/fpt5nndkbq5kau0nqeqj.gif"></p><p>Now, we’ve just been using constructor functions (<code>function Dog() &#123; ... &#125;</code>), which is still valid JavaScript. However, ES6 actually introduced an easier syntax for constructor functions and working with prototypes: classes!</p><blockquote><p>现在,我们一直在使用构造函数 (<code>function Dog() &#123; ... &#125;</code>),该函数仍然是有效的 JavaScript.但是,ES6 实际上为构造函数和原型使用了一种更简单的语法:类！</p></blockquote><blockquote><p>Classes are only <strong>syntactical sugar</strong> for constructor functions. Everything still works the same way!</p></blockquote><p>We write classes with the <code>class</code> keyword. A class has a <code>constructor</code> function, which is basically the constructor function we wrote in the ES5 syntax! The properties that we want to add to the prototype, are defined on the classes body itself.</p><blockquote><p>我们使用 <code>class</code> 关键字编写类.一个类具有构造函数,基本上就是我们用 ES5 语法编写的构造函数！我们要添加到原型的属性是在类主体本身上定义的.</p></blockquote><p><img src="/images/qnbqubcipqjl5pb3i8ds.gif"></p><p>Another great thing about classes, is that we can easily <strong>extend</strong> other classes.</p><p>Say that we want to show several dogs of the same breed, namely Chihuahuas! A chihuahua is (somehow… 😐) still a dog. To keep this example simple, I’ll only pass the <code>name</code> property to the Dog class for now instead of <code>name</code>, <code>breed</code> and <code>color</code>. But these chihuahuas can also do something special, they have a small bark. Instead of saying <code>Woof!</code>, a chihuahua can also say <code>Small woof!</code> 🐕</p><p>In an extended class, we can access the parent class’constructor using the <code>super</code> keyword. The arguments the parent class’ constructor expects, we have to pass to <code>super</code>: <code>name</code> in this case.</p><blockquote><p>关于类的另一个好处是,我们可以轻松扩展其他类. 假设我们要展示几只相同品种的狗,即奇瓦瓦狗！奇瓦瓦狗(某种程度上……)仍然是一只狗.为了使这个示例简单,我现在仅将 <code>name</code> 属性传递给 Dog 类,而不是 <code>name</code>,<code>breed</code> 和 <code>color</code>.但是这些吉娃娃也可以做一些特别的事情,它们的树皮很小.吉娃娃还可以说 “小汪汪”,而不是说 <code>Small woof!</code> 🐕 在扩展类中,我们可以使用 <code>super</code> 关键字访问父类的构造函数.父类的构造函数期望的参数,在这种情况下,我们必须传递给 <code>super</code>:<code>name</code>.</p></blockquote><p><img src="/images/tx25dar3duqo0z2bpfam.png"></p><p><code>myPet</code> has access to both the <code>Chihuahua.prototype</code> and <code>Dog.prototype</code> (and automatically <code>Object.prototype</code>, since <code>Dog.prototype</code> is an object).</p><blockquote><p><code>myPet</code> 可以访问 <code>Chihuahua.prototype</code> 和 <code>Dog.prototype</code>(并自动访问 <code>Object.prototype</code>,因为 <code>Dog.prototype</code> 是对象).</p></blockquote><p><img src="/images/qija16dju8t5j1ksy0ps.gif"></p><p>Since <code>Chihuahua.prototype</code> has the <code>smallBark</code> function, and <code>Dog.prototype</code> has the <code>bark</code> function, we can access both <code>smallBark</code> and <code>bark</code> on <code>myPet</code>!</p><p>Now as you can imagine, the prototype chain doesn’t go on forever. Eventually there’s an object which prototype is equal to <code>null</code>: the <code>Object.prototype</code> object in this case! If we try to access a property that’s nowhere to be found locally or on the prototype chain, <code>undefined</code> gets returned.</p><blockquote><p>由于 <code>Chihuahua.prototype</code> 具有 <code>smallBark</code> 功能,而 <code>Dog.prototype</code> 具有 <code>bark</code> 功能,因此我们可以在 <code>myPet</code> 上访问 <code>smallBark</code> 和树皮！ 现在,您可以想象,原型链不会永远持续下去.最终有一个原型等于 <code>null</code> 的对象:在这种情况下为 <code>Object.prototype</code> 对象！如果我们尝试访问在本地或原型链上找不到的属性,则会返回 <code>undefined</code>.</p></blockquote><p><img src="/images/1905zxijp45soy0jzle2.gif"></p><hr><p>Although I explained everything with constructor functions and classes here, another way to add prototypes to objects is with the <code>Object.create</code> method. With this method, we create a new object, and can specify exactly what the prototype of that object should be! 💪🏼</p><p>We do this, by passing an <em>existing object</em> as argument to the <code>Object.create</code> method. That object is the prototype of the object we create!</p><blockquote><p>尽管我在这里用构造函数和类解释了所有内容,但是将原型添加到对象的另一种方法是使用 <code>Object.create</code> 方法.使用此方法,我们可以创建一个新对象,并可以精确指定该对象的原型！ 💪🏼 为此,我们将现有对象作为参数传递给 <code>Object.create</code> 方法.该对象是我们创建的对象的原型！</p></blockquote><p><img src="/images/kbwwsn1fd4gngd05tm9a.png"></p><p>Let’s log the <code>me</code> object we just created.</p><p><img src="/images/6zzt8zpy85gtitxmpwi9.gif"></p><p>We didn’t add any properties to the <code>me</code> object, it simply only contains the non-enumerable <code>__proto__</code> property! The <code>__proto__</code> property holds a reference to the object we defined as the prototype: the <code>person</code> object, which has a <code>name</code> and an <code>age</code> property. Since the <code>person</code> object is an object, the value of the <code>__proto__</code> property on the <code>person</code> object is <code>Object.prototype</code> (but to make it a bit easier to read, I didn’t expand that property in the gif!)</p><blockquote><p>我们没有向 <code>me</code> 对象添加任何属性,它仅包含不可枚举的 <code>__proto__</code> 属性！ <code>__proto__</code> 属性持有对我们定义为原型的对象的引用:<code>person</code> 对象,它具有 <code>name</code> 和 <code>age</code> 属性.由于 <code>person</code> 对象是一个对象,因此 <code>person</code> 对象上 <code>__proto__</code> 属性的值是 <code>Object.prototype</code>(但为了使其更易于阅读,我没有在 gif 中扩展该属性！)</p></blockquote><hr><p>Hopefully, you now understand why prototypal inheritance is such an important feature in the wonderful world of JavaScript! If you have questions, feel free to reach out to me! 😊</p><blockquote><p>希望您现在了解为什么原型继承在 JavaScript 的奇妙世界中如此重要！如果您有任何疑问,请随时与我联系！ 😊</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Inheritance </tag>
            
            <tag> Visualized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4️ 🚀⚙️ JavaScript Visualized: the JavaScript Engine</title>
      <link href="javascript-visualized-the-javascript-engine/"/>
      <url>javascript-visualized-the-javascript-engine/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf">4️ 🚀⚙️ JavaScript Visualized: the JavaScript Engine</a></p></blockquote><p><img src="/images/q0vxo5pcm6qjo14k0ami.png" alt="Cover image for 🚀⚙️ JavaScript Visualized: the JavaScript Engine"></p><p>JavaScript is cool (don’t @ me), but how can a machine actually understand the code you’ve written? As JavaScript devs, we usually don’t have to deal with compilers ourselves. However, it’s definitely good to know <em>the basics</em> of the JavaScript engine and see how it handles our human-friendly JS code, and turns it into something machines understand! 🥳</p><blockquote><p>JavaScript 很酷（不要@我），但是机器如何真正理解您编写的代码？作为 JavaScript 开发人员，我们通常不必自己处理编译器。但是，了解 JavaScript 引擎的基础知识并了解它如何处理我们对人类友好的 JS 代码并将其变成机器可以理解的东西绝对是件好事！ 🥳</p></blockquote><p><strong>Note:</strong> This post is mainly based on the V8 engine used by Node.js and Chromium-based browsers.</p><hr><p>The HTML parser encounters a <code>script</code> tag with a source. Code from this source gets loaded from either the <strong>network</strong>, <strong>cache</strong>, or an installed <strong>service worker</strong>. The response is the requested script as a <strong>stream of bytes</strong>, which the byte stream decoder takes care of! The <strong>byte stream decoder</strong> decodes the stream of bytes as it’s being downloaded.</p><blockquote><p>HTML 解析器遇到带有源的脚本标记。来自此源的代码从网络、缓存或已安装的 Service Worker 加载。响应是作为字节流的请求脚本，字节流解码器负责处理！字节流解码器在下载字节流时对其进行解码。</p></blockquote><p><img src="/images/pv4y4w0doztvmp8ei0ki.gif" alt="Alt Text"></p><hr><p>The byte stream decoder creates <strong>tokens</strong> from the decoded stream of bytes. For example, <code>0066</code> decodes to <code>f</code>, <code>0075</code> to <code>u</code>, <code>006e</code> to <code>n</code>, <code>0063</code> to <code>c</code>, <code>0074</code> to <code>t</code>, <code>0069</code> to <code>i</code>, <code>006f</code> to <code>o</code>, and <code>006e</code> to <code>n</code> followed by a white space. Seems like you wrote <code>function</code>! This is a reserved keyword in JavaScript, a token gets created, and sent to the parser (and <em>pre-parser</em>, which I didn’t cover in the gifs but will explain later). The same happens for the rest of the byte stream.</p><blockquote><p>字节流解码器从解码的字节流中创建令牌。例如，0066 解码为 f，0075 解码为 u，006e 解码为 n，0063 解码为 c，0074 解码为 t，0069 解码为 i，006f 解码为 o，006e 解码为 n，后跟一个空格。好像你写的函数！这是 JavaScript 中的保留关键字，创建了一个令牌，并将其发送到解析器（和预解析器，我没有在 gif 中介绍，但稍后会解释）。字节流的其余部分也是如此。</p></blockquote><p><img src="/images/bic727jhzu0i8uep8v0k.gif" alt="Alt Text"></p><hr><p>The engine uses two parsers: the <strong>pre-parser</strong>, and the <strong>parser</strong>. In order to reduce the time it takes to load up a website, the engine tries to avoid parsing code that’s not necessary right away. The preparser handles code that may be used later on, while the parser handles the code that’s needed immediately! If a certain function will only get invoked after a user clicks a button, it’s not necessary that this code is compiled immediately just to load up a website. If the user eventually ends up clicking the button and requiring that piece of code, it gets sent to the parser.</p><blockquote><p>引擎使用两个解析器：预解析器和解析器。为了减少加载网站所需的时间，引擎会尝试避免立即解析不需要的代码。预解析器处理稍后可能使用的代码，而解析器处理立即需要的代码！如果某个函数仅在用户单击按钮后才会被调用，则不必为了加载网站而立即编译此代码。如果用户最终点击按钮并需要那段代码，它就会被发送到解析器。</p></blockquote><p>The parser creates nodes based on the tokens it receives from the byte stream decoder. With these nodes, it creates an Abstract Syntax Tree, or AST. 🌳</p><p><img src="/images/sgr7ih6t7zm2ek28rtg6.gif" alt="Alt Text"></p><hr><p>Next, it’s time for the <strong>interpreter</strong>! The interpreter which walks through the AST, and generates <strong>byte code</strong> based on the information that the AST contains. Once the byte code has been generated fully, the AST is deleted, clearing up memory space. Finally, we have something that a machine can work with! 🎉</p><p><img src="/images/i5f0vmcjnkhireehicyn.gif" alt="Alt Text"></p><hr><p>Although byte code is fast, it can be faster. As this bytecode runs, information is being generated. It can detect whether certain behavior happens often, and the types of the data that’s been used. Maybe you’ve been invoking a function dozens of times: it’s time to optimize this so it’ll run even faster! 🏃🏽‍♀️</p><p>The byte code, together with the generated type feedback, is sent to an <strong>optimizing compiler</strong>. The optimizing compiler takes the byte code and type feedback, and generates highly optimized machine code from these. 🚀</p><p><img src="/images/ongt4qftovd82sp2vihk.gif" alt="Alt Text"></p><hr><p>JavaScript is a dynamically typed language, meaning that the types of data can change constantly. It would be extremely slow if the JavaScript engine had to check each time which data type a certain value has.</p><p>In order to reduce the time it takes to interpret the code, optimized machine code only handles the cases the engine has seen before while running the bytecode. If we repeatedly used a certain piece of code that returned the <em>same</em> data type over and over, the optimized machine code can simply be re-used in order to speed things up. However, since JavaScript is dynamically typed, it can happen that the same piece of code suddenly returns a different type of data. If that happens, the machine code gets de-optimized, and the engine falls back to interpreting the generated byte code.</p><p>Say a certain function is invoked a 100 times and has always returned the same value so far. It will <em>assume</em> that it will also return this value the 101st time you invoke it.</p><p>Let’s say that we have the following function sum, that’s (so far) always been called with numerical values as arguments each time:</p><p><img src="/images/dhiaau4lo3n457yqud4o.png"></p><p>This returns the number <code>3</code>! The next time we invoke it, it will assume that we’re invoking it again with two numerical values.</p><p>If that’s true, no dynamic lookup is required, and it can just re-use the optimized machine code. Else, if the assumption was incorrect, it will revert back to the original byte code instead of the optimized machine code.</p><p>For example, the next time we invoke it, we pass a string instead of a number. Since JavaScript is dynamically typed, we can do this without any errors!</p><p><img src="/images/zugnjsg813urbj6vr4iy.png"></p><p>This means that the number <code>2</code> will get coerced into a string, and the function will return the string <code>&quot;12&quot;</code> instead. It goes back to executing the interpreted bytecode and updates the type feedback.</p><hr><p>I hope this post was useful to you! 😊 Of course, there are many parts to the engine that I haven’t covered in this post (JS heap, call stack, etc.) which I might cover later! I definitely encourage you to start to doing some research yourself if you’re interested in the internals of JavaScript, V8 is open source and has some great documentation on how it works under the hood! 🤖</p><p><a href="https://v8.dev/">V8 Docs</a> || <a href="https://github.com/v8/v8">V8 Github</a> || <a href="https://www.youtube.com/watch?v=voDhHPNMEzg&t=729s%3Cbr%3E%0A">Chrome University 2018: Life Of A Script</a></p><p>FAQ: I use Keynote to make the animations and screen record it lol. Feel free to translate this blog to your language, and thanks so much for doing so! Just keep a reference to the original article and let me know if you’ve translated it please! 😊</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> JavaScript Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1️ ✨♻️ JavaScript Visualized : Event Loop</title>
      <link href="javascript-visualized-event-loop/"/>
      <url>javascript-visualized-event-loop/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif">1️ ✨♻️ JavaScript Visualized: Event Loop</a></p></blockquote><p><img src="/images/ek7ji4zrimozpp2yzk0a.png" alt="Cover image for  ✨♻️ JavaScript Visualized: Event Loop"></p><h2 id="JavaScript-是单线程的语言"><a href="#JavaScript-是单线程的语言" class="headerlink" title="JavaScript 是单线程的语言"></a>JavaScript 是单线程的语言</h2><p>事件循环 <code>Event Loop</code>，这是目前浏览器和 <code>NodeJS</code> 处理 <code>JavaScript</code> 代码的一种机制，而这种机制存在的背后，就有因为 <code>JavaScript</code> 是一门 <strong>单线程</strong> 的语言。</p><p>单线程和多线程最简单的区别就是：单线程同一个时间只能做一件事情，而多线程同一个时间能做多件事情。</p><p>而 <code>JavaScript</code> 之所谓设计为单线程语言，主要是因为它作为浏览器脚本语言，主要的用途就是与用户互动，操作 <code>DOM</code> 节点。</p><p>而在这个情景设定下，假设 <code>JavaScript</code> 同时有两个进程，一个是操作 A 节点，一个是删除 A 节点，这时候浏览器就不知道要以哪个线程为准了。</p><p>因此为了避免这类型的问题，<code>JavaScript</code> 从一开始就属于单线程语言。</p><h3 id="调用栈-Call-Stack"><a href="#调用栈-Call-Stack" class="headerlink" title="调用栈 Call Stack"></a>调用栈 Call Stack</h3><p>在 <code>JavaScript</code> 运行的时候，主线程会形成一个栈，这个栈主要是解释器用来最终函数执行流的一种机制。通常这个栈被称为调用栈 <code>Call Stack</code>，或者执行栈（<code>Execution Context Stack</code>）。</p><p>调用栈，顾名思义是具有 LIFO（后进先出，Last in First Out）的结构。调用栈内存放的是代码执行期间的所有执行上下文。</p><ul><li>每调用一个函数，解释器就会把该函数的执行上下文添加到调用栈并开始执行；</li><li>正在调用栈中执行的函数，如果还调用了其他函数，那么新函数也会被添加到调用栈，并立即执行；</li><li>当前函数执行完毕后，解释器会将其执行上下文清除调用栈，继续执行剩余执行上下文中的剩余代码；</li><li>但分配的调用栈空间被占满，会引发” 堆栈溢出 “的报错。</li></ul><p>现在用个小案例来演示一下调用栈。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 输出结果：c a b */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行这段代码的时候，首先调用的是函数 <code>c()</code>。因此 <code>function c()&#123;&#125;</code> 的执行上下文就会被放入调用栈中。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/536eeb3dad9b407a8a7368d6b44fc341~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_1.gif"></p><p>然后开始执行函数 <code>c</code>，执行的第一个语句是 <code>console.log(&#39;c&#39;)</code>。</p><p>因此解释器也会将其放入调用栈中。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ba9a90a86764cd2bd89ea5d4fbf1267~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_2.gif"></p><p>当 <code>console.log(&#39;c&#39;)</code> 方法执行完后，控制台打印了 <code>&#39;c&#39;</code>，调用栈就会将其移除。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87d57cfc86d145269c5ddd448c2e94d4~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_3.gif"></p><p>接着就是执行 <code>a()</code> 函数。</p><p>解释器就将 <code>function a() &#123;&#125;</code> 的执行上下文放入调用栈中。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91d45a91e7754d94a2773f80057f37fe~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_4.gif"></p><p>紧接着就执行 <code>a()</code> 中的语句——<code>console.log(&#39;a&#39;)</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dac105f219444da0bd053edd2a85b2b6~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_5.gif"></p><p>当函数 <code>a</code> 执行结束后，调用栈就将执行上下文移除。</p><p>然后接着执行 <code>c()</code> 函数剩下的语句，也就是执行 <code>b()</code> 函数，因此它的执行上下文就加入调用栈中。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c4801b80d914722aa808b116b53a888~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_6.gif"></p><p>紧接着就执行 <code>b()</code> 中的语句——<code>console.log(&#39;b&#39;)</code>。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13c11b0b95aa42c5a9ef94edc5008358~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_7.gif"></p><p><code>b()</code> 执行完后，调用栈就将其移出。</p><p>这时 <code>c()</code> 也执行结束了，调用栈也将其移出栈。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d529cd9b0a3435681763466f634c8e1~tplv-k3u1fbpfcp-watermark.awebp" alt="call_stack_8.gif"></p><p>这时候，我们这段语句就执行结束了。</p><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>上面的案例简单的介绍了关于 <code>JavaScript</code> 单线程的执行方式。</p><p>但这其中会存在一些问题，就是如果当一个语句也需要执行很长时间的话，比如请求数据、定时器、读取文件等等，后面的语句就得一直等着前面的语句执行结束后才会开始执行。</p><p>显而易见，这是不可取的。</p><h3 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h3><p>因此，<code>JavaScript</code> 将所有执行任务分为了同步任务和异步任务。</p><p>其实我们每个任务都是在做两件事情，就是 <strong>发起调用</strong> 和 <strong>得到结果</strong>。</p><p>而同步任务和异步任务最主要的差别就是，同步任务发起调用后，很快就可以得到结果，而异步任务是无法立即得到结果，比如请求接口，每个接口都会有一定的响应时间，根据网速、服务器等等因素决定，再比如定时器，它需要固定时间后才会返回结果。</p><p>因此，对于同步任务和异步任务的执行机制也不同。</p><p>同步任务的执行，其实就是跟前面那个案例一样，按照代码顺序和调用顺序，支持进入调用栈中并执行，执行结束后就移除调用栈。</p><p>而异步任务的执行，首先它依旧会进入调用栈中，然后发起调用，然后解释器会将其 <strong>响应回调任务</strong> 放入一个 <strong>任务队列</strong>，紧接着调用栈会将这个任务移除。当主线程清空后，即所有同步任务结束后，解释器会读取任务队列，并依次将 <strong>已完成的异步任务</strong> 加入调用栈中并执行。</p><p>这里有个重点，就是异步任务不是直接进入任务队列的。</p><p>这里举一个简单的例子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/todos/1'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很显然，<code>fetch()</code> 就是一个异步任务。</p><p>但执行到 <code>console.log(2)</code> 之前，其实 <code>fetch()</code> 已经被调用且发起请求了，但是还未响应数据。而响应数据和处理数据的函数 <code>then()</code> 此时已经在 <strong>任务队列</strong> 中，等候 <code>console.log(2)</code> 执行结束后，所以同步任务清空后，再进入调用栈执行响应动作。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b36396fc5924451c8e73169a1885a505~tplv-k3u1fbpfcp-watermark.awebp" alt="async.png"></p><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><p>前面聊到同步任务和异步任务的时候，提及到了 <strong>任务队列</strong>。</p><p>在任务队列中，其实还分为 <strong>宏任务队列（Task Queue）</strong> 和 <strong>微任务队列（Microtask Queue）</strong>，对应的里面存放的就是 <strong>宏任务</strong> 和 <strong>微任务</strong>。</p><p>首先，<strong>宏任务和微任务都是异步任务</strong>。</p><p>而宏任务和微任务的区别，就是它们执行的顺序，这也是为什么要区分宏任务和微任务。</p><p>在同步任务中，任务的执行都是按照代码顺序执行的，而异步任务的执行也是需要按顺序的，队列的属性就是 <strong>先进先出（FIFO，First in First Out）</strong>，因此异步任务会按照进入队列的顺序依次执行。</p><p>但在一些场景下，如果只按照进入队列的顺序依次执行的话，也会出问题。比如队列先进入一个一小时的定时器，接着再进入一个请求接口函数，而如果根据进入队列的顺序执行的话，请求接口函数可能需要一个小时后才会响应数据。</p><p>因此浏览器就会将异步任务分为宏任务和微任务，然后按照事件循环的机制去执行，因此不同的任务会有不同的执行优先级，具体会在事件循环讲到。</p><h4 id="任务入队"><a href="#任务入队" class="headerlink" title="任务入队"></a>任务入队</h4><p>这里还有一个知识点，就是关于任务入队。</p><p>任务进入任务队列，其实会利用到浏览器的其他线程。虽然说 <code>JavaScript</code> 是单线程语言，但是浏览器不是单线程的。而不同的线程就会对不同的事件进行处理，当对应事件可以执行的时候，对应线程就会将其放入任务队列。</p><ul><li><strong>js 引擎线程</strong>：用于解释执行 js 代码、用户输入、网络请求等；</li><li><strong>GUI 渲染线程</strong>：绘制用户界面，与 JS 主线程互斥（因为 js 可以操作 DOM，进而会影响到 GUI 的渲染结果）；</li><li><strong>http 异步网络请求线程</strong>：处理用户的 get、post 等请求，等返回结果后将回调函数推入到任务队列；</li><li><strong>定时触发器线程</strong>：<code>setInterval</code>、<code>setTimeout</code> 等待时间结束后，会把执行函数推入任务队列中；</li><li><strong>浏览器事件处理线程</strong>：将 <code>click</code>、<code>mouse</code> 等 UI 交互事件发生后，将要执行的回调函数放入到事件队列中。</li></ul><p>这个其实就可以解释了下列代码为什么后面的定时器会比前面的定时器先执行。因为后者的定时器会先被推进宏任务队列，而前者会之后到点了再被推入宏任务队列。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><table><thead><tr><th>-</th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr><td>整体代码 (script)</td><td>✅</td><td>✅</td></tr><tr><td>UI 交互事件</td><td>✅</td><td>❌</td></tr><tr><td>I/O</td><td>✅</td><td>✅</td></tr><tr><td>setTimeout</td><td>✅</td><td>✅</td></tr><tr><td>setInterval</td><td>✅</td><td>✅</td></tr><tr><td>setImmediate</td><td>❌</td><td>✅</td></tr><tr><td>requestAnimationFrame</td><td>✅</td><td>❌</td></tr></tbody></table><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><table><thead><tr><th>-</th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr><td>process.nextTick</td><td>❌</td><td>✅</td></tr><tr><td>MutationObserver</td><td>✅</td><td>❌</td></tr><tr><td>Promise.then catch finally</td><td>✅</td><td>✅</td></tr></tbody></table><h2 id="事件循环-Event-Loop"><a href="#事件循环-Event-Loop" class="headerlink" title="事件循环 Event Loop"></a>事件循环 Event Loop</h2><p>其实宏任务队列和微任务队列的执行，就是事件循环的一部分了，所以放在这里一起说。</p><p>事件循环的具体流程如下：</p><ol><li> 从宏任务队列中，按照 <strong>入队顺序</strong>，找到第一个执行的宏任务，放入调用栈，开始执行；</li><li> 执行完 <strong>该宏任务</strong> 下所有同步任务后，即调用栈清空后，该宏任务被推出宏任务队列，然后微任务队列开始按照入队顺序，依次执行其中的微任务，<strong>直至微任务队列清空为止</strong>；</li><li> 当微任务队列清空后，一个事件循环结束；</li><li> 接着从宏任务队列中，找到下一个执行的宏任务，开始第二个事件循环，直至宏任务队列清空为止。</li></ol><p>这里有几个重点：</p><ul><li>当我们第一次执行的时候，解释器会将整体代码 <code>script</code> 放入宏任务队列中，因此事件循环是从第一个宏任务开始的；</li><li>如果在执行微任务的过程中，产生新的微任务添加到微任务队列中，也需要一起清空；微任务队列没清空之前，是不会执行下一个宏任务的。</li></ul><p>接下来，通过一个常见的面试题例子来模拟一下事件循环。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 输出结果：a c f d e b */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，当代码执行的时候，整体代码 <code>script</code> 被推入宏任务队列中，并开始执行该宏任务。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63e0812fe4fb443ba65ab26d5de95f44~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_1.gif"></p><p>按照代码顺序，首先执行 <code>console.log(&quot;a&quot;)</code>。</p><p>该函数上下文被推入调用栈，执行完后，即移除调用栈。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c753d28cb8374f5f9d13569cf3934347~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_2.gif"></p><p>接下来执行 <code>setTimeout()</code>，该函数上下文也进入调用栈中。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c80331146b64fd1bcfe070ccf080fc2~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_3.gif"></p><p>因为 <code>setTimeout</code> 是一个宏任务，因此将其 <code>callback</code> 函数推入宏任务队列中，然后该函数就被移除调用栈，继续往下执行。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/847d9b53ab974f78b810235f38448d90~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_4.gif"></p><p>紧接着是 <code>Promise</code> 语句，先将其放入调用栈，然后接着往下执行。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/532fa46bfa654e17a5e494c94b377977~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_5.gif"></p><p>执行 <code>console.log(&quot;c&quot;)</code> 和 <code>resolve()</code>，这里就不多说了。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9265e6b57c2a42ebacf7d50d673cb4de~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_6.gif"></p><p>接着来到 <code>new Promise().then()</code> 方法，这是一个微任务，因此将其推入微任务队列中。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de71bda0eeb64a2690cef27a9c687011~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_7.gif"></p><p>这时 <code>new Promise</code> 语句已经执行结束了，就被移除调用栈。</p><p>接着做执行 <code>console.log(&#39;f&#39;)</code>。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1af0dff172334d37914a4ca4c9c1ce07~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_8.gif"></p><p>这时候，<code>script</code> 宏任务已经执行结束了，因此被推出宏任务队列。</p><p>紧接着开始清空微任务队列了。首先执行的是 <code>Promise then</code>，因此它被推入调用栈中。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/039d9e6974c245b58f40b0baaf9fb36b~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_9.gif"></p><p>然后开始执行其中的 <code>console.log(&quot;d&quot;)</code>。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/414a340f94454d4e8c18b81bc759382b~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_10.gif"></p><p>执行结束后，检测到后面还有一个 <code>then()</code> 函数，因此将其推入微任务队列中。</p><p>此时第一个 <code>then()</code> 函数已经执行结束了，就会移除调用栈和微任务队列。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e15c103346f1434d87136abf91c5123c~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_11.gif"></p><p>此时微任务队列还没被清空，因此继续执行下一个微任务。</p><p>执行过程跟前面差不多，就不多说了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07ea9badd02d4e3986091cc212aae6d4~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_12.gif"></p><p>此时微任务队列已经清空了，第一个事件循环已经结束了。</p><p>接下来执行下一个宏任务，即 <code>setTimeout callback</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d061a0487bbe4b36a0230a90a9d35b82~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_13.gif"></p><p>执行结束后，它也被移除宏任务队列和调用栈。</p><p>这时候微任务队列里面没有任务，因此第二个事件循环也结束了。</p><p>宏任务也被清空了，因此这段代码已经执行结束了。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3785ff320d644deb4476e81f3825be2~tplv-k3u1fbpfcp-watermark.awebp" alt="task_queque_14.gif"></p><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>ECMAScript2017 中添加了 <code>async functions</code> 和 <code>await</code>。</p><p><code>async</code> 关键字是将一个同步函数变成一个异步函数，并将返回值变为 <code>promise</code>。</p><p>而 <code>await</code> 可以放在任何异步的、基于 <code>promise</code> 的函数之前。在执行过程中，它会暂停代码在该行上，直到 <code>promise</code> 完成，然后返回结果值。而在暂停的同时，其他正在等待执行的代码就有机会执行了。</p><p>下面通过一个例子来体验一下。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 输出结果：d a c g i b h f e */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，开始执行前，将整体代码 <code>script</code> 放入宏任务队列中，并开始执行。</p><p>第一个执行的是 <code>console.log(&quot;d&quot;)</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d6c329638ec409ba5f11e6fd3d29c36~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_1.gif"></p><p>紧接着是 <code>setTimeout</code>，将其回调放入宏任务中，然后继续执行。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f1f04859bfb442198a52b1d9902c918~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_2.gif"></p><p>紧接着是调用 <code>async1()</code> 函数，因此将其函数上下文放置到调用栈。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/225d46f2cc5e4452883c01623768745e~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_3.gif"></p><p>然后开始执行 <code>async1</code> 中的 <code>console.log(&quot;a&quot;)</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6abde34a5244282a0ac63006c4e0501~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_4.gif"></p><p>接下来就是 <code>await</code> 关键字语句。</p><p><code>await</code> 后面调用的是 <code>async2</code> 函数，因此我们将其放入调用栈。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/293e3d885e044c4ea345e5e24e4177a3~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_5.gif"></p><p>然后开始执行 <code>async2</code> 中的 <code>console.log(&quot;c&quot;)</code>，并 <code>return</code> 一个值。</p><p>执行完成后，<code>async2</code> 就被移出调用栈。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f2810e9d4d34119a1e93a08f5b03761~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_6.gif"></p><p>这时候，<code>await</code> 会阻塞 <code>async2</code> 的返回值，先跳出 <code>async1</code> 进行往下执行。</p><p>需要注意的是，现在 <code>async1</code> 中的 <code>res</code> 变量，还是 <code>undefined</code>，没有赋值。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0283181a9fff49159069afdc414c16d7~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_7.gif"></p><p>紧接着是执行 <code>new Promise</code>。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb63b3737a464753ba59e92b01d5f209~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_8.gif"></p><p>执行 <code>console.log(&quot;i&quot;)</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a319d8c9c5154d0f8d508154db114178~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_9.gif"></p><p>这时，<code>async1</code> 外面的同步任务都执行完成了，因此就重新回到前面阻塞的位置，进行往下执行。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a202e7f34c50443f8901d31a45e60449~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_10.gif"></p><p>这时 <code>res</code> 成功赋值了 <code>async2</code> 的结果值，然后往下执行 <code>console.log(&quot;b&quot;)</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d359c31825bc4e4ea5c8ab4f46e69567~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_11.gif"></p><p>这时候 <code>async1</code> 才算是执行结束，紧接着再将其调用的 <code>then()</code> 函数放入微任务队列中。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f4b126608fc4547874af93a42533bac~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_12.gif"></p><p>这时 <code>script</code> 宏任务已经全部执行完了，开始准备清空微任务队列了。</p><p>第一个被执行的微任务队列是 <code>promise then</code>，也就是将执行其中的 <code>console.log(&quot;h&quot;)</code> 语句。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06091de35b924bee886429fcc017b995~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_13.gif"></p><p>执行完 <code>Promise then</code> 微任务后，紧接着开始执行 <code>async1</code> 的 <code>promise then</code> 微任务。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81c010740652497897471c3237ee6580~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_14.gif"></p><p>这时候微任务队列已经清空了，即开始执行下一个宏任务。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82eed4406c724eb78b38daea49b5b697~tplv-k3u1fbpfcp-watermark.awebp" alt="async_await_15.gif"></p><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><p>最后来讲将事件循环中的页面更新渲染，这也是 <code>Vue</code> 中异步更新的逻辑所在。</p><p>每次当一次事件循环结束后，即一个宏任务执行完成后以及微任务队列被清空后，浏览器就会进行一次页面更新渲染。</p><p>通常我们浏览器页面刷新频率是 60fps，也就是意味着 16.67ms 要刷新一次，因此我们也要尽量保证一次事件循环控制在 16.67ms 之内，这也是我们需要做代码性能优化的一个原因。</p><p>接下来还是通过一个案例来看一下。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Event Loop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/render1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/render2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// render1</span><span class="token keyword">const</span> demoEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'渲染完成！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'开始渲染！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demoEl<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// render2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demoEl<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Hi World!'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'第二次渲染！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 <code>HTML</code> 的执行顺序，第一个被执行的 <code>JavaScript</code> 代码是 <code>render1.js</code>，因此解释器将其推入宏任务队列，并开始执行。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5feea5835373440582ccb2a63aef1abe~tplv-k3u1fbpfcp-watermark.awebp" alt="render_1.gif"></p><p>第一个被执行的是 <code>console.log(&quot;a&quot;)</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cffb8442d2d481b8c78fec5b748e2a2~tplv-k3u1fbpfcp-watermark.awebp" alt="render_2.gif"></p><p>其次是 <code>setTimeout</code>，并将其回调加入宏任务队列中。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5446c61f921849c7ba934160adcfab51~tplv-k3u1fbpfcp-watermark.awebp" alt="render_3.gif"></p><p>紧接着执行 <code>new Promise</code>。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce18a8c48c1249f79be3e892f1bf21d0~tplv-k3u1fbpfcp-watermark.awebp" alt="render_4.gif"></p><p>同样，将其 <code>then()</code> 推入微任务队列中去。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/306b21e3e50e4156a47119fec8a52082~tplv-k3u1fbpfcp-watermark.awebp" alt="render_5.gif"></p><p>紧接着执行 <code>console.log(&quot;e&quot;)</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2190021a82a04f5c8311ebde4f288a61~tplv-k3u1fbpfcp-watermark.awebp" alt="render_6.gif"></p><p>最后，修改 DOM 节点的文本内容，但是这时候页面还不会更新渲染。</p><p>这时候 <code>script</code> 宏任务也执行结束了。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d82b272153ff4c049ad630160a3969df~tplv-k3u1fbpfcp-watermark.awebp" alt="render_7.gif"></p><p>紧接着，开始清空微任务队列，执行 <code>Promise then</code>。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9182947f295e436a8509e5fe6ee646a3~tplv-k3u1fbpfcp-watermark.awebp" alt="render_8.gif"></p><p>这时候，<code>alert</code> 一个通知，而这个语句结束后，则微任务队列清空，代表第一个事件循环结束，即将要开始渲染页面了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d917f9014de43f7b014ec5060749b6f~tplv-k3u1fbpfcp-watermark.awebp" alt="render_9.gif"></p><p>当点击关闭 <code>alert</code> 后，事件循环结束，页面也开始渲染。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3c77f7ff3be423c80f88185e5d98995~tplv-k3u1fbpfcp-watermark.awebp" alt="render_10.gif"></p><p>渲染结束后，就开始执行下一个宏任务，即 <code>setTimeout callback</code>。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/734b05f4724e49c4bcfc62777fc2caf2~tplv-k3u1fbpfcp-watermark.awebp" alt="render_11.gif"></p><p>紧接着执行 <code>console.log(&quot;b&quot;)</code>。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db3b70b11634fb7b1d4d87376a729d5~tplv-k3u1fbpfcp-watermark.awebp" alt="render_12.gif"></p><p>这时候宏任务队列已清空了，但是 <code>html</code> 文件还没执行结束，因此进入 <code>render2.js</code> 继续执行。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62aa89b72a97404b8ab3972464753f85~tplv-k3u1fbpfcp-watermark.awebp" alt="render_13.gif"></p><p>首先执行 <code>console.log(&#39;f&#39;)</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ca3d1b9bd0a41c5813fe3fbe6d146d1~tplv-k3u1fbpfcp-watermark.awebp" alt="render_14.gif"></p><p>紧接着，再次修改节点的文本信息，此时依旧不会更新页面渲染。</p><p>接着执行 <code>alert</code> 语句，当关闭 <code>alert</code> 通知后，该宏任务结束，微任务队列也为空，因此该事件循环也结束了，这时候就开始第二次页面更新。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a20d047d08e4ac0a1d031473adea88f~tplv-k3u1fbpfcp-watermark.awebp" alt="render_15.gif"></p><p>但如果将所有 <code>JavaScript</code> 代码使用内嵌方式的话，浏览器会先把两个 <code>script</code> 丢到宏任务队列中去，因此执行的顺序也会不一样，这里就不一一推导了。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Event Loop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> demoEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'渲染完成！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'开始渲染！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      demoEl<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      demoEl<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Hi World!'</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'第二次渲染！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：a c e d “开始渲染！” f “第二次渲染！” “渲染完成！” b</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">并发模型与事件循环</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> Event Loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2️ 🔥🕺🏼 JavaScript Visualized: Hoisting</title>
      <link href="javascript-visualized-hoisting/"/>
      <url>javascript-visualized-hoisting/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-hoisting-478h">2️ 🔥🕺🏼 JavaScript Visualized: Hoisting</a></p></blockquote><p><img src="/images/kaf11wh85tkhfv1338b4.png" alt="Cover image for 🔥🕺🏼 JavaScript Visualized: Hoisting"></p><p>Hoisting is one of those terms that every JS dev has heard of because you googled your annoying error and ended up on StackOverflow, where this person told you that this error was caused because of <em>hoisting</em> 🙃 So, what is hoisting? (FYI - <em>scope</em> will be covered in another post, I like to keep posts small and focused)</p><blockquote><p>变量提升是每个 JS 开发人员都听说过的那些术语之一,因为您在 Google 上搜索了烦人的错误并最终进入 StackOverflow,此人告诉您此错误是由于 <em><a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting">Hoisting(变量提升)</a></em> 引起的 🙃 那么,变量提升是什么？(仅供参考- <em><a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope">Scope(作用域)</a></em> 将在另一篇文章中介绍,我希望保持文章小而专注)</p></blockquote><p>If you’re new to JavaScript, you may have experienced “weird” behavior where some variables are randomly <code>undefined</code>, <code>ReferenceError</code>s get thrown, and so on. Hoisting is often explained as <em>putting variables and functions to the top of the file</em> but nah, that’s not what’s happening, although the behavior might seem like it 😃</p><blockquote><p>如果您不熟悉 JavaScript,则可能会遇到”怪异”的行为,其中某些变量是随机变量 <code>undefined</code> , <code>ReferenceError</code> 会被抛出等等.变量提升通常被解释为将 <em>变量和函数放在文件的顶部</em>,但是不,这不是发生的事情,尽管行为看起来像这样.</p></blockquote><p>When the JS engine gets our script, the first thing it does is <strong>setting up memory</strong> for the data in our code. No code is executed at this point, it’s simply just preparing everything for execution. The way that function declarations and variables are stored is different. Functions are stored with a <strong>reference to the entire function</strong>.</p><blockquote><p>当 JS 引擎获取我们的脚本时,它要做的第一件事就是为代码中的数据 <em>设置内存</em>.在这一点上,没有代码被执行,只是在准备要执行的所有内容.函数声明和变量的存储方式不同.函数以 <em>对整个函数的引用存储</em>.</p></blockquote><p><img src="/images/gif7.gif"></p><p>With variables, it’s a bit different. ES6 introduced two new keywords to declare variables: <code>let</code> and <code>const</code>. Variables declared with the <code>let</code> or <code>const</code> keyword are stored <em>uninitialized</em>.</p><blockquote><p>对于变量,则有所不同.ES6 引入了两个新的关键字来声明变量: <code>let</code> 和 <code>const</code> .用 <code>let</code> 或 <code>const</code> 关键字声明的变量 <em>未初始化</em> .</p></blockquote><p><img src="/images/gif8.gif"></p><p>Variables declared with the <code>var</code> keyword are stored with the default value of <code>undefined</code>.</p><blockquote><p>使用 <code>var</code> 关键字声明的变量的默认值存储为 <code>undefined</code> .</p></blockquote><p><img src="/images/gif9.gif"></p><p>Now that the creation phase is done, we can actually execute the code. Let’s see what happens if we had 3 console.log statements on top of the file, before we declared the function or any of the variables.</p><blockquote><p>现在创建阶段已经完成,我们可以实际执行代码了.让我们看看如果在声明函数或任何变量 <em>之前</em> 在文件顶部有 3 个 console.log 语句,会发生什么情况.</p></blockquote><p>Since functions are stored with a reference to the entire function code, we can invoke them even <em>before</em> the line on which we created them! 🔥</p><blockquote><p>由于函数是在引用整个函数代码的情况下存储的,因此我们甚至可以在创建它们的行 <em>之前</em> 调用它们！🔥</p></blockquote><p><img src="/images/gif16.gif"></p><p>When we reference a variable declared with the <code>var</code> keyword before their declaration, it’ll simply return its default value that it was stored with: <code>undefined</code>! However, this could sometimes lead to “unexpected” behavior. In most cases this means you’re referencing it unintentionally (you probably don’t want it to actually have the value of <code>undefined</code>) 😬</p><blockquote><p>当我们在变量声明 <code>var</code> 之前引用用关键字声明的变量时,它将简单地返回其存储在其中的默认值:<code>undefined</code> ！但是,这有时可能导致”意外”行为.在大多数情况下,这意味着您无意中引用了它(您可能不希望它实际上具有的值 <code>undefined</code> )😬</p></blockquote><p><img src="/images/gif17.gif"></p><p>In order to prevent being able to accidentally reference an <code>undefined</code> variable, like we could with the <code>var</code> keyword, a <code>ReferenceError</code> gets thrown whenever we try to access <em>uninitialized</em> variables. The “zone” before their actual declaration, is called the <strong>temporal dead zone</strong>: you cannot reference the variables (this includes ES6 classes as well!) before their initialization.</p><blockquote><p>为了防止 <code>undefined</code> 像使用 <code>var</code> 关键字那样意外地引用变量,每当我们尝试访问 <em>未初始化</em> 的变量时,都将引发 <code>ReferenceError</code> .在它们实际声明之前的”区域”称为 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#%E6%9A%82%E5%AD%98%E6%AD%BB%E5%8C%BA">暂存死区</a></strong>:在初始化之前,您不能引用变量(也包括 ES6 类！).</p></blockquote><p><img src="/images/gif18.gif"></p><p>When the engine passes the line on which we actually declared the variables, the values in memory are overwritten with the values we actually declared them with.</p><blockquote><p>当引擎通过我们实际声明变量的行时,内存中的值将被我们实际声明它们的值覆盖.</p></blockquote><p>(Oops I notice now this should be number 7. Will update asap 😬)</p><blockquote><p>(糟糕,我现在注意到这应该是数字 7.将尽快更新).</p></blockquote><p><img src="/images/gif12.gif"></p><hr><p>All done! 🎉 Quick recap:</p><blockquote><p>全做完了！🎉 快速回顾:</p></blockquote><ul><li>Functions and variables are stored in memory for an execution context before we execute our code. This is called <em>hoisting</em>.</li><li>Functions are stored with a reference to the entire functions, variables with the <code>var</code> keyword with the value of <code>undefined</code>, and variables with the <code>let</code> and <code>const</code> keyword are stored <em>uninitialized</em>.</li></ul><blockquote><ul><li>在执行代码之前,将函数和变量存储在内存中以用于执行上下文.这称为 <em>变量提升</em>.</li><li>函数以对整个函数的引用存储,带有 <code>var</code> 关键字的变量值为 <code>undefined</code> ,而带有 <code>let</code> 和 <code>const</code> 关键字的变量 <em>未初始化</em> .</li></ul></blockquote><p>I hope that the term <em>hoisting</em> is a bit less vague now that we’ve looked at what’s happening when we execute our code. As always, don’t worry if it still doesn’t make a lot of sense yet. You’ll get a lot more comfortable with it the more you work with it. Feel free to ask me for help, I’d love to help you! 😃</p><blockquote><p>我希望 <em>提升</em> 术语一词的含义不再那么模糊,因为我们已经研究了执行代码时发生的情况.与往常一样,不要担心它是否仍然没有任何意义.您使用它的次数越多,您将对其感到更加自在.随时向我寻求帮助,我很乐意为您服务！😃</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> Hoisting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3️ ⚡️⛓JavaScript Visualized: Scope (Chain)</title>
      <link href="javascript-visualized-scope-chain/"/>
      <url>javascript-visualized-scope-chain/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://dev.to/lydiahallie/javascript-visualized-scope-chain-13pd">3️ ⚡️⛓JavaScript Visualized: Scope (Chain)</a></p></blockquote><p><img src="/images/i4jymvdb2vqc4m2wg5jm.gif" alt="Cover image for ⚡️⛓JavaScript Visualized: Scope (Chain)"></p><p>Time for the scope chain 🕺🏼 In this post I assume you know the basics of execution contexts: I’ll soon write a post on that too though 😃</p><blockquote><p>作用域 🕺🏼 在本文中,我假设您了解执行上下文的基础: 尽管如此,我也将很快就此发表一篇文章 😃</p></blockquote><hr><p>Let’s take a look at the following code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Lydia'</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">const</span> city <span class="token operator">=</span> <span class="token string">'San Francisco'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getPersonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Sarah'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and lives in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>city<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPersonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We’re invoking the <code>getPersonInfo</code> function, which returns a string containing the values of the <code>name</code>, <code>age</code> and <code>city</code> variables:<br><code>Sarah is 22 and lives in San Francisco</code>. But, the <code>getPersonInfo</code> function doesn’t contain a variable named <code>city</code> 🤨? How did it know the value of <code>city</code>?</p><blockquote><p>我们调用 <code>getPersonInfo</code> 函数,该函数返回一个包含 <code>name</code> , <code>age</code> 和 <code>city</code> 变量的值: <code>Sarah is 22 and lives in San Francisco</code> .但是,该 <code>getPersonInfo</code> 函数不包含名为 <code>city</code> 🤨 的变量.它怎么知道 <code>city</code> 的值？</p></blockquote><p>First, memory space is set up for the different contexts. We have the default <strong>global context</strong> (<code>window</code> in a browser, <code>global</code> in Node), and a <strong>local context</strong> for the <code>getPersonInfo</code> function which has been invoked. Each context also has a <strong>scope chain</strong>.</p><blockquote><p>首先,为不同的上下文设置存储空间.我们有默认的 <strong>全局上下文</strong> (在浏览器中是 <code>window</code> ,在 node 是 <code>global</code> ),以及<strong>局部上下文</strong>为 <code>getPersonInfo</code> 已调用的功能.每个上下文也都有一个 <strong>作用域链</strong>.</p></blockquote><p>For the <code>getPersonInfo</code> function, the scope chain looks something like this (don’t worry, it doesn’t have to make sense just yet):</p><blockquote><p>对于 <code>getPersonInfo</code> 函数,作用域链看起来像这样(不用担心,它现在还没有必要):</p></blockquote><p><img src="/images/89b9buizhevs0jf6djyn.png" alt="Alt Text"></p><p>The scope chain is basically a “chain of references” to objects that contain references to values (and other scopes) that are referencable in that execution context. (⛓: “Hey, these are all the values you can reference from within this context”.) The scope chain gets created when the execution context is created, meaning it’s created at runtime!</p><blockquote><p>作用域链基本上是对对象的”引用链”,这些对象包含对在该执行上下文中可引用的值(和其他作用域)的引用.(⛓: “嘿,这些都是您可以在此上下文中引用的所有值”.)作用域链是在创建执行上下文时创建的,这意味着它是在运行时创建的！</p></blockquote><p>However, I won’t talk about the <em>activation object</em> or the execution contexts in general in this post, let’s just focus on scope! In the following examples, the key/value pairs in the execution contexts represent the references that the scope chain has to the variables.</p><blockquote><p>但是,在本文中,我一般不会讨论激活对象或执行上下文,我们只关注作用域！在以下示例中,执行上下文中的键/值对表示作用域链对变量的引用.</p></blockquote><p><img src="/images/iala2et7bg9bgdj4c2lg.png" alt="Alt Text"></p><p>The scope chain of the global execution context has a reference to 3 variables: <code>name</code> with the value <code>Lydia</code>, <code>age</code> with the value <code>21</code>, and <code>city</code> with the value <code>San Francisco</code>. In the local context, we have a reference to 2 variables: <code>name</code> with the value <code>Sarah</code>, and <code>age</code> with the value <code>22</code>.</p><blockquote><p>全局执行上下文的作用域链引用了 3 个变量: <code>name</code> 带有值 <code>Lydia</code> ,<code>age</code> 带有值 <code>21</code> ,<code>city</code> 带有值 <code>San Francisco</code>.在本地上下文中,我们引用了 2 个变量: <code>name</code> 带有值 <code>Sarah</code> 和 <code>age</code> 使用值 <code>22</code>.</p></blockquote><p>When we try to access the variables in the <code>getPersonInfo</code> function, the engine first checks the local scope chain.</p><blockquote><p>当我们尝试访问该 <code>getPersonInfo</code> 函数中的变量时,引擎首先检查本地作用域链.</p></blockquote><p><img src="/images/xn17f0t54acz8tiq7122.gif" alt="Alt Text"></p><p>The local scope chain has a reference to <code>name</code> and <code>age</code>! <code>name</code> has the value of <code>Sarah</code> and <code>age</code> has the value of <code>22</code>. But now, what happens when it tries to access <code>city</code>?</p><blockquote><p>本地作用域链引用了 <code>name</code> 和 <code>age</code> ！<code>name</code> 的值为 <code>Sarah</code> , <code>age</code> 的值为 <code>22</code> .但是现在,当它尝试访问 <code>city</code> 时会发生什么？</p></blockquote><p>In order to find the value for <code>city</code> the engine “goes down the scope chain”. This basically just means that the engine doesn’t give up that easily: it works hard for you to see if it can find a value for the variable <code>city</code> in the outer scope that the local scope has a reference to, the <strong>global object</strong> in this case.</p><blockquote><p>为了找到 <code>city</code> 的值, 引擎”必须深入作用域链中”.这基本上只是意味着引擎不会轻易放弃: 它会努力使您查看是否可以 <code>city</code> 在局部作用域引用的外部作用域(在这种情况下为<strong>全局对象</strong>)中找到变量的值.</p></blockquote><p><img src="/images/z9iclg23rmbpts7meoq6.gif" alt="Alt Text"></p><p>In the global context, we declared the variable <code>city</code> with the value of <code>San Francisco</code>, thus has a reference to the variable <code>city</code>. Now that we have a value for the variable, the function <code>getPersonInfo</code> can return the string <code>Sarah is 22 and lives in San Francisco</code> 🎉</p><blockquote><p>在全局上下文中,我们 <code>city</code> 使用的值声明了变量 <code>San Francisco</code>,从而引用了该变量 <code>city</code>.现在我们有了变量的值,该函数 <code>getPersonInfo</code> 可以返回字符串 <code>Sarah is 22 and lives in San Francisco</code>🎉</p></blockquote><hr><p>We can go <em>down</em> the scope chain, but we can’t go <em>up</em> the scope chain. (Okay this may be confusing because some people say <em>up</em> instead of <em>down</em>, so I’ll just rephrase: You can go to <strong>outer</strong> scopes, but not to more inner… (innerer..?) scopes. I like to visualize this as a sort of waterfall:</p><blockquote><p>您可以使用外部作用域,但不能进入更内部…(内部…)作用域.我想形象地看到这一点.作为一种瀑布:</p></blockquote><p><img src="/images/doq46yc6nuiam51evy44.png" alt="Alt Text"></p><p>Or even deeper:</p><p><img src="/images/rece2zj4pb4w1fn56q5k.png" alt="Alt Text"></p><hr><p>Let’s take this code as an example.</p><p><img src="/images/0z6342b72f3n6v6ufafk.png" alt="Alt Text"></p><p>It’s almost the same, however there’s one big difference: we <em>only</em> declared <code>city</code> in the <code>getPersonInfo</code> function now, and <em>not</em> in the global scope. We didn’t invoke the <code>getPersonInfo</code> function, so no local context is created either. Yet, we try to access the values of <code>name</code>, <code>age</code> and <code>city</code> in the global context.</p><blockquote><p>几乎一样,但是有一个很大的不同: 我们现在 在 <code>getPersonInfo</code> 函数中仅声明 <code>city</code>,而没有在全局作用域中声明.我们没有调用该 <code>getPersonInfo</code> 函数,因此也没有创建本地上下文.然而,我们试图在全局作用域内访问 <code>name</code> , <code>age</code> 并 <code>city</code> 的值.</p></blockquote><p><img src="/images/f3wvlo4c3gqf3mve1g0n.gif" alt="Alt Text"></p><p>It throws a <code>ReferenceError</code>! It couldn’t find a reference to a variable called <code>city</code> in the global scope, and there were no outer scopes to look for, and it <strong>cannot</strong> go <em>up</em> the scope chain.</p><blockquote><p>它抛出 <code>ReferenceError</code> ！它在全局作用域内,找不到一个叫做 <code>city</code> 变量的引用,并没有到外部作用域寻找,它不能上朔作用域链.</p></blockquote><p>This way, you can use scope as a way to “protect” your variables and re-use variable names.</p><blockquote><p>这样,您可以将作用域用作”保护”变量并重新使用变量名的方法.</p></blockquote><hr><p>Besides global and local scopes, there is also a <strong>block scope</strong>. Variables declared with the <code>let</code> or <code>const</code> keyword are scoped to the nearest curly brackets (<code>&#123;``&#125;</code>).</p><blockquote><p>除了全局和局部作用域之外,还有一个块作用域.用 <code>let</code> 或 <code>const</code> 关键字声明的变量的作用域为最接近的大括号(<code>&#123;&#125;</code>).</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'You cannot drink!'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> message<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'You can drink!'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> message<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can visualize the scopes as:</p><blockquote><p>您可以将作用域可视化为:</p></blockquote><p><img src="/images/75n1vpm7z4d8924cnvje.png" alt="Alt Text"></p><p>We have a global scope, a function scope, and two block scopes. We were able to declare the variable <code>message</code> twice, since the variables were scoped to the curly brackets.</p><blockquote><p>我们有一个全局作用域,一个函数作用域和两个块作用域. <code>message</code> 由于变量的作用域用大括号括起来,因此我们能够两次声明该变量.</p></blockquote><hr><p>To quickly recap:</p><ul><li>You can see “scope chain” as a chain of references to values that we can access in the current context.</li><li>Scopes also make it possible to re-use variable names that were defined further down the scope chain, since it can only go <em>down</em> the scope chain, not <em>up</em>.</li></ul><blockquote><ul><li>您可以将”作用域链”视为对我们可以在当前上下文中访问的值的引用链.</li><li>作用域还可以重用在作用域链下游定义的变量名称,因为它只能在作用域链中向下移动,而不能向上.</li></ul></blockquote><p>That was it for scope (chains)! There’s tons more to say about this so I may add extra info when I have some free time. Feel free to ask questions if you’re struggling with anything, I love to help! 💕</p><blockquote><p>作用域(链)就是这样！关于这一点还有更多的话要说,所以当我有空闲时间时,我可能会添加更多信息.如果您遇到任何困难,请随时提出问题,我很乐意提供帮助！💕</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualized </tag>
            
            <tag> Scope Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Clear: Learn to Clear Floating Elements</title>
      <link href="css-clear/"/>
      <url>css-clear/</url>
      
        <content type="html"><![CDATA[<script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="什么是-CSS-清除浮动"><a href="#什么是-CSS-清除浮动" class="headerlink" title="什么是 CSS 清除浮动"></a>什么是 CSS 清除浮动</h2><p>在非 IE 浏览器 (如 Firefox) 下, 当容器的高度为 auto, 且容器的内容中有浮动 (<code>float</code> 为 <code>left</code> 或 <code>right</code>) 的元素,<br>在这种情况下, 容器的高度不能自动伸长以适应内容的高度, 使得内容溢出到容器外面而影响 (甚至破坏) 布局的现象.<br>这个现象叫浮动溢出, 为了防止这个现象的出现而进行的 CSS 处理, 就叫 CSS 清除浮动.</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="abpPJox" data-preview="true" data-editable="true"  data-prefill='{"title":"Without clear","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;h2>Without clear&lt;/h2>&lt;section>  &lt;img src="http://zhuangyin8.github.io/images/9mi_a.jpg" />  &lt;p>Vertical margins between two floated elements on the other hand will not collapse. When applied to floating elements, the margin edge of the bottom element is moved below the margin edge of all relevant floats. This affects the position of later floats, since later floats cannot be positioned higher than earlier ones.&lt;/p>&lt;/section></pre>  <pre data-lang="css">section {  background-color: gray;  border: solid 1px black;}section img {  float: left;}section p {  float: right;  background-color: red;}</pre></div><h2 id="解决-CSS-清除浮动"><a href="#解决-CSS-清除浮动" class="headerlink" title="解决 CSS 清除浮动"></a>解决 CSS 清除浮动</h2><p>float 布局会脱离文档流，对页面的布局造成影响，比如造成父级的高度坍塌等问题。清除浮动后，便不会影响文档流。下面介绍一下现在清除浮动的一些方式。</p><h3 id="使用带-clear-属性的空元素"><a href="#使用带-clear-属性的空元素" class="headerlink" title="使用带 clear 属性的空元素"></a>使用带 <code>clear</code> 属性的空元素</h3><p>在浮动元素后使用一个空元素如 <code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code>, 并在 CSS 中赋予 <code>.clear&#123;clear:both;&#125;</code> 属性即可清理浮动. 亦可使用 <code>&lt;br class=&quot;clear&quot; /&gt;</code> 或 <code>&lt;hr class=&quot;clear&quot; /&gt;</code> 来进行清理.</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="abpPJox" data-preview="true" data-editable="true"  data-prefill='{"title":"With clear","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;h2>Without clear&lt;/h2>&lt;section>  &lt;img src="http://zhuangyin8.github.io/images/9mi_a.jpg" />  &lt;p>Vertical margins between two floated elements on the other hand will not collapse. When applied to floating elements, the margin edge of the bottom element is moved below the margin edge of all relevant floats. This affects the position of later floats, since later floats cannot be positioned higher than earlier ones.&lt;/p>  &lt;div class="clear">&lt;/div>&lt;/section></pre>  <pre data-lang="css">section {  background-color: gray;  border: solid 1px black;}section img {  float: left;}section p {  float: right;  background-color: red;}.clear {  clear: both;}</pre></div><ul><li>优点: 简单, 代码少, 浏览器兼容性好.</li><li>缺点: 需要添加大量无语义的 html 元素, 代码不够优雅, 后期不容易维护.</li></ul><h3 id="使用-CSS-的-overflow-属性"><a href="#使用-CSS-的-overflow-属性" class="headerlink" title="使用 CSS 的 overflow 属性"></a>使用 CSS 的 <code>overflow</code> 属性</h3><p>给浮动元素的容器添加 <code>overflow: hidden;</code> 或 <code>overflow: auto;</code> 可以清除浮动, 在添加 overflow 属性后, 浮动元素又回到了容器层, 把容器高度撑起, 达到了清理浮动的效果.</p><p>子元素浮动了，会造成父元素的高度坍塌。只要给父元素添加 <code>overflow: hidden;</code>属性，就可以解决浮动带来的影响。</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="abpPJox" data-preview="true" data-editable="true"  data-prefill='{"title":"With clear","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;h2>Without clear&lt;/h2>&lt;section>  &lt;img src="http://zhuangyin8.github.io/images/9mi_a.jpg" />  &lt;p>Vertical margins between two floated elements on the other hand will not collapse. When applied to floating elements, the margin edge of the bottom element is moved below the margin edge of all relevant floats. This affects the position of later floats, since later floats cannot be positioned higher than earlier ones.&lt;/p>&lt;/section></pre>  <pre data-lang="css">section {  background-color: gray;  border: solid 1px black;  overflow: hidden;}section img {  float: left;}section p {  float: right;  background-color: red;}</pre></div><h3 id="使用-CSS-的-after-伪元素"><a href="#使用-CSS-的-after-伪元素" class="headerlink" title="使用 CSS 的 :after 伪元素"></a>使用 CSS 的 <code>:after</code> 伪元素</h3><p>结合 <code>:after</code> 伪元素 (注意这不是伪类, 而是伪元素, 代表一个元素之后最近的元素) 和 IEhack , 可以完美兼容当前主流的各大浏览器, 这里的 IEhack 指的是触发 hasLayout.<br>给浮动元素的容器添加一个 clearfix 的 class, 然后给这个 class 添加一个 <code>:after</code> 伪元素实现元素末尾添加一个看不见的块元素 (Block element) 清理浮动.</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="abpPJox" data-preview="true" data-editable="true"  data-prefill='{"title":"With clear","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;h2>Without clear&lt;/h2>&lt;section class="clearfix">  &lt;img src="http://zhuangyin8.github.io/images/9mi_a.jpg" />  &lt;p>Vertical margins between two floated elements on the other hand will not collapse. When applied to floating elements, the margin edge of the bottom element is moved below the margin edge of all relevant floats. This affects the position of later floats, since later floats cannot be positioned higher than earlier ones.&lt;/p>&lt;/section></pre>  <pre data-lang="css">section {  background-color: gray;  border: solid 1px black;}section img {  float: left;}section p {  float: right;  background-color: red;}.clearfix:after{  content: "";  display: block;  height: 0;  clear: both;  visibility: hidden;}</pre></div><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clear"><code>clear</code></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> float </tag>
            
            <tag> clear </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灵活运用 CSS 开发技巧</title>
      <link href="CSS-development-skills/"/>
      <url>CSS-development-skills/</url>
      
        <content type="html"><![CDATA[<!-- CodePen  必备  --><script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://juejin.im/post/6844903926110617613">灵活运用 CSS 开发技巧</a></p></blockquote><ul><li>代码只作演示用途,不会详细说明语法</li><li>部分技巧示例代码过长,使用 CodePen 进行保存,点击<strong>在线演示</strong>即可查看</li><li>兼容项点击链接即可查看当前属性的浏览器兼容数据,自行根据项目兼容需求考虑是否使用</li><li>以下代码全部基于 CSS 进行书写,没有任何 JS 代码,没有特殊说明的情况下所有属性和方法都是 CSS 类型</li><li>一部分技巧是自己探讨出来的,另一部分技巧是参考各位前端大神们的,都是一个互相学习的过程,大家一起进步</li></ul><h2 id="Layout-Skill"><a href="#Layout-Skill" class="headerlink" title="Layout Skill"></a>Layout Skill</h2><h3 id="使用-vw-定制-rem-自适应布局"><a href="#使用-vw-定制-rem-自适应布局" class="headerlink" title="使用 vw 定制 rem 自适应布局"></a>使用 vw 定制 rem 自适应布局</h3><details><summary><b>解析</b></summary><ul><li>要点:移动端使用<code>rem布局</code>需要通过 JS 设置不同屏幕宽高比的<code>font-size</code>,结合<code>vw</code>单位和<code>calc()</code>可脱离 JS 的控制</li><li>场景:<strong>rem 页面布局</strong> (不兼容低版本移动端系统)</li><li>兼容:<a href="https://caniuse.com/#search=vw">vw</a>、<a href="https://caniuse.com/#search=calc()">calc()</a></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 基于UI width=750px DPR=2的页面 */</span><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw / 7.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="使用-nth-child-选择指定元素"><a href="#使用-nth-child-选择指定元素" class="headerlink" title="使用:nth-child() 选择指定元素"></a>使用:nth-child() 选择指定元素</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>:nth-child()</code>筛选指定的元素设置样式</li><li>场景:<strong>表格着色</strong>、<strong>边界元素排版</strong> (首元素、尾元素、左右两边元素)</li><li>兼容:<a href="https://caniuse.com/#search=%3Anth-child()">:nth-child()</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/voRzNP">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8nth-child%E9%80%89%E6%8B%A9%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0.png" alt="使用nth-child选择指定元素"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="voRzNP" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用:nth-child()选择指定元素","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用:nth-child()选择指定元素">  &lt;ul class="specified-scope">    &lt;li>10001&lt;/li>    &lt;li>10002&lt;/li>    &lt;li>10003&lt;/li>    &lt;li>10004&lt;/li>    &lt;li>10005&lt;/li>    &lt;li>10006&lt;/li>    &lt;li>10007&lt;/li>    &lt;li>10008&lt;/li>    &lt;li>10009&lt;/li>    &lt;li>10010&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.specified-scope {  width: 300px;  li {    padding: 0 20px;    height: 40px;    line-height: 40px;    color: #fff;    &:nth-child(odd) {      background-color: #f66;    }    &:nth-child(even) {      background-color: #66f;    }    &:nth-child(n+6):nth-child(-n+10) {      background-color: #3c9;    }  }}</pre></div></details><hr><h3 id="使用-writing-mode-排版竖文"><a href="#使用-writing-mode-排版竖文" class="headerlink" title="使用 writing-mode 排版竖文"></a>使用 writing-mode 排版竖文</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>writing-mode</code>调整文本排版方向</li><li>场景:<strong>竖行文字</strong>、<strong>文言文</strong>、<strong>诗词</strong></li><li>兼容:<a href="https://caniuse.com/#search=writing-mode">writing-mode</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/XvExJO">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8writing-mode%E6%8E%92%E7%89%88%E7%AB%96%E6%96%87.png" alt="使用writing-mode排版竖文"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="XvExJO" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用writing-mode排版竖向文本","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用writing-mode排版竖向文本">  &lt;div class="vertical-text">    &lt;h3>情&lt;/h3>    &lt;p>我见犹怜,&lt;br>爱不释手.&lt;br>雅俗共赏,&lt;br>君子好逑.&lt;/p>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.vertical-text {  writing-mode: vertical-rl;  h3 {    padding-left: 20px;    font-weight: bold;    font-size: 18px;    color: #f66;  }  p {    line-height: 30px;    color: #66f;  }}</pre></div></details><hr><h3 id="使用-text-align-last-对齐两端文本"><a href="#使用-text-align-last-对齐两端文本" class="headerlink" title="使用 text-align-last 对齐两端文本"></a>使用 text-align-last 对齐两端文本</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>text-align-last:justify</code>设置文本两端对齐</li><li>场景:<strong>未知字数中文对齐</strong></li><li>兼容:<a href="https://caniuse.com/#search=text-align-last">text-align-last</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/ZgxZJa">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8text-align-last%E5%AF%B9%E9%BD%90%E4%B8%A4%E7%AB%AF%E6%96%87%E6%9C%AC.png" alt="使用text-align-last对齐两端文本"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="ZgxZJa" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用text-align-last对齐两端文本","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用text-align-last对齐两端文本">  &lt;ul class="justify-text">    &lt;li>账号&lt;/li>    &lt;li>密码&lt;/li>    &lt;li>电子邮件&lt;/li>    &lt;li>通讯地址&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss">.justify-text {  li {    padding: 0 20px;    width: 100px;    height: 40px;    background-color: #f66;    line-height: 40px;    text-align-last: justify;    color: #fff;    & + li {      margin-top: 5px;    }  }}</pre></div></details><hr><h3 id="使用-not-去除无用属性"><a href="#使用-not-去除无用属性" class="headerlink" title="使用:not() 去除无用属性"></a>使用:not() 去除无用属性</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>:not()</code>排除指定元素不使用设置样式</li><li>场景:<strong>符号分割文字</strong>、<strong>边界元素排版</strong> (首元素、尾元素、左右两边元素)</li><li>兼容:<a href="https://caniuse.com/#search=%3Anot()">:not()</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/gVeyqr">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8not()%E5%8E%BB%E9%99%A4%E6%97%A0%E7%94%A8%E5%B1%9E%E6%80%A7.png" alt="使用:not()去除无用属性"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="gVeyqr" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用:not()去除无用属性","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用:not()去除无用属性">  &lt;ul class="cleared-attr">    &lt;li class="first-line">      &lt;span>A&lt;/span>      &lt;span>B&lt;/span>      &lt;span>C&lt;/span>      &lt;span>D&lt;/span>      &lt;span>E&lt;/span>    &lt;/li>    &lt;li class="second-line">      &lt;span>A&lt;/span>      &lt;span>B&lt;/span>      &lt;span>C&lt;/span>      &lt;span>D&lt;/span>      &lt;span>E&lt;/span>    &lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.cleared-attr {  li {    height: 40px;    line-height: 40px;  }  span {    display: inline-block;    color: #66f;  }  .first-line span:not(:last-child)::after {    content: ",";  }  .second-line span:not(:nth-child(-n+3)) {    display: none;  }}</pre></div></details><hr><h3 id="使用-object-fit-规定图像尺寸"><a href="#使用-object-fit-规定图像尺寸" class="headerlink" title="使用 object-fit 规定图像尺寸"></a>使用 object-fit 规定图像尺寸</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>object-fit</code>使图像脱离<code>background-size</code>的约束,使用<code>&lt;img&gt;</code>来标记图像背景尺寸</li><li>场景:<strong>图片尺寸自适应</strong></li><li>兼容:<a href="https://caniuse.com/#search=object-fit">object-fit</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/LwBKLV">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8object-fit%E8%A7%84%E5%AE%9A%E5%9B%BE%E5%83%8F%E5%B0%BA%E5%AF%B8.png" alt="使用object-fit规定图像尺寸"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="LwBKLV" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用object-fit规定图像尺寸","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-y" data-title="使用object-fit规定图像尺寸">  &lt;h1>我家乖狗狗:AB&lt;/h1>  &lt;ul class="image-size">    &lt;li>      &lt;h3>Cover&lt;/h3>      &lt;img class="cover" src="https://static.yangzw.vip/codepen/ab-1.jpg">    &lt;/li>    &lt;li>      &lt;h3>Contain&lt;/h3>      &lt;img class="contain" src="https://static.yangzw.vip/codepen/ab-1.jpg">    &lt;/li>    &lt;li>      &lt;h3>Fill&lt;/h3>      &lt;img class="fill" src="https://static.yangzw.vip/codepen/ab-2.jpg">    &lt;/li>    &lt;li>      &lt;h3>ScaleDown&lt;/h3>      &lt;img class="scale-down" src="https://static.yangzw.vip/codepen/ab-2.jpg">    &lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">h1 {  line-height: 50px;  font-size: 30px;  color: #f66;}.image-size {  display: flex;  justify-content: space-between;  width: 1000px;  height: 300px;  li {    width: 200px;  }  h3 {    height: 40px;    line-height: 40px;    text-align: center;    font-weight: bold;    font-size: 16px;  }  img {    width: 100%;    height: 260px;    background-color: #3c9;    &.cover {      object-fit: cover;    }    &.contain {      object-fit: contain;    }    &.fill {      object-fit: fill;    }    &.scale-down {      object-fit: scale-down;    }  }}</pre></div></details><hr><h3 id="🔥-使用-overflow-x-排版横向列表"><a href="#🔥-使用-overflow-x-排版横向列表" class="headerlink" title="🔥 使用 overflow-x 排版横向列表"></a>🔥 使用 overflow-x 排版横向列表</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>flexbox</code>或<code>inline-block</code>的形式横向排列元素,对父元素设置<code>overflow-x:auto</code>横向滚动查看</li><li>场景:<strong>横向滚动列表</strong>、<strong>元素过多但位置有限的导航栏</strong></li><li>兼容:<a href="https://caniuse.com/#search=overflow-x">overflow-x</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/jONqyVd">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8overflow-x%E6%8E%92%E7%89%88%E6%A8%AA%E5%90%91%E5%88%97%E8%A1%A8.gif" alt="使用overflow-x排版横向列表"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="jONqyVd" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用overflow-x排版横向列表","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-y" data-title="使用overflow-x排版横向列表">  &lt;div class="horizontal-list flex">    &lt;ul>      &lt;li>Alibaba&lt;/li>      &lt;li>Tencent&lt;/li>      &lt;li>Baidu&lt;/li>      &lt;li>Jingdong&lt;/li>      &lt;li>Ant&lt;/li>      &lt;li>Netease&lt;/li>      &lt;li>Meituan&lt;/li>      &lt;li>ByteDance&lt;/li>      &lt;li>360&lt;/li>      &lt;li>Sina&lt;/li>    &lt;/ul>  &lt;/div>  &lt;div class="horizontal-list inline">    &lt;ul>      &lt;li>Alibaba&lt;/li>      &lt;li>Tencent&lt;/li>      &lt;li>Baidu&lt;/li>      &lt;li>Jingdong&lt;/li>      &lt;li>Ant&lt;/li>      &lt;li>Netease&lt;/li>      &lt;li>Meituan&lt;/li>      &lt;li>ByteDance&lt;/li>      &lt;li>360&lt;/li>      &lt;li>Sina&lt;/li>    &lt;/ul>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.horizontal-list {  overflow: hidden;  width: 300px;  height: 100px;  & + .horizontal-list {    margin-top: 10px;  }  ul {    overflow-x: scroll;    cursor: pointer;    &::-webkit-scrollbar {      height: 10px;    }    &::-webkit-scrollbar-track {      background-color: #f0f0f0;    }    &::-webkit-scrollbar-thumb {      border-radius: 5px;      background-color: #f66;    }  }  li {    overflow: hidden;    margin-left: 10px;    height: 90px;    background-color: #66f;    line-height: 90px;    text-align: center;    font-size: 16px;    color: #fff;    &:first-child {      margin-left: 0;    }  }  &.flex {    ul {      display: flex;      flex-wrap: nowrap;      justify-content: space-between;    }    li {      flex-shrink: 0;      flex-basis: 90px;    }  }  &.inline {    height: 102px;    ul {      overflow-y: hidden;      white-space: nowrap;    }    li {      display: inline-block;      width: 90px;    }  }}</pre></div><hr><p>列表<code> &lt;ul&gt;</code> <code>&lt;dl&gt; </code>等默认是纵向排列，但有时列表需要横向排列。</p><h4 id="lt-li-gt-标签的使用-float-属性-横向排列"><a href="#lt-li-gt-标签的使用-float-属性-横向排列" class="headerlink" title="&lt;li&gt;标签的使用 float 属性 横向排列"></a><code>&lt;li&gt;</code>标签的使用 float 属性 横向排列</h4><p>在网页中，很多地方都会用到无序列表横向排列的形式，通常的写法都是使得 li 的 css 样式设置为<code>float:left</code> 的形式即可，li 会依次从最左边开始并列对齐，</p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="JGofm" data-preview="true" data-editable="true"  data-prefill='{"title":"Center Block with Fixed Height and Width","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;ul>  &lt;li>Alibaba&lt;/li>  &lt;li>Tencent&lt;/li>&lt;/ul></pre>  <pre data-lang="css" data-option-autoprefixer="true">li {  display: block;  float: left;}</pre></div><h4 id="lt-li-gt-标签的-display-inline-样式-横向排列"><a href="#lt-li-gt-标签的-display-inline-样式-横向排列" class="headerlink" title="&lt;li&gt;标签的 display:inline 样式 横向排列"></a><code>&lt;li&gt;</code>标签的 <code>display:inline</code> 样式 横向排列</h4><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="JGofm" data-preview="true" data-editable="true"  data-prefill='{"title":"Center Block with Fixed Height and Width","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;ul>  &lt;li>Alibaba&lt;/li>  &lt;li>Tencent&lt;/li>&lt;/ul></pre>  <pre data-lang="css" data-option-autoprefixer="true">li {  display: inline;}</pre></div></details><hr><h3 id="使用-text-overflow-控制文本溢出"><a href="#使用-text-overflow-控制文本溢出" class="headerlink" title="使用 text-overflow 控制文本溢出"></a>使用 text-overflow 控制文本溢出</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>text-overflow:ellipsis</code>对溢出的文本在末端添加<code>...</code></li><li>场景:<strong>单行文字溢出</strong>、<strong>多行文字溢出</strong></li><li>兼容:<a href="https://caniuse.com/#search=text-overflow">text-overflow</a>、<a href="https://caniuse.com/#search=line-clamp">line-clamp</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-orient">box-orient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/mdbPmyy">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8text-overflow%E6%8E%A7%E5%88%B6%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA.png" alt="使用text-overflow控制文本溢出"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="mdbPmyy" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用text-overflow控制文本溢出","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-y" data-title="使用text-overflow控制文本溢出">  &lt;p class="ellipsis-text s-line sl-ellipsis">CSS非常有趣和搞怪,可以做一些JS也能做的事情&lt;/p>  &lt;p class="ellipsis-text m-line ml-ellipsis">层叠样式表(CSS)是一种用来表现HTML(标准通用标记语言的一个应用)或XML(标准通用标记语言的一个子集)等文件样式的计算机语言.CSS不仅可以静态地修饰网页,还可以配合各种脚本语言动态地对网页各元素进行格式化.&lt;/p>  &lt;p class="ellipsis-text m-line mls-ellipsis">层叠样式表(CSS)是一种用来表现HTML(标准通用标记语言的一个应用)或XML(标准通用标记语言的一个子集)等文件样式的计算机语言.CSS不仅可以静态地修饰网页,还可以配合各种脚本语言动态地对网页各元素进行格式化.&lt;/p>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.ellipsis-text {  line-height: 30px;  font-size: 20px;  &.s-line {    width: 200px;  }  &.m-line {    margin-top: 10px;    width: 400px;    text-align: justify;  }  &.sl-ellipsis {    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap;  }  &.ml-ellipsis {    display: -webkit-box;    overflow: hidden;    text-overflow: ellipsis;    -webkit-box-orient: vertical;    -webkit-line-clamp: 3;  }  &.mls-ellipsis {    overflow: hidden;    position: relative;    max-height: 90px;    &::after {      position: absolute;      right: 0;      bottom: 0;      padding-left: 40px;      background: linear-gradient(to right, transparent, #fff 50%);      content: "...";    }  }}</pre></div></details><hr><h3 id="使用-transform-描绘-1px-边框"><a href="#使用-transform-描绘-1px-边框" class="headerlink" title="使用 transform 描绘 1px 边框"></a>使用 transform 描绘 1px 边框</h3><details><summary><b>解析</b></summary><ul><li>要点:分辨率比较低的屏幕下显示 1px 的边框会显得模糊,通过<code>::before</code>或<code>::after</code>和<code>transform</code>模拟细腻的 1px 边框</li><li>场景:<strong>容器 1px 边框</strong></li><li>兼容:<a href="https://caniuse.com/#search=transform">transform</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/YzKqMVO">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8transform%E6%8F%8F%E7%BB%981px%E8%BE%B9%E6%A1%86.png" alt="使用transform描绘1px边框"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="YzKqMVO" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用transform描绘像素边框","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-y" data-title="使用transform描绘像素边框">  &lt;div class="onepx-border normal">1px&lt;/div>  &lt;div class="onepx-border thin">0.5px&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.onepx-border {  width: 200px;  height: 80px;  cursor: pointer;  line-height: 80px;  text-align: center;  font-weight: bold;  font-size: 50px;  color: #f66;  & + .onepx-border {    margin-top: 10px;  }  &.normal {    border: 1px solid #f66;  }  &.thin {    position: relative;    &::after {      position: absolute;      left: 0;      top: 0;      border: 1px solid #f66;      width: 200%;      height: 200%;      content: "";      transform: scale(.5);      transform-origin: left top;    }  }}</pre></div></details><hr><h3 id="使用-transform-翻转内容"><a href="#使用-transform-翻转内容" class="headerlink" title="使用 transform 翻转内容"></a>使用 transform 翻转内容</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>transform:scale3d()</code>对内容进行翻转 (水平翻转、垂直翻转、倒序翻转)</li><li>场景:<strong>内容翻转</strong></li><li>兼容:<a href="https://caniuse.com/#search=transform">transform</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/NWKNZwO">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8transform%E7%BF%BB%E8%BD%AC%E5%86%85%E5%AE%B9.png" alt="使用transform翻转内容"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="NWKNZwO" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用transform翻转容器内容","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用transform翻转内容">  &lt;ul class="flip-content">    &lt;li>正常文本&lt;/li>    &lt;li class="x-axis">水平翻转&lt;/li>    &lt;li class="y-axis">垂直翻转&lt;/li>    &lt;li class="reverse">倒序翻转&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.flip-content {  li {    position: relative;    width: 121px;    height: 51px;    line-height: 51px;    text-align: center;    font-weight: bold;    font-size: 30px;    color: #f66;    &::before,    &::after {      position: absolute;      background-color: #66f;      content: "";    }    & + li {      margin-top: 10px;    }    &.x-axis {      transform: scale3d(1, -1, 1);      &::after {        left: 0;        top: 25px;        width: 100%;        height: 1px;      }    }    &.y-axis {      transform: scale3d(-1, 1, 1);      &::after {        left: 60px;        top: 0;        width: 1px;        height: 100%;      }    }    &.reverse {      transform: scale3d(-1, -1, 1);      &::before {        left: 0;        top: 25px;        width: 100%;        height: 1px;      }      &::after {        left: 60px;        top: 0;        width: 1px;        height: 100%;      }    }  }}</pre></div></details><hr><h3 id="使用-letter-spacing-排版倒序文本"><a href="#使用-letter-spacing-排版倒序文本" class="headerlink" title="使用 letter-spacing 排版倒序文本"></a>使用 letter-spacing 排版倒序文本</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>letter-spacing</code>设置负值字体间距将文本倒序</li><li>场景:<strong>文言文</strong>、<strong>诗词</strong></li><li>兼容:<a href="https://caniuse.com/#search=letter-spacing">letter-spacing</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/zYOBgqB">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8letter-spacing%E6%8E%92%E7%89%88%E5%80%92%E5%BA%8F%E6%96%87%E6%9C%AC.png" alt="使用letter-spacing排版倒序文本"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="zYOBgqB" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用letter-spacing排版倒序文本","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用letter-spacing排版倒序文本">  &lt;div class="reverse-text">恭喜发财&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.reverse-text {  padding-left: 100px; // 与letter-spacing一致  font-weight: bold;  font-size: 50px;  color: #f66;  letter-spacing: -100px; // letter-spacing最少是font-size的2倍}</pre></div></details><hr><h3 id="使用-margin-left-排版左重右轻列表"><a href="#使用-margin-left-排版左重右轻列表" class="headerlink" title="使用 margin-left 排版左重右轻列表"></a>使用 margin-left 排版左重右轻列表</h3><details><summary><b>解析</b></summary><p><img src="/images/%E4%BD%BF%E7%94%A8margin-left%E6%8E%92%E7%89%88%E5%B7%A6%E9%87%8D%E5%8F%B3%E8%BD%BB%E5%88%97%E8%A1%A8.png" alt="使用margin-left排版左重右轻列表"></p><ul><li>要点:使用<code>flexbox横向布局</code>时,最后一个元素通过<code>margin-left:auto</code>实现向右对齐</li><li>场景:<strong>右侧带图标的导航栏</strong></li><li>兼容:<a href="https://caniuse.com/#search=margin">margin</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/PoYpROw">在线演示</a></li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="PoYpROw" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:布局】使用margin排版凸显布局","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-y" data-title="使用margin排版凸显布局">  &lt;ul class="highlight-list left">    &lt;li>Alibaba&lt;/li>    &lt;li>Tencent&lt;/li>    &lt;li>Baidu&lt;/li>    &lt;li>Jingdong&lt;/li>    &lt;li>Ant&lt;/li>    &lt;li>Netease&lt;/li>  &lt;/ul>  &lt;ul class="highlight-list right">    &lt;li>Alibaba&lt;/li>    &lt;li>Tencent&lt;/li>    &lt;li>Baidu&lt;/li>    &lt;li>Jingdong&lt;/li>    &lt;li>Ant&lt;/li>    &lt;li>Netease&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.highlight-list {  display: flex;  align-items: center;  padding: 0 10px;  width: 600px;  height: 60px;  background-color: #3c9;  & + .highlight-list {    margin-top: 10px;  }  li {    padding: 0 10px;    height: 40px;    background-color: #f90;    line-height: 40px;    font-size: 16px;    color: #fff;  }  &.left li {    & + li {      margin-left: 10px;    }    &:last-child {      margin-left: auto;    }  }  &.right li {    & + li {      margin-left: 10px;    }    &:first-child {      margin-right: auto;    }  }}</pre></div><h2 id="Behavior-Skill"><a href="#Behavior-Skill" class="headerlink" title="Behavior Skill"></a>Behavior Skill</h2></details><hr><h3 id="使用-overflow-scrolling-支持弹性滚动"><a href="#使用-overflow-scrolling-支持弹性滚动" class="headerlink" title="使用 overflow-scrolling 支持弹性滚动"></a>使用 overflow-scrolling 支持弹性滚动</h3><details><summary><b>解析</b></summary><ul><li>要点:iOS 页面<code>非body元素</code>的滚动操作会非常卡 (Android 不会出现此情况),通过<code>overflow-scrolling:touch</code>调用 Safari 原生滚动来支持弹性滚动,增加页面滚动的流畅度</li><li>场景:<strong>iOS 页面滚动</strong></li><li>兼容:iOS 自带<code>-webkit-overflow-scrolling</code></li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">body </span><span class="token punctuation">&#123;</span>  <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.elem </span><span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="使用-transform-启动-GPU-硬件加速"><a href="#使用-transform-启动-GPU-硬件加速" class="headerlink" title="使用 transform 启动 GPU 硬件加速"></a>使用 transform 启动 GPU 硬件加速</h3><details><summary><b>解析</b></summary><ul><li>要点:有时执行动画可能会导致页面卡顿,可在特定元素中使用硬件加速来避免这个问题</li><li>场景:<strong>动画元素</strong> (绝对定位、同级中超过 6 个以上使用动画)</li><li>兼容:<a href="https://caniuse.com/#search=transform">transform</a></li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.elem </span><span class="token punctuation">&#123;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* translateZ(0)亦可 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="使用-attr-抓取-data"><a href="#使用-attr-抓取-data" class="headerlink" title="使用 attr() 抓取 data-*"></a>使用 attr() 抓取 data-*</h3><details><summary><b>解析</b></summary><ul><li>要点:在标签上自定义属性<code>data-*</code>,通过<code>attr()</code>获取其内容赋值到<code>content</code>上</li><li>场景:<strong>提示框</strong></li><li>兼容:<a href="https://caniuse.com/#search=data-">data-*</a>、<a href="https://caniuse.com/#search=attr()">attr()</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/voRdKX">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8attr%E6%8A%93%E5%8F%96data-.gif" alt="使用attr抓取data-*"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="voRdKX" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用attr()抓取用户属性","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-y" data-title="使用attr()抓取用户属性">  &lt;a class="hover-tips" href="https://www.baidu.com" data-msg="Hello World">提示框&lt;/a>  &lt;a class="hover-tips" href="https://www.baidu.com">&lt;/a>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.hover-tips {  position: relative;  padding: 0 20px;  border-radius: 10px;  height: 40px;  background-color: #66f;  line-height: 40px;  color: #fff;  &::after {    position: absolute;    left: 0;    top: 0;    border-radius: 5px;    width: 100%;    height: 100%;    background-color: rgba(#000, .5);    opacity: 0;    text-align: center;    font-size: 12px;    content: attr(data-msg);    transition: all 300ms;  }  &:hover::after {    left: calc(100% + 20px);    opacity: 1;  }  &[href]:empty::before {    content: attr(href);  }  &[href]:empty:hover::after {    display: none;  }  & + .hover-tips {    margin-top: 10px;  }}</pre></div></details><hr><h3 id="使用-valid-和-invalid-校验表单"><a href="#使用-valid-和-invalid-校验表单" class="headerlink" title="使用:valid 和:invalid 校验表单"></a>使用:valid 和:invalid 校验表单</h3><details><summary><b>解析</b></summary><ul><li>要点:<code>&lt;input&gt;</code>使用伪类<code>:valid</code>和<code>:invalid</code>配合<code>pattern</code>校验表单输入的内容</li><li>场景:<strong>表单校验</strong></li><li>兼容:<a href="https://caniuse.com/#search=pattern">pattern</a>、<a href="https://caniuse.com/#search=%3Avalid">:valid</a>、<a href="https://caniuse.com/#search=%3Ainvalid">:invalid</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/QemxKr">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8valid%E5%92%8Cinvalid%E6%A0%A1%E9%AA%8C%E8%A1%A8%E5%8D%95.gif" alt="使用:valid和:invalid校验表单"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="QemxKr" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用:valid和:invalid校验输入表单","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用:valid和:invalid校验输入表单">  &lt;form class="form-validation">    &lt;div>      &lt;label>名字&lt;/label>      &lt;input type="text" placeholder="请输入你的名字(1到10个中文)" pattern="^[\u4e00-\u9fa5]{1,10}$" required>    &lt;/div>    &lt;div>      &lt;label>手机&lt;/label>      &lt;input type="text" placeholder="请输入你的手机" pattern="^1[3456789]\d{9}$" required>    &lt;/div>    &lt;div>      &lt;label>简介&lt;/label>      &lt;textarea required>&lt;/textarea>    &lt;/div>  &lt;/form>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.form-validation {  width: 500px;  div + div {    margin-top: 10px;  }  label {    display: block;    padding-bottom: 5px;    font-weight: bold;    font-size: 16px;  }  input,  textarea {    display: block;    padding: 0 20px;    border: 1px solid #ccc;    width: 100%;    height: 40px;    outline: none;    caret-color: #09f;    transition: all 300ms;    &:valid {      border-color: #3c9;    }    &:invalid {      border-color: #f66;    }  }  textarea {    height: 122px;    resize: none;    line-height: 30px;    font-size: 16px;  }}</pre></div></details><hr><h3 id="使用-pointer-events-禁用事件触发"><a href="#使用-pointer-events-禁用事件触发" class="headerlink" title="使用 pointer-events 禁用事件触发"></a>使用 pointer-events 禁用事件触发</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>pointer-events:none</code>禁用事件触发 (默认事件、冒泡事件、鼠标事件、键盘事件等),相当于<code>&lt;button&gt;</code>的<code>disabled</code></li><li>场景:<strong>限时点击按钮</strong> (发送验证码倒计时)、<strong>事件冒泡禁用</strong> (多个元素重叠且自带事件、a 标签跳转)</li><li>兼容:<a href="https://caniuse.com/#search=pointer-events">pointer-events</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/dxmrLj">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8pointer-events%E7%A6%81%E7%94%A8%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91.gif" alt="使用pointer-events禁用事件触发"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="dxmrLj" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用pointer-events禁用事件触发","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用pointer-events禁用事件触发">  &lt;a class="disabled-trigger" href="https://www.baidu.com">点我&lt;/a>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.disabled-trigger {  padding: 0 20px;  border-radius: 10px;  height: 40px;  background-color: #66f;  pointer-events: none;  line-height: 40px;  color: #fff;}</pre>  <pre data-lang="js">document.getElementsByClassName("disabled-trigger")[0].addEventListener("click", () => alert("Hello World"));</pre></div></details><hr><h3 id="使用-或-美化选项框"><a href="#使用-或-美化选项框" class="headerlink" title="使用 + 或~ 美化选项框"></a>使用 + 或~ 美化选项框</h3><details><summary><b>解析</b></summary><ul><li>要点:<code>&lt;label&gt;</code>使用<code>+</code>或<code>~</code>配合<code>for</code>绑定<code>radio</code>或<code>checkbox</code>的选择行为</li><li>场景:<strong>选项框美化</strong>、<strong>选中项增加选中样式</strong></li><li>兼容:<a href="https://caniuse.com/#search=+">+</a>、<a href="https://caniuse.com/#search=~">~</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/rXdbgZ">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8+%E6%88%96~%E7%BE%8E%E5%8C%96%E9%80%89%E9%A1%B9%E6%A1%86.gif" alt="使用+或~美化选项框"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="rXdbgZ" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用+或~美化选项表单","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用+或~美化选项表单">  &lt;ul class="beauty-selection">    &lt;li>      &lt;input id="fed-engineer" type="radio" name="radioName" hidden>      &lt;label for="fed-engineer">&lt;/label>      &lt;span>前端工程师&lt;/span>    &lt;/li>    &lt;li>      &lt;input id="bed-engineer" type="radio" name="radioName" hidden>      &lt;label for="bed-engineer">&lt;/label>      &lt;span>后端工程师&lt;/span>    &lt;/li>    &lt;li>      &lt;input id="fsd-engineer" type="radio" name="radioName" hidden>      &lt;label for="fsd-engineer">&lt;/label>      &lt;span>全栈工程师&lt;/span>    &lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.beauty-selection {  display: flex;  li {    display: flex;    align-items: center;    & + li {      margin-left: 20px;    }  }  input:checked + label {    background-color: #f90;  }  label {    margin-right: 5px;    padding: 2px;    border: 1px solid #f90;    border-radius: 100%;    width: 18px;    height: 18px;    background-clip: content-box;    cursor: pointer;    transition: all 300ms;    &:hover {      border-color: #09f;      background-color: #09f;      box-shadow: 0 0 7px #09f;    }  }  span {    font-size: 16px;  }}</pre></div></details><hr><h3 id="使用-focus-within-分发冒泡响应"><a href="#使用-focus-within-分发冒泡响应" class="headerlink" title="使用:focus-within 分发冒泡响应"></a>使用:focus-within 分发冒泡响应</h3><details><summary><b>解析</b></summary><ul><li>要点:表单控件触发<code>focus</code>和<code>blur</code>事件后往父元素进行冒泡,在父元素上通过<code>:focus-within</code>捕获该冒泡事件来设置样式</li><li>场景:<strong>登录注册弹框</strong>、<strong>表单校验</strong>、<a href="https://codepen.io/dannievinther/pen/NvZjvz"><strong>离屏导航</strong></a>、<a href="https://codepen.io/Chokcoco/pen/RJEpaP"><strong>导航切换</strong></a></li><li>兼容:<a href="https://www.caniuse.com/#search=%3Afocus-within">:focus-within</a>、<a href="https://www.caniuse.com/#search=%3Aplaceholder-shown">:placeholder-shown</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/BaBjaBP">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8focus-within%E5%88%86%E5%8F%91%E5%86%92%E6%B3%A1%E5%93%8D%E5%BA%94.gif" alt="使用:focus-within分发冒泡响应"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="BaBjaBP" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用:focus-within分发冒泡响应","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用:focus-within分发冒泡响应">  &lt;form class="bubble-distribution">    &lt;h3>注册&lt;/h3>    &lt;div class="accout">      &lt;input type="text" placeholder="请输入手机或邮箱" pattern="^1[3456789]\d{9}$|^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$" required>      &lt;img src="https://b-gold-cdn.xitu.io/v3/static/img/greeting.1415c1c.png">    &lt;/div>    &lt;div class="password">      &lt;input type="password" placeholder="请输入密码(6到20位字符)" pattern="^[\dA-Za-z_]{6,20}$" required>      &lt;img src="https://b-gold-cdn.xitu.io/v3/static/img/blindfold.58ce423.png">    &lt;/div>    &lt;div class="code">      &lt;input type="text" placeholder="请输入邀请码(6位数字)" pattern="^[\d]{6}$" maxLength="6" required>      &lt;button type="button">查询&lt;/button>      &lt;img src="https://b-gold-cdn.xitu.io/v3/static/img/greeting.1415c1c.png">    &lt;/div>    &lt;img src="https://b-gold-cdn.xitu.io/v3/static/img/normal.0447fe9.png">    &lt;ul>      &lt;li>        &lt;input id="male" type="radio" name="sex">        &lt;label for="male">Boy&lt;/label>      &lt;/li>      &lt;li>        &lt;input id="female" type="radio" name="sex">        &lt;label for="female">Girl&lt;/label>      &lt;/li>    &lt;/ul>    &lt;button type="button">注册&lt;/button>  &lt;/form>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.bruce {  background-color: #999;}.bubble-distribution {  position: relative;  margin-top: 50px;  padding: 25px;  border-radius: 2px;  width: 320px;  background-color: #fff;  h3 {    font-size: 16px;    color: #333;  }  div {    margin-top: 10px;  }  img {    position: absolute;    left: 50%;    bottom: 100%;    margin: 0 0 -20px -60px;    width: 120px;  }  ul {    display: flex;    justify-content: space-between;    align-items: center;    margin-top: 10px;    height: 30px;    line-height: 30px;  }  li {    position: relative;    width: 45%;    transition: all 300ms;    &:focus-within {      background: linear-gradient(90deg, #09f 50%, transparent 0) repeat-x,        linear-gradient(90deg, #09f 50%, transparent 0) repeat-x,        linear-gradient(0deg, #09f 50%, transparent 0) repeat-y,        linear-gradient(0deg, #09f 50%, transparent 0) repeat-y;      background-position: 0 0, 0 100%, 0 0, 100% 0;      background-size: 8px 1px, 8px 1px, 1px 8px, 1px 8px;      animation: move 500ms infinite linear;    }  }  input[type=text],  input[type=password] {    padding: 10px;    border: 1px solid #e9e9e9;    border-radius: 2px;    width: 100%;    height: 40px;    outline: none;    transition: all 300ms;    &:focus:valid {      border-color: #09f;    }    &:focus:invalid {      border-color: #f66;    }  }  input[type=radio] {    position: absolute;    width: 0;    height: 0;    &:checked + label {      border: 3px solid transparent;      background-color: #09f;      color: #fff;    }  }  label {    display: block;    border-bottom: 1px solid #ccc;    width: 100%;    background-clip: padding-box;    cursor: pointer;    text-align: center;    transition: all 300ms;  }  button {    overflow: hidden;    margin-top: 10px;    border: none;    border-radius: 2px;    width: 100%;    height: 40px;    outline: none;    background-color: #09f;    cursor: pointer;    color: #fff;    transition: all 300ms;  }  .accout,  .password,  .code {    img {      display: none;      margin-bottom: -27px;    }    &:focus-within {      img {        display: block;      }      & ~ img {        display: none;      }    }  }  .code {    display: flex;    justify-content: space-between;    button {      margin-top: 0;    }    input {      &:not(:placeholder-shown) {        width: 70%;        & + button {          width: 25%;        }      }      &:placeholder-shown {        width: 100%;        & + button {          width: 0;          opacity: 0;        }      }    }  }}@keyframes move {  to {    background-position: 6% 0, -6% 100%, 0 -6%, 100% 6%;  }}</pre></div></details><hr><h3 id="使用-hover-描绘鼠标跟随"><a href="#使用-hover-描绘鼠标跟随" class="headerlink" title="使用:hover 描绘鼠标跟随"></a>使用:hover 描绘鼠标跟随</h3><details><summary><b>解析</b></summary><ul><li>要点:将整个页面等比划分成小的单元格,每个单元格监听<code>:hover</code>,通过<code>:hover</code>触发单元格的样式变化来描绘鼠标运动轨迹</li><li>场景:<strong>鼠标跟随轨迹</strong>、<a href="https://codepen.io/YusukeNakaya/pen/vvEqVx"><strong>水波纹</strong></a>、<a href="https://codepen.io/Chokcoco/pen/zyyYqN"><strong>怪圈</strong></a></li><li>兼容:<a href="https://www.caniuse.com/#search=%3Ahover">:hover</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/wvwMLJY">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8hover%E6%8F%8F%E7%BB%98%E9%BC%A0%E6%A0%87%E8%B7%9F%E9%9A%8F.gif" alt="使用:hover描绘鼠标跟随"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="wvwMLJY" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用:hover描绘鼠标跟随","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="pug">.bruce(data-title="使用:hover描绘鼠标跟随")  ul.mouse-following    - for (let i = 0; i &lt; 500; i++)      li</pre>  <pre data-lang="scss" data-option-autoprefixer="true">@function random-num($max, $min: 0, $u: 1) {  @return ($min + random($max)) * $u;}.mouse-following {  display: flex;  overflow: hidden;  flex-wrap: wrap;  height: 100%;  cursor: pointer;  li {    position: relative;    width: 30px;    height: 30px;    &::before {      position: absolute;      left: 0;      right: 0;      top: 0;      bottom: 0;      border-radius: 100%;      background-color: transparent;      content: "";      transform: scale3d(.1, .1, 1);      transition: all 500ms ease-in;    }    &:hover {      &::before {        transform: scale3d(1.8, 1.8, 1.8);        transition: transform 0s;      }    }    @for $i from 1 through 500 {      &:nth-child(#{$i}):hover {        &::before {          background-color: rgba(random-num(255), random-num(255), random-num(255), .8);        }      }    }  }}</pre></div></details><hr><h3 id="使用-max-height-切换自动高度"><a href="#使用-max-height-切换自动高度" class="headerlink" title="使用 max-height 切换自动高度"></a>使用 max-height 切换自动高度</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>max-height</code>定义收起的最小高度和展开的最大高度,设置两者间的过渡切换</li><li>场景:<strong>隐藏式子导航栏</strong>、<strong>悬浮式折叠面板</strong></li><li>兼容:<a href="https://caniuse.com/#search=max-height">max-height</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/NQYJpm">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8max-height%E5%88%87%E6%8D%A2%E8%87%AA%E5%8A%A8%E9%AB%98%E5%BA%A6.gif" alt="使用max-height切换自动高度"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="NQYJpm" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用max-height切换自动高度","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用max-height切换自动高度">  &lt;ul class="auto-height">    &lt;li>      &lt;h3>列表1&lt;/h3>      &lt;p>内容1&lt;br>内容2&lt;br>内容3&lt;br>内容4&lt;/p>    &lt;/li>    &lt;li>      &lt;h3>列表2&lt;/h3>      &lt;p>内容1&lt;br>内容2&lt;br>内容3&lt;br>内容4&lt;/p>    &lt;/li>    &lt;li>      &lt;h3>列表3&lt;/h3>      &lt;p>内容1&lt;br>内容2&lt;br>内容3&lt;br>内容4&lt;/p>    &lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.auto-height {  width: 300px;  li {    cursor: pointer;    & + li {      margin-top: 5px;    }    &:hover p {      border-bottom-width: 1px;      max-height: 600px;    }  }  h3 {    padding: 0 20px;    height: 40px;    background-color: #f66;    cursor: pointer;    line-height: 40px;    font-size: 16px;    color: #fff;  }  p {    overflow: hidden;    padding: 0 20px;    border: 1px solid #f66;    border-top: none;    border-bottom-width: 0;    max-height: 0;    line-height: 30px;    transition: all 500ms;  }}</pre></div></details><hr><h3 id="使用-transform-模拟视差滚动"><a href="#使用-transform-模拟视差滚动" class="headerlink" title="使用 transform 模拟视差滚动"></a>使用 transform 模拟视差滚动</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>background-attachment:fixed</code>或<code>transform</code>让多层背景以不同的速度移动,形成立体的运动效果</li><li>场景:<a href="https://codepen.io/Chokcoco/pen/JBaQoY"><strong>页面滚动</strong></a>、<a href="https://codepen.io/Chokcoco/pen/XBgBBp"><strong>视差滚动文字阴影</strong></a>、<a href="https://codepen.io/Chokcoco/pen/PBXwdX"><strong>视差滚动文字虚影</strong></a></li><li>兼容:<a href="https://www.caniuse.com/#search=background-attachment">background-attachment</a>、<a href="https://www.caniuse.com/#search=transform">transform</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/MWgaBoK">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8transform%E6%A8%A1%E6%8B%9F%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8.gif" alt="使用transform模拟视差滚动"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="MWgaBoK" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用transform模拟视差滚动","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce" data-title="使用transform模拟视差滚动">  &lt;ul class="parallax-scrolling">    &lt;li>translateZ(-1px)&lt;/li>    &lt;li>translateZ(-2px)&lt;/li>    &lt;li>translateZ(-3px)&lt;/li>  &lt;/ul>  &lt;p>内容&lt;/p>  &lt;ul class="parallax-scrolling">    &lt;li>translateZ(-1px)&lt;/li>    &lt;li>translateZ(-2px)&lt;/li>    &lt;li>translateZ(-3px)&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">$bg: "https://static.yangzw.vip/codepen/bg.jpg";.bruce {  overflow-x: hidden;  overflow-y: auto;  perspective: 1px;  transform-style: preserve-3d;  p {    height: 300px;    line-height: 300px;    text-align: center;    font-size: 20px;    color: #f66;  }}.parallax-scrolling {  display: flex;  justify-content: center;  align-items: center;  height: 1000px;  background: url($bg) no-repeat center fixed;  li {    width: 500px;    text-align: center;    font-weight: bold;    font-size: 60px;    &:nth-child(1) {      color: #f66;      transform: translateZ(-1px);    }    &:nth-child(2) {      color: #09f;      transform: translateZ(-2px);    }    &:nth-child(3) {      color: #3c9;      transform: translateZ(-3px);    }  }}</pre></div></details><hr><h3 id="使用-animation-delay-保留动画起始帧"><a href="#使用-animation-delay-保留动画起始帧" class="headerlink" title="使用 animation-delay 保留动画起始帧"></a>使用 animation-delay 保留动画起始帧</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>transform-delay</code>或<code>animation-delay</code>设置负值时延保留动画起始帧,让动画进入页面不用等待即可运行</li><li>场景:<strong>开场动画</strong></li><li>兼容:<a href="https://www.caniuse.com/#search=transform">transform</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/WNexVoB">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8animation-delay%E4%BF%9D%E7%95%99%E5%8A%A8%E7%94%BB%E8%B5%B7%E5%A7%8B%E5%B8%A7.gif" alt="使用animation-delay保留动画起始帧"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="WNexVoB" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用animation-delay保留动画首帧","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用animation-delay保留动画首帧">  &lt;ul class="initial-keyframe">    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.initial-keyframe {  position: relative;  width: 100px;  height: 100px;  li {    position: absolute;    border-radius: 100%;    width: 100%;    height: 100%;    background-color: #3c9;    transform: rotate(0) translate(-80px, 0);    animation: rotate 3s linear infinite;    &:nth-child(2) {      animation-delay: -1s;    }    &:nth-child(3) {      animation-delay: -2s;    }  }}@keyframes rotate {  to {    transform: rotate(1turn) translate(-80px, 0);  }}</pre></div></details><hr><h3 id="使用-resize-拉伸分栏"><a href="#使用-resize-拉伸分栏" class="headerlink" title="使用 resize 拉伸分栏"></a>使用 resize 拉伸分栏</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>resize</code>设置横向自由拉伸来调整目标元素的宽度</li><li>场景:<strong>富文本编辑器</strong>、<strong>分栏阅读</strong></li><li>兼容:<a href="https://caniuse.com/#search=resize">resize</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/JjPEdWO">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8resize%E6%8B%89%E4%BC%B8%E5%88%86%E6%A0%8F.gif" alt="使用resize拉伸分栏"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="JjPEdWO" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用resize拉伸多列分栏","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用resize拉伸多列分栏">  &lt;div class="stretching-column">    &lt;div class="left">      &lt;div class="resize-bar">&lt;/div>      &lt;div class="resize-line">&lt;/div>      &lt;div class="resize-text">ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/div>    &lt;/div>    &lt;div class="right">ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/div>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.stretching-column {  overflow: hidden;  border: 1px solid #09f;  width: 600px;  height: 300px;  line-height: 20px;  font-size: 16px;  color: #f90;  .left {    overflow: hidden;    float: left;    position: relative;    height: 100%;  }  .right {    overflow: hidden;    padding: 10px;    height: 100%;    background-color: #f0f0f0;    word-break: break-all;  }  .resize-bar {    overflow: scroll;    width: 200px;    height: 100%;    opacity: 0;    resize: horizontal;    &::-webkit-scrollbar {      width: 200px;      height: 100%;    }    &:hover,    &:active {      & ~ .resize-line {        border-left: 1px dashed #09f;      }    }  }  .resize-line {    position: absolute;    right: 0;    top: 0;    bottom: 0;    border-left: 1px solid #ccc;    border-right: 2px solid #f0f0f0;    pointer-events: none;  }  .resize-text {    overflow-x: hidden;    position: absolute;    left: 0;    right: 5px;    top: 0;    bottom: 0;    padding: 10px;    word-break: break-all;  }}</pre></div><h2 id="Color-Skill"><a href="#Color-Skill" class="headerlink" title="Color Skill"></a>Color Skill</h2></details><hr><h3 id="使用-color-改变边框颜色"><a href="#使用-color-改变边框颜色" class="headerlink" title="使用 color 改变边框颜色"></a>使用 color 改变边框颜色</h3><details><summary><b>解析</b></summary><ul><li>要点:<code>border</code>没有定义<code>border-color</code>时,设置<code>color</code>后,<code>border-color</code>会被定义成<code>color</code></li><li>场景:<strong>边框颜色与文字颜色相同</strong></li><li>兼容:<a href="https://caniuse.com/#search=color">color</a></li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.elem </span><span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #f66<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E4%BD%BF%E7%94%A8color%E6%94%B9%E5%8F%98%E8%BE%B9%E6%A1%86%E9%A2%9C%E8%89%B2.gif" alt="使用color改变边框颜色"></p></details><hr><h3 id="使用-filter-开启悼念模式"><a href="#使用-filter-开启悼念模式" class="headerlink" title="使用 filter 开启悼念模式"></a>使用 filter 开启悼念模式</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>filter:grayscale()</code>设置灰度模式来悼念某位去世的仁兄或悼念因灾难而去世的人们</li><li>场景:<strong>网站悼念</strong></li><li>兼容:<a href="https://caniuse.com/#search=filter">filter</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/vYBKqwe">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8filter%E5%BC%80%E5%90%AF%E6%82%BC%E5%BF%B5%E6%A8%A1%E5%BC%8F.png" alt="使用filter开启悼念模式"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="vYBKqwe" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:色彩】使用filter开启悼念模式","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用filter开启悼念模式">  &lt;img class="mourning-mode" src="https://static.yangzw.vip/codepen/car.jpg">&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.mourning-mode {  width: 400px;  filter: grayscale(100%);}</pre></div></details><hr><h3 id="使用-selection-改变文本选择颜色"><a href="#使用-selection-改变文本选择颜色" class="headerlink" title="使用::selection 改变文本选择颜色"></a>使用::selection 改变文本选择颜色</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>::selection</code>根据主题颜色自定义文本选择颜色</li><li>场景:<strong>主题化</strong></li><li>兼容:<a href="https://caniuse.com/#search=%3A%3Aselection">::selection</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/jONrjXX">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8selection%E6%94%B9%E5%8F%98%E6%96%87%E6%9C%AC%E9%80%89%E6%8B%A9%E9%A2%9C%E8%89%B2.gif" alt="使用selection改变文本选择颜色"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="jONrjXX" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:色彩】使用::selection改变选中颜色","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用::selection改变选中颜色">  &lt;div class="select-color">    &lt;p>全局选择文字颜色&lt;/p>    &lt;p>全局选择文字颜色&lt;/p>    &lt;p class="special">局部选择文字颜色&lt;/p>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">::selection {  background-color: #66f;  color: #fff;}.select-color {  line-height: 50px;  font-weight: bold;  font-size: 30px;  color: #f66;  p.special::selection {    background-color: #3c9;  }}</pre></div></details><hr><h3 id="使用-linear-gradient-控制背景渐变"><a href="#使用-linear-gradient-控制背景渐变" class="headerlink" title="使用 linear-gradient 控制背景渐变"></a>使用 linear-gradient 控制背景渐变</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>linear-gradient</code>设置背景渐变色并放大背景尺寸,添加背景移动效果</li><li>场景:<strong>主题化</strong>、<strong>彩虹背景墙</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/oNvbRwN">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8linear-gradient%E6%8E%A7%E5%88%B6%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98.gif" alt="使用linear-gradient控制背景渐变"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="oNvbRwN" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:色彩】使用linear-gradient()控制背景渐变","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce" data-title="使用linear-gradient控制背景渐变">  &lt;div class="gradient-bg">iCSS&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.gradient-bg {  display: flex;  justify-content: center;  align-items: center;  height: 100%;  background: linear-gradient(135deg, #f66, #f90, #3c9, #09f, #66f) left center/400% 400%;  font-weight: bold;  font-size: 100px;  color: #fff;  animation: move 10s infinite;}@keyframes move {  0%,  100% {    background-position-x: left;  }  50% {    background-position-x: right;  }}</pre></div></details><hr><h3 id="使用-linear-gradient-控制文本渐变"><a href="#使用-linear-gradient-控制文本渐变" class="headerlink" title="使用 linear-gradient 控制文本渐变"></a>使用 linear-gradient 控制文本渐变</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>linear-gradient</code>设置背景渐变色,配合<code>background-clip:text</code>对背景进行文本裁剪,添加滤镜动画</li><li>场景:<strong>主题化</strong>、<strong>特色标题</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a>、<a href="https://www.caniuse.com/#search=background-clip">background-clip</a>、<a href="https://caniuse.com/#search=filter">filter</a>、<a href="https://www.caniuse.com/#search=animation">animation</a>、<del><a href="https://www.caniuse.com/#search=text-fill-color">text-fill-color</a></del></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/pozgQVo">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8linear-gradient%E6%8E%A7%E5%88%B6%E6%96%87%E6%9C%AC%E6%B8%90%E5%8F%98.gif" alt="使用linear-gradient控制文本渐变"></p><!-- <p class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="pozgQVo" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 20px solid; margin: 1em 0; padding: 1em;" data-pen-title="【iCSS:色彩】使用linear-gradient()控制文本渐变">  <span>See the Pen <a href="https://codepen.io/JowayYoung/pen/pozgQVo">  【iCSS:色彩】使用linear-gradient()控制文本渐变</a> by JowayYoung (<a href="https://codepen.io/JowayYoung">@JowayYoung</a>)  on <a href="https://codepen.io">CodePen</a>.</span>--- --><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="pozgQVo" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:色彩】使用linear-gradient()控制文本渐变","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用linear-gradient控制文本渐变">  &lt;h1 class="gradient-text">Full Stack Developer&lt;/h1>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.gradient-text {  background-image: linear-gradient(90deg, #f66, #f90);  background-clip: text; // for Edge  Firefox    -webkit-background-clip: text; // for Chrome Opera Safari    line-height: 60px;  font-size: 60px;  animation: hue 5s linear infinite;  // -webkit-text-fill-color: transparent;   color: transparent;}@keyframes hue {  from {    filter: hue-rotate(0);  }  to {    filter: hue-rotate(-1turn);  }}</pre></div></details><hr><h3 id="使用-caret-color-改变光标颜色"><a href="#使用-caret-color-改变光标颜色" class="headerlink" title="使用 caret-color 改变光标颜色"></a>使用 caret-color 改变光标颜色</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>caret-color</code>根据主题颜色自定义光标颜色</li><li>场景:<strong>主题化</strong></li><li>兼容:<a href="https://caniuse.com/#search=caret-color">caret-color</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/QemxKr">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8caret-color%E6%94%B9%E5%8F%98%E5%85%89%E6%A0%87%E9%A2%9C%E8%89%B2.gif" alt="使用caret-color改变光标颜色"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="QemxKr" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:行为】使用:valid和:invalid校验输入表单","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用:valid和:invalid校验输入表单">  &lt;form class="form-validation">    &lt;div>      &lt;label>名字&lt;/label>      &lt;input type="text" placeholder="请输入你的名字(1到10个中文)" pattern="^[\u4e00-\u9fa5]{1,10}$" required>    &lt;/div>    &lt;div>      &lt;label>手机&lt;/label>      &lt;input type="text" placeholder="请输入你的手机" pattern="^1[3456789]\d{9}$" required>    &lt;/div>    &lt;div>      &lt;label>简介&lt;/label>      &lt;textarea required>&lt;/textarea>    &lt;/div>  &lt;/form>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.form-validation {  width: 500px;  div + div {    margin-top: 10px;  }  label {    display: block;    padding-bottom: 5px;    font-weight: bold;    font-size: 16px;  }  input,  textarea {    display: block;    padding: 0 20px;    border: 1px solid #ccc;    width: 100%;    height: 40px;    outline: none;    caret-color: #09f;    transition: all 300ms;    &:valid {      border-color: #3c9;    }    &:invalid {      border-color: #f66;    }  }  textarea {    height: 122px;    resize: none;    line-height: 30px;    font-size: 16px;  }}</pre></div></details><hr><h3 id="使用-scrollbar-改变滚动条样式"><a href="#使用-scrollbar-改变滚动条样式" class="headerlink" title="使用::scrollbar 改变滚动条样式"></a>使用::scrollbar 改变滚动条样式</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>scrollbar</code>的<code>scrollbar-track</code>和<code>scrollbar-thumb</code>等属性来自定义滚动条样式</li><li>场景:<strong>主题化</strong>、<strong>页面滚动</strong></li><li>兼容:<a href="https://www.caniuse.com/#search=scrollbar">::scrollbar</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/ExYPMog">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8scrollbar%E6%94%B9%E5%8F%98%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F.gif" alt="使用scrollbar改变滚动条样式"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="ExYPMog" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】滚动指示器","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="滚动指示器">  &lt;div class="scroll-indicator">    &lt;div>      &lt;article>        &lt;h1>2019中国互联网企业100强榜单&lt;/h1>        &lt;p>8月14日,中国互联网协会、工业和信息化部网络安全产业发展中心(工业和信息化部信息中心)在2019年中国互联网企业100强发布会暨百强企业高峰论坛上联合发布了2019年中国互联网企业100强榜单、互联网成长型企业20强榜单和《2019年中国互联网企业100强发展报告》.阿里巴巴(中国)有限公司、深圳市腾讯计算机系统有限责任公司、百度公司、京东集团、浙江蚂蚁小微金融服务集团股份有限公司、网易集团、美团点评、北京字节跳动科技有限公司、三六零安全科技股份有限公司、新浪公司位列榜单前十名.&lt;/p>        &lt;p>今年互联网百强企业聚焦创新引领、产业融合、工业互联网等方面,主要呈现出六大特点:&lt;/p>        &lt;p>一是整体规模跨越式提升,成为数字经济新引擎.2019年互联网百强企业互联网业务收入高达2.75万亿元,比2018年互联网百强企业互联网业务收入增长超过1万亿元,占我国数字经济的比重达8.8%,对数字经济的贡献率达14%,带动数字经济增长近2个百分点成为带动我国互联网产业发展的重要支撑.从互联网业务收入增长率分布看,有86家企业互联网业务收入实现增长.&lt;/p>        &lt;p>二是研发投入强度突破10%,打造中国核心技术.2019年互联网百强企业的研发投入达到1538.7亿元,同比增长45.1%,平均研发强度突破10%,比我国R&D经费投入强度高出近8个百分点.从研发强度分布看,有40家企业研发强度在10%以上,4家企业研发强度在30%-35%之间.互联网百强企业不断突破核心技术,互联网百强企业不断提升原始创新能力,加快推进5G、人工智能、云计算、大数据等关键核心技术突破,部分技术处于国际领先水平.2019年互联网百强企业已经拥有专利近8万项,其中发明专利数近6万项.2019年互联网百强企业中应用大数据企业29家,云计算28家,人工智能相关企业24家,运用物联网技术相关的企业3家.&lt;/p>        &lt;p>三是应用场景多元化,智能+打造生活消费新模式.互联网百强企业深化消费互联网发展,已对衣、食、住、行等各方面进行了全场景覆盖,业务涵盖互联网公共服务、网络媒体、音乐与视频、社交网络、科技创新与知识产权等17个领域,全方位提升了人民群众的生活、工作、文化、娱乐、教育等方面的生活质量.2019年互联网百强企业中从事电子商务的共18家;涉及互联网公共服务的共41家,主要提供信息查询、教育医疗、政务办理、公共出行等便民服务,让普通人民享受到"互联网+"带来的便利生活;21家企业涉及音乐与视频业务.同时,互联网百强企业积极发展智能产业,不断拓展"智能+",创造了智慧门店、VR/AR试衣试妆、无感支付等丰富的新消费业态和场景,打造未来智能生活消费新模式.&lt;/p>        &lt;p>四是工业互联网入实践深耕,赋能传统产业高质量发展.互联网百强企业通过不断向各行各业"渗透"和"赋能",推动云计算、大数据、物联网等信息通信技术与实体经济深入融合,培育新产业、新业态、新模式,支撑实体经济高质量发展.2019年互联网百强企业产业互联网数量再创新高,以服务实体经济客户为主的产业互联网领域企业数量达到60家,累计服务近4000万家企业.其中,涉及互联网数据服务41家,生产制造服务13家,科技创新和知识产权24家,B2B电商11家,互联网基础服务10家.&lt;/p>        &lt;p>五是"独角兽" 企业快速增长,国际行业地位再创新高.2019年互联网百强企业及下属企业涌现出蚂蚁金服、字节跳动、京东数科、满帮集团、优刻得、找钢网等25家独角兽企业,同比增长38.9%,业务涉及金融科技、智慧物流、电子商务、新文娱等领域.从全球公司市值排名情况看,2018年,全球互联网公司市值前三十强中互联网百强企业占10家,其中,腾讯集团和阿里巴巴稳居全球互联网公司市值前十强.&lt;/p>        &lt;p>六是覆盖地域实现新扩展,网络扶贫取得新成效.2019年拥有互联网百强企业的省份达到18个,在2018年基础上新增江西和山东两个省份,地域覆盖不断增加.在区域分布上,东部地区互联网百强企业数量共86家,中西部地区互联网百强企业共12家,东北地区互联网百强企业数量保持2家.其中,安徽、贵州、河南、湖北、湖南、江西、重庆、四川8个中西部地区互联网百强企业数量不断增加,较去年增长1家.互联网百强企业积极践行企业社会责任,发挥互联网在助推脱贫攻坚中的作用,探索"直播+电商"等扶贫新模式,推进精准扶贫、精准脱贫.据统计,超过一半以上互联网百强企业参与网络扶贫.&lt;/p>      &lt;/article>    &lt;/div>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.scroll-indicator {  overflow: hidden;  position: relative;  border: 1px solid #66f;  width: 500px;  height: 300px;  &::after {    position: absolute;    left: 0;    right: 5px;    top: 2px;    bottom: 0;    background-color: #fff;    content: "";  }  div {    overflow: auto;    height: 100%;    &::-webkit-scrollbar {      width: 5px;    }    &::-webkit-scrollbar-track {      background-color: #f0f0f0;    }    &::-webkit-scrollbar-thumb {      border-radius: 2px;      background-color: #66f;    }  }  article {    padding: 0 20px;    background: linear-gradient(to right top, #f66 50%, #f0f0f0 50%) no-repeat;    background-size: 100% calc(100% - 298px + 5px);    > * {      position: relative;      z-index: 9;    }  }  h1 {    line-height: 40px;    text-align: center;    font-size: 20px;  }  p {    margin-top: 20px;    line-height: 20px;    text-indent: 2em;  }}</pre></div></details><hr><h3 id="使用-filter-模拟-Instagram-滤镜"><a href="#使用-filter-模拟-Instagram-滤镜" class="headerlink" title="使用 filter 模拟 Instagram 滤镜"></a>使用 filter 模拟 Instagram 滤镜</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>filter</code>的滤镜组合起来模拟<code>Instagram滤镜</code></li><li>场景:<strong>图片滤镜</strong></li><li>兼容:<a href="https://caniuse.com/#search=filter">filter</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/NWKbVNQ">在线演示</a>、<a href="https://github.com/una/CSSgram/blob/master/README-CN.md">css-gram</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8filter%E6%A8%A1%E6%8B%9FInstagram%E6%BB%A4%E9%95%9C.png" alt="使用filter模拟Instagram滤镜"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="NWKbVNQ" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:色彩】使用filter模拟Instagram滤镜","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css","https://una.im/CSSgram/css/cssgram.min.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用filter模拟Instagram滤镜">    &lt;ul class="instagram-filter">      &lt;li>        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Default&lt;/p>      &lt;/li>      &lt;li class="_1977">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>1977&lt;/p>      &lt;/li>      &lt;li class="aden">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Aden&lt;/p>      &lt;/li>      &lt;li class="brannan">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Brannan&lt;/p>      &lt;/li>      &lt;li class="brooklyn">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Brooklyn&lt;/p>      &lt;/li>      &lt;li class="clarendon">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Clarendon&lt;/p>      &lt;/li>      &lt;li class="earlybird">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Earlybird&lt;/p>      &lt;/li>      &lt;li class="gingham">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Gingham&lt;/p>      &lt;/li>      &lt;li class="hudson">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Hudson&lt;/p>      &lt;/li>      &lt;li class="inkwell">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Inkwell&lt;/p>      &lt;/li>      &lt;li class="kelvin">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Kelvin&lt;/p>      &lt;/li>      &lt;li class="lark">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Lark&lt;/p>      &lt;/li>      &lt;li class="lofi">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>LoFi&lt;/p>      &lt;/li>      &lt;li class="maven">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Maven&lt;/p>      &lt;/li>      &lt;li class="mayfair">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Mayfair&lt;/p>      &lt;/li>      &lt;li class="moon">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Moon&lt;/p>      &lt;/li>      &lt;li class="nashville">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Nashville&lt;/p>      &lt;/li>      &lt;li class="perpetua">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Perpetua&lt;/p>      &lt;/li>      &lt;li class="reyes">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Reyes&lt;/p>      &lt;/li>      &lt;li class="rise">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Rise&lt;/p>      &lt;/li>      &lt;li class="slumber">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Slumber&lt;/p>      &lt;/li>      &lt;li class="stinson">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Stinson&lt;/p>      &lt;/li>      &lt;li class="toaster">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Toaster&lt;/p>      &lt;/li>      &lt;li class="valencia">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Valencia&lt;/p>      &lt;/li>      &lt;li class="walden">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Walden&lt;/p>      &lt;/li>      &lt;li class="willow">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>Willow&lt;/p>      &lt;/li>      &lt;li class="xpro2">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>X-pro II&lt;/p>      &lt;/li>      &lt;li class="obscure">        &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">        &lt;p>自定义:Obscure&lt;/p>      &lt;/li>    &lt;/ul>  &lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.instagram-filter {  display: flex;  overflow: auto;  flex-wrap: wrap;  justify-content: space-between;  align-content: space-between;  width: 1635px;  max-width: 100%;  min-height: 630px;  li {    overflow: hidden;    position: relative;    width: 225px;    height: 150px;    &.obscure {      filter: brightness(80%) grayscale(20%) contrast(1.2) opacity(.6);    }  }  img {    width: 100%;    height: 100%;  }  p {    position: absolute;    right: 0;    bottom: 0;    padding: 0 10px;    width: fit-content;    height: 30px;    background-color: #000;    filter: none;    line-height: 30px;    color: #fff;  }}</pre></div><h2 id="Figure-Skill"><a href="#Figure-Skill" class="headerlink" title="Figure Skill"></a>Figure Skill</h2></details><hr><h3 id="使用-div-描绘各种图形"><a href="#使用-div-描绘各种图形" class="headerlink" title="使用 div 描绘各种图形"></a>使用 div 描绘各种图形</h3><details><summary><b>解析</b></summary><ul><li>要点:<code>&lt;div&gt;</code>配合其伪元素 (<code>::before</code>、<code>::after</code>) 通过<code>clip</code>、<code>transform</code>等方式绘制各种图形</li><li>场景:各种图形容器</li><li>兼容:<a href="https://caniuse.com/#search=clip">clip</a>、<a href="https://caniuse.com/#search=transform">transform</a></li><li>代码:<a href="https://css-tricks.com/the-shapes-of-css/">在线演示</a></li></ul></details><hr><h3 id="使用-mask-雕刻镂空背景"><a href="#使用-mask-雕刻镂空背景" class="headerlink" title="使用 mask 雕刻镂空背景"></a>使用 mask 雕刻镂空背景</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>mask</code>为图像背景生成蒙层提供遮罩效果</li><li>场景:<strong>高斯模糊蒙层</strong>、<a href="https://codepen.io/HelKyle/pen/XxZPmY/"><strong>票劵</strong> (电影票、购物卡)</a>、<a href="https://codepen.io/banik/pen/aRpvdW"><strong>遮罩动画</strong></a></li><li>兼容:<a href="https://www.caniuse.com/#search=mask">mask</a>、<a href="https://caniuse.com/#search=perspective">perspective</a>、<a href="https://caniuse.com/#search=transform-style">transform-style</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/xxKZdZN">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8mask%E9%9B%95%E5%88%BB%E9%95%82%E7%A9%BA%E8%83%8C%E6%99%AF.gif" alt="使用mask雕刻镂空背景"></p></details><hr><h3 id="使用-linear-gradient-描绘波浪线"><a href="#使用-linear-gradient-描绘波浪线" class="headerlink" title="使用 linear-gradient 描绘波浪线"></a>使用 linear-gradient 描绘波浪线</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>linear-gradient</code>绘制波浪线</li><li>场景:<strong>文字强化显示</strong>、<strong>文字下划线</strong>、<strong>内容分割线</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/EqEzwq">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8linear-gradient%E6%8F%8F%E7%BB%98%E6%B3%A2%E6%B5%AA%E7%BA%BF.png" alt="使用linear-gradient描绘波浪线"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="EqEzwq" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用linear-gradient()描绘波浪划线","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用linear-gradient描绘波浪划线">    &lt;p class="waveline-text">波浪线文字&lt;/p>  &lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">@mixin waveline($h, $color: #f66) {  position: relative;  &::after {    position: absolute;    left: 0;    top: 100%;    width: 100%;    height: $h;    background: linear-gradient(135deg, transparent, transparent 45%, $color, transparent 55%, transparent 100%),      linear-gradient(45deg, transparent, transparent 45%, $color, transparent 55%, transparent 100%);    background-size: $h * 2 $h * 2;    content: "";  }}.waveline-text {  height: 20px;  line-height: 20px;  letter-spacing: 10px;  @include waveline(10px);}</pre></div></details><hr><h3 id="使用-linear-gradient-描绘彩带"><a href="#使用-linear-gradient-描绘彩带" class="headerlink" title="使用 linear-gradient 描绘彩带"></a>使用 linear-gradient 描绘彩带</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>linear-gradient</code>绘制间断颜色的彩带</li><li>场景:<strong>主题化</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/bGbeXZG">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8linear-gradient%E6%8F%8F%E7%BB%98%E5%BD%A9%E5%B8%A6.png" alt="使用linear-gradient描绘彩带"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="bGbeXZG" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用linear-gradient()描绘方格彩带","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用linear-gradient描绘方格彩带">  &lt;div class="colour-bar">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.colour-bar {  width: 500px;  height: 50px;  background-image: repeating-linear-gradient(90deg, #f66, #f66 50px, #66f 50px, #66f 100px);}</pre></div></details><hr><h3 id="使用-conic-gradient-描绘饼图"><a href="#使用-conic-gradient-描绘饼图" class="headerlink" title="使用 conic-gradient 描绘饼图"></a>使用 conic-gradient 描绘饼图</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>conic-gradient</code>绘制多种色彩的饼图</li><li>场景:<strong>项占比饼图</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/XWrjrgE">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8conic-gradient%E6%8F%8F%E7%BB%98%E9%A5%BC%E5%9B%BE.png" alt="使用conic-gradient描绘饼图"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="XWrjrgE" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用conic-gradient()描绘彩色饼图","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用conic-gradient()描绘彩色饼图">  &lt;div class="pie-chart">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.pie-chart {  border-radius: 100%;  width: 300px;  height: 300px;  background-image: conic-gradient(#f66 0 25%, #66f 25% 30%, #f90 30% 55%, #09f 55% 70%, #3c9 70% 100%);}</pre></div></details><hr><h3 id="使用-linear-gradient-描绘方格背景"><a href="#使用-linear-gradient-描绘方格背景" class="headerlink" title="使用 linear-gradient 描绘方格背景"></a>使用 linear-gradient 描绘方格背景</h3><details><summary><b>解析</b></summary><ul><li>要点:使用<code>linear-gradient</code>绘制间断颜色的彩带进行交互生成方格</li><li>场景:<strong>格子背景</strong>、<strong>占位图</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/RwboXoV">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8linear-gradient%E6%8F%8F%E7%BB%98%E6%96%B9%E6%A0%BC%E8%83%8C%E6%99%AF.png" alt="使用linear-gradient描绘方格背景"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="RwboXoV" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用linear-gradient()描绘方格背景","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用linear-gradient描绘方格背景">  &lt;div class="square-bg">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.square-bg {  width: 500px;  height: 300px;  background-image: linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%),    linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%);  background-position: 0 0, 20px 20px;  background-size: 40px 40px;}</pre></div></details><hr><h3 id="使用-box-shadow-描绘单侧投影"><a href="#使用-box-shadow-描绘单侧投影" class="headerlink" title="使用 box-shadow 描绘单侧投影"></a>使用 box-shadow 描绘单侧投影</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>box-shadow</code>生成投影,且模糊半径和负的扩张半径一致,使投影偏向一侧</li><li>场景:<strong>容器投影</strong>、<a href="https://codepen.io/Chokcoco/pen/WaBYZL"><strong>背景补间动画 1</strong></a>、<a href="https://codepen.io/davidkpiano/pen/LVzxPV"><strong>背景补间动画 2</strong></a>、<a href="https://codepen.io/Chokcoco/pen/LgdRKE"><strong>立体投影</strong></a>、<a href="https://codepen.io/Chokcoco/pen/JmgNNa"><strong>文字立体投影</strong></a>、<a href="https://codepen.io/Chokcoco/pen/XxQJEB"><strong>文字渐变立体投影</strong></a>、<a href="https://codepen.io/Chokcoco/pen/qJvVGy"><strong>长投影</strong></a>、<a href="https://codepen.io/Chokcoco/pen/WaLdwX"><strong>霓虹灯</strong></a>、<a href="https://codepen.io/Chokcoco/pen/ReOgvq"><strong>灯光阴影</strong></a></li><li>兼容:<a href="https://caniuse.com/#search=box-shadow">box-shadow</a>、<a href="https://caniuse.com/#search=filter">filter</a>、<a href="https://caniuse.com/#search=text-shadow">text-shadow</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/BaBLqYo">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8box-shadow%E6%8F%8F%E7%BB%98%E5%8D%95%E4%BE%A7%E6%8A%95%E5%BD%B1.png" alt="使用box-shadow描绘单侧投影"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="BaBLqYo" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用box-shadow描绘单侧投影","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用box-shadow描绘单侧投影">  &lt;div class="aside-shadow">投影&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.aside-shadow {  display: flex;  justify-content: center;  align-items: center;  border: 1px solid;  width: 100px;  height: 100px;  box-shadow: -7px 0 5px -5px #f90;  font-weight: bold;  font-size: 30px;  color: #f90;}</pre></div></details><hr><h3 id="使用-filter-描绘头像彩色阴影"><a href="#使用-filter-描绘头像彩色阴影" class="headerlink" title="使用 filter 描绘头像彩色阴影"></a>使用 filter 描绘头像彩色阴影</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>filter:blur() brightness() opacity()</code>模拟阴影效果</li><li>场景:<strong>头像阴影</strong></li><li>兼容:<a href="https://caniuse.com/#search=filter">filter</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/GRKjYap">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8filter%E6%8F%8F%E7%BB%98%E5%A4%B4%E5%83%8F%E5%BD%A9%E8%89%B2%E9%98%B4%E5%BD%B1.png" alt="使用filter描绘头像彩色阴影"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="GRKjYap" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:色彩】使用filter描绘彩色阴影","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用filter描绘头像彩色阴影">  &lt;div class="avatar-shadow">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">$avatar: "https://static.yangzw.vip/codepen/thor.jpg";.avatar-shadow {  position: relative;  border-radius: 100%;  width: 200px;  height: 200px;  background: url($avatar) no-repeat center/cover;  &::after {    position: absolute;    left: 0;    top: 10%;    z-index: -1;    border-radius: 100%;    width: 100%;    height: 100%;    background: inherit;    filter: blur(10px) brightness(80%) opacity(.8);    content: "";    transform: scale(.95);  }}</pre></div></details><hr><h3 id="使用-box-shadow-裁剪图像"><a href="#使用-box-shadow-裁剪图像" class="headerlink" title="使用 box-shadow 裁剪图像"></a>使用 box-shadow 裁剪图像</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>box-shadow</code>模拟蒙层实现中间镂空</li><li>场景:<strong>图片裁剪</strong>、<strong>新手引导</strong>、<strong>背景镂空</strong>、<strong>投射定位</strong></li><li>兼容:<a href="https://caniuse.com/#search=box-shadow">box-shadow</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/zYONxRG">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8box-shadow%E8%A3%81%E5%89%AA%E5%9B%BE%E5%83%8F.png" alt="使用box-shadow裁剪图像"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="zYONxRG" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用box-shadow裁剪聚焦区域","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用box-shadow裁剪聚焦区域">  &lt;div class="img-cliper">    &lt;img src="https://static.yangzw.vip/codepen/gz.jpg">    &lt;i>&lt;/i>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.img-cliper {  overflow: hidden;  position: relative;  img {    width: 400px;  }  i {    position: absolute;    left: 50px;    top: 30px;    border-radius: 100%;    width: 100px;    height: 50px;    box-shadow: 0 0 0 9999px rgba(#000, .5);  }}</pre></div><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="css,result" data-user="JowayYoung" data-slug-hash="zYONxRG" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用box-shadow裁剪聚焦区域","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css","https://yangzw.vip/static/css/theme.scss"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用box-shadow裁剪聚焦区域">  &lt;div class="img-cliper">    &lt;img src="https://pics.dmm.co.jp/digital/video/pred00172/pred00172jp-1.jpg">    &lt;i>&lt;/i>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.img-cliper {  overflow: hidden;  position: relative;  img {    width: 400px;  }  i {    position: absolute;    left: 160px;    top: 35px;    border-radius: 100%;    width: 120px;    height: 120px;    box-shadow: 0 0 0 9999px rgba(#000, .8);  }}</pre></div></details><hr><h3 id="使用-outline-描绘内边框"><a href="#使用-outline-描绘内边框" class="headerlink" title="使用 outline 描绘内边框"></a>使用 outline 描绘内边框</h3><details><summary><b>解析</b></summary><ul><li>要点:通过<code>outline</code>设置轮廓进行描边,可设置<code>outline-offset</code>设置内描边</li><li>场景:<strong>内描边</strong>、<strong>外描边</strong></li><li>兼容:<a href="https://caniuse.com/#search=outline">outline</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/pozeVyL">在线演示</a></li></ul><p><img src="/images/%E4%BD%BF%E7%94%A8outline%E6%8F%8F%E7%BB%98%E5%86%85%E8%BE%B9%E6%A1%86.png" alt="使用outline描绘内边框"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="pozeVyL" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:图形】使用outline描绘内部边框","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="使用outline描绘内部边框">  &lt;div class="outside-border">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.outside-border {  border: 10px dashed #f90;  width: 300px;  height: 300px;  outline: 10px dashed #09f;  outline-offset: -50px;  background-color: #3c9;}</pre></div><h2 id="Component-Skill"><a href="#Component-Skill" class="headerlink" title="Component Skill"></a>Component Skill</h2></details><hr><h3 id="迭代计数器"><a href="#迭代计数器" class="headerlink" title="迭代计数器"></a>迭代计数器</h3><details><summary><b>解析</b></summary><ul><li>要点:累加选项单位的计数器</li><li>场景:<strong>章节目录</strong>、<strong>选项计数器</strong>、<a href="https://codepen.io/CSSKing/pen/vEeMey"><strong>加法计数器</strong></a></li><li>兼容:<a href="https://caniuse.com/#search=counters">counters</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/rXqRPo">在线演示</a></li></ul><p><img src="/images/%E8%BF%AD%E4%BB%A3%E8%AE%A1%E6%95%B0%E5%99%A8.gif" alt="迭代计数器"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="rXqRPo" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】迭代计数器","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="迭代计数器">  &lt;div class="iterative-counter">    &lt;ul>      &lt;li>        &lt;input id="angular" type="checkbox">        &lt;label for="angular">Angular&lt;/label>      &lt;/li>      &lt;li>        &lt;input id="react" type="checkbox">        &lt;label for="react">React&lt;/label>      &lt;/li>      &lt;li>        &lt;input id="vue" type="checkbox">        &lt;label for="vue">Vue&lt;/label>      &lt;/li>    &lt;/ul>    &lt;p class="count" data-unit="个">框架:&lt;/p>    &lt;p class="weight" data-unit="%">权重:&lt;/p>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.iterative-counter {  ul {    counter-reset: index 0 count 0 weight 0;  }  li {    display: flex;    position: relative;    align-items: center;    counter-increment: index 1;    &::before {      content: counter(index)"、";    }    & + li {      margin-top: 10px;    }  }  input {    overflow: hidden;    position: absolute;    width: 0;    height: 0;    opacity: 0;    &:checked + label::before {      color: #3c9;      content: "\2713";    }  }  label {    display: flex;    align-items: center;    height: 20px;    &::before {      margin-right: 5px;      border: 1px solid #3c9;      width: 20px;      height: 20px;      cursor: pointer;      line-height: 20px;      text-align: center;      color: transparent;      content: "";      transition: all 300ms;    }  }  p {    margin-top: 10px;    &.count::after {      content: counter(count) attr(data-unit);    }    &.weight::after {      content: counter(weight) attr(data-unit);    }  }}#angular:checked {  counter-increment: count 1 weight 20;}#react:checked {  counter-increment: count 1 weight 50;}#vue:checked {  counter-increment: count 1 weight 30;}</pre></div></details><hr><h3 id="下划线跟随导航栏"><a href="#下划线跟随导航栏" class="headerlink" title="下划线跟随导航栏"></a>下划线跟随导航栏</h3><details><summary><b>解析</b></summary><ul><li>要点:下划线跟随鼠标移动的导航栏</li><li>场景:<strong>动态导航栏</strong></li><li>兼容:<a href="https://caniuse.com/#search=+">+</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/eYOJbNv">在线演示</a></li></ul><p><img src="/images/%E4%B8%8B%E5%88%92%E7%BA%BF%E8%B7%9F%E9%9A%8F%E5%AF%BC%E8%88%AA%E6%A0%8F.gif" alt="下划线跟随导航栏"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="eYOJbNv" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】划线跟随导航","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="下划线跟随导航栏">  &lt;ul class="underline-navbar">    &lt;li>Alibaba阿里巴巴&lt;/li>    &lt;li>Tencent腾讯&lt;/li>    &lt;li>Baidu百度&lt;/li>    &lt;li>Jingdong京东&lt;/li>    &lt;li>Ant蚂蚁金服&lt;/li>    &lt;li>Netease网易&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.underline-navbar {  display: flex;  li {    position: relative;    padding: 10px;    cursor: pointer;    font-size: 20px;    color: #09f;    transition: all 300ms;    &::before {      position: absolute;      left: 100%;      top: 0;      border-bottom: 2px solid transparent;      width: 0;      height: 100%;      content: "";      transition: all 300ms;    }    &:active {      background-color: #09f;      color: #fff;    }    &:hover {      &::before {        left: 0;        top: 0;        z-index: -1;        border-bottom-color: #09f;        width: 100%;        transition-delay: 100ms;      }      & + li::before {        left: 0;      }    }  }}</pre></div></details><hr><h3 id="气泡背景墙"><a href="#气泡背景墙" class="headerlink" title="气泡背景墙"></a>气泡背景墙</h3><details><summary><b>解析</b></summary><ul><li>要点:不间断冒出气泡的背景墙</li><li>场景:<strong>动态背景</strong></li><li>兼容:<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/GRKoPdK">在线演示</a></li></ul><p><img src="/images/%E6%B0%94%E6%B3%A1%E8%83%8C%E6%99%AF%E5%A2%99.gif" alt="气泡背景墙"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="GRKoPdK" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】气泡背景墙","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce" data-title="气泡背景墙">  &lt;ul class="bubble-bgwall">    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>    &lt;li>Love&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.bruce {  background-image: linear-gradient(270deg, #8146b4, #6990f6);}.bubble-bgwall {  overflow: hidden;  position: relative;  margin: 0 auto;  width: 100%;  max-width: 1200px;  height: 100%;  li {    display: flex;    position: absolute;    bottom: -200px;    justify-content: center;    align-items: center;    border-radius: 10px;    width: 50px;    height: 50px;    background-color: rgba(#fff, .15);    color: #ccc;    animation: bubble 15s infinite;    &:nth-child(1) {      left: 10%;    }    &:nth-child(2) {      left: 20%;      width: 90px;      height: 90px;      animation-duration: 7s;      animation-delay: 2s;    }    &:nth-child(3) {      left: 25%;      animation-delay: 4s;    }    &:nth-child(4) {      left: 40%;      width: 60px;      height: 60px;      background-color: rgba(#fff, .3);      animation-duration: 8s;    }    &:nth-child(5) {      left: 70%;    }    &:nth-child(6) {      left: 80%;      width: 120px;      height: 120px;      background-color: rgba(#fff, .2);      animation-delay: 3s;    }    &:nth-child(7) {      left: 32%;      width: 160px;      height: 160px;      animation-delay: 2s;    }    &:nth-child(8) {      left: 55%;      width: 40px;      height: 40px;      font-size: 12px;      animation-duration: 15s;      animation-delay: 4s;    }    &:nth-child(9) {      left: 25%;      width: 40px;      height: 40px;      background-color: rgba(#fff, .3);      font-size: 12px;      animation-duration: 12s;      animation-delay: 2s;    }    &:nth-child(10) {      left: 85%;      width: 160px;      height: 160px;      animation-delay: 5s;    }  }}@keyframes bubble {  0% {    opacity: .5;    transform: translateY(0) rotate(45deg);  }  25% {    opacity: .75;    transform: translateY(-400px) rotate(90deg);  }  50% {    opacity: 1;    transform: translateY(-600px) rotate(135deg);  }  100% {    opacity: 0;    transform: translateY(-1000px) rotate(180deg);  }}</pre></div></details><hr><h3 id="滚动指示器"><a href="#滚动指示器" class="headerlink" title="滚动指示器"></a>滚动指示器</h3><details><summary><b>解析</b></summary><ul><li>要点:提示滚动进度的指示器</li><li>场景:<a href="https://codepen.io/MadeByMike/pen/ZOrEmr"><strong>阅读进度</strong></a></li><li>兼容:<a href="https://caniuse.com/#search=calc()">calc()</a>、<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/ExYPMog">在线演示</a></li></ul><p><img src="/images/%E6%BB%9A%E5%8A%A8%E6%8C%87%E7%A4%BA%E5%99%A8.gif" alt="滚动指示器"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="JowayYoung" data-slug-hash="ExYPMog" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】滚动指示器","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="滚动指示器">  &lt;div class="scroll-indicator">    &lt;div>      &lt;article>        &lt;h1>2019中国互联网企业100强榜单&lt;/h1>        &lt;p>8月14日,中国互联网协会、工业和信息化部网络安全产业发展中心(工业和信息化部信息中心)在2019年中国互联网企业100强发布会暨百强企业高峰论坛上联合发布了2019年中国互联网企业100强榜单、互联网成长型企业20强榜单和《2019年中国互联网企业100强发展报告》.阿里巴巴(中国)有限公司、深圳市腾讯计算机系统有限责任公司、百度公司、京东集团、浙江蚂蚁小微金融服务集团股份有限公司、网易集团、美团点评、北京字节跳动科技有限公司、三六零安全科技股份有限公司、新浪公司位列榜单前十名.&lt;/p>        &lt;p>今年互联网百强企业聚焦创新引领、产业融合、工业互联网等方面,主要呈现出六大特点:&lt;/p>        &lt;p>一是整体规模跨越式提升,成为数字经济新引擎.2019年互联网百强企业互联网业务收入高达2.75万亿元,比2018年互联网百强企业互联网业务收入增长超过1万亿元,占我国数字经济的比重达8.8%,对数字经济的贡献率达14%,带动数字经济增长近2个百分点成为带动我国互联网产业发展的重要支撑.从互联网业务收入增长率分布看,有86家企业互联网业务收入实现增长.&lt;/p>        &lt;p>二是研发投入强度突破10%,打造中国核心技术.2019年互联网百强企业的研发投入达到1538.7亿元,同比增长45.1%,平均研发强度突破10%,比我国R&D经费投入强度高出近8个百分点.从研发强度分布看,有40家企业研发强度在10%以上,4家企业研发强度在30%-35%之间.互联网百强企业不断突破核心技术,互联网百强企业不断提升原始创新能力,加快推进5G、人工智能、云计算、大数据等关键核心技术突破,部分技术处于国际领先水平.2019年互联网百强企业已经拥有专利近8万项,其中发明专利数近6万项.2019年互联网百强企业中应用大数据企业29家,云计算28家,人工智能相关企业24家,运用物联网技术相关的企业3家.&lt;/p>        &lt;p>三是应用场景多元化,智能+打造生活消费新模式.互联网百强企业深化消费互联网发展,已对衣、食、住、行等各方面进行了全场景覆盖,业务涵盖互联网公共服务、网络媒体、音乐与视频、社交网络、科技创新与知识产权等17个领域,全方位提升了人民群众的生活、工作、文化、娱乐、教育等方面的生活质量.2019年互联网百强企业中从事电子商务的共18家;涉及互联网公共服务的共41家,主要提供信息查询、教育医疗、政务办理、公共出行等便民服务,让普通人民享受到"互联网+"带来的便利生活;21家企业涉及音乐与视频业务.同时,互联网百强企业积极发展智能产业,不断拓展"智能+",创造了智慧门店、VR/AR试衣试妆、无感支付等丰富的新消费业态和场景,打造未来智能生活消费新模式.&lt;/p>        &lt;p>四是工业互联网入实践深耕,赋能传统产业高质量发展.互联网百强企业通过不断向各行各业"渗透"和"赋能",推动云计算、大数据、物联网等信息通信技术与实体经济深入融合,培育新产业、新业态、新模式,支撑实体经济高质量发展.2019年互联网百强企业产业互联网数量再创新高,以服务实体经济客户为主的产业互联网领域企业数量达到60家,累计服务近4000万家企业.其中,涉及互联网数据服务41家,生产制造服务13家,科技创新和知识产权24家,B2B电商11家,互联网基础服务10家.&lt;/p>        &lt;p>五是"独角兽" 企业快速增长,国际行业地位再创新高.2019年互联网百强企业及下属企业涌现出蚂蚁金服、字节跳动、京东数科、满帮集团、优刻得、找钢网等25家独角兽企业,同比增长38.9%,业务涉及金融科技、智慧物流、电子商务、新文娱等领域.从全球公司市值排名情况看,2018年,全球互联网公司市值前三十强中互联网百强企业占10家,其中,腾讯集团和阿里巴巴稳居全球互联网公司市值前十强.&lt;/p>        &lt;p>六是覆盖地域实现新扩展,网络扶贫取得新成效.2019年拥有互联网百强企业的省份达到18个,在2018年基础上新增江西和山东两个省份,地域覆盖不断增加.在区域分布上,东部地区互联网百强企业数量共86家,中西部地区互联网百强企业共12家,东北地区互联网百强企业数量保持2家.其中,安徽、贵州、河南、湖北、湖南、江西、重庆、四川8个中西部地区互联网百强企业数量不断增加,较去年增长1家.互联网百强企业积极践行企业社会责任,发挥互联网在助推脱贫攻坚中的作用,探索"直播+电商"等扶贫新模式,推进精准扶贫、精准脱贫.据统计,超过一半以上互联网百强企业参与网络扶贫.&lt;/p>      &lt;/article>    &lt;/div>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.scroll-indicator {  overflow: hidden;  position: relative;  border: 1px solid #66f;  width: 500px;  height: 300px;  &::after {    position: absolute;    left: 0;    right: 5px;    top: 2px;    bottom: 0;    background-color: #fff;    content: "";  }  div {    overflow: auto;    height: 100%;    &::-webkit-scrollbar {      width: 5px;    }    &::-webkit-scrollbar-track {      background-color: #f0f0f0;    }    &::-webkit-scrollbar-thumb {      border-radius: 2px;      background-color: #66f;    }  }  article {    padding: 0 20px;    background: linear-gradient(to right top, #f66 50%, #f0f0f0 50%) no-repeat;    background-size: 100% calc(100% - 298px + 5px);    > * {      position: relative;      z-index: 9;    }  }  h1 {    line-height: 40px;    text-align: center;    font-size: 20px;  }  p {    margin-top: 20px;    line-height: 20px;    text-indent: 2em;  }}</pre></div></details><hr><h3 id="故障文本"><a href="#故障文本" class="headerlink" title="故障文本"></a>故障文本</h3><details><summary><b>解析</b></summary><ul><li>要点:显示器故障形式的文本</li><li>场景:<strong>错误提示</strong></li><li>兼容:<a href="https://caniuse.com/#search=data-">data-*</a>、<a href="https://caniuse.com/#search=attr()">attr()</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/xxKZNYv">在线演示</a></li></ul><p><img src="/images/%E6%95%85%E9%9A%9C%E6%96%87%E6%9C%AC.gif" alt="故障文本"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="xxKZNYv" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】故障文本","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="故障文本">  &lt;div class="fault-text" data-text="ERROR">ERROR&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.bruce {  background-color: #000;}.fault-text {  position: relative;  font-weight: bold;  font-size: 100px;  color: #fff;  &::before,  &::after {    overflow: hidden;    position: absolute;    top: 0;    background-color: #000;    clip: rect(0, 900px, 0, 0);    color: #fff;    content: attr(data-text);    animation: shake 3s linear infinite alternate-reverse;  }  &::before {    left: -2px;    text-shadow: 1px 0 #09f;  }  &::after {    left: 2px;    text-shadow: -1px 0 #f66;    animation-duration: 2s;  }}@keyframes shake {  $steps: 20;  @for $i from 0 through $steps {    #{percentage($i * (1 / $steps))} {      clip: rect(random(100) + px, 9999px, random(100) + px, 0);    }  }}</pre></div></details><hr><h3 id="换色器"><a href="#换色器" class="headerlink" title="换色器"></a>换色器</h3><details><summary><b>解析</b></summary><ul><li>要点:通过拾色器改变图像色相的换色器</li><li>场景:<strong>图片色彩变换</strong></li><li>兼容:<a href="https://www.caniuse.com/#search=mix-blend-mode">mix-blend-mode</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/vYBLqBm">在线演示</a></li></ul><p><img src="/images/%E6%8D%A2%E8%89%B2%E5%99%A8.gif" alt="换色器"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="vYBLqBm" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】图像换色器","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce" data-title="图像换色器">  &lt;div class="color-changer">    &lt;input type="color" value="#ff6666">    &lt;img src="https://static.yangzw.vip/codepen/car.jpg">  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.color-changer {  overflow: hidden;  position: relative;  height: 100%;  input {    position: absolute;    width: 100%;    height: 100%;    mix-blend-mode: hue;    cursor: pointer;  }  img {    width: 100%;    height: 100%;    object-fit: cover;  }}</pre></div></details><hr><h3 id="状态悬浮球"><a href="#状态悬浮球" class="headerlink" title="状态悬浮球"></a>状态悬浮球</h3><details><summary><b>解析</b></summary><ul><li>要点:展示当前状态的悬浮球</li><li>场景:<strong>状态动态显示</strong>、<strong>波浪动画</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/WNewOxa">在线演示</a></li></ul><p><img src="/images/%E7%8A%B6%E6%80%81%E6%82%AC%E6%B5%AE%E7%90%83.gif" alt="状态悬浮球"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="WNewOxa" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】悬浮状态球","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="状态悬浮球">  &lt;div class="state-ball warning">    &lt;div class="wave">&lt;/div>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.state-ball {  overflow: hidden;  position: relative;  padding: 5px;  border: 3px solid #3c9;  border-radius: 100%;  width: 150px;  height: 150px;  background-color: #fff;  &::before,  &::after {    position: absolute;    left: 50%;    top: 0;    z-index: 20;    margin-left: -100px;    width: 200px;    height: 200px;    content: "";  }  &::before {    margin-top: -150px;    border-radius: 45%;    background-color: rgba(#fff, .5);    animation: rotate 10s linear -5s infinite;  }  &::after {    margin-top: -160px;    border-radius: 40%;    background-color: rgba(#fff, .8);    animation: rotate 15s infinite;  }  &.warning {    border-color: #f90;    .wave {      background-image: linear-gradient(-180deg, #f0c78a 13%, #f90 91%);    }  }  &.danger {    border-color: #f66;    .wave {      background-image: linear-gradient(-180deg, #f78989 13%, #f66 91%);    }  }  .wave {    position: relative;    border-radius: 100%;    width: 100%;    height: 100%;    background-image: linear-gradient(-180deg, #af8 13%, #3c9 91%);  }}@keyframes rotate {  to {    transform: rotate(1turn);  }}</pre></div></details><hr><h3 id="粘粘球"><a href="#粘粘球" class="headerlink" title="粘粘球"></a>粘粘球</h3><details><summary><b>解析</b></summary><ul><li>要点:相交粘粘效果的双球回弹运动</li><li>场景:<a href="https://codepen.io/Chokcoco/pen/QqWBqV"><strong>粘粘动画</strong></a></li><li>兼容:<a href="https://caniuse.com/#search=filter">filter</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/zYOqdBz">在线演示</a></li></ul><p><img src="/images/%E7%B2%98%E7%B2%98%E7%90%83.gif" alt="粘粘球"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="zYOqdBz" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】粘粘球","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="粘粘球">  &lt;ul class="sticky-ball">    &lt;li class="ball-1">&lt;/li>    &lt;li class="ball-2">&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.sticky-ball {  position: relative;  width: 320px;  height: 80px;  filter: contrast(10);  li {    position: absolute;    top: 0;    padding: 10px;    border-radius: 100%;    width: 80px;    height: 80px;    background-color: #f66;    filter: blur(5px);    animation: 6s infinite;    &.ball-1 {      left: 0;      animation-name: move-1 !important;    }    &.ball-2 {      left: 240px;      animation-name: move-2 !important;    }  }}@keyframes move-1 {  0%,  20%,  100% {    width: 80px;    height: 80px;  }  50% {    left: 110px;    top: -15px;    width: 110px;    height: 110px;  }  85% {    left: 75px;    width: 90px;    height: 70px;  }  90% {    top: -2px;    width: 75px;    height: 85px;  }}@keyframes move-2 {  0%,  20%,  100% {    width: 80px;    height: 80px;  }  50% {    left: 110px;    top: -15px;    width: 110px;    height: 110px;  }  85% {    left: 165px;    width: 90px;    height: 70px;  }  90% {    top: -2px;    width: 75px;    height: 85px;  }}</pre></div></details><hr><h3 id="商城票券"><a href="#商城票券" class="headerlink" title="商城票券"></a>商城票券</h3><details><summary><b>解析</b></summary><ul><li>要点:边缘带孔和中间折痕的票劵</li><li>场景:<strong>电影票</strong>、<strong>代金券</strong>、<strong>消费卡</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/rNBeYza">在线演示</a></li></ul><p><img src="/images/%E5%95%86%E5%9F%8E%E7%A5%A8%E5%88%B8.png" alt="商城票券"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="rNBeYza" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】商城票券","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="商城票券">  &lt;div class="mall-ticket">    &lt;h3>100元&lt;/h3>    &lt;p>网易考拉代金券&lt;/p>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.mall-ticket {  display: flex;  position: relative;  width: 300px;  height: 100px;  background: radial-gradient(circle at right top, transparent 10px, #f66 0) top left/100px 51% no-repeat,    radial-gradient(circle at right bottom, transparent 10px, #f66 0) bottom left/100px 51% no-repeat,    radial-gradient(circle at left top, transparent 10px, #ccc 0) top right/200px 51% no-repeat,    radial-gradient(circle at left bottom, transparent 10px, #ccc 0) bottom right/200px 51% no-repeat;  filter: drop-shadow(2px 2px 2px rgba(#fff, .2));  line-height: 100px;  text-align: center;  color: #fff;  &::before {    position: absolute;    left: 100px;    top: 0;    bottom: 0;    margin: auto;    border: 1px dashed #66f;    height: 80px;    content: "";  }  &::after {    position: absolute;    left: 100%;    top: 0;    width: 5px;    height: 100%;    background-image: linear-gradient(180deg, #ccc 5px, transparent 5px, transparent),      radial-gradient(10px circle at 5px 10px, transparent 5px, #ccc 5px);    background-size: 5px 15px;    content: "";  }  h3 {    width: 100px;    font-size: 30px;  }  p {    flex: 1;    font-weight: bold;    font-size: 18px;  }}</pre></div></details><hr><h3 id="倒影加载条"><a href="#倒影加载条" class="headerlink" title="倒影加载条"></a>倒影加载条</h3><details><summary><b>解析</b></summary><ul><li>要点:带有渐变倒影的加载条</li><li>场景:<strong>加载提示</strong></li><li>兼容:<a href="https://caniuse.com/#search=box-reflect">box-reflect</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/GRKZzpg">在线演示</a></li></ul><p><img src="/images/%E5%80%92%E5%BD%B1%E5%8A%A0%E8%BD%BD%E6%9D%A1.gif" alt="倒影加载条"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="GRKZzpg" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】倒影加载条","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="倒影加载条">  &lt;ul class="reflect-loading">    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">$count: 10;$color: #66f #09f;.reflect-loading {  display: flex;  height: 100px;  -webkit-box-reflect: below 0 linear-gradient(rgba(#fff, 0), rgba(#fff, .7));  li {    width: 20px;    @for $i from 0 to $count {      $args: append($color, $i * 100% / ($count - 1));      &:nth-child(#{$i + 1}) {        background-color: mix($args...);        animation: rotate 3s cubic-bezier(.81, .04, .4, .7) infinite;        animation-delay: $i * 50ms;      }    }  }}@keyframes rotate {  0% {    transform: rotate(-.5turn) rotateX(-1turn);  }  75%,  100% {    transform: none;  }}</pre></div></details><hr><h3 id="三维立方体"><a href="#三维立方体" class="headerlink" title="三维立方体"></a>三维立方体</h3><details><summary><b>解析</b></summary><ul><li>要点:三维建模的立方体</li><li>场景:<strong>三维建模</strong></li><li>兼容:<a href="https://caniuse.com/#search=transform">transform</a>、<a href="https://caniuse.com/#search=perspective">perspective</a>、<a href="https://caniuse.com/#search=transform-style">transform-style</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/PoYNgXY">在线演示</a></li></ul><p><img src="/images/%E4%B8%89%E7%BB%B4%E7%AB%8B%E6%96%B9%E4%BD%93.gif" alt="三维立方体"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="PoYNgXY" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】三维立方体","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="三维立方体">  &lt;div class="td-cube">    &lt;ul>      &lt;li class="front">1&lt;/li>      &lt;li class="back">2&lt;/li>      &lt;li class="top">3&lt;/li>      &lt;li class="bottom">4&lt;/li>      &lt;li class="left">5&lt;/li>      &lt;li class="right">6&lt;/li>    &lt;/ul>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">$width: 150px;$height: 150px;$length: 150px;.td-cube {  width: $width;  height: $height;  perspective: 1000px;  ul {    position: relative;    width: 100%;    height: 100%;    transform: rotateX(-15deg) rotateY(15deg);    transform-style: preserve-3d;    animation: rotate 5s infinite linear;  }  li {    display: flex;    position: absolute;    justify-content: center;    align-items: center;    width: $width;    height: $height;    opacity: .8;    font-size: 50px;    color: #fff;    &.front {      background-color: #f66;      transform: translateZ($length / 2);    }    &.back {      background-color: #66f;      transform: rotateY(180deg) translateZ($length / 2);    }    &.top {      background-color: #f90;      transform: rotateX(90deg) translateZ($height / 2);    }    &.bottom {      background-color: #09f;      transform: rotateX(-90deg) translateZ($height / 2);    }    &.left {      background-color: #9c3;      transform: rotateY(-90deg) translateZ($width / 2);    }    &.right {      background-color: #3c9;      transform: rotateY(90deg) translateZ($width / 2);    }  }}@keyframes rotate {  from {    transform: rotateY(0) rotateX(0);  }  to {    transform: rotateY(-1turn) rotateX(-1turn);  }}</pre></div></details><hr><h3 id="动态边框"><a href="#动态边框" class="headerlink" title="动态边框"></a>动态边框</h3><details><summary><b>解析</b></summary><ul><li>要点:鼠标悬浮时动态渐变显示的边框</li><li>场景:<strong>悬浮按钮</strong>、<strong>边框动画</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/qBWZPvE">在线演示</a></li></ul><p><img src="/images/%E5%8A%A8%E6%80%81%E8%BE%B9%E6%A1%86.gif" alt="动态边框"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="qBWZPvE" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】悬浮边框按钮","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="悬浮边框按钮">  &lt;div class="dynamic-border">iCSS&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.dynamic-border {  width: 200px;  height: 80px;  background: linear-gradient(0, #f66 2px, #f66 2px) no-repeat left top/0 2px,    linear-gradient(-90deg, #f66 2px, #f66 2px) no-repeat right top/2px 0,    linear-gradient(-180deg, #f66 2px, #f66 2px) no-repeat right bottom/0 2px,    linear-gradient(-270deg, #f66 2px, #f66 2px) no-repeat left bottom/2px 0;  cursor: pointer;  line-height: 80px;  text-align: center;  font-weight: bold;  font-size: 50px;  color: #f66;  transition: all 300ms;  &:hover {    background-size: 100% 2px, 2px 100%, 100% 2px, 2px 100%;  }}</pre></div></details><hr><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><details><summary><b>解析</b></summary><ul><li>要点:可切换内容的标签页</li><li>场景:<strong>内容切换</strong></li><li>兼容:<a href="https://caniuse.com/#search=scroll-behavior">scroll-behavior</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/JjPRjMd">在线演示</a></li></ul><p><img src="/images/%E6%A0%87%E7%AD%BE%E9%A1%B5.gif" alt="标签页"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="JjPRjMd" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】标签选框","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="标签选框">  &lt;div class="tab-page">    &lt;nav>      &lt;h3>        &lt;input type="radio" name="tab">        &lt;label for="tab1">标题1&lt;/label>      &lt;/h3>      &lt;h3>        &lt;input type="radio" name="tab">        &lt;label for="tab2">标题2&lt;/label>      &lt;/h3>      &lt;h3>        &lt;input type="radio" name="tab">        &lt;label for="tab3">标题3&lt;/label>      &lt;/h3>    &lt;/nav>    &lt;ul>      &lt;li>        &lt;input id="tab1">        &lt;p>内容1&lt;/p>      &lt;/li>      &lt;li>        &lt;input id="tab2">        &lt;p>内容2&lt;/p>      &lt;/li>      &lt;li>        &lt;input id="tab3">        &lt;p>内容3&lt;/p>      &lt;/li>    &lt;/ul>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.tab-page {  width: 300px;  nav {    display: flex;    border: 1px solid #3c9;    height: 40px;    line-height: 40px;    text-align: center;    h3 {      position: relative;      flex: 1;      background-color: #3c9;      color: #fff;      & + h3 {        border-left: 1px solid #fff;      }    }    input {      display: none;    }    label {      display: block;      width: 100%;      height: 100%;      cursor: pointer;    }  }  ul {    overflow: hidden;    scroll-behavior: smooth;    border: 1px solid #3c9;    border-top: none;    height: 100px;    li {      display: flex;      position: relative;      justify-content: center;      align-items: center;      height: 100%;      font-size: 20px;      color: #09f;    }    input {      position: absolute;      width: 0;      height: 0;      opacity: 0;    }  }}</pre></div></details><hr><h3 id="标签导航栏"><a href="#标签导航栏" class="headerlink" title="标签导航栏"></a>标签导航栏</h3><details><summary><b>解析</b></summary><ul><li>要点:可切换内容的导航栏</li><li>场景:<strong>页面切换</strong></li><li>兼容:<a href="https://caniuse.com/#search=~">~</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/oNvzoZg">在线演示</a></li></ul><p><img src="/images/%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%88%AA%E6%A0%8F.gif" alt="标签导航栏"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="oNvzoZg" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】标签导航","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="标签导航">  &lt;div class="tab-navbar">    &lt;input id="tab1" type="radio" name="tabs" hidden checked>    &lt;input id="tab2" type="radio" name="tabs" hidden>    &lt;input id="tab3" type="radio" name="tabs" hidden>    &lt;input id="tab4" type="radio" name="tabs" hidden>    &lt;nav>      &lt;label for="tab1">标题1&lt;/label>      &lt;label for="tab2">标题2&lt;/label>      &lt;label for="tab3">标题3&lt;/label>      &lt;label for="tab4">标题4&lt;/label>    &lt;/nav>    &lt;main>      &lt;ul>        &lt;li>内容1&lt;/li>        &lt;li>内容2&lt;/li>        &lt;li>内容3&lt;/li>        &lt;li>内容4&lt;/li>      &lt;/ul>    &lt;/main>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.active {  background-color: #3c9;  color: #fff;}.tab-navbar {  display: flex;  overflow: hidden;  flex-direction: column-reverse;  border-radius: 10px;  width: 300px;  height: 400px;  input {    &:nth-child(1):checked {      & ~ nav label:nth-child(1) {        @extend .active;      }      & ~ main ul {        background-color: #f66;        transform: translate3d(0, 0, 0);      }    }    &:nth-child(2):checked {      & ~ nav label:nth-child(2) {        @extend .active;      }      & ~ main ul {        background-color: #66f;        transform: translate3d(-25%, 0, 0);      }    }    &:nth-child(3):checked {      & ~ nav label:nth-child(3) {        @extend .active;      }      & ~ main ul {        background-color: #f90;        transform: translate3d(-50%, 0, 0);      }    }    &:nth-child(4):checked {      & ~ nav label:nth-child(4) {        @extend .active;      }      & ~ main ul {        background-color: #09f;        transform: translate3d(-75%, 0, 0);      }    }  }  nav {    display: flex;    height: 40px;    background-color: #f0f0f0;    line-height: 40px;    text-align: center;    label {      flex: 1;      cursor: pointer;      transition: all 300ms;    }  }  main {    flex: 1;    ul {      display: flex;      flex-wrap: nowrap;      width: 400%;      height: 100%;      transition: all 300ms;    }    li {      display: flex;      justify-content: center;      align-items: center;      flex: 1;      font-weight: bold;      font-size: 20px;      color: #fff;    }  }}</pre></div></details><hr><h3 id="折叠面板"><a href="#折叠面板" class="headerlink" title="折叠面板"></a>折叠面板</h3><details><summary><b>解析</b></summary><ul><li>要点:可折叠内容的面板</li><li>场景:<strong>隐藏式子导航栏</strong></li><li>兼容:<a href="https://caniuse.com/#search=~">~</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/NWKRMjo">在线演示</a></li></ul><p><img src="/images/%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF.gif" alt="折叠面板"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="NWKRMjo" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】折叠面板","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="折叠面板">  &lt;div class="accordion">    &lt;input id="collapse1" type="checkbox">    &lt;input id="collapse2" type="checkbox">    &lt;input id="collapse3" type="checkbox">    &lt;article>      &lt;label for="collapse1">列表1&lt;/label>      &lt;p>内容1&lt;br>内容2&lt;br>内容3&lt;br>内容4&lt;/p>    &lt;/article>    &lt;article>      &lt;label for="collapse2">列表2&lt;/label>      &lt;p>内容1&lt;br>内容2&lt;br>内容3&lt;br>内容4&lt;/p>    &lt;/article>    &lt;article>      &lt;label for="collapse3">列表3&lt;/label>      &lt;p>内容1&lt;br>内容2&lt;br>内容3&lt;br>内容4&lt;/p>    &lt;/article>  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.accordion {  width: 300px;  article {    cursor: pointer;    & + article {      margin-top: 5px;    }  }  input {    display: none;    &:nth-child(1):checked ~ article:nth-of-type(1) p,    &:nth-child(2):checked ~ article:nth-of-type(2) p,    &:nth-child(3):checked ~ article:nth-of-type(3) p {      border-bottom-width: 1px;      max-height: 600px;    }  }  label {    display: block;    padding: 0 20px;    height: 40px;    background-color: #f66;    cursor: pointer;    line-height: 40px;    font-size: 16px;    color: #fff;  }  p {    overflow: hidden;    padding: 0 20px;    border: 1px solid #f66;    border-top: none;    border-bottom-width: 0;    max-height: 0;    line-height: 30px;    transition: all 500ms;  }}</pre></div></details><hr><h3 id="星级评分"><a href="#星级评分" class="headerlink" title="星级评分"></a>星级评分</h3><details><summary><b>解析</b></summary><ul><li>要点:点击星星进行评分的按钮</li><li>场景:<strong>评分</strong></li><li>兼容:<a href="https://caniuse.com/#search=~">~</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/MWgjGMj">在线演示</a></li></ul><p><img src="/images/%E6%98%9F%E7%BA%A7%E8%AF%84%E5%88%86.gif" alt="星级评分"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="MWgjGMj" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】星级评分","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="星级评分">  &lt;div class="star-rating">    &lt;input type="radio" name="rate">    &lt;input type="radio" name="rate">    &lt;input type="radio" name="rate">    &lt;input type="radio" name="rate">    &lt;input type="radio" name="rate">  &lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.star-rating {  display: flex;  flex-direction: row-reverse;  input {    width: 30px;    height: 30px;    appearance: none;    cursor: pointer;    line-height: 30px;    text-align: center;    font-size: 30px;    transition: all 300ms;    &::after {      color: #66f;      content: "☆";      transition: all 300ms;    }    &:hover {      transform: scale(1.2);    }    &:checked,    &:hover {      &::after,      & ~ input::after {        color: #f66;        content: "★";      }    }  }}</pre></div></details><hr><h3 id="加载指示器"><a href="#加载指示器" class="headerlink" title="加载指示器"></a>加载指示器</h3><details><summary><b>解析</b></summary><ul><li>要点:变换<code>...</code>长度的加载提示</li><li>场景:<strong>加载提示</strong></li><li>兼容:<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/wvwoRbN">在线演示</a></li></ul><p><img src="/images/%E5%8A%A0%E8%BD%BD%E6%8C%87%E7%A4%BA%E5%99%A8.gif" alt="加载指示器"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="wvwoRbN" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】加载指示器","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="加载指示器">  &lt;div class="loading-indicator">加载中&lt;span>&lt;/span>&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.loading-indicator {  font-size: 16px;  color: #09f;  span {    display: inline-block;    overflow: hidden;    height: 1em;    line-height: 1;    vertical-align: -.25em;    &::after {      display: block;      white-space: pre-wrap;      content: "...\A..\A.";      animation: loading 3s infinite step-start both;    }  }}@keyframes loading {  33% {    transform: translate3d(0, -2em, 0);  }  66% {    transform: translate3d(0, -1em, 0);  }}</pre></div></details><hr><h3 id="自适应相册"><a href="#自适应相册" class="headerlink" title="自适应相册"></a>自适应相册</h3><details><summary><b>解析</b></summary><ul><li>要点:自适应照片数量的相册</li><li>场景:<strong>九宫格相册</strong>、<strong>微信相册</strong>、<strong>图集</strong></li><li>兼容:<a href="https://caniuse.com/#search=%3Aonly-child">:only-child</a>、<a href="https://caniuse.com/#search=%3Afirst-child">:first-child</a>、<a href="https://caniuse.com/#search=%3Anth-child()">:nth-child()</a>、<a href="https://caniuse.com/#search=%3Anth-last-child()">:nth-last-child()</a>、<a href="https://caniuse.com/#search=~">~</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/pozNGyj">在线演示</a></li></ul><p><img src="/images/%E8%87%AA%E9%80%82%E5%BA%94%E7%9B%B8%E5%86%8C.gif" alt="自适应相册"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="pozNGyj" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】自适应相册","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="自适应相册">    &lt;ul class="response-album">      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>      &lt;li class="item">&lt;img src="//static.yangzw.vip/codepen/ab-3.jpg">&lt;/li>    &lt;/ul>  &lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">@mixin square($count: 2) {  $length: calc((100% - #{$count} * 10px) / #{$count});  width: $length;  height: $length;}.response-album {  display: flex;  flex-wrap: wrap;  justify-content: flex-start;  align-content: flex-start;  padding: 5px;  border: 1px solid #ccc;  border-radius: 5px;  width: 400px;  height: 400px;  li {    display: flex;    overflow: hidden;    justify-content: center;    margin: 5px;    background-color: #f0f0f0;    @include square(3);  }  img {    width: 100%;    height: 100%;<pre><code>  object-fit: cover;&#125;</code></pre><p>}<br>// 一个元素<br>.item:only-child {<br>border-radius: 10px;<br>width: auto;<br>max-width: 80%;<br>height: auto;<br>max-height: 80%;<br>}<br>// 两个元素<br>.item:first-child:nth-last-child(2),<br>.item:first-child:nth-last-child(2) ~ .item:nth-child(2) {<br>@include square(2);<br>}<br>.item:first-child:nth-last-child(2) {<br>border-radius: 10px 0 0 10px;<br>}<br>.item:first-child:nth-last-child(2) ~ .item:nth-child(2) {<br>border-radius: 0 10px 10px 0;<br>}<br>// 三个元素<br>.item:first-child:nth-last-child(3),<br>.item:first-child:nth-last-child(3) ~ .item:nth-child(2),<br>.item:first-child:nth-last-child(3) ~ .item:nth-child(3) {<br>@include square(2);<br>}<br>.item:first-child:nth-last-child(3) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(3) ~ .item:nth-child(2) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(3) ~ .item:nth-child(3) {<br>border-bottom-left-radius: 10px;<br>}<br>// 四个元素<br>.item:first-child:nth-last-child(4),<br>.item:first-child:nth-last-child(4) ~ .item:nth-child(2),<br>.item:first-child:nth-last-child(4) ~ .item:nth-child(3),<br>.item:first-child:nth-last-child(4) ~ .item:nth-child(4) {<br>@include square(2);<br>}<br>.item:first-child:nth-last-child(4) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(4) ~ .item:nth-child(2) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(4) ~ .item:nth-child(3) {<br>border-bottom-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(4) ~ .item:nth-child(4) {<br>border-bottom-right-radius: 10px;<br>}<br>// 五个元素<br>.item:first-child:nth-last-child(5) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(5) ~ .item:nth-child(3) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(5) ~ .item:nth-child(4) {<br>border-bottom-left-radius: 10px;<br>}<br>// 六个元素<br>.item:first-child:nth-last-child(6) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(6) ~ .item:nth-child(3) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(6) ~ .item:nth-child(4) {<br>border-bottom-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(6) ~ .item:nth-child(6) {<br>border-bottom-right-radius: 10px;<br>}<br>// 七个元素<br>.item:first-child:nth-last-child(7) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(7) ~ .item:nth-child(3) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(7) ~ .item:nth-child(7) {<br>border-bottom-left-radius: 10px;<br>}<br>// 八个元素<br>.item:first-child:nth-last-child(8) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(8) ~ .item:nth-child(3) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(8) ~ .item:nth-child(7) {<br>border-bottom-left-radius: 10px;<br>}<br>// 九个元素<br>.item:first-child:nth-last-child(9) {<br>border-top-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(9) ~ .item:nth-child(3) {<br>border-top-right-radius: 10px;<br>}<br>.item:first-child:nth-last-child(9) ~ .item:nth-child(7) {<br>border-bottom-left-radius: 10px;<br>}<br>.item:first-child:nth-last-child(9) ~ .item:nth-child(9) {<br>border-bottom-right-radius: 10px;<br>}</pre></div></p></details><hr><h3 id="圆角进度条"><a href="#圆角进度条" class="headerlink" title="圆角进度条"></a>圆角进度条</h3><details><summary><b>解析</b></summary><ul><li>要点:单一颜色的圆角进度条</li><li>场景:<strong>进度条</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/jONBxaK">在线演示</a></li></ul><p><img src="/images/%E5%9C%86%E8%A7%92%E8%BF%9B%E5%BA%A6%E6%9D%A1.png" alt="圆角进度条"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="jONBxaK" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】圆角进度条","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="圆角进度条">  &lt;div class="fillet-progressbar">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">@mixin progress-bar($width: 100px, $height: 10px, $color: #f66, $percent: 0) {  border-radius: $height / 2;  width: $width;  height: $height;  background-color: #ccc;  background-image: radial-gradient(closest-side circle at $percent, $color, $color 100%, transparent),    linear-gradient($color, $color);  background-repeat: no-repeat;  background-size: 100%, $percent;}.fillet-progressbar {  @include progress-bar(500px, 10px, #66f, 50%);}</pre></div></details><hr><h3 id="螺纹进度条"><a href="#螺纹进度条" class="headerlink" title="螺纹进度条"></a>螺纹进度条</h3><details><summary><b>解析</b></summary><ul><li>要点:渐变螺纹的进度条</li><li>场景:<strong>进度条</strong>、<strong>加载动画</strong></li><li>兼容:<a href="https://caniuse.com/#search=gradient">gradient</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/GRKrJJX">在线演示</a></li></ul><p><img src="/images/%E8%9E%BA%E7%BA%B9%E8%BF%9B%E5%BA%A6%E6%9D%A1.gif" alt="螺纹进度条"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="GRKrJJX" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】螺纹进度条","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="螺纹进度条">  &lt;div class="thread-progressbar">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.thread-progressbar {  position: relative;  padding-right: 200px;  width: 500px;  height: calc(1.4142 * 20px);  background: repeating-linear-gradient(45deg, #3c9, #3c9 10px, transparent 11px, transparent 19px, #3c9 20px) 0 0 content-box;  animation: twill 1s linear infinite;  &::after {    position: absolute;    width: 100%;    height: 100%;    background-image: linear-gradient(rgba(#000, .5), rgba(#fff, .5), rgba(#000, .5));    content: "";  }}@keyframes twill {  to {    background-position-y: calc(-1 * 1.4142 * 40px);  }}</pre></div></details><hr><h3 id="立体按钮"><a href="#立体按钮" class="headerlink" title="立体按钮"></a>立体按钮</h3><details><summary><b>解析</b></summary><ul><li>要点:点击呈现按下状态的按钮</li><li>场景:<strong>按钮点击</strong></li><li>兼容:<a href="https://caniuse.com/#search=box-shadow">box-shadow</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/PoYpaLL">在线演示</a></li></ul><p><img src="/images/%E7%AB%8B%E4%BD%93%E6%8C%89%E9%92%AE.gif" alt="立体按钮"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="PoYpaLL" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】立体按钮","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="立体按钮">  &lt;button class="stereo-btn">iCSS&lt;/button>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.stereo-btn {  padding: 10px 20px;  border: none;  border-radius: 10px;  outline: none;  background-image: linear-gradient(#09f, #3c9);  box-shadow: 0 10px 0 #09f;  cursor: pointer;  text-shadow: 0 5px 5px #ccc;  font-size: 50px;  color: #fff;  transition: all 300ms;  &:active {    box-shadow: 0 5px 0 #09f;    transform: translate3d(0, 5px, 0);  }}</pre></div></details><hr><h3 id="混沌加载圈"><a href="#混沌加载圈" class="headerlink" title="混沌加载圈"></a>混沌加载圈</h3><details><summary><b>解析</b></summary><ul><li>要点:带混沌虚影的加载圈</li><li>场景:<strong>加载提示</strong></li><li>兼容:<a href="https://caniuse.com/#search=filter">filter</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/aboWbqG">在线演示</a></li></ul><p><img src="/images/%E6%B7%B7%E6%B2%8C%E5%8A%A0%E8%BD%BD%E5%9C%88.gif" alt="混沌加载圈"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="aboWbqG" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】混沌加载圈","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="混沌加载圈">  &lt;ul class="chaos-loading">    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>    &lt;li>&lt;/li>  &lt;/ul>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.chaos-loading {  overflow: hidden;  position: relative;  border-radius: 100%;  width: 200px;  height: 200px;  &::after {    display: block;    filter: drop-shadow(2px 4px 6px #000);    line-height: 200px;    text-align: center;    font-weight: bold;    font-size: 30px;    color: #fff;    content: "Loading...";  }  li {    position: absolute;    left: 0;    top: 0;    border-radius: 100%;    width: 100px;    height: 100px;    filter: blur(25px);    animation: move 2s linear infinite;    &:nth-child(1) {      background-color: #f66;    }    &:nth-child(2) {      background-color: #66f;      animation-delay: -500ms;    }    &:nth-child(3) {      background-color: #f90;      animation-delay: -1s;    }    &:nth-child(4) {      background-color: #09f;      animation-delay: -1.5s;    }  }}@keyframes move {  0%,  100% {    transform: translate3d(0, 0, 0);  }  25% {    transform: translate3d(100%, 0, 0);  }  50% {    transform: translate3d(100%, 100%, 0);  }  75% {    transform: translate3d(0, 100%, 0);  }}</pre></div></details><hr><h3 id="蛇形边框"><a href="#蛇形边框" class="headerlink" title="蛇形边框"></a>蛇形边框</h3><details><summary><b>解析</b></summary><ul><li>要点:蛇形运动的边框</li><li>场景:<strong>蛇形动画</strong></li><li>兼容:<a href="https://caniuse.com/#search=clip">clip</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/GRKmgZZ">在线演示</a></li></ul><p><img src="/images/%E8%9B%87%E5%BD%A2%E8%BE%B9%E6%A1%86.gif" alt="蛇形边框"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="GRKmgZZ" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】蛇形边框","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="蛇形边框">  &lt;div class="snakelike-border">&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">.snakelike-border {  position: relative;  width: 190px;  height: 190px;  background-color: #3c9;  &::before,  &::after {    position: absolute;    left: -5px;    right: -5px;    top: -5px;    bottom: -5px;    border: 5px solid;    content: "";    animation: move 5s linear infinite;  }  &::before {    border-color: #f66;  }  &::after {    border-color: #66f;    animation-delay: -2.5s;  }}@keyframes move {  0%,  100% {    clip: rect(0 200px 5px 0);  }  25% {    clip: rect(0 200px 200px 195px);  }  50% {    clip: rect(195px 200px 200px 0);  }  75% {    clip: rect(0 5px 200px 0);  }}</pre></div></details><hr><h3 id="自动打字"><a href="#自动打字" class="headerlink" title="自动打字"></a>自动打字</h3><details><summary><b>解析</b></summary><ul><li>要点:逐个字符自动打印出来的文字</li><li>场景:<strong>代码演示</strong>、<strong>文字输入动画</strong></li><li>兼容:<a href="https://caniuse.com/#search=ch">ch</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码:<a href="https://codepen.io/JowayYoung/pen/ZEzKQEx">在线演示</a></li></ul><p><img src="/images/%E8%87%AA%E5%8A%A8%E6%89%93%E5%AD%97.gif" alt="自动打字"></p><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result"  data-user="JowayYoung" data-slug-hash="ZEzKQEx" data-preview="true" data-editable="true"  data-prefill='{"title":"【iCSS:组件】自动打字器","tags":[],"scripts":[],"stylesheets":["https://yangzw.vip/static/css/reset.css","https://yangzw.vip/static/css/main.css"]}'>  <pre data-lang="html">&lt;div class="bruce flex-ct-x" data-title="自动打字">  &lt;div class="auto-typing">Do You Want To Know More About CSS Development Skill&lt;/div>&lt;/div></pre>  <pre data-lang="scss" data-option-autoprefixer="true">@mixin typing($count: 0, $duration: 0, $delay: 0) {  overflow: hidden;  border-right: 1px solid transparent;  width: #{$count + 1}ch;  font-family: Consolas, Monaco, monospace;  white-space: nowrap;  animation: typing #{$duration}s steps($count + 1) #{$delay}s infinite backwards,    caret 500ms steps(1) #{$delay}s infinite forwards;}.auto-typing {  font-weight: bold;  font-size: 30px;  color: #09f;  @include typing(52, 5);}@keyframes caret {  50% {    border-right-color: currentColor;  }}@keyframes typing {  from {    width: 0;  }}</pre></div></details><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写到最后总结得差不多了,如果后续我想起还有哪些遗漏的 <strong>CSS 开发技巧</strong>,会继续在这篇文章上补全.</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国要抢在年轻人负面情绪全面爆发之前完成收入分配改革</title>
      <link href="%E4%B8%AD%E5%9B%BD%E8%A6%81%E6%8A%A2%E5%9C%A8%E5%B9%B4%E8%BD%BB%E4%BA%BA%E8%B4%9F%E9%9D%A2%E6%83%85%E7%BB%AA%E5%85%A8%E9%9D%A2%E7%88%86%E5%8F%91%E4%B9%8B%E5%89%8D%E5%AE%8C%E6%88%90%E6%94%B6%E5%85%A5%E5%88%86%E9%85%8D%E6%94%B9%E9%9D%A9/"/>
      <url>%E4%B8%AD%E5%9B%BD%E8%A6%81%E6%8A%A2%E5%9C%A8%E5%B9%B4%E8%BD%BB%E4%BA%BA%E8%B4%9F%E9%9D%A2%E6%83%85%E7%BB%AA%E5%85%A8%E9%9D%A2%E7%88%86%E5%8F%91%E4%B9%8B%E5%89%8D%E5%AE%8C%E6%88%90%E6%94%B6%E5%85%A5%E5%88%86%E9%85%8D%E6%94%B9%E9%9D%A9/</url>
      
        <content type="html"><![CDATA[<p>编者按：近些年来，类似于社畜、打工人、996、外卖骑手困在系统里、拼多多女孩猝死、内卷、躺平的字眼或新闻，每每总能在中国网络上引发巨大的共鸣。究其根源，是因为<strong>越来越多的人对于严重贫富分化、阶层固化、弱势群体缺乏有力保障、资本霸权的不满</strong>。在这个过程中，<strong>年轻人的焦虑和不满情绪尤其突出，他们切实体会到生活不易，残酷发现奋斗越来越难以改变命运，甚至努力一辈子都在大城市买不起房子，而回到小城市，又非常缺乏工作机会。两难之下，年轻人的负面情绪不断累积</strong>。</p><p>当年改革开放之初，邓小平说过，贫穷不是社会主义，两极分化不是社会主义，社会主义的本质是共同富裕。由此，他在总结过往经验教训的基础上，因应当时一穷二白的落后现实提出，让一部分人、一部分地区先富起来，先富带后富，走向共同富裕。如果说改革开放前 40 年中国主要解决的是普遍贫穷落后的问题，实现了国民经济的极大发展，那么今天在继续发展经济的同时，要<strong>更加重视先富带后富，解决公平正义的问题，让所有人共享国家发展的红利</strong>。唯有这样，中国社会主义才更加具有感召力。</p><p>解决这个问题的关键路径是收入分配改革。本文作者是一位关心国家前途命运的斜杠青年，本是理工科高材生，但满腔热忱，长期关注和研究中国社会问题。他的这篇关于中国收入分配改革的文章，是他一段时间思考的产物，篇幅很长，但值得耐心阅读。希望中国早日改革收入分配问题，持续推进公平正义，让邓小平当年说的共同富裕有实质性进展。</p><!-- **中国要抢在年轻人负面情绪全面爆发之前完成收入分配改革** --><p>文/文和 （中国城市发展与治理理论模型研究者，英国利兹大学环境学部交通研究所博士）</p><p>自古以来，收入分配的合理性与一个国家的政权是否稳固直接相关，无论是在政府财政崩溃中被送上断头台的法国国王路易十六（Louis XVI），还是在国库名存实亡中自缢于煤山的明崇祯帝，以及在他们之前或之后消亡的那些曾经不可一世的帝国，无不印证了这一点。如今在中国经历了改革开放四十余年的高速财富积累之后，也不得不要面对同样的问题，而这直接关系中国未来的国运。</p><h2 id="历史的教训"><a href="#历史的教训" class="headerlink" title="历史的教训"></a>历史的教训</h2><p><strong>古往今来那些曾经雄极一时，最终却从内部崩溃的强大政权们基本都有一个相同的特点——那就是他们在国家末期都出现了严重的政府财政危机，而且这种财政危机往往演变成导致帝国毁灭的祸根。</strong> 如将明王朝末期搅得天翻地覆的“闯王”李自成，最早只是银川驿站的驿卒，只是在崇祯元年（公元 1628 年）因明王朝国库空虚，不得不压缩公务员编制的情况下被辞退回家，次年投军之后又因为军饷被克扣，怒而起兵造反，最终成为了明王朝灭亡的掘墓人之一；又如苏联解体前，其国家财政已经不能保证莫斯科市民在排队几小时后一定能买到果腹的食品与其它生活必需品。</p><p>然而与国家财政濒临崩溃形成鲜明对比的是其内部豪强势力的财富丝毫没有受到财政危机的影响。如清末风雨飘摇之下庆亲王奕劻和李鸿章这样的重臣却能留下巨额家产；又如罗马帝国因对财政危机而不得不滥发货币，导致自己加速灭亡时，其国教体系之下的教士们拥有着富可敌国的财富。</p><p><strong>产生这种情况的原因是那些从国家体制中获得利益的群体往往不愿意承担国家责任。</strong> 如以前欧洲的教士、贵族，以及中国的士大夫们往往享有免税和免兵役、徭役的特权。这样为国家正常运转提供养分的责任就不得不落到了普通人身上。但是那些不承担国家责任的特权集团本身还在享受着国家发展带来的红利，并且会利用自己的优势地位进一步逃避国家责任的同时吃掉更多的国家红利。比如美国，这个世界第一大经济体，世界上目前唯一的超级大国，其 GDP 从 2000 年的十万亿美元增长到 2019 年二十一万亿美元的同时，人口仅仅由 2.8 亿增加到 3.3 亿，但其政府居然会因为缺钱出现了数次停摆，那么这些增长的财富到底去了哪里就显而易见了。</p><p><img src="https://r.sinaimg.cn/large/article/6bf91a015ab0bc2f55cc3c0e7e13f5fe" alt="美国贫富差距悬殊"></p><p>事实上，在国家遇到财政危机时，到底哪个阶层，或者说哪个利益集团应该来承担责任，往往就会成为最突出的矛盾。现在的美国和欧洲各国的议会中，关于税改的争论也是最激烈、最漫长且充满反复的。<strong>长此以往，那些承担国家责任的人民会感到自己被压榨，从而积累不满情绪，而这种情绪一旦积累到一定程度就会爆发</strong>。如法国国王路易十六在面对国家财政即将崩溃的事实时，召开三级会议，享有免税特权的教士、贵族与已经承担绝大部分税赋的市民阶级之间为谁该承担应对财政危机的加税份额而争吵不休，最终引发了法国大革命。又比如<strong>俄罗斯、乌克兰和白俄罗斯人觉得自己在苏联体系内被压榨，于是最终联手埋葬了苏联</strong>。</p><p>而比国家责任更为重要的是生产资料与劳动回报的分配问题。在秦帝国统一中国之后和中英鸦片战争之前，中国的文明演化过程较为线性，这也是如今中国史学界编纂通史时可以采用王朝名称线性排列的原因。观察其王朝更替的规律，不难发现一个王朝建立之初往往会对田土等生产资料进行重新分配，使得失去生存根基的流民能安置下来成为新王朝的纳税人。如汉、唐等大一统王朝在结束战乱之后，立国之初都进行过大范围的人口清查与流民安置工程。但由于特权阶层的存在，他们本身就拥有更多的田土等生产资料，且享有不用纳税的特权，这使得他们积累财富的速度远远超过一般的自耕农。</p><!-- > 1. 摊丁入亩，又称作摊丁入地、地丁合一，中国封建社会后期赋役制度的一次重要改革，是清朝政府将历代相沿的丁银并入田赋征收的一种赋税制度，标志着中国实行两千多年人头税（丁税）的废除。是康熙皇帝“滋生人丁永不加赋”政策的进一步改革和发展。 雍正时期开始实行。这一制度的实行，减轻了无地、少地农民的经济负担，促进了人口增长。劳动者有了较大的人生自由，有利于社会经济的发展。赋税规则的简化减少了官府打马虎眼任意加税的可能。> 2. 火耗归公又称耗羡归公，由中央统一耗损比例来征收赋税。火耗是地方官征收钱税时，会以耗损为由，多征钱银。雍正二年七月推广全国，将明朝以来的“耗羡”附加税改为法定正税，并制度养廉银，用意在打击地方官吏的任意摊派行为。此举集中了征税权利，减轻了人民的额外负担，增加了外官薪给，对整顿吏治、减少贪污有积极作用。但州县于额征火耗之外，又暗中加派，未能从根本上改善吏治。> 3. “官绅一体当差，一体纳粮” 是清朝雍正时期施行的一项政策，此政策是指“官员地主也必须缴纳赋税”。即废除官员、地主免税的特权。>    张居正改革 --><p>经过一段时间之后，这些特权阶级往往可以通过各种手段兼并更多土地，而他们兼并的土地越多，能够给政府纳税的土地就越少，而政府为了维持其自身运转又不能降低税收总量，因此分摊到每一份田地、每一户人家身上的赋税就变得更重了。而这又加快了普通自耕农的破产速度，进一步恶化了土地兼并的情况。特权阶层还可以通过土地兼并等方法，让那些原本给国家上缴税赋的自耕农变成只给自己交租金的佃农，进一步掠夺财富。<strong>最终，国家的税收难以为继，引发了财政危机与国家动荡，一旦遇到灾荒之年或者外敌入侵，其内部过高的压力就会使得王朝从内部开始快速垮塌。</strong></p><p>因此，<strong>国家的财政危机只是表象，其背后的真相是政权内部的特权阶层逃避国家责任的同时贪婪的掠夺走了那些原本用于维持国家正常运转的财富，最终使得被压榨的底层掀起了一场自下而上对国家财富和生产资料的再分配</strong>。遗憾的是在这个过程中不可避免的形成了新的特权集团，因此这样周期性的崩溃与重建几乎贯穿了中国过去几千年的农业时代。</p><p>直到今天，这样的故事依旧还在上演，而且东西方亦然。如果我们将上面故事中的特权阶级替换为高盛、摩根等资本集团和富人阶级，将自耕农替换为中产阶级，这个逻辑依然成立。美国的财团和富人阶级已经拥有完善的避税、逃税手段。如 2017 年 11 月 5 日天堂文件（Paradise Papers）曝光的一份财务报告，该报告揭露了数以百计知名公司和个人的离岸利益。2017 年 11 月 6 日，苹果和耐克公司等大企业的避税细节被曝光揭开。</p><p>还是以美国为例，为什么世界第一大经济体的政府在 GDP 二十年增长了 200%以上的情况下，会穷到政府停摆？就是<strong>因为这些富人阶级掠夺了国家发展红利的同时还逃避了自身应承担的国家义务，同时承担了更多国家责任的中产阶级在此重压之下不断缩水，造成中产阶级占总人口的比例自 20 世纪 70 年代后持续下降，从 1971 年的 61%，下降到 2012 年的 51%。而且美国的贫富差距也一直在扩大，美国之前引以为傲的枣核型人口结构正快速转向金字塔型结构</strong>。</p><p>而这样的问题在中国目前可能更严重。现在的美团、滴滴、阿里与腾讯等巨头完全可以视作前面故事中的特权阶级。以美团为例，其送外卖的快递小哥们都属于外包形式，不属于美团的员工。这意味着美团不需要为这些快递小哥提供生产工具，如送快递的保温箱与电动自行车等，而且还不用向国家上缴员工的社保、医保等资金。而这些收入微薄的底层快递员往往为了更多的现金收益，也不会选择自己缴纳个人医保、社保。</p><p><strong>这些快递小哥看起来更像是前文故事中的佃户，耕作在美团名为“信息”的土地上，每天必须穿着美团的广告服，然后被美团从每一次的派送信息中拿走相当高的分成。现在的中国一方面是美团、阿里、滴滴和腾讯等巨头财富飞速增长，另一方面是国家社保、医保等资金长期面临资金压力的现状。可以说中国的现在的问题比美国不遑多让。</strong></p><p><img src="https://r.sinaimg.cn/large/article/72c9e2e7add439c2df353de248263146" alt="狂风暴雨即将来临"></p><h2 id="中国历次收入分配改革"><a href="#中国历次收入分配改革" class="headerlink" title="中国历次收入分配改革"></a>中国历次收入分配改革</h2><p>中国共产党在接手国民党的烂摊子时，面对的是一个收入分配早已严重失衡的农业国家。只需要去查阅一下国民党时代，如孔祥熙等军政人员从国民政府中侵吞了多少财富和各地失去土地的流民数量就能了解到当时中国绝大部分的财富都被集中到了少数军政高层、乡绅地主们的手中。而作为农业国家的基石，自耕农的数量已经远远不能保证国家基本的财政与政治稳定了。</p><p>因此，就像历代王朝建立政权之初一样，中共也开始了针对生产资料与收入分配的改革。这个改革的重点就落到了公平上，各地开始重新丈量土地，分配农具，并组成农业合作社等生产单位，彻底消灭了中国持续数千年的地主与农民对立的问题。这种政策在中共建国之初具有相当的积极意义。1949 至 1977 年中国农村生产活动主要效仿苏联，推进集体农庄模式，建立了多个家庭共同组成生产队。<strong>这种集体农场在短时期内集中战后中国所剩不多的生产资料并统一使用的模式，为恢复农村经济起到了积极的作用，并使得中国的人口开始恢复增长，从建国之初不足四亿增加到了八亿，而且还成为了中国工业化的经济支撑。</strong></p><p>但是集体农场模式也有其自身无法克服的缺点，那就是在平均主义的分配制度之下从事生产的人们干多干少一个样，甚至干与不干一个样，这就要求每一个参与集体农场建设的人都要不计个人得失，全力从事生产才能提高集体农场的产量，但这种设想显然是违反人性的。所以在集体农场模式推行一段时间之后，<strong>不可避免的在农村出现了大量消极怠工的农民，极大的打击了农村的农业生产。</strong></p><p>正如中国第二代领导人邓小平所说：“贫穷不是社会主义，更不是共产主义”。在当时中国落后的状态下，走什么道路才能发展生产力，才能改善人民生活的问题成为了主要的争论点。邓小平提出要建设中国特色社会主义，由此拉开了中国改革开放的大幕。他提出的“白猫黑猫，抓住老鼠就是好猫”的说法，以极为实用的方式结束了中国“姓社还是姓资”的争论。一切改革全部围绕解放生产力展开。纵观中国改革开放四十余年，可以将其划分为四个阶段。</p><p><img src="https://r.sinaimg.cn/large/article/cdf67fafe2a3021cdcf5d7a7b79c05ae" alt="996 007 大小周 单休就是无耻资本家队劳工的压榨剥削"></p><p>第一阶段，改革开放之初，中国主要的问题是消除平均主义对民众生产积极性的打击。因此在 1978 至 1992 年，即改革开放初期的这个阶段，收入分配改革主要围绕着打破平均主义，落实按劳分配这两个基本点展开。如在中国农村展开的“家庭联产承包责任制”改革，终结了生产队集体劳作的平均分配时代，将农村的基本生产单位重新定位在家庭层面上。</p><p>农民只对自己的田地负责，不再为集体负责，其收入直接取决于其生产效能，劳动成果不再会“被平均”。<strong>这种分配方式极大的提高了农民的生产积极性和创造性。</strong>在城市的改革中，也积极借鉴了“家庭联产承包责任制”的经验，确定了责、权、利相结合的原则，将城镇职工的收入直接与其劳动成果关联。其后，随着改革开放的推进，中国逐渐出现了个体经济、私营经济和股份制等多种经济形式，收入分配也变得更加多样。</p><p>此时期中国政府明确表示“我们的分配政策，既要有利于善于经营的企业和诚实劳动的个人先富起来，合理拉开收入差距，又要防止贫富悬殊，坚持共同富裕的方向，在促进效率的前提下体现公平”。这便是“先富带动后富”的说法。<strong>它的出现标志着中国从绝对的平均主义开始转向了追求效率，并且肯定了其它财富分配方式的合法性。</strong>同时，中国也开始建立一系列财富再分配的机制，如建立失业保险制度，改革税制和推进企业职工养老保险制度改革等。此阶段为中国下阶段更大、更深入的改革打好了基础。</p><p>第二阶段为 1992 年至 2002 年。1992 年的中共十四大明确提出“我国经济体制改革的目标是建立社会主义市场经济体制”，并提出“把按劳分配和按生产要素分配结合起来”的分配政策。这标志着在中国，生产资料的所有权合法的成为了社会财富分配的重要参与方。后来，中共十四届三中全会又首次提出了效率优先，兼顾公平的原则。</p><p>此时中国的贫富差距和地区发展不均衡的问题初现端倪，当中国中西部农村地区将存款达到一万元的家庭羡慕的称为“万元户”，甚至当地政府和银行都会对万元户进行表彰的时候，深圳、珠海等经济特区的万元户却与贫困户划上了等号。为了缓解中国的贫富差距问题，中国政府一方面继续完善个人所得税、消费税、财产税等税制， 并且颁布了《关于深化企业职工养老保险制度改革的通知》、《关于建立统一的企业职工基本养老保险制度的决定》、《关于建立城镇职工基本医疗保险制度的决定》、《社会保险征缴条例》、《失业保险条例》和《城镇居民最低生活保障制度条例》等一系列政策文件，开始为被改革甩下的民众兜底。此外还于 1998 年 3 月在原劳动部基础上组建劳动和社会保障部，加强了对社会保障制度的行政管理。</p><p>第三阶段为 2002 年至 2012 年。中共十六大明确提出“确立劳动、资本、技术和管理等生产要素按贡献参与分配的原则，完善按劳分配、多种分配方式并存的分配制度”，强化了非劳动生产要素，即资本参与中国财富分配的合法性。<strong>这一时期，中国各阶层之间的收入分配差距进一步扩大，尤其是城乡之间的差距与东西部之间的差距被突显了出来。中国的人口开始大量从农村涌向城市，从中西部相对落后地区向东南沿海发达区域迁移。</strong></p><p><strong>为了缓解城乡之间的差距，中国政府制定实施了彻底取消农业税、大幅增加涉农补贴、建立农村新型合作医疗制度和最低生活保障制度等多项支农惠农政策</strong>；为缓解不同群体间的收入差距，中国政府颁布了最低工资标准，出台了《劳动合同法》和《就业促进法》，希望通过法律手段来增加劳动者收入，保障劳动者权益，缓解劳资之间的对立；为缓解区域差距，中国政府加大西部大开发、中部崛起、振兴东北的政策力度。</p><p><img src="https://r.sinaimg.cn/large/article/37d42eb4a494fa1adfc65cc1fc04531a" alt="政府取消农业税"></p><p>第四阶段为 2012 年至今。在此阶段，从中国的经济分布和人口分布来看，大部分财富和人口都集中在了中国东部沿海的发达地区，如北京所在的环渤海经济圈，上海所在的长江三角洲经济圈，广州、深圳、香港、珠海等组成的大湾区经济圈等。从阶层来看，掌握生产资料的资本集团和掌握文化、技术的知识精英收入增长明显快于农民和小工商业者等人群。一部分人和一部分地区先富起来之后与那些还没有富起来的区域产生了明显的差距。</p><p>中国的决策者们显然也意识到了经过三十多年的发展，收入差距已经逐步扩大成了贫富差距，而中共提出改革开放的口号则是“先富带动后富，最终实现共同富裕”。因此，中共不可能放任贫富差距扩大，必须要加强税收和福利、兜底政策对社会财富的二次分配作用，帮助那些在改革中落后的群体享受到改革带来的发展红利。</p><p>中共十八大明确提出了“实现发展成果由人民共享，必须深化收入分配制度改革”， “完善劳动、资本、技术、管理等要素按贡献参与分配的初次分配机制，加快健全以税收、社会保障、转移支付为主要手段的再分配调节机制”， 并进一步要求“清理规范隐性收入，取缔非法收入，增加低收入者收入，扩大中等收入者比重，努力缩小城乡、区域、行业收入分配差距，逐步形成橄榄型分配格局”。后来的“十三五”规划明确就“缩小收入差距” 做出了部署。之后中国更是展开了全面的脱贫攻坚行动，动员了数以百万计的中共党员帮助农村贫困户和城市贫民摆脱绝对贫困。2021 年 2 月 25 日，中国正式宣告消除了绝对贫困。</p><blockquote><p>仅仅脱贫还远远你不够</p></blockquote><h2 id="中国收入改革的成就与问题"><a href="#中国收入改革的成就与问题" class="headerlink" title="中国收入改革的成就与问题"></a>中国收入改革的成就与问题</h2><p>从中国改革开放以来四十余年的收入分配方式发展来看，每一次改革都抓住了当时中国社会发展的主要矛盾。</p><p>改革的第一阶段面对的主要矛盾是<strong>计划经济时期形成的绝对平均主义和“大锅饭”做法严重削弱了广大劳动者的积极性和创造性，直接影响到国民经济的运行效率。按劳分配的方式可以说非常有效的解决了这个问题，同时一定的收入差距也可以激发劳动者的生产积极性</strong>。</p><p>改革的第二阶段，中国面临的主要问题就是<strong>国家经济长期依靠政府管控，缺乏活力</strong>的问题。从中共的十二大到十五大，从“计划经济为主，市场调节为辅”逐步过度到了“以公有制为主体，个体经济、私营经济、外资经济为补充，多种经济共同发展”。市场经济开始发挥其调节作用，激发了中国经济的活力。不过中国作为一个社会主义国家，加上建国初期中共对私有制的严厉打击遗留的影响，民众对私营经济的法律地位以及前景有所担心。</p><p>一段时间里中国的富人成批的移民海外。《中国国际移民报告 ２０１４》 的调查数据显示， 中国个人资产超过 １ 亿元人民币的超高净值企业主中，２７％已经移民， ４７％正在考虑移民；个人资产超过 １０００ 万元人民币的高净值人群中， 近 ６０％ 已经完成移民或有相关考虑。</p><p>改革的第三阶段，中国面对的主要问题是<strong>稳定国民对改革的信心，从法理上给予私营经济合法的地位</strong>。在这个阶段，中国从法理上承认了资本参与社会财富分配的合法性，肯定了私营经济体在中国的合法地位，强化了中国人对资本和市场参与收入分配的认识。有了法理上的承认和保障，中国人也逐步减缓了移民的步伐，根据美国签证年度报告统计，2019 财年，中国获得 EB-5 签证的人数为 3894 人，自 2015 年以来“五连跌”。而其占全美同类签证的比例也是进一步“缩水”，由 2015 年的 86.81%下滑至 2019 年的 49.36%。此外，2019 财年获得 EB-1（杰出人才移民）签证的中国人数在经历 2018 年短暂上升后直线回落至 589 人，不足 2018 年人数的一半，占比由 2018 年的 37.8%回落至 26.5%。</p><p>改革的第四阶段，中国面对的主要问题是<strong>改革发展红利分配不均</strong>的问题。为解决这一问题，中国政府一方面加强政府兜底，发动力量帮助全国最落后的群体脱贫；另一方面开始调节收入分配，尤其是对不合理的收入差距加大了调整力度。</p><p>从收入分配的方式来看，这四个阶段经历了按劳分配到以按劳分配为主，以资本参与为辅，再到确立资本参与分配的合法地位的演进过程。在这个过程中，收入分配的指导思想从绝对的平均主义到确立效率优先，最后到如今确保中国人的获得感。</p><p>中国过去四十余年创造的经济奇迹与这种收入分配改革对生产力的促进密不可分。从中国已经取得的成就来看，收入改革提高了劳动者的积极性和创造性，有力推动了国民经济的快速增长，民众收入水平普遍得到大幅提升，并且消灭了绝对贫困。</p><p>然而任何一种规则和制度都不是绝对完美的，人类社会的规则和制度归根结底是社会科学的产物，而科学不是绝对真理，它从来就只是一种假说，它不一定是对的，它只是现阶段最合理、佐证最多、最实用的假说。这种科学假说从古至今以来都是在被不断证伪的，然后提出新的假说来推动科学进步。在这个过程中，旧的假说会随着时间积累弊病，就如中国收入改革每一个阶段也制造了新的问题一样。</p><p><img src="https://r.sinaimg.cn/large/article/6c80878978ab7e633e053ffe0bc8c2d0" alt="改革发展红利分配不均"></p><p><strong>其中最大的问题就是如今资本回报率将劳动回报率远远地甩在了身后。</strong>2005 年之前毕业的大学生，基本可以依靠自己的劳动为自己在城市中买下一个栖身之所，但越往后劳动者工资收入的增长速度就被房价增长的速度甩下的越远。事实上香港也经历过相同的时代，房价飞涨，那个时候许多人将这种提早买房的行为称为“上车”，只要提早买到了房子，房价涨，自己的资产也在涨，就不至于被时代的车甩下。</p><p>假设一个在 2000 年左右的中国大学生在 2008 年之前在北上广深其中一个城市比较靠近核心的区域买了一套房子，那么现在这套房子升值的钱就是很多中国年轻人辛苦工作一辈子也赚不到的钱。而从 2008 年工作至今，一个本科生的平均工资涨幅也不过是从每月三千左右人民币涨到一万左右人民币而已。</p><p>诸如房子、土地、矿场、原料等生产资料毕竟是有限的，因此能提早“上车”的人也必然是有限的。<strong>到如今，很多中国年轻人出生的时候，中国这辆经济快车就已经发车了，等他们大学毕业进入职场的时候发现自己从来就没有上车的机会，这将不可避免的激化中国人代际之间的矛盾。</strong></p><p>资本回报率太高的另一个负面效应就是市场投机行为变得更加普遍。现在观察中国经济，基本离不开一个“炒”字，从以前炒房子，炒股票，到现在很多人炒鞋子，炒比特币和以太币等数字货币。中国经济脱实向虚的压力时时刻刻都存在。</p><p>更严重的是，中国的资本现在也出现了美国资本集团一样的情况——逃避国家责任。就如前文中提到的美团那样，一方面是美团将一千五百万送快递的小哥全部外包出去，省下了给国家上缴养老、医保、社保的钱；另一方面是中国的养老、医保、社保的资金时时刻刻面临巨大的财务压力。</p><p><strong>在这种情况下，中国的舆论场上逐渐出现了“佛系”、“躺平”、“内卷”和“打工人”等互联网热词。当年轻人发现自己无论如何都不可能“上车”的时候，不得不开始无奈的接受这个现实，在发觉努力也不可能改变的时候选择了放弃努力，让自己过得尽量舒服一点。</strong></p><p>而其它还想去追赶经济快车的人，就不得不在剩下不多的资源里疯狂的相互倾轧，尽可能的让自己超过别人一点点，更早进经济快车一点点，这便是所谓的“内卷”。长此以往对中国的发展和稳定是非常不利的。就像很多香港青年人很容易被煽动去破坏自己的家乡一样，这些中国大陆的年轻人在劳动回报率和资本回报率巨大的鸿沟之前绝望的时间太长的话，他们也是很有可能被煽动起来的——<strong>如果家乡的好与我无关，那么我又怎么把自己视作家乡的一份子呢</strong>？</p><p>但我们对它评价时不应跳出当时的历史条件，用今天的标准来衡量。就像我们不能因为爱因斯坦相对论证明了牛顿经典力学的片面性和局限性，就否定了牛顿经典力学在人类物理学进步中划时代的意义。</p><p>中国改革开放时面对的是早已经被西方老牌强国瓜分干净的世界，再也不可能走英国当年海外扩张殖民地，对殖民地进行掠夺来完成原始资本积累的路了。因此，中国这种向内寻求完成资本原始积累的决策也确实是不得已而为之。但它也确实帮助中国快速完成了原始积累，让中国用四十年走完了西方两、三百年走过的路，并催生了阿里、腾讯、美团、滴滴等世界级的互联网巨头公司，在数字经济时代为中国积累了宝贵的经验，抢得了广袤的市场，甚至在移动支付等领域对西方老牌发达国际实现了弯道超车。真正解决问题的方法不是回到过去并否定过去，而是立足于当下面对主要问题，着眼于在未来解决这个主要问题。</p><h2 id="中国收入分配制度改革未来的发展趋势及其政策建议"><a href="#中国收入分配制度改革未来的发展趋势及其政策建议" class="headerlink" title="中国收入分配制度改革未来的发展趋势及其政策建议"></a>中国收入分配制度改革未来的发展趋势及其政策建议</h2><p>收入分配是民生之源，也是中国共产党执政合法性的来源——这个政党从建立的第一天起就宣称要带领全体中国人走向富强，所以它不能放任贫富差距扩大，不能在发展的道路上放弃任何一个国民。而当前收入分配领域存在的问题，是长期积累形成的。除了所处的历史阶段、自然资源禀赋差异、地理位置的不同、市场正常竞争以及自身努力程度与实力不同等这些无法回避的因素以外，从未来趋势看，受全球化、技术变革以及生产交易方式变化等因素影响，收入分配领域一些新问题新矛盾也会不断产生。</p><blockquote><p>个税起征点是 5000</p></blockquote><p>这些问题不解决好，就为威胁到中国共产党执政的根基，因此中国政府在收入改革的任何一个阶段，都没有放弃追求效率，但兼顾公平的原则。尤其是在现阶段更是展开了一系列针对收入分配的改革，推进了一系列措施。从中共最高层的表述和行动来看，无论是“不断提高人民群众获得感、幸福感、安全感”，还是李克强指出的中国六亿人月均收入一千元，人均年收入 3 万元，从本质上来讲都是指向了同一个目的——中国第四阶段的收入改革。</p><p>为什么要“提高人民群众获得感”？因为人民群众从中国发展中获得的红利很少，中国经济屡创佳绩，但仍有六亿人享受经济发展的好处很少，月均收入只有一千元人民币。于是就有了现在中国政府对阿里、美团等资本巨头展开的反垄断调查，及加快收入分配改革等行动。</p><blockquote><p>当投机炒房比投资实业的获得利益远远超过时 中国未来必将毫无希望</p></blockquote><p>早在 2016 年前后，中国就已经展开了对收入分配的调整。中国主要三个方面发力。第一，继续将经济的蛋糕做大。经济社会发展水平是实现社会公平正义的决定性因素，没有经济发展，分配就是无源之水、无本之木。因此中国积极推行“一带一路”等措施，为中国的经济寻找新的、有力的增长点。第二，改革完善初次分配制度。</p><p>早在 2016 年前后，中国就开始对体制内的政府公务员，国企和事业单位员工的隐性福利、灰色收入和工资等进行了改革，一些地方的中国体制内人员工资收入下降了三成到五成左右。同时，中国政府还对娱乐明星、影视文娱等行业推出了一系列的限薪令，加大对高收入群体的调节力度，还加大了发达地区对相对落后地区的财政支持，努力缩小城乡、区域、行业收入分配差距。第三，中国的全面脱贫缩小了低收入阶层与其它阶层之间的差距，同时在社会保障制度等方面发力，实现国家对全体国民的兜底。</p><p>这三项措施，就像是从中国收入群体的两侧向中间挤了挤，即把冲在最前的高收入阶层稍微向下压一点，也把低收入阶层向上托一点，降低了整个社会的贫富差距。</p><p>从未来的发展趋势来看，中国第四阶段的收入改革远没有到完成的时候，现在中国大陆也出现美国一样的问题苗头。<strong>为了避免未来中国的资本集团也像美国的资本集团一样逃避国家责任，中国将对现在的财富第一次分配做出调整，针对资本巨头的限制将变得更加严格，资本回报率将在一定程度上被压缩，这意味着中国的劳动者可以依靠劳动获取更高的回报。</strong>比如未来降低滴滴平台在网约车运营中对司机运单的抽成比例，让司机赚到更多的钱。</p><p>同时中国必然会完善税收体制，<strong>通过完善、推行房产税和财产税等措施加强对社会财富的调节和政府福利的二次分配，确保每一个从中国发展的快车上获利的人都拿出一部分资金来，帮助那些后来者。</strong>如今<em>中国一、二线城市中存在相当规模的城中村，这些村民依靠其在城市中的土地和房屋大量吸纳城市无产者并收取房租。在一些城中村中往往是几千村民对涌入的数万，甚至是十万以上的城市无产者收租，已经形成了事实上的城市地主群体与城市无产者之间的矛盾。而且这些城市地主阶层享受着城市高速发展带来的资本超额回报的同时，但由于相应税法的缺失，他们几乎没有承担城市发展中各项基本设施投入的成本</em>。</p><p>还有<em>一些买房较早的群体，也享受到了周边基础设施提升带来的房产价值提升，但政府并不能从这些财产升值中获得任何财税收入。因此新建基础设施和维护已有基础设施的成本就只能由新建的住宅社区从土地财政中拿出。这意味着城市建设的成本几乎全压到了后来进入城市的群体身上，也是推高房价的主要原因之一</em>。</p><blockquote><p>全国房产税至今毫无进展</p></blockquote><p>中国经历了几十年快速的城市化，如今数以亿计的人口进入城市，不解决好这种后来者与先行者之间的矛盾是不行的。因此各种财税政策从那些赶上时代红利的人身上转移一部分财富，帮助后来者迎头赶上是势在必行的。这部分资金将用于政府政策兜底，如建设政府所有的公租房、维护运营已有的城市基础设施和提高社会福利等。</p><p><img src="https://r.sinaimg.cn/large/article/a2f475779cfc3dea6f373989b636ca43" alt="无效加班"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>人类社会近三百年的发展，从第一次工业革命到现在快速的变化，尤其是中国改革开放四十年翻天覆地的变化，让人们产生了一种世界总会快速改变的错觉。然而纵观人类文明的历史，绝大多数时间停滞才是主旋律。人类在农业时代停留了数千年，才进入工业时代，而我们现在进入工业时代享受的仍然是两百多年前基础科学发展的红利。</p><p>如当今的 4G、5G 甚至各国正在研发的 6G 移动通讯基础，都是基于麦克斯韦（James Clerk Maxwell）在 1865 年提出的电磁方程组做出来的。我们的基础科学基本上已经陷入了几十年没有突破的尴尬境地，我们所做的改变更像是把普通的弓箭改良发展出了诸葛连弩，但没有基础科学的突破，我们永远造不出原子弹一样。</p><p>我们感受到近两、三百年巨大的变化，事实上只是经历了人类文明从第一层台阶上到第二层台阶的过程，而我们要在第二层台阶上停留多久，目前并不好说，而且也不乐观。当今世界经济形势已经陷入了停滞，甚至衰退发生的可能性也在直线上升。在下一次科技革命到来之前，各国必然面临缺乏增量市场的现状。尤其是中美两国，从民间到官方，双方的对立情绪正在快速升高，但作为世界上最强大的两个国家，他们都没有从外部毁灭对手的能力。</p><p>因此双方的对抗和竞争更多会转向对内部的整合与优化，只要自身的问题比对方小，就可以用时间拖垮对方。所以我们也看到了无论是美国前总统特朗普（Donald Trump）的“让美国重新伟大”，或现总统拜登（Joe Biden）的“财税改革”，抑或是现在的中国领导人提出的“增强人民群众获得感”，都在强调对内的改革。</p><p>任何主义，任何思想，归根结底都是要解决民众最迫切、最主要需求的。<strong>就像中国农业时代不可能靠四书五经去解决饥民饿肚子的问题一样，尽管中国现阶段取得的成就与相应的舆论宣传极大的提升了中国年轻人的自豪感与国家凝聚力，现在的中国也不可能依靠思想宣传解决中国年轻人赶不上中国经济快车的现状。这就是为什么中国年轻人普遍对中国的前途表示乐观，但对自身前途感到迷茫的原因。</strong></p><p>可以说中国这场改革的成败决定了中国未来的国运与世界秩序。而从中国舆情变化来看，如马云等商业精英从被中国人羡慕和崇拜的对象，到被许多人批评成为富不仁的资本家等，都意味着新加入中国舆论场的年轻人对以往收入分配制度的负面感受积累的越来越多。<strong>因此中国的收入改革分配也必须要加速进行，至少要抢在中国年轻人的负面情绪全面爆发之前完成。</strong></p><hr><blockquote><p>无耻资本家和无能政府是造成 996 过劳死 和高房价的主因 任何制度任何人任何时候都不能保证在没有监督的情况下仍为人民服务.限制人民对政府及公职人员的监督的政府是不可能为人民服务的.政府无论在什么情况下,都应该是被人民监督的,凡是为政府唱赞歌的一律都是政府的帮凶及掘墓人.政府做得好是理所当然.政府如果做得不好,就必须要直截了当开诚布公,并且督促政府要改正.官员及其直系亲属财产公开至今难产就是就是政府害怕人民监督的明证.房地产与土地财政的捆绑造成的地方政府与房地产利益集团的狼狈为奸比美国对我们的无耻打压对人民的危害更加深入骨髓.毕竟美国是我们可以同仇敌忾的外患,利益集团的无耻剥削劳动人民底层劳动人民才是内忧.想要解决内忧,那势必要执政政府向自己内部的利益集团开刀,刮骨疗毒,壮士断腕.</p></blockquote><!-- 为什么这个小姑娘要承受最肮脏的辱骂？为什么这个小姑娘要承受被皮鞭或电线毒打？为什么这个小姑娘成为其父母攀比的工具？为什么这个小姑娘会走向绝路？为什么当这个小姑娘在承受这些非人的对待时，我们的社会和政府熟视无睹，毫无作为？为什么其父母的会短视无知？为什么未成年保护法在未成年承受家庭的非法非人对待时形同虚设？ 想想自己的中学时代是不是在承受填鸭式教育，是不是在承受早六晚十没有周末的浑浑噩噩？是不是在承受一张又一张卷子？是不是在承受机械式做题？当一代又一代人的童年，青少年被毁掉，怎么期待这个民族复兴？这当然不只是父母的无知短视，这与我们这个社会被共产党治理的贪污腐败横行，邪门歪道猖獗，潜规则盛行，无耻至极的资本家压榨肆无忌惮地剥削劳工，食品安全人人自危息息相关。进而想到为什么共产党面对如此这般颠倒黑白的社会只想着扬汤止沸，毫无釜底抽薪，壮士断腕之举？这是因为它们中大都已经成为官商勾结以权谋私的既得利益者，无时无刻不想着捞钱，看看多少权贵的亲属子女移民海外。为什么诚实劳动的人栖身蜗居，生不起养不起，而官商勾结投机取巧之流的反而成了这个社会的人上人？一个肮脏的国家，如果人人讲规则而不是空谈道德，最终会变成一个有人味儿的正常国家，道德自然会逐渐回归；反之，一个干净的国家息息相关，如果人人都不讲规则却大谈道德、谈高尚，天天没事儿就讲道德规范，人人大公无私，最终这个国家会堕落成为一个伪君子遍布的肮脏国家！为什么年轻人现在不结婚不生孩？ 996，007 大小周，单休,高房价等资本家和权贵狼狈为奸的剥削压迫已将年轻人压迫的喘不过气。我不能呼吸不仅是北美奴隶主反人类匪帮下黑人的真实写照，也是中共权贵无耻资本家压迫剥削下劳工的真实写照。 年轻人选择“躺平”的根源是因为资本家掌握了社会资源，他们凭借优势地位制定分配规则，资本家要保证自己足够的既得利益，于是劳动者们的奋斗与努力的成果都被剥削了，以至于他们的奋斗与努力反而变成了会让群体环境更加恶化的“内卷”，所以年轻劳动者们宁可“躺平” 。 --><p><img src="/images/4f4e79c758ca6d06499e4a1f98cf0865.jpg" alt="政府和资本家合谋压榨剥削劳工"></p><p><img src="/images/b6e6e31860d5f7d133cf58fb18dfe510.jpg" alt="没有资本家的压榨剥削对我很重要"></p><hr><p><img src="//k.sinaimg.cn/n/sjzx/transform/600/w300h300/20210528/807e-kqpyfha3567614.jpg/w700h350z1l10t10310.jpg" alt="年轻人选择躺平拒绝“内卷” 抗拒内卷"></p>]]></content>
      
      
      <categories>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 改革 </tag>
            
            <tag> 躺平 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 面试题</title>
      <link href="vue-interview/"/>
      <url>vue-interview/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/sudheerj/vuejs-interview-questions">vuejs-interview-questions</a></p><p><a href="https://github.com/sudheerj/vuejs-interview-questions-chinese">vuejs-interview-questions-chinese</a></p><p><a href="https://v3.cn.vuejs.org//guide/">介绍 — Vue.js</a></p><p><a href="https://vuejs.org/v2/guide/">Introduction — Vue.js</a></p></blockquote><ul><li>能熟练使用 Vue 进行项目开发，掌握 Vue 各生命周期函数的调用，掌握 Vue 常用的 api</li><li>掌握 Vue 组件间的各种传值方式，掌握 v-model 的实现，理解 computed 和 Watch 在作用场景上的区别，能够自定义 Vue 指令</li><li>掌握 Vuex 常用 api 使用，掌握 vue router 常用 api 的使用及各种传值方式</li></ul><h2 id="🔥Vue"><a href="#🔥Vue" class="headerlink" title="🔥Vue"></a><a href="https://cn.vuejs.org/">🔥Vue</a></h2><h3 id="v-model-原理"><a href="#v-model-原理" class="headerlink" title="v-model 原理"></a>v-model 原理</h3><details><summary><b>详解</b></summary><p>v-model 是 v-bind:vlue 和 v-on:input 的语法糖。可以通过 model 属性的 prop 和 event 属性来进行自定义。原生的 v-model 会根据标签的不同生成不同的事件和属性。</p><p>v-model 就是 vue 的双向绑定的指令，能将页面上控件输入的值同步更新到相关绑定的 data 属性，也会在更新 data 绑定属性时候，更新页面上输入控件的值。</p><p>v-model 作为双向绑定指令也是 vue 两大核心功能之一，使用非常方便，提高前端开发效率。在 view 层，model 层需要数据交互，即可使用 v-model。</p><p>input 输入值后更新 data   首先在页面初始化时候，vue 的编译器会编译该 html 模板文件，将页面上的 dom 元素遍历生成一个虚拟的 dom 树。再递归遍历虚拟的 dom 的每一个节点。当匹配到其是一个元素而非纯文本，则继续遍历每一个属性。  如果遍历到 v-model 这个属性，则会为这个节点添加一个 input 事件，当监听从页面输入值的时候，来更新 vue 实例中的 data 想对应的属性值。</p><p>data 的属性赋值后更新 input 的值    同样初始化 vue 实例时候，会递归遍历 data 的每一个属性，并且通过 defineProperty 来监听每一个属性的 get，set 方法，从而一旦某个属性重新赋值，则能监听到变化来操作相应的页面控制。</p><p>其核心就是，一方面 modal 层通过 defineProperty 来劫持每个属性，一旦监听到变化通过相关的页面元素更新。另一方面通过编译模板文件，为控件的 v-model 绑定 input 事件，从而页面输入能实时更新相关 data 属性值。</p><p>表单重编辑时需要先从 model 获取 展示表单原数据 表单提交时从 view 回去传回 model</p></details><hr><h3 id="Vue-双向绑定数据原理"><a href="#Vue-双向绑定数据原理" class="headerlink" title="Vue 双向绑定数据原理"></a>Vue 双向绑定数据原理</h3><details><summary><b>解析</b></summary><blockquote><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96">Vue 2.x 如何追踪变化</a></p></blockquote><p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的 property，并使用 <code>Object.defineProperty</code> 把这些 property 全部转为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#defining_getters_and_setters">getter/setter</a>.</p><p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。</p><p>每个组件实例都对应一个 <strong>watcher</strong> 实例，它会在组件渲染的过程中把 “接触” 过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p><blockquote><p><a href="https://v3.cn.vuejs.org/guide/reactivity.html#vue-%E5%A6%82%E4%BD%95%E8%B7%9F%E8%B8%AA%E5%8F%98%E5%8C%96">Vue 3.x 如何跟踪变化</a></p></blockquote><p>当我们从一个组件的 <code>data</code> 函数中返回一个普通的 JavaScript 对象时，Vue 会将该对象包裹在一个带有 <code>get</code> 和 <code>set</code> 处理程序的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> 中。Proxy 是在 ES6 中引入的，它使 Vue 3 避免了 Vue 早期版本中存在的一些响应性问题。</p><p><strong>Proxy 是一个对象，它包装了另一个对象，并允许你拦截对该对象的任何交互。</strong></p></details><hr><h3 id="Vue-单向数据流原理"><a href="#Vue-单向数据流原理" class="headerlink" title="Vue 单向数据流原理"></a>Vue 单向数据流原理</h3><details><summary><b>解析</b></summary><blockquote><p><a href="https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81">单向数据流</a></p></blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个 <strong>单向下行绑定</strong> ：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop.</p><blockquote><p>父传子的 props 就是单向流动。父变子亦变，子变父不变。且不应该在子组件中更新父属性。v-model 就是双向数据流</p></blockquote></details><hr><h3 id="再说一下-Vue2-x-中如何监测数组变化"><a href="#再说一下-Vue2-x-中如何监测数组变化" class="headerlink" title="再说一下 Vue2.x 中如何监测数组变化"></a>再说一下 Vue2.x 中如何监测数组变化</h3><details><summary><b>详解</b></summary><p>使用了函数劫持的方式，重写了数组的方法，Vue 将 data 中的数组进行了原型链重写，指向了自己定义的数组原型方法。</p><p>这样当调用数组 api 时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</p></details><hr><h3 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a>data 必须是一个函数</h3><details><summary><b>详解</b></summary><p>我们能抽离出来的组件肯定是具有复用性的，它在项目中可能会存在多个实例。如果 data 属性值是一个对象时，那么它所有的实例都会共享这些数据，即使是该组件被多次引用，而其实操作的是同一个对象，最终导致了引用该组件的所有位置都同步的显示了。<br>我们的期望是，组件的每个实例都能独立的维护自己的数据。<br>解决方案：组件中的 data 返回一个函数，他的每个实例就会有自己的作用域空间，也就是独立的数据，每个实例之间不会相互影响。</p><p>所以，组件中的 data 属性必须是一个函数。</p><blockquote><p><a href="https://v3.cn.vuejs.org//guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0">data 必须是一个函数</a> 一个组件实例数据的更改将影响所有其他实例的数据。</p></blockquote></details><hr><h3 id="🔥-Vue-生命周期总共有几个阶段"><a href="#🔥-Vue-生命周期总共有几个阶段" class="headerlink" title="🔥 Vue 生命周期总共有几个阶段"></a>🔥 <a href="https://github.com/haizlin/fe-interview/issues/310">Vue 生命周期总共有几个阶段</a></h3><blockquote><p><a href="https://v3.cn.vuejs.org/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">生命周期图示</a></p></blockquote><p><img src="https://user-images.githubusercontent.com/56429043/89651312-53573500-d8f6-11ea-802f-f7554dab9d6a.png"></p><details><summary><b>详解</b></summary><ol><li>beforeCreate（创建前）此阶段为实例初始化之后，此时的数据观察和事件机制都未形成，不能获得 DOM 节点。（没有 data，没有 el）使用场景：因为此时 data 和 methods 都拿不到，所以通常在实例以外使用，可以在这加个 <strong>loading 事件</strong>，在加载实例时触发</li><li>created（创建后）在这个阶段 vue 实例已经创建，仍然不能获取 DOM 元素。（有 data，没有 el）使用场景：模板渲染成 html 前调用，此时可以获取 data 和 methods，可以初始化某些属性值，然后再渲染成视图，异步操作可以放在这里，初始化完成时的事件写在这里，如在这<strong>结束 loading 事件</strong>，<strong>服务端渲染时异步请求</strong>也适宜在这里调用</li><li>beforeMount（载入前）我们虽然依然得不到具体的 DOM 元素，但 vue 挂载的根节点已经创建，下面 vue 对 DOM 的操作将围绕这个根元素继续进行；beforeMount 这个阶段是过渡性的，一般一个项目只能用到一两次。（有 data，有 el）</li><li>mounted（载入后）mounted 是平时我们使用最多的函数了，一般我们的<strong>异步请求</strong>都写在这里。在这个阶段，数据和 DOM 都已被渲染出来。使用场景：模板渲染成 html 后调用，通常是初始化页面完成后再对数据和 DOM 做一些操作，需要<strong>操作 DOM</strong> 的方法可以放在这里</li><li>beforeUpdate（更新前）在这一阶段，vue 遵循数据驱动 DOM 的原则。beforeUpdate 函数在数据更新后虽然没立即更新数据，但是 DOM 中的数据会改变，这是 Vue 双向数据绑定的作用。</li><li>updated（更新后）在这一阶段 DOM 会和更改过的内容同步。使用场景：需要对数据更新做统一处理的；如果需要区分不同的数据更新操作可以使用$nextTick</li><li>beforeDestroy（销毁前）在上一阶段 Vue 已经成功的通过数据驱动 DOM 更新，当我们不再需要 vue 操纵 DOM 时，就要销毁 Vue, 也就是清除 vue 实例与 DOM 的关联，调用 destroy 方法可以销毁当前组件。在销毁前，会触发 beforeDestroy 钩子函数。使用场景：可以做一个确认停止事件的确认框</li><li>destroyed（销毁后）对应的钩子函数是 destroyed。在销毁后，会触发 destroyed 钩子函数。<strong>定时器销毁</strong></li><li>activated：在使用 vue-router 时有时需要使用<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>来缓存组件状态，这个时候 created 钩子就不会被重复调用了。如果我们的子组件需要在每次加载的时候进行某些操作，可以使用 activated 钩子触发。</li><li>deactivated：<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>组件被移除时使用。</li></ol></details><hr><h3 id="计算属性-computed-和侦听器-watch-区别"><a href="#计算属性-computed-和侦听器-watch-区别" class="headerlink" title="计算属性 computed 和侦听器 watch 区别"></a><a href="https://github.com/haizlin/fe-interview/issues/264">计算属性 computed 和侦听器 watch 区别</a></h3><blockquote><p><a href="https://v3.cn.vuejs.org/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95">计算属性缓存 vs 方法</a></p><p><a href="https://v3.cn.vuejs.org/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95">计算属性缓存 vs 方法</a></p></blockquote><details><summary><b>解析</b></summary><table><thead><tr><th>计算属性 computed</th><th>侦听属性 watch</th></tr></thead><tbody><tr><td>支持缓存，只有依赖数据发生改变，才会重新进行计算</td><td>不支持缓存，被侦听数据变，直接会触发相应的操作</td></tr><tr><td>不支持异步</td><td>支持异步； 在数据变化时执行异步或开销较大的操作</td></tr><tr><td>基于 data 中声明过或者父组件传递的 props 中的数据</td><td>接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值</td></tr><tr><td>依赖其他属性，是多对一或者一对一</td><td>当一个属性发生变化时，需要执行对应的操作；一对多；</td></tr></tbody></table><blockquote><p><a href="https://v3.cn.vuejs.org/guide/computed.html">计算属性和侦听器</a></p></blockquote></details><hr><h3 id="⭕️component-和-components-区别"><a href="#⭕️component-和-components-区别" class="headerlink" title="⭕️component 和 components 区别"></a>⭕️component 和 components 区别</h3><details><summary><b>详解</b></summary><p>全局组件<br>所有实例都能用全局组件。</p><p>全局组件实例<br>注册一个 全局组件 my-component，并使用它：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 注册</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token string">'&lt;h1> 自定义组件！&lt;/h1>'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建根实例</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部组件<br>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p><p>局部组件实例<br>注册一个 局部组件 my-component，并使用它：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token string">'&lt;h1> 自定义组件！&lt;/h1>'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 创建根实例</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// &lt;my-component> 将只在父模板可用</span>      my<span class="token operator">-</span>component<span class="token operator">:</span> Child<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="🔥-v-if-和-v-show-的区别"><a href="#🔥-v-if-和-v-show-的区别" class="headerlink" title="🔥 v-if 和 v-show 的区别"></a>🔥 v-if 和 v-show 的区别</h3><details><summary><b>详解</b></summary><blockquote><ol><li><code>v-if</code> 只在表达式通过的情况下将元素渲染到 DOM 中，而 <code>v-show</code> 渲染全部元素到 DOM 中并基于表达式使用 CSS <code>display</code> 属性来 显示 / 隐藏 元素。</li><li><code>v-if</code> 支持 <code>v-else</code> 和 <code>v-else-if</code> 指令，而 <code>v-show</code> 不支持 <code>else</code> 指令。</li><li><code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始化渲染开销。换言之，如果元素会被频繁切换开关则 <code>v-show</code> 有优势，在初始渲染时间方面 <code>v-if</code> 有优势。</li><li><code>v-if</code> 支持 <code>&lt;template&gt;</code> 选项卡，但 <code>v-show</code> 不支持。</li></ol><p><a href="https://v3.cn.vuejs.org/guide/conditional.html#v-if-vs-v-show">v-if vs v-show</a></p></blockquote></details><hr><h3 id="组件中的-data-为什么是一个函数"><a href="#组件中的-data-为什么是一个函数" class="headerlink" title="组件中的 data 为什么是一个函数"></a><a href="https://github.com/haizlin/fe-interview/issues/267">组件中的 data 为什么是一个函数</a></h3><details><summary><b>详解</b></summary><p>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。如果 data 是对象的话，对象属于引用类型，会影响到所有的实例。</p><p>所以为了保证组件不同的实例之间 data 不冲突，data 必须是一个函数。</p><hr><p>new Vue() 实例中，data 可以直接是一个对象，为什么在 Vue 组件中，data 必须是一个函数呢</p><p>因为组件是可以复用的，JS 里对象是引用关系，如果组件 data 是一个对象，那么子组件中的 data 属性值会互相污染，产生副作用。</p><p>所以一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。new Vue 的实例是不会被复用的，因此不存在以上问题。</p></details><hr><h3 id="Vue-事件绑定原理说一下"><a href="#Vue-事件绑定原理说一下" class="headerlink" title="Vue 事件绑定原理说一下"></a>Vue 事件绑定原理说一下</h3><details><summary><b>详解</b></summary><ol><li>原生 dom 事件的绑定，采用的是 <code>addEventListener</code> 实现</li><li>组件绑定事件采用的是 <code>$on</code> 方法</li></ol></details><hr><h3 id="Vue-中组件生命周期调用顺序说一下"><a href="#Vue-中组件生命周期调用顺序说一下" class="headerlink" title="Vue 中组件生命周期调用顺序说一下"></a>Vue 中组件生命周期调用顺序说一下</h3><details><summary><b>详解</b></summary><p>组件的调用顺序都是先父后子，渲染完成的顺序是先子后父。</p><p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</p><p><strong>加载渲染过程</strong> 父 beforeCreate-&gt; 父 created-&gt; 父 beforeMount-&gt; 子 beforeCreate-&gt; 子 created-&gt; 子 beforeMount- &gt; 子 mounted-&gt; 父 mounted</p><p><strong>子组件更新过程</strong> 父 beforeUpdate-&gt; 子 beforeUpdate-&gt; 子 updated-&gt; 父 updated</p><p><strong>父组件更新过程</strong> 父 beforeUpdate -&gt; 父 updated</p><p><strong>销毁过程</strong> 父 beforeDestroy-&gt; 子 beforeDestroy-&gt; 子 destroyed-&gt; 父 destroyed</p></details><hr><h3 id="Vue2-x-组件通信"><a href="#Vue2-x-组件通信" class="headerlink" title="Vue2.x 组件通信"></a>Vue2.x 组件通信</h3><details><summary><b>解析</b></summary><p>用 props 和 events 实现父子组件通信</p><p>通过使用事件中心，允许组件自由交流，无论组件处于组件树的哪一层。由于 Vue 实例实现了一个事件分发接口，你可以通过实例化一个空的 Vue 实例来实现兄弟组件间的通信。然后在组件中，可以使用 <code>$emit</code>，<code>$on</code>，<code>$off</code> 分别来分发。监听。取消监听事件：</p></details><hr><h3 id="Vue-性能优化"><a href="#Vue-性能优化" class="headerlink" title="Vue 性能优化"></a>Vue 性能优化</h3><details><summary><b>解析</b></summary><p>一。编码优化：</p><ol><li><p>不要将所有的数据都放在 data 中，data 中的数据都会增加 getter 和 setter，会收集对应的 watcher，这样就会降低性能。</p></li><li><p>vue 在 v-for 时给每项元素绑定事件需要用事件代理，节约性能。</p></li><li><p>单页面采用 keep-alive 缓存组件。</p></li><li><p>尽可能拆分组件，来提高复用性。增加代码的可维护性，减少不必要的渲染。因为组件粒度最细，改组件的数组，它只会渲染当前的组件。</p></li><li><p>v-if 当值为 false 时内部指令不会执行，具有阻断功能，很多情况下使用 v-if 替代 v-show，合理使用 if 和 show.</p></li><li><p>key 保证唯一性，不要使用索引 ( vue 中 diff 算法会采用就地复用策略）.</p></li><li><p>data 中的所以数据都会被劫持，所以将数据尽可能扁平化，如果数据只是用来渲染可以使用 Object.freeze，可以将数据冻结起来，这样就不会增加 getter 和 setter.</p></li><li><p>合理使用路由懒加载。异步组件。</p></li><li><p>尽量采用 runtime 运行时版本。</p></li><li><p>数据持久化的问题，使用防抖。节流进行优化，尽可能的少执行和不执行。</p></li></ol><p>二。加载性能：</p><ol><li><p>使用第三方插件实现按需加载</p></li><li><p><a href="https://github.com/tangbc/vue-virtual-scroll-list">滚动到可视区域动态加载</a></p></li><li><p><a href="https://github.com/hilongjw/vue-lazyload">图片懒加载</a></p></li></ol><p>三。用户体验：</p><ol><li><p>app-skeleton 骨架屏</p></li><li><p>app-shell app 壳</p></li><li><p>pwa 可以实现 H5 的离线缓存，使用 servicewor</p></li></ol><p>四。SEO 优化：</p><ol><li><p>预渲染插件 prerender-spa-plugin，可以把我们代码提前运行起来，最后将代码保存下来，缺陷就是不实时。</p></li><li><p>服务端渲染 ssr</p></li></ol><p>五。. 打包优化：</p><ol><li><p>使用 cdn 的方式加载第三方模块</p></li><li><p>多线程打包 happypack</p></li><li><p>抽离公共文件 splitChunks</p></li><li><p>sourceMap 生成</p></li></ol><p>六。缓存和压缩：</p><ol><li><p>客户端缓存。服务端缓存</p></li><li><p>服务端 gzip 压缩</p></li></ol></details><hr><!-- ### [从 0 到 1 自己构架一个 Vue 项目，说说有哪些步骤。哪些重要插件。目录结构你会怎么组织](https://github.com/haizlin/fe-interview/issues/983) --><!-- ### [你知道 Vue 的模板语法用的是哪个 web 模板引擎的吗说说你对这模板引擎的理解](https://github.com/haizlin/fe-interview/issues/561) --><!-- ### [你有使用过 Vue 开发多语言项目吗说说你的做法](https://github.com/haizlin/fe-interview/issues/559) --><h3 id="Vue-定义全局的方法"><a href="#Vue-定义全局的方法" class="headerlink" title="Vue 定义全局的方法"></a><a href="https://github.com/haizlin/fe-interview/issues/556">Vue 定义全局的方法</a></h3><details><summary><b>解析</b></summary><ol><li>通过 prototype, 这个非常方便。<code>Vue.prototype[method]=method;</code></li><li>通过插件 <code>Vue.use(plugin);</code></li><li>通过 mixin,<code>Vue.mixin(mixins);</code></li></ol></details><hr><!-- ### [Vue2.0 不再支持 v-html 中使用过滤器了怎么办](https://github.com/haizlin/fe-interview/issues/555)> 1: 全局方法> 2: computed> 3: $options.filters --><h3 id="怎么解决-Vue-打包后静态资源图片失效的问题"><a href="#怎么解决-Vue-打包后静态资源图片失效的问题" class="headerlink" title="怎么解决 Vue 打包后静态资源图片失效的问题"></a><a href="https://github.com/haizlin/fe-interview/issues/554">怎么解决 Vue 打包后静态资源图片失效的问题</a></h3><blockquote><p><a href="https://github.com/haizlin/fe-interview/issues/366">Vue 首页白屏是什么问题引起的如何解决呢</a></p></blockquote><details><summary><b>解析</b></summary><ol><li>vue-cli 2.x 版本</li></ol><p>在 config 文件夹下的 index.js 中修改 assetsPublicPath: ‘./‘</p><ol><li>vue-cli 3.x 版本</li></ol><p>在 vue.config.js 添加 baseUrl 属性 设为 ‘./’ 即可</p><ol><li>vue-cli 4.x 版本</li></ol><p>修改 vue.config.js 文件 ，但将属性换为 publicPath:’./‘</p></details><hr><!-- ### [怎么解决 Vue 动态设置 img 的 src 不生效的问题](https://github.com/haizlin/fe-interview/issues/553) --><!-- ### [如果现在让你从 Vue/react/angularjs 三个中选择一个，你会选哪个说说你的理由](https://github.com/haizlin/fe-interview/issues/550) --><!-- ### [你知道 Vue2.0 兼容 IE 哪个版本以上吗](https://github.com/haizlin/fe-interview/issues/549) --><h3 id="Vue-风格指南"><a href="#Vue-风格指南" class="headerlink" title="Vue 风格指南"></a><a href="https://github.com/haizlin/fe-interview/issues/547">Vue 风格指南</a></h3><details><summary><b>解析</b></summary><p><a href="https://v3.cn.vuejs.org//style-guide/">Vue 3.x 风格指南</a></p><p><a href="https://cn.vuejs.org/v2/style-guide/">Vue 2.x 风格指南</a></p></details><hr><!-- ### [你是从 Vue 哪个版本开始用的你知道 1.x 和 2.x 有什么区别吗](https://github.com/haizlin/fe-interview/issues/546) --><!-- ### [你知道 Vue 中 key 的原理吗说说你对它的理解](https://github.com/haizlin/fe-interview/issues/545) --><!-- ### [Vue 中怎么重置 data](https://github.com/haizlin/fe-interview/issues/544) --><!-- ### [Vue 渲染模板时怎么保留模板中的 HTML 注释呢](https://github.com/haizlin/fe-interview/issues/508)### [你知道 style 加 scoped 属性的用途和原理吗](https://github.com/haizlin/fe-interview/issues/506) --><!-- ### [你期待 Vue3.0 有什么功能或者改进的地方](https://github.com/haizlin/fe-interview/issues/489) --><!-- ### [Vue 边界情况有哪些](https://github.com/haizlin/fe-interview/issues/478)> [处理边界情况](https://v3.cn.vuejs.org//guide/components-edge-cases.html)--- --><h3 id="Vue-methods-watch-用箭头函数定义结果会怎么样"><a href="#Vue-methods-watch-用箭头函数定义结果会怎么样" class="headerlink" title="Vue methods watch 用箭头函数定义结果会怎么样"></a><a href="https://github.com/haizlin/fe-interview/issues/476">Vue methods watch 用箭头函数定义结果会怎么样</a></h3><details><summary><b>详解</b></summary><p>不应该使用箭头函数来定义 watcher 函数 理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this 将指向 undefined.</p></details><hr><!-- ### [在 Vue 项目中如何配置 favicon](https://github.com/haizlin/fe-interview/issues/474) --><!-- ### [你有使用过 babel-polyfill 模块吗主要是用来做什么的](https://github.com/haizlin/fe-interview/issues/473) --><!-- ### [说说你对 Vue 的错误处理的了解](https://github.com/haizlin/fe-interview/issues/472) --><!-- ### [在 Vue 事件中传入 $event, 使用 e.target 和 e.currentTarget 有什么区别](https://github.com/haizlin/fe-interview/issues/471) --><!-- ### [在 Vue 文件中 style 是必须的吗那 script 是必须的吗为什么](https://github.com/haizlin/fe-interview/issues/470) --><h3 id="Vue-怎么实现强制刷新组件"><a href="#Vue-怎么实现强制刷新组件" class="headerlink" title="Vue 怎么实现强制刷新组件"></a><a href="https://github.com/haizlin/fe-interview/issues/469">Vue 怎么实现强制刷新组件</a></h3><details><summary><b>详解</b></summary><p>强制重新渲染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制重新刷新某组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模版上绑定 key</span><span class="token operator">&lt;</span>SomeComponent <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"theKey"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 选项里绑定 data</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">&#123;</span>      theKey<span class="token operator">:</span><span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 刷新 key 达到刷新组件的目的</span>theKey<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="Vue-自定义事件中父组件接收子组件的多个参数"><a href="#Vue-自定义事件中父组件接收子组件的多个参数" class="headerlink" title="Vue 自定义事件中父组件接收子组件的多个参数"></a><a href="https://github.com/haizlin/fe-interview/issues/468">Vue 自定义事件中父组件接收子组件的多个参数</a></h3><details><summary><b>详解</b></summary><p>很多时候用 $emit 携带参数传出事件，并且又需要在父组件中使用自定义参数时，这时我们就无法接受到子组件传出的参数了。<br>找到了两种方法可以同时添加自定义参数的方法。</p><p>子组件传出单个参数时：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>param<span class="token punctuation">)</span><span class="token comment">// 父组件</span>@test<span class="token operator">=</span><span class="token string">'test($event,userDefined)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>子组件传出多个参数时：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>param1，<span class="token keyword">this</span><span class="token punctuation">.</span>param2<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>param3<span class="token punctuation">)</span><span class="token comment">// 父组件 arguments 是以数组的形式传入</span>@test<span class="token operator">=</span><span class="token string">'test(arguments,userDefined)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://github.com/vuejs/vue/issues/5735">自定义事件传参问题 #5735</a></p></blockquote></details><hr><h3 id="Vue-给组件绑定自定义事件无效怎么解决"><a href="#Vue-给组件绑定自定义事件无效怎么解决" class="headerlink" title="Vue 给组件绑定自定义事件无效怎么解决"></a><a href="https://github.com/haizlin/fe-interview/issues/466">Vue 给组件绑定自定义事件无效怎么解决</a></h3><blockquote><p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6">将原生事件绑定到组件</a></p></blockquote><h3 id="Vue-的属性与方法同名"><a href="#Vue-的属性与方法同名" class="headerlink" title="Vue 的属性与方法同名"></a><a href="https://github.com/haizlin/fe-interview/issues/465">Vue 的属性与方法同名</a></h3><details><summary><b>详解</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Vue warn<span class="token punctuation">]</span>: Method <span class="token string">"xxx"</span> has already been defined as a data property.<span class="token punctuation">[</span>Vue warn<span class="token punctuation">]</span>: Error <span class="token keyword">in</span> mounted hook: <span class="token string">"TypeError: this.xxx is not a function"</span>TypeError: this.xxx is not a <span class="token keyword">function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><hr><!-- ### [Vue 变量名如果以 \_. $ 开头的属性会发生什么问题怎么访问到它们的值](https://github.com/haizlin/fe-interview/issues/464) --><!-- ### [Vue 使用 v-for 遍历对象时，是按什么顺序遍历的如何保证顺序](https://github.com/haizlin/fe-interview/issues/463) --><h3 id="Vue-如果想扩展某个现有的组件时，怎么做呢"><a href="#Vue-如果想扩展某个现有的组件时，怎么做呢" class="headerlink" title="Vue 如果想扩展某个现有的组件时，怎么做呢"></a><a href="https://github.com/haizlin/fe-interview/issues/462">Vue 如果想扩展某个现有的组件时，怎么做呢</a></h3><details><summary><b>详解</b></summary><ol><li>使用 Vue.extend 直接扩展</li><li>使用 Vue.mixin 全局混入</li><li>HOC 封装</li><li>加 slot 扩展</li></ol></details><hr><!-- ### [说下 $attrs 和 $listeners 的使用场景](https://github.com/haizlin/fe-interview/issues/461) --><!-- ### [分析下 Vue 项目本地开发完成后部署到服务器后报 404 是什么原因呢](https://github.com/haizlin/fe-interview/issues/460) --><!-- ### [Vue 为什么要求组件模板只能有一个根元素](https://github.com/haizlin/fe-interview/issues/457) --><h3 id="EventBus-全局注册路由切换时重复触发事件"><a href="#EventBus-全局注册路由切换时重复触发事件" class="headerlink" title="EventBus 全局注册路由切换时重复触发事件"></a><a href="https://github.com/haizlin/fe-interview/issues/456">EventBus 全局注册路由切换时重复触发事件</a></h3><details><summary><b>详解</b></summary><p>建议在 created 里注册，在 beforeDestory 移出</p></details><hr><h3 id="怎么修改-Vue-打包后生成文件路径"><a href="#怎么修改-Vue-打包后生成文件路径" class="headerlink" title="怎么修改 Vue 打包后生成文件路径"></a><a href="https://github.com/haizlin/fe-interview/issues/455">怎么修改 Vue 打包后生成文件路径</a></h3><p>vue.config.js 中设置 <code>outputDir</code></p><!-- ### [你有使用做过 Vue 与原生 app 交互吗说说 Vue 与 ap 交互的方法](https://github.com/haizlin/fe-interview/issues/454) --><h3 id="动态组件-tab-切换"><a href="#动态组件-tab-切换" class="headerlink" title="动态组件 tab 切换"></a><a href="https://github.com/haizlin/fe-interview/issues/430">动态组件 tab 切换</a></h3><details><summary><b>详解</b></summary><p>在不同组件之间进行动态切换可以通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> attribute 来实现：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6">动态组件</a></p></blockquote></details><hr><h3 id="怎么缓存当前的组件缓存后怎么更新"><a href="#怎么缓存当前的组件缓存后怎么更新" class="headerlink" title="怎么缓存当前的组件缓存后怎么更新"></a><a href="https://github.com/haizlin/fe-interview/issues/333">怎么缓存当前的组件缓存后怎么更新</a></h3><details><summary><b>详解</b></summary><p><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%9C%A8%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-keep-alive">在动态组件上使用 <code>keep-alive</code></a></p><p>在一个多标签的界面中使用 <code>is</code> attribute 来切换不同的组件<br>当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复渲染导致的性能问题</p></details><hr><h3 id="说说你对-SPA-单页面的理解及优缺点"><a href="#说说你对-SPA-单页面的理解及优缺点" class="headerlink" title="说说你对 SPA 单页面的理解及优缺点"></a><a href="https://github.com/haizlin/fe-interview/issues/322">说说你对 SPA 单页面的理解及优缺点</a></h3><details><summary><b>详解</b></summary><p>SPA 应用就是一个 WEB 应用，可理解为：是一种只需要将单个页面加载到服务器之中的 WEB 应用程序。当浏览器向服务器发出第一个请求时，服务器会返回一个 index.html 文件，它所需的其他资源会在显示时统一加载，部分页面需要时加载。</p><blockquote><p><a href="https://github.com/haizlin/fe-interview/issues/323">SPA 单页面的实现方式有哪些</a></p></blockquote><ol><li><p>监听地址栏中 hash 变化驱动界面变化</p></li><li><p>用 pushsate 记录浏览器的历史，驱动界面发送变化</p></li><li><p>直接在界面用普通事件驱动界面变化</p></li></ol><p>它们都是遵循同一种原则：div 的显示与隐藏</p><p>优点：</p><ol><li>良好的交互式体验。意思是：用户无需刷新页面，获取数据通过异步 ajax 获取，页面显示流畅</li><li>良好的前后端分离模式（MVVM）减轻服务端压力。服务器只需要输出数据就可以，不用管逻辑和页面展示，吞吐能力会提高几倍</li><li>共用同一套后端程序代码，不用修改就可用于 web 界面，手机和平板等客户端设备</li></ol><p>缺点：</p><ol><li>不利于 SEO 优化</li><li>由于单页应用在一个页面中显示，所以不可以使用浏览器自带的前进后退功能，想要实现页面切换需要自己进行管理</li><li>首屏加载过慢（初次加载耗时多）原因是：为了实现单页 web 应用功能及展示效果，在页面初始化的时候就会将 js，css 等统一加载，部分页面在需要时加载。当然也有解决方法。</li></ol><p>解决方法：</p><ol><li>使用路由懒加载</li><li>开启 Gzip 压缩</li><li>使用 webpack 的 externals 属性把不需要的库文件分离出去，减少打包后文件的大小</li><li>使用 vue 的服务端渲染（SSR）</li></ol><p>举例 SPA 应用：网易云音乐。QQ 音乐等</p></details><hr><h3 id="组件中写-name-选项有什么作用"><a href="#组件中写-name-选项有什么作用" class="headerlink" title="组件中写 name 选项有什么作用"></a><a href="https://github.com/haizlin/fe-interview/issues/434">组件中写 name 选项有什么作用</a></h3><details><summary><b>详解</b></summary><ol><li>当项目使用 keep-alive 时，可搭配组件 name 进行缓存过滤</li><li>DOM 做递归组件时 递归迭代时需要调用自身 name</li><li>vue-devtools 调试工具里显示的组见名称是由 vue 中组件 name 决定的</li></ol><blockquote><p><a href="https://github.com/haizlin/fe-interview/issues/452">Vue 递归组件</a></p></blockquote></details><hr><h3 id="🔥访问根实例"><a href="#🔥访问根实例" class="headerlink" title="🔥访问根实例"></a>🔥<a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E6%A0%B9%E5%AE%9E%E4%BE%8B">访问根实例</a></h3><details><summary><b>详解</b></summary><p>在每个 new Vue 实例的子组件中，其根实例可以通过 <code>$root</code> property 进行访问。例如，在这个根实例中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Vue 根实例</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    foo<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* ... */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* ... */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取根组件的数据</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token comment">// 写入根组件的数据</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 访问根组件的计算属性</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>bar<span class="token punctuation">;</span><span class="token comment">// 调用根组件的方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cn.vuejs.org/v2/api/#vm-root">$root</a></p></details><hr><!-- ### [说说你对 Object.defineProperty 的理解](https://github.com/haizlin/fe-interview/issues/448) --><h3 id="🔥访问父级组件实例"><a href="#🔥访问父级组件实例" class="headerlink" title="🔥访问父级组件实例"></a>🔥<a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E7%88%B6%E7%BA%A7%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B">访问父级组件实例</a></h3><details><summary><b>详解</b></summary><p>和 <code>$root</code> 类似，<code>$parent</code> property 可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。</p><hr><p><a href="https://www.cnblogs.com/jin-zhe/p/9523782.html">Vue 中子组件调用父组件的方法，这里有三种方法提供参考</a>：</p><ul><li>直接在子组件中通过 this.$parent.event 来调用父组件的方法</li><li>在子组件里用 $emit 向父组件触发一个事件，父组件监听这个事件</li><li>父组件把方法传入子组件中，在子组件里直接调用这个方法</li></ul><blockquote><p><a href="https://cn.vuejs.org/v2/api/#vm-parent">$parent</a> 父实例，如果当前实例有的话。</p></blockquote></details><hr><h3 id="🔥访问子组件实例或子元素"><a href="#🔥访问子组件实例或子元素" class="headerlink" title="🔥访问子组件实例或子元素"></a>🔥<a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%88%96%E5%AD%90%E5%85%83%E7%B4%A0">访问子组件实例或子元素</a></h3><details><summary><b>详解</b></summary><p><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%88%96%E5%AD%90%E5%85%83%E7%B4%A0">访问子组件实例或子元素</a></p><p>尽管存在 prop 和事件，有的时候你仍可能需要在 JavaScript 里直接访问一个子组件。为了达到这个目的，你可以通过 <code>ref</code> 这个 attribute 为子组件赋予一个 ID 引用。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usernameInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在在你已经定义了这个 <code>ref</code> 的组件里，你可以使用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>usernameInput<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来访问这个 <code>&lt;base-input&gt;</code> 实例，以便不时之需。比如程序化地从一个父级组件聚焦这个输入框。在刚才那个例子中，该 <code>&lt;base-input&gt;</code> 组件也可以使用一个类似的 <code>ref</code> 提供对内部这个指定元素的访问，例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>甚至可以通过其父级组件定义方法：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">methods: &#123;// 用来从父级组件聚焦输入框 focus: function () &#123; this.$refs.input.focus() &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就允许父级组件通过下面的代码聚焦 <code>&lt;base-input&gt;</code> 里的输入框：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>usernameInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://cn.vuejs.org/v2/api/#vm-children">$children</a> 当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。</p></details><hr><!-- ### [Vue 组件里写的原生 addEventListeners 监听事件，要手动去销毁吗为什么](https://github.com/haizlin/fe-interview/issues/447) --><h3 id="Vue-组件里的定时器要怎么销毁"><a href="#Vue-组件里的定时器要怎么销毁" class="headerlink" title="Vue 组件里的定时器要怎么销毁"></a><a href="https://github.com/haizlin/fe-interview/issues/446">Vue 组件里的定时器要怎么销毁</a></h3><details><summary><b>解析</b></summary><p>在 beforeDestroy() 生命周期内清除定时器</p><p>通过 $once 这个事件侦听器器在定义完定时器之后的位置来清除定时器</p></details><hr><h3 id="Vue-组件会在什么时候下被销毁"><a href="#Vue-组件会在什么时候下被销毁" class="headerlink" title="Vue 组件会在什么时候下被销毁"></a><a href="https://github.com/haizlin/fe-interview/issues/445">Vue 组件会在什么时候下被销毁</a></h3><details><summary><b>解析</b></summary><p>页面关闭。路由跳转。v-if 和改变 key 值</p></details><hr><h3 id="使用-Vue-渲染大量数据时应该怎么优化"><a href="#使用-Vue-渲染大量数据时应该怎么优化" class="headerlink" title="使用 Vue 渲染大量数据时应该怎么优化"></a><a href="https://github.com/haizlin/fe-interview/issues/444">使用 Vue 渲染大量数据时应该怎么优化</a></h3><details><summary><b>解析</b></summary><p>这时候你就可以使用 <code>Object.freeze</code> 方法了，它可以冻结一个对象。<br>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为 <code>getter/setter</code>，它们让 Vue 能进行追踪依赖，在属性被访问和修改时通知变化。<br>使用了 <code>Object.freeze</code> 之后，不仅可以减少 observer 的开销，还能减少不少内存开销。</p></details><hr><!-- ### [在 Vue 中使用 this 应该注意哪些问题](https://github.com/haizlin/fe-interview/issues/443) --><!-- ### [怎么配置使 Vue2.0 + 支持 TypeScript 写法](https://github.com/haizlin/fe-interview/issues/440) --><!-- ### [`<template></template>` 有什么用](https://github.com/haizlin/fe-interview/issues/439) --><!-- ### [Vue 的：class 和：style 有几种表示方式](https://github.com/haizlin/fe-interview/issues/437) --><h3 id="你了解什么是函数式组件吗"><a href="#你了解什么是函数式组件吗" class="headerlink" title="你了解什么是函数式组件吗"></a><a href="https://github.com/haizlin/fe-interview/issues/436">你了解什么是函数式组件吗</a></h3><h3 id="Vue-怎么改变插入模板的分隔符"><a href="#Vue-怎么改变插入模板的分隔符" class="headerlink" title="Vue 怎么改变插入模板的分隔符"></a><a href="https://github.com/haizlin/fe-interview/issues/435">Vue 怎么改变插入模板的分隔符</a></h3><h3 id="说说你对-provide-和-inject-的理解"><a href="#说说你对-provide-和-inject-的理解" class="headerlink" title="说说你对 provide 和 inject 的理解"></a><a href="https://github.com/haizlin/fe-interview/issues/433">说说你对 provide 和 inject 的理解</a></h3><blockquote><p><a href="https://cn.vuejs.org/v2/api/#provide-inject">provide / inject</a></p></blockquote><!-- ### [开发过程中有使用过 devtools 吗](https://github.com/haizlin/fe-interview/issues/432) --><h3 id="说说你对-slot-的理解有多少-slot-使用场景有哪些"><a href="#说说你对-slot-的理解有多少-slot-使用场景有哪些" class="headerlink" title="说说你对 slot 的理解有多少 slot 使用场景有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/431">说说你对 slot 的理解有多少 slot 使用场景有哪些</a></h3><blockquote><p><a href="https://cn.vuejs.org/v2/guide/components-slots.html">插槽</a></p></blockquote><!-- ### [prop 验证的 type 类型有哪几种](https://github.com/haizlin/fe-interview/issues/429) --><!-- ### [prop 是怎么做验证的可以设置默认值吗](https://github.com/haizlin/fe-interview/issues/428) --><!-- ### [说说你对 Vue 组件的设计原则的理解](https://github.com/haizlin/fe-interview/issues/426) --><!-- ### [你了解 Vue 的 diff 算法吗](https://github.com/haizlin/fe-interview/issues/425) --><!-- ### [Vue 如何优化首页的加载速度](https://github.com/haizlin/fe-interview/issues/424) --><!-- ### [Vue 打包成最终的文件有哪些](https://github.com/haizlin/fe-interview/issues/423) --><!-- ### [ajax. fetch. axios 这三都有什么区别](https://github.com/haizlin/fe-interview/issues/422) --><!-- ### [Vue 能监听到数组变化的方法有哪些为什么这些方法能监听到呢](https://github.com/haizlin/fe-interview/issues/421) --><!-- ### [Vue 中是如何使用 event 对象的](https://github.com/haizlin/fe-interview/issues/420) --><!-- ### [移动端 ui 你用的是哪个 ui 库有遇到过什么问题吗](https://github.com/haizlin/fe-interview/issues/364) --><!-- ### [说说你对 v-clock 和 v-pre 指令的理解](https://github.com/haizlin/fe-interview/issues/362) --><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><h3 id="写出你知道的表单修饰符和事件修饰符"><a href="#写出你知道的表单修饰符和事件修饰符" class="headerlink" title="写出你知道的表单修饰符和事件修饰符"></a><a href="https://github.com/haizlin/fe-interview/issues/361">写出你知道的表单修饰符和事件修饰符</a></h3><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">事件修饰符</a></p><p><code>.stop</code> 阻止单击事件继续传播<br><code>.prevent</code> 提交事件不再重载页面<br><code>.capture</code> 添加事件监听器时使用事件捕获模式 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理<br><code>.self</code> 只当在 event.target 是当前元素自身时触发处理函数 即事件不是从内部元素触发的<br><code>.once</code> 点击事件将只会触发一次<br><code>.passive</code> 滚动事件的默认行为 （即滚动行为） 将会立即触发 而不会等待 <code>onScroll</code> 完成</p><p><a href="https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6">表单修饰符</a></p><p><code>.lazy</code> 在 <code>change</code> 事件<em>之后</em>进行同步<br><code>.number</code> 自动将用户的输入值转为数值类型<br><code>.trim</code> 自动过滤用户输入的首尾空白字符</p><!-- ### [你有自己用 Vue 写过 UI 组件库吗](https://github.com/haizlin/fe-interview/issues/358) --><!-- ### [用 Vue 怎么实现一个换肤的功能](https://github.com/haizlin/fe-interview/issues/357) --><h3 id="有在-Vue-中使用过-echarts-吗踩过哪些坑如何解决的"><a href="#有在-Vue-中使用过-echarts-吗踩过哪些坑如何解决的" class="headerlink" title="有在 Vue 中使用过 echarts 吗踩过哪些坑如何解决的"></a><a href="https://github.com/haizlin/fe-interview/issues/356">有在 Vue 中使用过 echarts 吗踩过哪些坑如何解决的</a></h3><h3 id="Vue-性能的优化的方法有哪些"><a href="#Vue-性能的优化的方法有哪些" class="headerlink" title="Vue 性能的优化的方法有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/354">Vue 性能的优化的方法有哪些</a></h3><h3 id="SSR-解决了什么问题有做过-SSR-吗你是怎么做的"><a href="#SSR-解决了什么问题有做过-SSR-吗你是怎么做的" class="headerlink" title="SSR 解决了什么问题有做过 SSR 吗你是怎么做的"></a><a href="https://github.com/haizlin/fe-interview/issues/353">SSR 解决了什么问题有做过 SSR 吗你是怎么做的</a></h3><h3 id="说说你觉得认为的-Vue-开发规范有哪些"><a href="#说说你觉得认为的-Vue-开发规范有哪些" class="headerlink" title="说说你觉得认为的 Vue 开发规范有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/352">说说你觉得认为的 Vue 开发规范有哪些</a></h3><h3 id="Vue-部署上线前需要做哪些准备工作"><a href="#Vue-部署上线前需要做哪些准备工作" class="headerlink" title="Vue 部署上线前需要做哪些准备工作"></a><a href="https://github.com/haizlin/fe-interview/issues/350">Vue 部署上线前需要做哪些准备工作</a></h3><h3 id="Vue-过渡动画实现的方式有哪些"><a href="#Vue-过渡动画实现的方式有哪些" class="headerlink" title="Vue 过渡动画实现的方式有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/349">Vue 过渡动画实现的方式有哪些</a></h3><p><a href="https://cn.vuejs.org/v2/guide/transitions.html">进入/离开 &amp; 列表过渡</a></p><hr><h3 id="Vue-父子组件双向绑定的方法有哪些"><a href="#Vue-父子组件双向绑定的方法有哪些" class="headerlink" title="Vue 父子组件双向绑定的方法有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/347">Vue 父子组件双向绑定的方法有哪些</a></h3><!-- ### [Vue 怎么获取 DOM 节点](https://github.com/haizlin/fe-interview/issues/346) --><!-- ### [Vue 项目有做过单元测试吗](https://github.com/haizlin/fe-interview/issues/345) --><!-- ### [Vue 项目有使用过 npm run build --report 吗](https://github.com/haizlin/fe-interview/issues/344) --><!-- ### [如何解决 Vue 打包 vendor 过大的问题](https://github.com/haizlin/fe-interview/issues/343) --><!-- ### [webpack 打包 Vue 速度太慢怎么办](https://github.com/haizlin/fe-interview/issues/342) --><!-- ### [Vue 在开发过程中要同时跟 N 个不同的后端人员联调接口 （请求的 url 不一样） 时你该怎么办](https://github.com/haizlin/fe-interview/issues/341) --><h3 id="Vue-要做权限管理-按钮级别"><a href="#Vue-要做权限管理-按钮级别" class="headerlink" title="Vue 要做权限管理 按钮级别"></a><a href="https://github.com/haizlin/fe-interview/issues/340">Vue 要做权限管理 按钮级别</a></h3><details><summary><b>详解</b></summary><p>菜单与路由分离，菜单由后端返回</p><p>这种方式的缺点：</p><p>菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用<br>全局路由守卫里，每次路由跳转都要做判断</p><p>菜单和路由都由后端返回</p><p>这种方法也会存在缺点：</p><p>全局路由守卫里，每次路由跳转都要做判断<br>前后端的配合要求更高</p></details><hr><h3 id="Vue-项目的目录结构大型项目怎么划分结构和划分组件呢"><a href="#Vue-项目的目录结构大型项目怎么划分结构和划分组件呢" class="headerlink" title="Vue 项目的目录结构大型项目怎么划分结构和划分组件呢"></a><a href="https://github.com/haizlin/fe-interview/issues/339">Vue 项目的目录结构大型项目怎么划分结构和划分组件呢</a></h3><!-- ### [在移动端使用 Vue, 你觉得最佳实践有哪些](https://github.com/haizlin/fe-interview/issues/338) --><!-- ### [你们项目为什么会选 Vue 而不选择其它的框架呢](https://github.com/haizlin/fe-interview/issues/337) --><h3 id="Vue3-0-新特性"><a href="#Vue3-0-新特性" class="headerlink" title="Vue3.0 新特性"></a><a href="https://github.com/haizlin/fe-interview/issues/336">Vue3.0 新特性</a></h3><!-- ### [你了解什么是高阶组件吗可否举个例子说明下](https://github.com/haizlin/fe-interview/issues/332) --><h3 id="Vue-loader-是什么"><a href="#Vue-loader-是什么" class="headerlink" title="Vue-loader 是什么"></a><a href="https://github.com/haizlin/fe-interview/issues/330">Vue-loader 是什么</a></h3><details><summary><b>详解</b></summary><blockquote><p><a href="https://vue-loader.vuejs.org/zh/#vue-loader-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Vue Loader 是什么</a></p></blockquote></details><hr><!-- ### [说说你对 Vue 的 extend（构造器） 的理解，它主要是用来做什么的](https://github.com/haizlin/fe-interview/issues/329) --><h3 id="怎么捕获组件-Vue-的错误信息"><a href="#怎么捕获组件-Vue-的错误信息" class="headerlink" title="怎么捕获组件 Vue 的错误信息"></a><a href="https://github.com/haizlin/fe-interview/issues/327">怎么捕获组件 Vue 的错误信息</a></h3><!-- ### [为什么 Vue 使用异步更新组件](https://github.com/haizlin/fe-interview/issues/326) --><h3 id="写出多种定义组件模板的方法"><a href="#写出多种定义组件模板的方法" class="headerlink" title="写出多种定义组件模板的方法"></a><a href="https://github.com/haizlin/fe-interview/issues/324">写出多种定义组件模板的方法</a></h3><h3 id="说说你都用-Vue-做过哪些类型的项目"><a href="#说说你都用-Vue-做过哪些类型的项目" class="headerlink" title="说说你都用 Vue 做过哪些类型的项目"></a><a href="https://github.com/haizlin/fe-interview/issues/321">说说你都用 Vue 做过哪些类型的项目</a></h3><!-- ### [在 Vue 项目中如何引入第三方库 （比如 jQuery) 有哪些方法可以做到](https://github.com/haizlin/fe-interview/issues/320) --><h3 id="使用-Vue-手写一个过滤器"><a href="#使用-Vue-手写一个过滤器" class="headerlink" title="使用 Vue 手写一个过滤器"></a><a href="https://github.com/haizlin/fe-interview/issues/319">使用 Vue 手写一个过滤器</a></h3><h3 id="你有使用过-render-函数吗有什么好处"><a href="#你有使用过-render-函数吗有什么好处" class="headerlink" title="你有使用过 render 函数吗有什么好处"></a><a href="https://github.com/haizlin/fe-interview/issues/318">你有使用过 render 函数吗有什么好处</a></h3><blockquote><p><a href="https://cn.vuejs.org/v2/api/#render">render</a> 字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 <code>createElement</code> 方法作为第一个参数用来创建 <code>VNode.</code></p></blockquote><!-- ### [写出你常用的指令有哪些](https://github.com/haizlin/fe-interview/issues/317) --><h3 id="手写一个自定义指令及写出如何调用"><a href="#手写一个自定义指令及写出如何调用" class="headerlink" title="手写一个自定义指令及写出如何调用"></a><a href="https://github.com/haizlin/fe-interview/issues/316">手写一个自定义指令及写出如何调用</a></h3><p>全局自定义指令</p><p>局部指令</p><h3 id="你有用过事件总线-EventBus-吗说说你的理解"><a href="#你有用过事件总线-EventBus-吗说说你的理解" class="headerlink" title="你有用过事件总线 (EventBus) 吗说说你的理解"></a><a href="https://github.com/haizlin/fe-interview/issues/314">你有用过事件总线 (EventBus) 吗说说你的理解</a></h3><p>组件传值 （兄弟组件）通信</p><ol><li>通过 <code>Bus.$emit(&#39;on-message&#39;,this.abc)</code> 的方式进行发布消息，他有两个参数，一个是消息声明，第二个是传递的值，key 和 value 的关系</li><li>另一个组件接收通过 <code>Bus.$on(&#39;on-message&#39;, msg =&gt; &#123; &#125;)</code>的方式，第一个参数是传递过来的消息声明，第二个参数可以是个函数，msg 就是做为传递过来的参数</li><li>这里有个坑，在发布者进行发布消息的时候，要在 destroyed 生命周期中，进行销毁，并且在接收的时候 $on 要在 created 生命周期中进行获取，mounted 是获取不到的，这样写，在旧组件销毁的时候新的组件拿到旧组件传来的值，然后在挂载的时候更新页面里的数据。否则传过来的值是不更新的</li><li>我们可以在 bus.js 中使用 data，methods 等选项，都是公共信息，bus.js 中的 data 数据可以说类似于 vuex 中 state 中的数据。如果实际项目中需要存值。</li><li>复杂项目建议还是使用 vuex.</li></ol><h3 id="说说-Vue-的优缺点分别是什么"><a href="#说说-Vue-的优缺点分别是什么" class="headerlink" title="说说 Vue 的优缺点分别是什么"></a><a href="https://github.com/haizlin/fe-interview/issues/313">说说 Vue 的优缺点分别是什么</a></h3><h3 id="DOM-渲染在哪个周期中就已经完成了"><a href="#DOM-渲染在哪个周期中就已经完成了" class="headerlink" title="DOM 渲染在哪个周期中就已经完成了"></a><a href="https://github.com/haizlin/fe-interview/issues/312">DOM 渲染在哪个周期中就已经完成了</a></h3><h3 id="第一次加载页面时会触发哪几个钩子"><a href="#第一次加载页面时会触发哪几个钩子" class="headerlink" title="第一次加载页面时会触发哪几个钩子"></a><a href="https://github.com/haizlin/fe-interview/issues/311">第一次加载页面时会触发哪几个钩子</a></h3><!-- ### [Vue 和 angular 有什么区别呢](https://github.com/haizlin/fe-interview/issues/308) --><h3 id="如何引入-scss-引入后如何使用"><a href="#如何引入-scss-引入后如何使用" class="headerlink" title="如何引入 scss 引入后如何使用"></a><a href="https://github.com/haizlin/fe-interview/issues/307">如何引入 scss 引入后如何使用</a></h3><h3 id="使用-Vue-开发过程你是怎么做接口管理的"><a href="#使用-Vue-开发过程你是怎么做接口管理的" class="headerlink" title="使用 Vue 开发过程你是怎么做接口管理的"></a><a href="https://github.com/haizlin/fe-interview/issues/306">使用 Vue 开发过程你是怎么做接口管理的</a></h3><!-- ### [为何官方推荐使用 axios 而不用 Vue-resource](https://github.com/haizlin/fe-interview/issues/305) --><!-- ### [你了解 axios 的原理吗有看过它的源码吗](https://github.com/haizlin/fe-interview/issues/304) --><h3 id="如果将-axios-异步请求同步化处理"><a href="#如果将-axios-异步请求同步化处理" class="headerlink" title="如果将 axios 异步请求同步化处理"></a><a href="https://github.com/haizlin/fe-interview/issues/328">如果将 axios 异步请求同步化处理</a></h3><h3 id="你有封装过-axios-吗主要是封装哪方面的"><a href="#你有封装过-axios-吗主要是封装哪方面的" class="headerlink" title="你有封装过 axios 吗主要是封装哪方面的"></a><a href="https://github.com/haizlin/fe-interview/issues/303">你有封装过 axios 吗主要是封装哪方面的</a></h3><h3 id="如何中断-axios-的请求"><a href="#如何中断-axios-的请求" class="headerlink" title="如何中断 axios 的请求"></a><a href="https://github.com/haizlin/fe-interview/issues/302">如何中断 axios 的请求</a></h3><p>Axios 提供了一个 CancelToken 的函数，这是一个构造函数，该函数的作用就是用来取消接口请求的。</p><h3 id="axios-是什么怎样使用它怎么解决跨域的问题"><a href="#axios-是什么怎样使用它怎么解决跨域的问题" class="headerlink" title="axios 是什么怎样使用它怎么解决跨域的问题"></a><a href="https://github.com/haizlin/fe-interview/issues/301">axios 是什么怎样使用它怎么解决跨域的问题</a></h3><h3 id="说说你对-Vue-的-template-编译的理解"><a href="#说说你对-Vue-的-template-编译的理解" class="headerlink" title="说说你对 Vue 的 template 编译的理解"></a><a href="https://github.com/haizlin/fe-interview/issues/292">说说你对 Vue 的 template 编译的理解</a></h3><h3 id="v-on-可以绑定多个方法吗"><a href="#v-on-可以绑定多个方法吗" class="headerlink" title="v-on 可以绑定多个方法吗"></a><a href="https://github.com/haizlin/fe-interview/issues/291">v-on 可以绑定多个方法吗</a></h3><blockquote><p><a href="https://cn.vuejs.org/v2/api/#v-on">v-on</a></p></blockquote><h3 id="你认为-Vue-的核心是什么"><a href="#你认为-Vue-的核心是什么" class="headerlink" title="你认为 Vue 的核心是什么"></a><a href="https://github.com/haizlin/fe-interview/issues/289">你认为 Vue 的核心是什么</a></h3><details><summary><b>详解</b></summary><p>Vue.js 的两大核心： 数据驱动 和 组件系统</p><ul><li>数据驱动，也就是数据的双向绑定</li></ul><p>Vue 响应式核心就是，getter 的时候会收集依赖，setter 的时候会触发依赖更新</p><p>Vue 将遍历 data 中对象的所有 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter.</p><p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。</p><p>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把 “接触” 过的数据 property 记录为依赖。</p><p>getter 的时候我们会收集依赖，依赖收集就是订阅数据变化 watcher 的收集，依赖收集的目的是当响应式数据发生变化时，能够通知相应的订阅者去处理相关的逻辑。</p><p>setter 的时候会触发依赖更新，之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p><ul><li>组件系统</li></ul><p>组件的核心选项</p><p>1 模板（template）：模板声明了数据和最终展现给用户的 DOM 之间的映射关系。</p><p>2 初始数据（data）：一个组件的初始数据状态。对于可复用的组件来说，这通常是私有的状态。</p><p>3 接受的外部参数 (props)：组件之间通过参数来进行数据的传递和共享。</p><p>4 方法（methods）：对数据的改动操作一般都在组件的方法内进行。</p><p>5 生命周期钩子函数（lifecycle hooks）：一个组件会触发多个生命周期钩子函数，最新 2.0 版本对于生命周期函数名称改动很大。</p><p>6 私有资源（assets）：Vue.js 当中将用户自定义的指令。过滤器。组件等统称为资源。一个组件可以声明自己的私有资源。私有资源只有该组件和它的子组件可以调用</p></details><hr><h3 id="说说你对-Vue-的-mixin-的理解，有什么应用场景"><a href="#说说你对-Vue-的-mixin-的理解，有什么应用场景" class="headerlink" title="说说你对 Vue 的 mixin 的理解，有什么应用场景"></a><a href="https://github.com/haizlin/fe-interview/issues/287">说说你对 Vue 的 mixin 的理解，有什么应用场景</a></h3><details><summary><b>解析</b></summary><p>mixin 用于全局混入，会影响到每个组件实例。</p><p>mixins 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并</p><blockquote><p><a href="https://v3.cn.vuejs.org//guide/mixins.html">混入</a></p></blockquote></details><!-- ### [动态给 Vue 的 data 添加一个新的属性时会发生什么怎样解决](https://github.com/haizlin/fe-interview/issues/284) --><h3 id="组件和插件有什么区别"><a href="#组件和插件有什么区别" class="headerlink" title="组件和插件有什么区别"></a><a href="https://github.com/haizlin/fe-interview/issues/283">组件和插件有什么区别</a></h3><!-- ### [说说你使用 Vue 过程中遇到的问题](https://github.com/haizlin/fe-interview/issues/274) --><!-- ### [说说你对选项 el,template,render 的理解](https://github.com/haizlin/fe-interview/issues/273) --><h3 id="Vue-实例挂载的过程是什么"><a href="#Vue-实例挂载的过程是什么" class="headerlink" title="Vue 实例挂载的过程是什么"></a><a href="https://github.com/haizlin/fe-interview/issues/272">Vue 实例挂载的过程是什么</a></h3><h3 id="Vue-在组件中引入插件的方法有哪些"><a href="#Vue-在组件中引入插件的方法有哪些" class="headerlink" title="Vue 在组件中引入插件的方法有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/271">Vue 在组件中引入插件的方法有哪些</a></h3><h3 id="Vue-监听到数组或对象变化的场景"><a href="#Vue-监听到数组或对象变化的场景" class="headerlink" title="Vue 监听到数组或对象变化的场景"></a><a href="https://github.com/haizlin/fe-interview/issues/269">Vue 监听到数组或对象变化的场景</a></h3><blockquote><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96">如何追踪变化</a></p></blockquote><h3 id="怎么在-watch-监听开始之后立即被调用"><a href="#怎么在-watch-监听开始之后立即被调用" class="headerlink" title="怎么在 watch 监听开始之后立即被调用"></a><a href="https://github.com/haizlin/fe-interview/issues/266">怎么在 watch 监听开始之后立即被调用</a></h3><h3 id="Vue-如何监听键盘事件"><a href="#Vue-如何监听键盘事件" class="headerlink" title="Vue 如何监听键盘事件"></a><a href="https://github.com/haizlin/fe-interview/issues/263">Vue 如何监听键盘事件</a></h3><!-- ### [怎么在 Vue 中使用插件](https://github.com/haizlin/fe-interview/issues/261) --><h3 id="怎么使-CSS-样式只在当前组件中生效"><a href="#怎么使-CSS-样式只在当前组件中生效" class="headerlink" title="怎么使 CSS 样式只在当前组件中生效"></a><a href="https://github.com/haizlin/fe-interview/issues/258">怎么使 CSS 样式只在当前组件中生效</a></h3><details><summary><b>详解</b></summary><p>组件分布在多个文件上 （例如 <a href="https://github.com/gajus/react-css-modules">CSS Modules</a>)</p><p>单文件组件让你可以可选 scoped attribute 会自动添加一个唯一的 attribute （比如 data-v-21e5b78) 为组件内 CSS 指定作用域</p></details><h3 id="自定义指令的生命周期-（钩子函数）-有哪些"><a href="#自定义指令的生命周期-（钩子函数）-有哪些" class="headerlink" title="自定义指令的生命周期 （钩子函数） 有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/234">自定义指令的生命周期 （钩子函数） 有哪些</a></h3><details><summary><b>详解</b></summary><blockquote><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0">钩子函数</a></p></blockquote></details><h2 id="💼Vue-CLI"><a href="#💼Vue-CLI" class="headerlink" title="💼Vue CLI"></a><a href="https://cli.vuejs.org/zh/">💼Vue CLI</a></h2><h3 id="Vue-CLI-提供了的哪几种脚手架模板"><a href="#Vue-CLI-提供了的哪几种脚手架模板" class="headerlink" title="Vue CLI 提供了的哪几种脚手架模板"></a><a href="https://github.com/haizlin/fe-interview/issues/543">Vue CLI 提供了的哪几种脚手架模板</a></h3><h3 id="Vue-CLI-工程中常用的-npm-命令有哪些"><a href="#Vue-CLI-工程中常用的-npm-命令有哪些" class="headerlink" title="Vue CLI 工程中常用的 npm 命令有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/542">Vue CLI 工程中常用的 npm 命令有哪些</a></h3><h3 id="在使用-Vue-CLI-开发-Vue-项目时，自动刷新页面的原理你了解吗"><a href="#在使用-Vue-CLI-开发-Vue-项目时，自动刷新页面的原理你了解吗" class="headerlink" title="在使用 Vue CLI 开发 Vue 项目时，自动刷新页面的原理你了解吗"></a><a href="https://github.com/haizlin/fe-interview/issues/541">在使用 Vue CLI 开发 Vue 项目时，自动刷新页面的原理你了解吗</a></h3><h3 id="Vue-CLI3-插件有写过吗怎么写一个代码生成插件"><a href="#Vue-CLI3-插件有写过吗怎么写一个代码生成插件" class="headerlink" title="Vue CLI3 插件有写过吗怎么写一个代码生成插件"></a><a href="https://github.com/haizlin/fe-interview/issues/540">Vue CLI3 插件有写过吗怎么写一个代码生成插件</a></h3><h3 id="Vue-CLI-生成的项目可以使用-es6-es7-的语法吗为什么"><a href="#Vue-CLI-生成的项目可以使用-es6-es7-的语法吗为什么" class="headerlink" title="Vue CLI 生成的项目可以使用 es6. es7 的语法吗为什么"></a><a href="https://github.com/haizlin/fe-interview/issues/488">Vue CLI 生成的项目可以使用 es6. es7 的语法吗为什么</a></h3><h3 id="Vue-CLI-怎么解决跨域的问题"><a href="#Vue-CLI-怎么解决跨域的问题" class="headerlink" title="Vue CLI 怎么解决跨域的问题"></a><a href="https://github.com/haizlin/fe-interview/issues/487">Vue CLI 怎么解决跨域的问题</a></h3><h3 id="Vue-CLI-中你经常的加载器有哪些"><a href="#Vue-CLI-中你经常的加载器有哪些" class="headerlink" title="Vue CLI 中你经常的加载器有哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/486">Vue CLI 中你经常的加载器有哪些</a></h3><h3 id="你知道什么是脚手架吗"><a href="#你知道什么是脚手架吗" class="headerlink" title="你知道什么是脚手架吗"></a><a href="https://github.com/haizlin/fe-interview/issues/485">你知道什么是脚手架吗</a></h3><h3 id="说下你了解的-Vue-CLI-原理你可以自己实现个类-Vue-CLI-吗"><a href="#说下你了解的-Vue-CLI-原理你可以自己实现个类-Vue-CLI-吗" class="headerlink" title="说下你了解的 Vue CLI 原理你可以自己实现个类 Vue CLI 吗"></a><a href="https://github.com/haizlin/fe-interview/issues/484">说下你了解的 Vue CLI 原理你可以自己实现个类 Vue CLI 吗</a></h3><h3 id="怎么使用-Vue-CLI3-创建一个项目"><a href="#怎么使用-Vue-CLI3-创建一个项目" class="headerlink" title="怎么使用 Vue CLI3 创建一个项目"></a><a href="https://github.com/haizlin/fe-interview/issues/483">怎么使用 Vue CLI3 创建一个项目</a></h3><h3 id="Vue-CLI3-你有使用过吗它和-2-x-版本有什么区别"><a href="#Vue-CLI3-你有使用过吗它和-2-x-版本有什么区别" class="headerlink" title="Vue CLI3 你有使用过吗它和 2.x 版本有什么区别"></a><a href="https://github.com/haizlin/fe-interview/issues/482">Vue CLI3 你有使用过吗它和 2.x 版本有什么区别</a></h3><h3 id="Vue-CLI-默认是单页面的，那要弄成多页面该怎么办呢"><a href="#Vue-CLI-默认是单页面的，那要弄成多页面该怎么办呢" class="headerlink" title="Vue CLI 默认是单页面的，那要弄成多页面该怎么办呢"></a><a href="https://github.com/haizlin/fe-interview/issues/360">Vue CLI 默认是单页面的，那要弄成多页面该怎么办呢</a></h3><h3 id="不用-Vue-CLI-你自己有搭建过-Vue-的开发环境吗流程是什么"><a href="#不用-Vue-CLI-你自己有搭建过-Vue-的开发环境吗流程是什么" class="headerlink" title="不用 Vue CLI, 你自己有搭建过 Vue 的开发环境吗流程是什么"></a><a href="https://github.com/haizlin/fe-interview/issues/351">不用 Vue CLI, 你自己有搭建过 Vue 的开发环境吗流程是什么</a></h3><h2 id="⛑Vue-Router"><a href="#⛑Vue-Router" class="headerlink" title="⛑Vue Router"></a><a href="https://router.vuejs.org/">⛑Vue Router</a></h2><h3 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="? $route 和 $router 的区别"></a>? $route 和 $router 的区别</h3><p>$route 是 “路由信息对象”, 包括 path,params,hash,query,fullPath,matched,name 等路由信息参数。而 $router 是 “路由实例” 对象包括了路由的跳转方法，钩子函数等。</p><blockquote><p><a href="https://router.vuejs.org/api/#route-object-properties">Route Object Properties</a></p><p><a href="https://router.vuejs.org/api/#the-route-object">The Route Object</a></p></blockquote><h3 id="Vue-Router-重定向页面"><a href="#Vue-Router-重定向页面" class="headerlink" title="Vue Router 重定向页面"></a><a href="https://github.com/haizlin/fe-interview/issues/419">Vue Router 重定向页面</a></h3><h3 id="Vue-Router-配置-404-页面"><a href="#Vue-Router-配置-404-页面" class="headerlink" title="Vue Router 配置 404 页面"></a><a href="https://github.com/haizlin/fe-interview/issues/418">Vue Router 配置 404 页面</a></h3><h3 id="切换路由时，需要保存草稿的功能，怎么实现呢"><a href="#切换路由时，需要保存草稿的功能，怎么实现呢" class="headerlink" title="切换路由时，需要保存草稿的功能，怎么实现呢"></a><a href="https://github.com/haizlin/fe-interview/issues/417">切换路由时，需要保存草稿的功能，怎么实现呢</a></h3><hr><h3 id="Vue-Router-如何响应路由参数的变化"><a href="#Vue-Router-如何响应路由参数的变化" class="headerlink" title="Vue Router 如何响应路由参数的变化"></a><a href="https://github.com/haizlin/fe-interview/issues/383">Vue Router 如何响应路由参数的变化</a></h3><h3 id="你有看过-Vue-Router-的源码吗说说看"><a href="#你有看过-Vue-Router-的源码吗说说看" class="headerlink" title="你有看过 Vue Router 的源码吗说说看"></a><a href="https://github.com/haizlin/fe-interview/issues/382">你有看过 Vue Router 的源码吗说说看</a></h3><h3 id="切换到新路由时，页面要滚动到顶部或保持原先的滚动位置怎么做呢"><a href="#切换到新路由时，页面要滚动到顶部或保持原先的滚动位置怎么做呢" class="headerlink" title="切换到新路由时，页面要滚动到顶部或保持原先的滚动位置怎么做呢"></a><a href="https://github.com/haizlin/fe-interview/issues/381">切换到新路由时，页面要滚动到顶部或保持原先的滚动位置怎么做呢</a></h3><h3 id="在什么场景下会用到嵌套路由"><a href="#在什么场景下会用到嵌套路由" class="headerlink" title="在什么场景下会用到嵌套路由"></a><a href="https://github.com/haizlin/fe-interview/issues/380">在什么场景下会用到嵌套路由</a></h3><h3 id="如何获取路由传过来的参数"><a href="#如何获取路由传过来的参数" class="headerlink" title="如何获取路由传过来的参数"></a><a href="https://github.com/haizlin/fe-interview/issues/379">如何获取路由传过来的参数</a></h3><blockquote><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">路由组件传参</a></p></blockquote><h3 id="说说-active-class-是哪个组件的属性"><a href="#说说-active-class-是哪个组件的属性" class="headerlink" title="说说 active-class 是哪个组件的属性"></a><a href="https://github.com/haizlin/fe-interview/issues/378">说说 active-class 是哪个组件的属性</a></h3><p>active-class 是 vue-router 模块的 router-link 组件中的属性，用来设置链接激活时使用的 CSS 类名。</p><h3 id="在-Vue-组件中怎么获取到当前的路由信息"><a href="#在-Vue-组件中怎么获取到当前的路由信息" class="headerlink" title="在 Vue 组件中怎么获取到当前的路由信息"></a><a href="https://github.com/haizlin/fe-interview/issues/377">在 Vue 组件中怎么获取到当前的路由信息</a></h3><h3 id="怎样动态加载路由"><a href="#怎样动态加载路由" class="headerlink" title="怎样动态加载路由"></a><a href="https://github.com/haizlin/fe-interview/issues/375">怎样动态加载路由</a></h3><h3 id="怎么实现路由懒加载呢"><a href="#怎么实现路由懒加载呢" class="headerlink" title="怎么实现路由懒加载呢"></a><a href="https://github.com/haizlin/fe-interview/issues/374">怎么实现路由懒加载呢</a></h3><h3 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a><a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html">滚动行为</a></h3><details><summary><b>解析</b></summary></details><!-- ### [如果让你从零开始写一个 Vue 路由，说说你的思路](https://github.com/haizlin/fe-interview/issues/373) --><!-- ### [说说 Vue Router 完整的导航解析流程是什么](https://github.com/haizlin/fe-interview/issues/372) --><!-- ### [如果 Vue Router 使用 history 模式，部署时要注意什么](https://github.com/haizlin/fe-interview/issues/370) --><!-- ### [route 和 router 有什么区别](https://github.com/haizlin/fe-interview/issues/369) --><h3 id="Vue-Router-钩子函数有哪些都有哪些参数"><a href="#Vue-Router-钩子函数有哪些都有哪些参数" class="headerlink" title="Vue Router 钩子函数有哪些都有哪些参数"></a><a href="https://github.com/haizlin/fe-interview/issues/368">Vue Router 钩子函数有哪些都有哪些参数</a></h3><details><summary><b>解析</b></summary><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫</a></p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+).</li><li>在路由配置里调用 <code>beforeEnter</code>.</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>.</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+).</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol></details><!-- ### [Vue Router 是用来做什么的它有哪些组件](https://github.co m/haizlin/fe-interview/issues/367) --><h2 id="👜Vuex"><a href="#👜Vuex" class="headerlink" title="👜Vuex"></a><a href="https://next.vuex.vuejs.org/zh/index.html">👜Vuex</a></h2><h3 id="你有写过-Vuex-中-store-的插件吗"><a href="#你有写过-Vuex-中-store-的插件吗" class="headerlink" title="你有写过 Vuex 中 store 的插件吗"></a><a href="https://github.com/haizlin/fe-interview/issues/539">你有写过 Vuex 中 store 的插件吗</a></h3><h3 id="你有使用过-Vuex-的-module-吗主要是在什么场景下使用"><a href="#你有使用过-Vuex-的-module-吗主要是在什么场景下使用" class="headerlink" title="你有使用过 Vuex 的 module 吗主要是在什么场景下使用"></a><a href="https://github.com/haizlin/fe-interview/issues/538">你有使用过 Vuex 的 module 吗主要是在什么场景下使用</a></h3><details><summary><b>解析</b></summary><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）. 每个模块拥有自己的 state. mutation. action. getter. 甚至是嵌套子模块——从上至下进行同样方式的分割</p><blockquote><p><a href="https://vuex.vuejs.org/zh/guide/modules.html">Module</a></p></blockquote></details><hr><!-- ### [Vuex 中 actions 和 mutations 有什么区别](https://github.com/haizlin/fe-interview/issues/537) --><h3 id="Vuex-使用-actions-时不支持多参数传递怎么办"><a href="#Vuex-使用-actions-时不支持多参数传递怎么办" class="headerlink" title="Vuex 使用 actions 时不支持多参数传递怎么办"></a><a href="https://github.com/haizlin/fe-interview/issues/413">Vuex 使用 actions 时不支持多参数传递怎么办</a></h3><h3 id="你觉得-Vuex-有什么缺点"><a href="#你觉得-Vuex-有什么缺点" class="headerlink" title="你觉得 Vuex 有什么缺点"></a><a href="https://github.com/haizlin/fe-interview/issues/412">你觉得 Vuex 有什么缺点</a></h3><h3 id="你觉得要是不用-Vuex-的话会带来哪些问题"><a href="#你觉得要是不用-Vuex-的话会带来哪些问题" class="headerlink" title="你觉得要是不用 Vuex 的话会带来哪些问题"></a><a href="https://github.com/haizlin/fe-interview/issues/411">你觉得要是不用 Vuex 的话会带来哪些问题</a></h3><h3 id="Vuex-怎么知道-state-是通过-mutation-修改还是外部直接修改的"><a href="#Vuex-怎么知道-state-是通过-mutation-修改还是外部直接修改的" class="headerlink" title="Vuex 怎么知道 state 是通过 mutation 修改还是外部直接修改的"></a><a href="https://github.com/haizlin/fe-interview/issues/393">Vuex 怎么知道 state 是通过 mutation 修改还是外部直接修改的</a></h3><h3 id="请求数据是写在组件的-methods-中还是在-Vuex-的-action-中"><a href="#请求数据是写在组件的-methods-中还是在-Vuex-的-action-中" class="headerlink" title="请求数据是写在组件的 methods 中还是在 Vuex 的 action 中"></a><a href="https://github.com/haizlin/fe-interview/issues/392">请求数据是写在组件的 methods 中还是在 Vuex 的 action 中</a></h3><h3 id="怎么监听-Vuex-数据的变化"><a href="#怎么监听-Vuex-数据的变化" class="headerlink" title="怎么监听 Vuex 数据的变化"></a><a href="https://github.com/haizlin/fe-interview/issues/391">怎么监听 Vuex 数据的变化</a></h3><h3 id="⭕️Vuex-的-action-和-mutation-的特性是什么有什么区别"><a href="#⭕️Vuex-的-action-和-mutation-的特性是什么有什么区别" class="headerlink" title="⭕️Vuex 的 action 和 mutation 的特性是什么有什么区别"></a>⭕️<a href="https://github.com/haizlin/fe-interview/issues/390">Vuex 的 action 和 mutation 的特性是什么有什么区别</a></h3><details><summary><b>解析</b></summary><p>更改 Vuex 的 store 中的状态的唯一方法是提交 <a href="https://vuex.vuejs.org/zh/guide/mutations.html">mutations</a>.Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler). 这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数 你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 载荷 (payload):</p><p><a href="https://vuex.vuejs.org/zh/guide/actions.html">actions</a> 类似于 mutation, 不同在于：Action 提交的是 mutation, 而不是直接变更状态。Action 可以包含任意异步操作。Action 通过 <code>store.dispatch</code> 方法触发：</p><table><thead><tr><th>mutation</th><th>action</th></tr></thead><tbody><tr><td>mutation 可以直接变更状态</td><td>action 提交的是 mutation，而不是直接变更状态。</td></tr><tr><td>mutation 只能是同步操作</td><td>action 可以包含任意异步操作。</td></tr><tr><td>mutation 是用 <code>this.$store.commit(&#39;SET_NUMBER&#39;,10)</code> 来提交</td><td>action 是用 <code>this.store.dispatch(&#39;ACTION_NAME&#39;,data)</code> 来提交。</td></tr><tr><td>mutation 第一个参数是 state</td><td>而 action 第一个参数是 context</td></tr></tbody></table></details><hr><h3 id="页面刷新后-Vuex-的-state-数据丢失怎么解决"><a href="#页面刷新后-Vuex-的-state-数据丢失怎么解决" class="headerlink" title="页面刷新后 Vuex 的 state 数据丢失怎么解决"></a><a href="https://github.com/haizlin/fe-interview/issues/389">页面刷新后 Vuex 的 state 数据丢失怎么解决</a></h3><h3 id="🔥Vuex-的-state-getter-mutation-action-module-特性分别是什么"><a href="#🔥Vuex-的-state-getter-mutation-action-module-特性分别是什么" class="headerlink" title="🔥Vuex 的 state. getter. mutation. action. module 特性分别是什么"></a>🔥<a href="https://github.com/haizlin/fe-interview/issues/388">Vuex 的 state. getter. mutation. action. module 特性分别是什么</a></h3><blockquote><p>Vuex 中有几个核心属性，它们的作用分别是什么</p></blockquote><details><summary><b>解析</b></summary><p>state, 状态初始化，并实施观察<br>getter, 获取数据用于 view 或 data 中使用<br>mutation: 内部处理 state 变化<br>action: 处理外部交互<br>module: 模块化以上四个</p><p><a href="https://vuex.vuejs.org/zh/guide/state.html">state</a> 唯一数据源，Vue 实例中的 data 遵循相同的规则<br><a href="https://vuex.vuejs.org/zh/guide/getters.html">getters</a> 可以认为是 store 的计算属性，就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值。<br><a href="https://vuex.vuejs.org/zh/guide/mutations.html">mutation</a> 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation, 非常类似于事件，通过 store.commit 方法触发<br><a href="https://vuex.vuejs.org/zh/guide/actions.html">action</a> Action 类似于 mutation，不同在于 Action 提交的是 mutation，而不是直接变更状态，Action 可以包含任意异步操作<br><a href="https://vuex.vuejs.org/zh/guide/modules.html">module</a> 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）.</p></details><hr><!-- ### [Vuex 的 store 有几个属性值分别讲讲它们的作用是什么](https://github.com/haizlin/fe-interview/issues/387) --><!-- ### [你理解的 Vuex 是什么呢哪些场景会用到不用会有问题吗有哪些特性](https://github.com/haizlin/fe-interview/issues/386) --><!-- ### [使用 Vuex 的优势是什么](https://github.com/haizlin/fe-interview/issues/385) --><h3 id="Vuex-主要解决的是什么问题推荐在哪些场景用"><a href="#Vuex-主要解决的是什么问题推荐在哪些场景用" class="headerlink" title="Vuex 主要解决的是什么问题推荐在哪些场景用"></a><a href="https://github.com/haizlin/fe-interview/issues/384">Vuex 主要解决的是什么问题推荐在哪些场景用</a></h3><details><summary><b>解析</b></summary><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex. 一个简单的 <a href="https://v3.cn.vuejs.org//guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">store 模式</a> (opens new window) 就足够您所需了。</p></details><hr><h2 id="💍Element-UI"><a href="#💍Element-UI" class="headerlink" title="💍Element UI"></a><a href="https://element.eleme.io/#/en-US/component/installation">💍Element UI</a></h2><h3 id="Element-UI-是怎么做表单验证的在循环里对每个-input-验证怎么做呢"><a href="#Element-UI-是怎么做表单验证的在循环里对每个-input-验证怎么做呢" class="headerlink" title="Element UI 是怎么做表单验证的在循环里对每个 input 验证怎么做呢"></a><a href="https://github.com/haizlin/fe-interview/issues/402">Element UI 是怎么做表单验证的在循环里对每个 input 验证怎么做呢</a></h3><h3 id="你有二次封装过-Element-UI-组件吗"><a href="#你有二次封装过-Element-UI-组件吗" class="headerlink" title="你有二次封装过 Element UI 组件吗"></a><a href="https://github.com/haizlin/fe-interview/issues/401">你有二次封装过 Element UI 组件吗</a></h3><h3 id="Element-UI-怎么修改组件的默认样式"><a href="#Element-UI-怎么修改组件的默认样式" class="headerlink" title="Element UI 怎么修改组件的默认样式"></a><a href="https://github.com/haizlin/fe-interview/issues/400">Element UI 怎么修改组件的默认样式</a></h3><h3 id="Element-UI-的穿梭组件如果数据量大会变卡怎么解决不卡的问题呢"><a href="#Element-UI-的穿梭组件如果数据量大会变卡怎么解决不卡的问题呢" class="headerlink" title="Element UI 的穿梭组件如果数据量大会变卡怎么解决不卡的问题呢"></a><a href="https://github.com/haizlin/fe-interview/issues/399">Element UI 的穿梭组件如果数据量大会变卡怎么解决不卡的问题呢</a></h3><h3 id="Element-UI-表格组件如何实现动态表头"><a href="#Element-UI-表格组件如何实现动态表头" class="headerlink" title="Element UI 表格组件如何实现动态表头"></a><a href="https://github.com/haizlin/fe-interview/issues/398">Element UI 表格组件如何实现动态表头</a></h3><h3 id="Element-UI-使用表格组件时有遇到过问题吗"><a href="#Element-UI-使用表格组件时有遇到过问题吗" class="headerlink" title="Element UI 使用表格组件时有遇到过问题吗"></a><a href="https://github.com/haizlin/fe-interview/issues/397">Element UI 使用表格组件时有遇到过问题吗</a></h3><h3 id="有阅读过-Element-UI-的源码吗"><a href="#有阅读过-Element-UI-的源码吗" class="headerlink" title="有阅读过 Element UI 的源码吗"></a><a href="https://github.com/haizlin/fe-interview/issues/396">有阅读过 Element UI 的源码吗</a></h3><h3 id="项目中有使用过-Element-UI-吗有遇到过哪些问题它的使用场景主要是哪些"><a href="#项目中有使用过-Element-UI-吗有遇到过哪些问题它的使用场景主要是哪些" class="headerlink" title="项目中有使用过 Element UI 吗有遇到过哪些问题它的使用场景主要是哪些"></a><a href="https://github.com/haizlin/fe-interview/issues/395">项目中有使用过 Element UI 吗有遇到过哪些问题它的使用场景主要是哪些</a></h3><h3 id="有用过哪些-Vue-的-ui-说说它们的优缺点"><a href="#有用过哪些-Vue-的-ui-说说它们的优缺点" class="headerlink" title="有用过哪些 Vue 的 ui 说说它们的优缺点"></a><a href="https://github.com/haizlin/fe-interview/issues/394">有用过哪些 Vue 的 ui 说说它们的优缺点</a></h3><!--## [Mint UI](https://mint-ui.github.io/docs/#/en-US2)### [Mint UI 使用过程中有没有遇到什么坑怎么解决的](https://github.com/haizlin/fe-interview/issues/481)### [说出几个 Mint UI 常用的组件](https://github.com/haizlin/fe-interview/issues/480)### [Mint UI 是什么你有使用过吗](https://github.com/haizlin/fe-interview/issues/479) -->]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Clone Objects in JavaScript</title>
      <link href="how-to-clone-objects-in-javascript/"/>
      <url>how-to-clone-objects-in-javascript/</url>
      
        <content type="html"><![CDATA[<p>Because objects in JavaScript are references values, you can’t simply just copy using the <code>=</code>. But no worries, here are 4 ways for you to clone an object 👍</p><ul><li>Using Spread(<code>...</code>) operator</li><li>Using <code>Object.assign()</code></li><li>Using <code>JSON.stringify()</code> and <code>JSON.parse()</code></li><li>Using recursive function</li></ul><h2 id="Objects-are-Reference-Types"><a href="#Objects-are-Reference-Types" class="headerlink" title="Objects are Reference Types"></a>Objects are Reference Types</h2><p>Your first question might be, why can’t I use <code>=</code>. Let’s see what happens if we do that:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> one<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  obj<span class="token punctuation">,</span> <span class="token comment">// &#123;one: 1, two: 2&#125;;</span>  obj2<span class="token punctuation">,</span> <span class="token comment">// &#123;one: 1, two: 2&#125;;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So far, both object seems to output the same thing. So no problem, right. But let’s see what happens if we edit our second object:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj2<span class="token punctuation">.</span>three <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;one: 1, two: 2, three: 3&#125;; &lt;-- ✅</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;one: 1, two: 2, three: 3&#125;; &lt;-- 😱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WTH?! I changed <code>obj2</code> but why was <code>obj</code> also affected. That’s because Objects are reference types. So when you use <code>=</code>, it copied the pointer to the memory space it occupies. Reference types don’t hold values, they are a pointer to the value in memory.</p><h2 id="Shallow-Clone-vs-Deep-Clone"><a href="#Shallow-Clone-vs-Deep-Clone" class="headerlink" title="Shallow Clone vs Deep Clone"></a>Shallow Clone vs Deep Clone</h2><p>Object cloning is something that we may often come across while coding. As we know, Objects and Arrays in JavaScript are reference type, if we normally copies an object or array then it will do a shallow copy, not a deep copy. If nested objects are present inside an object then deep copy is must.</p><blockquote><p>对象克隆是我们在编码时经常会遇到的问题.众所周知,JavaScript 中的对象和数组是引用类型,我们通常复制对象或数组,对它进行浅复制,而不是深复制.如果对象内部存在嵌套对象,则必须进行深复制.</p></blockquote><p>When working with functional programming a good rule of thumb is to always create new objects instead of changing old ones. In doing so we can be sure that our meddling with the object’s structure won’t affect some seemingly unrelated part of the application, which in turn makes the entire code more predictable.</p><blockquote><p>使用函数式编程时,一个好的法则是始终创建新对象,而不是更改旧对象.这样一来,我们可以确保干预对象的结构不会影响应用程序中某些看似无关的部分,从而使整个代码更具可预测性.</p></blockquote><p>How exactly can we be sure that the changes we make to an object do not affect the code elsewhere? Removing the unwanted references altogether seems like a good idea. To get rid of a reference we need to copy all of the object’s properties to a new object.</p><blockquote><p>我们如何确切地确定对对象所做的更改不会影响其他地方的代码？完全删除不需要的引用似乎是个好主意.为了摆脱参考,我们需要将对象的所有属性复制到新对象.</p></blockquote><!-- There are many ways to do this and each of them yields a slightly different result. We are going to take a look at the most popular ones: _shallow copy_, _deep copy_, _merging_ and _assigning_. --><h2 id="Shallow-Cloning"><a href="#Shallow-Cloning" class="headerlink" title="Shallow Cloning"></a>Shallow Cloning</h2><p>To <em>shallow copy,</em> an object means to simply create a new object with the exact same set of properties. We call the copy <em>shallow</em> because the properties in the target object can still hold references to those in the source object.</p><blockquote><p>对于浅复制,对象意味着简单地创建具有完全相同的一组属性的新对象.我们称为浅复制,因为目标对象中的属性仍然可以保留对源对象中那些属性的引用.</p></blockquote><h3 id="Using-Spread-operator"><a href="#Using-Spread-operator" class="headerlink" title="Using Spread(...) operator"></a>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">Spread(<code>...</code>) operator</a></h3><p>When I used spread <code>...</code> to copy an object, I’m only creating a shallow copy. If the array is nested or multi-dimensional, it won’t work. Here’s our example we will be using:</p><blockquote><p>Using spread will clone the object. Note this will be a shallow copy.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  brand<span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span>  storage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ram<span class="token operator">:</span> <span class="token string">'8GB'</span><span class="token punctuation">,</span>    memory<span class="token operator">:</span> <span class="token string">'128GB'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Let’s clone our object using spread:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> shallowClone <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Changed our cloned object</span>shallowClone<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">'Huawei'</span><span class="token punctuation">;</span>shallowClone<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token string">'512GB'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So we changed our cloned object. Let’s see the output.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; brand: "Apple", storage: Object &#123; ram: "8GB", memory: "512GB" &#125; &#125; &lt;-- 😱</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; brand: "Huawei", storage: Object &#123; ram: "8GB", memory: "512GB" &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A shallow copy means the first level is copied, deeper levels are referenced.</p><p>If nested objects are not present, then spread(…) operator can work fine for cloning objects.</p><blockquote><p>如果不存在嵌套对象,展开语法可以很好地用于克隆对象.</p></blockquote><h3 id="Using-Object-assign"><a href="#Using-Object-assign" class="headerlink" title="Using Object.assign()"></a>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><code>Object.assign()</code></a></h3><p>Alternatively, <code>Object.assign</code> is in the official released and will also create a shallow copy of the object.</p><p>Note the empty <code>&#123;&#125;</code> as the first argument, this will ensure you don’t mutate the original object 👍</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  brand<span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span>  storage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ram<span class="token operator">:</span> <span class="token string">'8GB'</span><span class="token punctuation">,</span>    memory<span class="token operator">:</span> <span class="token string">'128GB'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> shallowClone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>shallowClone<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">'Huawei'</span><span class="token punctuation">;</span>shallowClone<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token string">'512GB'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; brand: "Apple", storage: Object &#123; ram: "8GB", memory: "512GB" &#125; &#125; &lt;-- 😱</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowClone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; brand: "Huawei", storage: Object &#123; ram: "8GB", memory: "512GB" &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If nested objects are not present, then <code>Object.assign()</code> can work fine for cloning objects.</p><blockquote><p>如果不存在嵌套对象,<code>Object.assign()</code>可以很好地用于克隆对象.</p></blockquote><p>Let’s see how we can achieve deep cloning for multi level objects also in JavaScript.</p><h2 id="Deep-Cloning-of-multi-level-Objects"><a href="#Deep-Cloning-of-multi-level-Objects" class="headerlink" title="Deep Cloning of multi level Objects"></a>Deep Cloning of multi level Objects</h2><p>When we make a <em>deep copy</em> we create a completely new object which holds no references to the original.</p><blockquote><p>进行深复制时,我们将创建一个全新的对象,该对象不包含对原始对象的引用.</p></blockquote><h3 id="Using-JSON-stringify-and-JSON-parse"><a href="#Using-JSON-stringify-and-JSON-parse" class="headerlink" title="Using JSON.stringify() and JSON.parse()"></a>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"><code>JSON.stringify()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"><code>JSON.parse()</code></a></h3><p>This final way will give you a deep copy. Now I will mention, this is a quick and dirty way of deep cloning an object. For a more robust solution, I would recommend using something like <a href="https://lodash.com/docs/#cloneDeep">lodash</a></p><p>Now, let’s take a different approach. Our goal is to create a new object without any reference to the previous one, right? Why don’t we use the <code>JSON</code> object then? First, we <code>stringify</code> the object, then <code>parse</code> the resulting string. What we get is a new object totally unaware of its origin.</p><blockquote><p>现在,让我们采用另一种方法.我们的目标是创建一个新对象,而不引用任何上一个对象,对吗？那为什么我们不使用 JSON 对象呢？首先,我们对对象进行字符串化,然后解析结果字符串.我们得到的是一个完全不知道其起源的新物体.</p></blockquote><p>Note: In the solution the methods of the object aren’t retained. <code>JSON</code> format does not support functions, therefore they are just removed altogether.</p><blockquote><p>注意:在解决方案中,没有保留了对象的方法. JSON 格式不支持功能,因此将它们完全删除.</p></blockquote><p>First convert your original object into string and then parse it back to JSON object from it and voila! Your new deeply cloned object is ready.</p><blockquote><p>首先将原始对象转换为字符串,然后将其解析回 JSON 对象,瞧！您的新的深度克隆对象已准备就绪.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  brand<span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span>  storage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ram<span class="token operator">:</span> <span class="token string">'8GB'</span><span class="token punctuation">,</span>    memory<span class="token operator">:</span> <span class="token string">'128GB'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deepClone<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">'Huawei'</span><span class="token punctuation">;</span>deepClone<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token string">'512GB'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; brand: "Apple", storage: Object &#123; ram: "8GB", memory: "128GB" &#125; &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; brand: "Huawei", storage: Object &#123; ram: "8GB", memory: "512GB" &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>This technique (<code>JSON.parse(JSON.stringify(obj))</code>) doesn’t work if your object property contains function as value. Because when you JSON.stringify the object, the property containing function as value gets removed from the object. So go for recursive function approach in such case.</p></blockquote><blockquote><p>⚠️ 如果你的对象包含 <code>function</code>, <code>undefined</code> or <code>NaN</code> 值的话,<code>JSON.parse(JSON.stringify(obj))</code> 就不会有效.因为当你 JSON.stringify 对象的时候,包含<code>function</code>, <code>undefined</code> or <code>NaN</code>值的属性会从对象中移除. 因此,在这种情况下,请使用递归函数方法.</p></blockquote><h3 id="Using-recursive-function"><a href="#Using-recursive-function" class="headerlink" title="Using recursive function"></a>Using recursive function</h3><p>Our first implementation works recursively. We write a <code>deep</code> function, which checks the type of the argument sent to it and either calls an appropriate function for the argument being an array or an object or simply returns the value of the argument (if it is neither an array nor an object).</p><blockquote><p>我们的第一个实现是递归工作的.我们编写了一个深函数,该函数检查发送给它的参数的类型,并为作为数组或对象的参数调用适当的函数,或者简单地返回参数的值(如果它既不是数组又不是对象) .</p></blockquote><p>To deep clone an object, you need to iterate through each property and check if the current property contains an object. If yes, then do a recursive call to the same function by passing the current property value (i.e. the nested object). Look at the below example.</p><blockquote><p>要深度克隆对象,您需要遍历每个属性,并检查当前属性是否包含对象.如果是,则通过传递当前属性值(即嵌套对象)对同一函数进行递归调用.看下面的例子.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> phone <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  brand<span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span>  storage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ram<span class="token operator">:</span> <span class="token string">'8GB'</span><span class="token punctuation">,</span>    memory<span class="token operator">:</span> <span class="token string">'128GB'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">makeDeepClone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">phone</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> newObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> phone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      newObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">makeDeepClone</span><span class="token punctuation">(</span>phone<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      newObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> phone<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token function">makeDeepClone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>deepClone<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">'Huawei'</span><span class="token punctuation">;</span>deepClone<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token string">'512GB'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;brand: 'Apple', storage:&#123;ram: '8GB', memory: '128GB'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;brand: 'Huawei', storage:&#123;ram: '8GB', memory: '512GB'&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>makeDeepClone</code> function takes all of the keys of an object and iterates over them, recursively calling the <code>makeDeepClone</code> function for each value.</p><blockquote><p><code>makeDeepClone</code> 函数获取对象的所有键并对其进行迭代,为每个值递归调用 <code>makeDeepClone</code> 函数.</p></blockquote><h2 id="Deep-Clone-using-External-Libraries"><a href="#Deep-Clone-using-External-Libraries" class="headerlink" title="Deep Clone using External Libraries"></a>Deep Clone using External Libraries</h2><ul><li><em><a href="https://twitter.com/lesjeuxdebebel/status/1153259251705503744">@lesjeuxdebebel</a> :</em> Personally I use jQuerywith <code>$.extend();</code> function</li><li><em><a href="https://twitter.com/edlinkiii/status/1153035836356747267">@edlinkiii</a> :</em> underscore.js ~~ <code>_.clone()</code></li><li><em><a href="https://twitter.com/Percy_Burton/status/1152671704155660289">@Percy_Burton</a> :</em> The only way I’ve known to do this is with the Lodash library, cloneDeep method.</li></ul><blockquote><p><a href="https://lodash.com/docs/#cloneDeepWith">cloneDeepWith</a> This method is like <code>_.cloneWith</code> except that it recursively clones value.</p></blockquote><h3 id="Lodash-DeepClone-vs-JSON"><a href="#Lodash-DeepClone-vs-JSON" class="headerlink" title="Lodash DeepClone vs JSON"></a>Lodash DeepClone vs JSON</h3><p>Here’s a comment from the community. Yes, it was for my previous post, <a href="https://www.samanthaming.com/tidbits/50-how-to-deep-clone-an-array">How to Deep Clone an Array</a> . But the idea still applies to objects.</p><p><em><a href="https://dev.to/alfredosalzillo/comment/96ne">Alfredo Salzillo</a> :</em> I’d like you to note that there are some differences between deepClone and JSON.stringify/parse.</p><ul><li><strong>JSON.stringify/parse</strong> only work with Number and String and Object literal without function or Symbol properties.</li><li><a href="https://lodash.com/docs/#cloneDeep">deepClone</a> work with all types, function and Symbol are copied by reference.</li></ul><p>Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> lodashClonedeep <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash.clonedeep'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arrOfFunction <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// deepClone copy by refence function and Symbol</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">lodashClonedeep</span><span class="token punctuation">(</span>arrOfFunction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// JSON replace function with null and function in object with undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arrOfFunction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// function and symbol are copied by reference in deepClone</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">lodashClonedeep</span><span class="token punctuation">(</span>arrOfFunction<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">lodashClonedeep</span><span class="token punctuation">(</span>arrOfFunction<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">lodashClonedeep</span><span class="token punctuation">(</span>arrOfFunction<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">lodashClonedeep</span><span class="token punctuation">(</span>arrOfFunction<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><a href="https://twitter.com/OlegVaraksin/status/1152850845303824384">@OlegVaraksin</a> :</em> The JSON method has troubles with circular dependencies. Furthermore, the order of properties in the cloned object may be different.</p><h3 id="More-Ways-using-JavaScript"><a href="#More-Ways-using-JavaScript" class="headerlink" title="More Ways using JavaScript"></a>More Ways using JavaScript</h3><ul><li><em><a href="https://twitter.com/hariharan_d3v/status/1152815791009460224">@hariharan_d3v</a> :</em> <code>Object.fromEntries(Object.entries(food))</code> [shallow] clones the object.</li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">MDN Web Docs: Object.assign</a></li><li><a href="https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript">Stack Overflow: What is the most efficient way to deep clone an object in JavaScript?</a></li><li><a href="https://2ality.com/2016/10/rest-spread-properties.html">2ality: Rest/Spread Properties</a></li><li><a href="https://stackoverflow.com/questions/32925460/object-spread-vs-object-assign">Stack Overflow: Object spread vs. Object.assign</a></li></ul><hr><blockquote><p><a href="https://mp.weixin.qq.com/s/vXbFsG59L1Ba0DMcZeU2Bg">如何写出一个惊艳面试官的深拷贝</a></p><p><a href="https://www.samanthaming.com/tidbits/70-3-ways-to-clone-objects/">3 Ways to Clone Objects in JavaScript</a></p><p><a href="https://jscurious.com/how-to-deep-clone-objects-in-javascript/">How to Deep Clone Objects in JavaScript</a></p><p><a href="https://jscurious.com/difference-between-shallow-copy-and-deep-copy-in-javascript/">Difference between Shallow copy and Deep copy in JavaScript</a></p></blockquote><hr><p>实现一个函数 clone(), 可以对 JavaScript 中的 5 种主要的数据类型 (包括 Number、String、Object、Array、Boolean) 进行值复制.</p><details><summary><b>解析</b></summary><p>这道题考察了以下知识点:</p><ul><li>使用 <code>typeof</code> 判断值得类型;</li><li>使用 <code>toString</code> 区分数组和对象;</li><li>递归函数的使用;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断是对象, 就进行循环复制</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'null'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 区分是数组还是对象, 创建空的数组或对象</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Array'</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果属性对应的值为对象, 则递归复制</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'null'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 不是对象, 直接把值返回</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice">String.prototype.slice() - JavaScript | MDN</a>: <code>slice()</code> 方法提取某个字符串的一部分, 并返回一个新的字符串, 且不会改动原字符串.</p></blockquote></details>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Removing duplicate objects from an Array</title>
      <link href="removing-duplicate-objects-from-an-array/"/>
      <url>removing-duplicate-objects-from-an-array/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://bitsofco.de/removing-duplicate-objects-from-an-array-is-hard/">Removing duplicate objects from an Array (is hard)</a></p></blockquote><p>Let’s say we have an array of objects such as the following:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span>    author<span class="token operator">:</span> <span class="token string">'吴承恩'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span>    author<span class="token operator">:</span> <span class="token string">'曹雪芹'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span>    author<span class="token operator">:</span> <span class="token string">'吴承恩'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The first and the last objects in the array are identical. So what if we want to remove such duplicate objects from the array? Surprisingly, this is quite a difficult problem to solve. To understand why, let’s look at how we could remove duplicates from an Array of flat items, such as strings.</p><h2 id="Removing-duplicate-flat-items-from-an-Array-is-easy"><a href="#Removing-duplicate-flat-items-from-an-Array-is-easy" class="headerlink" title="Removing duplicate flat items from an Array (is easy)"></a>Removing duplicate flat items from an Array (is easy)</h2><p>Let’s say we had an Array of strings such as the following:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'西游记'</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span> <span class="token string">'西游记'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If we wanted to remove any duplicates from this array, we could use the <code>filter()</code> method along with the <code>indexOf()</code> method to check if any given item is a duplicate.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> filteredStrings <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Return to new array if the index of the current item is the same</span>  <span class="token comment">// as the first occurence of the item</span>  <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since <code>strings.indexOf(item)</code> will always return the index of the first occurrence of the <code>item</code>, we can tell if the current item within the filter loop is a duplicate. If it is, we don’t return it to the new array created by the <code>filter()</code> method</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">uniq</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">uniq</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ '西游记', '红楼梦' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">uniq</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//无法对对象去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="Objects-don’t-work-the-same-way"><a href="#Objects-don’t-work-the-same-way" class="headerlink" title="Objects don’t work the same way"></a>Objects don’t work the same way</h2><p>The reason this same method doesn’t work with objects is because any 2 objects that have identical properties and values are not actually considered identical.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span>  author<span class="token operator">:</span> <span class="token string">'吴承恩'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span>  author<span class="token operator">:</span> <span class="token string">'吴承恩'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is because objects are compared based on <em>reference</em> rather than <em>structure</em>. The fact that the two objects have the same orperties and values is not considered when comparing the two. Therefore, the <code>indexOf(object)</code> within an array of objects will always return the index of the exact <code>object</code> passed, even if there exists another object with the exact same properties and values.</p><h2 id="My-solution"><a href="#My-solution" class="headerlink" title="My solution"></a>My solution</h2><p>Given this information, the only way to check if two objects have the same properties and values is to actually check the properties and values of each object. The solution I came up with involved doing this manual check, but with some enhacements to improve performance and reduce unnecessary nested loops.</p><p>In particular, I did 3 things -</p><ol><li> Only check each item in the array against every other item that comes after it in order to avoid comparing the same objects more than once</li><li> Only check items that have not been found to be a duplicate of any other item</li><li> Before checking if the values of each property are the same, check that both objects have the same keys</li></ol><blockquote><ol><li>为了避免多次比较同一对象，请仅将数组中的每个项目与其后的其他所有项目进行检查</li><li>仅检查未发现与其他项目重复的项目</li><li>在检查每个属性的值是否相同之前，请检查两个对象具有相同的键</li></ol></blockquote><p>Here’s the final function:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> duplicatesIndices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Loop through each item in the original array</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>duplicatesIndices<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Loop through each other item on array after the current one</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> comparisonIndex <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> comparisonIndex <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> comparisonIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> comparison <span class="token operator">=</span> arr<span class="token punctuation">[</span>comparisonIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> currentKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> comparisonKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>comparison<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Check number of keys in objects</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentKeys<span class="token punctuation">.</span>length <span class="token operator">!==</span> comparisonKeys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">// Check key names</span>      <span class="token keyword">const</span> currentKeysString <span class="token operator">=</span> currentKeys<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> comparisonKeysString <span class="token operator">=</span> comparisonKeys<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentKeysString <span class="token operator">!==</span> comparisonKeysString<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">// Check values</span>      <span class="token keyword">let</span> valuesEqual <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> key <span class="token operator">=</span> currentKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> comparison<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          valuesEqual <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>valuesEqual<span class="token punctuation">)</span> duplicatesIndices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>comparisonIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end for loop</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// end arr.forEach()</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以对对象去重</span><span class="token comment">// [ &#123; name: '西游记', author: '吴承恩' &#125;, &#123; name: '红楼梦', author: '曹雪芹' &#125; ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><a href="https://stackblitz.com/edit/remove-duplicates-arrayofobjects">https://stackblitz.com/edit/remove-duplicates-arrayofobjects</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试总结</title>
      <link href="interview/"/>
      <url>interview/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook/blob/master/JavaScript/JavaScript.md">JavaScript 面试知识点总结</a></p></blockquote><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="1-What’s-the-output"><a href="#1-What’s-the-output" class="headerlink" title="1. What’s the output?"></a>1. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">20</span><span class="token number">30</span><span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 申明全局 a, 值为 10</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 a 是全局的 a, 而不是局部的，所以执行的结果是把全局 a 设置成了 20</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span> <span class="token comment">// 返回 20</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局 a 已经是 20 了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 首先又一次执行了 sayHi(), 结果把 a 改成了 30,</span><span class="token comment">// 然后打印了一次 30, 执行完以后返回了 30, 然后再加 10, 打印结果 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="2-What’s-the-output"><a href="#2-What’s-the-output" class="headerlink" title="2. What’s the output?"></a>2. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NaN<span class="token number">10</span>NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 申明全局 a, 值为 10</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 调用</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意这里有一个 var, 那么这里的 a 就是局部变量了，</span>  <span class="token comment">// 另外还是需要预解析一下，其实可以这么去看代码：</span>  <span class="token comment">/*    var a;  // 申明未赋值，默认值是 undefined    a = a + 10;  // a = undefined + 10 结果是 NaN    */</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span> <span class="token comment">// 返回 NaN</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个还是全局的 a, 所以结果 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 依据上面的分析，这里的 sayHi 会打印一次 NaN,</span><span class="token comment">// 然后加 10, 结果还是 NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数内部不带 <code>var</code> 声明变量则表示该变量为全局变量，否则该变量为局部变量。</p></details><hr><h3 id="3-What’s-the-output"><a href="#3-What’s-the-output" class="headerlink" title="3. What’s the output?"></a>3. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt()</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span>, NaN, NaN<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>parseInt()</code> 支持两个参数 (val, radix), 其中 radix 表示要解析的数字的基数。（该值介于 2 ~ 36 之间，并且字符串中的数字不能大于 radix 才能正确返回数字结果值）.</p><p><code>Array.prototype.map()</code> 支持 3 个参数 (element, index)，因此三次传入的参数分别为 “1-0”, “2-1”, “3-2”</p><p>因为字符串的值不能大于基数，因此后面两次调用均返回 NaN , 第一次基数为 0 , 按十进制解析返回 1.</p></details><hr><h3 id="4-What’s-the-output"><a href="#4-What’s-the-output" class="headerlink" title="4. What’s the output?"></a>4. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">temp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">add</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><p>参考解析：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1100</span> <span class="token comment"># 二进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>首先执行 <code>add(3)</code>, 这个时候需要注意的是根据参数创建了一个局部的 <code>m</code> 变量值为 <code>3</code>, 但是返回值是一个 <code>temp</code> 的函数，也就是说 <code>add(3)</code> 的结果是 <code>temp</code> 函数，继续后面执行：<code>temp(4)</code>, 这个函数接收一个 <code>n</code> 参数，现在的值是 <code>4</code>, 然后调用 <code>add(m + n)</code>, 受到闭包影响，这里的 <code>m</code> 其实就是第一次的 <code>add</code> 的 <code>m</code>, 也就是 <code>3</code>, 所以这里其实就 <code>add(3 + 4)</code>, 也就是 <code>add(7)</code>, 执行后返回的这次 <code>add</code> 中创建的 <code>temp</code>, 那么后面就是 <code>temp(5)</code> 了，根据上面的推导，执行后的结果其实 <code>add(7 + 5)</code>, 也就是最后一次调用 <code>add</code> 的时候传入的是 <code>12</code>, 也就是 <code>add(12)</code>, 这个再次返回 <code>temp</code>, 当 <code>console.log</code> 的时候，会默认调用 <code>toString</code> 方法进行字符串格式化，因为 <code>temp</code> 的 <code>toString</code> 被重写了，那么打印的其实 <code>m.toString(2)</code>, 也就是 <code>(12).toString(2)</code>, 打印 <code>12</code> 的二进制值，也就是 <code>1100</code> 了。</li></ol><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString">Number.prototype.toString() - JavaScript | MDN</a></p></blockquote></details><hr><h3 id="🔥-5-What’s-the-output"><a href="#🔥-5-What’s-the-output" class="headerlink" title="🔥 5. What’s the output?"></a>🔥 5. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Foo<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Foo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Foo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="6-What’s-the-output"><a href="#6-What’s-the-output" class="headerlink" title="6. What’s the output?"></a>6. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  connsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="7-What’s-the-output"><a href="#7-What’s-the-output" class="headerlink" title="7. What’s the output?"></a>7. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">undefined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="8-What’s-the-output"><a href="#8-What’s-the-output" class="headerlink" title="8. What’s the output?"></a>8. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'Javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objectstringobject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><h3 id="🔥-9-What’s-the-output"><a href="#🔥-9-What’s-the-output" class="headerlink" title="🔥 9. What’s the output?"></a>🔥 9. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">3</span><span class="token number">4</span><span class="token number">2</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="10-What’s-the-output"><a href="#10-What’s-the-output" class="headerlink" title="10. What’s the output?"></a>10. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">1</span>, <span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="11-What’s-the-output"><a href="#11-What’s-the-output" class="headerlink" title="11. What’s the output?"></a>11. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token string">'3'</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token string">'12'</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"230512NaN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="12-What’s-the-output"><a href="#12-What’s-the-output" class="headerlink" title="12. What’s the output?"></a>12. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="13-What’s-the-output"><a href="#13-What’s-the-output" class="headerlink" title="13. What’s the output?"></a>13. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  birth<span class="token operator">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>  <span class="token function-variable function">getAge</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  birth<span class="token operator">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>  <span class="token function-variable function">getAge</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1990</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1990</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><h3 id="14-What’s-the-output"><a href="#14-What’s-the-output" class="headerlink" title="14. What’s the output?"></a>14. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">undefinedReferenceError: Cannot access <span class="token string">'b'</span> before initialization<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><h3 id="15-What’s-the-output"><a href="#15-What’s-the-output" class="headerlink" title="15. What’s the output?"></a>15. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: a is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: a is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><h3 id="🔥-16-What’s-the-output"><a href="#🔥-16-What’s-the-output" class="headerlink" title="🔥 16. What’s the output?"></a>🔥 16. What’s the output?</h3><h3 id="17-What’s-the-output"><a href="#17-What’s-the-output" class="headerlink" title="17. What’s the output?"></a>17. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> n<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> n<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写出 a.x</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写出 b.x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写出 a.x => undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写出 b.x => &#123; n: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><hr><h3 id="18-What’s-the-output"><a href="#18-What’s-the-output" class="headerlink" title="18. What’s the output?"></a>18. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  x<span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span>  <span class="token function-variable function">getX</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> getX <span class="token operator">=</span> foo<span class="token punctuation">.</span>getX<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   ?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  90</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><hr><h3 id="19-What’s-the-output"><a href="#19-What’s-the-output" class="headerlink" title="19. What’s the output?"></a>19. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num1:'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num2:'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num1'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 本级作用域没有 num, 向上寻找全局作用域 => 0</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> num<span class="token punctuation">;</span> <span class="token comment">//  num 会提升声明，初始化为 undefined.</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num2'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  本级作用域已有 num, 不会向上寻找 => undefined</span>  num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">////  num 赋值为 1.</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num3'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =>  1</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 只会提升声明，不会提升其初始化。如果一个变量先被使用再被声明和赋值的话，使用时的值是 <code>undefined</code></p></details><hr><h3 id="20-What’s-the-output"><a href="#20-What’s-the-output" class="headerlink" title="20. What’s the output?"></a>20. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>    a <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1,2</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="21-What’s-the-output-CSS-选择器优先级"><a href="#21-What’s-the-output-CSS-选择器优先级" class="headerlink" title="21. What’s the output? CSS 选择器优先级"></a>21. What’s the output? CSS 选择器优先级</h3><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">Specificity</a></p></blockquote><details><summary><b>解析</b></summary><p>下面列表中，选择器类型的优先级是递增的：</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors">类型选择器</a>（例如，<code>h1</code>) 和伪元素 （例如，<code>::before</code>)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors">类选择器</a> （例如，<code>.example</code>), 属性选择器 （例如，<code>[type=&quot;radio&quot;]</code>) 和伪类 （例如，<code>:hover</code>)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors">ID 选择器</a>（例如，<code>#example</code>).</li></ol><p><strong>通配选择符</strong> (universal selector)(<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors"><code>*</code></a>) <strong>关系选择符</strong> (combinators)(<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator"><code>+</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator"><code>&gt;</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator"><code>~</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator">‘ ‘</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Column_combinator"><code>||</code></a>) 和 <strong>否定伪类</strong> (negation pseudo-class)(<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not"><code>:not()</code></a>) 对优先级没有影响。（但是，<strong>在 <code>:not()</code> 内部声明的选择器会影响优先级</strong>).</p><p>您可以访问  <a href="https://wiki.developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance#Specificity_2">“Specificity” in “Cascade and inheritance”</a>  或者  <a href="https://specifishity.com/">https://specifishity.com</a>  来了解更多关于优先级的详细信息。</p><p>给元素添加的 <strong>内联样式</strong> （例如，<code>style=&quot;font-weight:bold&quot;</code>) 总会覆盖外部样式表的任何样式 , 因此可看作是具有最高的优先级。</p><blockquote><p>CSS 选择器优先级从高到低的排序如下：</p></blockquote><table><thead><tr><th>选择器</th><th>用法</th></tr></thead><tbody><tr><td>id 选择器</td><td><code>#myid</code></td></tr><tr><td>类选择器</td><td><code>.myclassname</code></td></tr><tr><td>标签选择器</td><td><code>div,h1,p</code></td></tr><tr><td>相邻选择器</td><td><code>h1+p</code></td></tr><tr><td>子选择器</td><td><code>ul &gt; li</code></td></tr><tr><td>后代选择器</td><td><code>li a</code></td></tr><tr><td>通配符选择器</td><td><code>*</code></td></tr><tr><td>属性选择器</td><td><code>a[rel=&quot;external&quot;]</code></td></tr><tr><td>伪类选择器</td><td><code>a:hover, li:nth-child</code></td></tr></tbody></table></details><h3 id="22-What’s-the-output"><a href="#22-What’s-the-output" class="headerlink" title="22. What’s the output?"></a>22. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><p><code>&#123;&#125;</code> 的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf">Object.prototype.valueOf()</a> 结果为 <code>&#123;&#125;</code> ,<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">Object.prototype.toString()</a> 的结果为 <code>&quot;[object Object]&quot;</code></p><p><code>[]</code> 的 valueOf 结果为 <code>[]</code> ,<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString">Array.prototype.toString()</a> 的结果为 <code>&quot;&quot;</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;  &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Object]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="23-What’s-the-output"><a href="#23-What’s-the-output" class="headerlink" title="23. What’s the output?"></a>23. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, y:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>y<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  输出结果？</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> b<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, b:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, y:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>y<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  x:null, y:1</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> b<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, b:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  a:null, b:undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a></p></blockquote></details><hr><h3 id="24-What’s-the-output"><a href="#24-What’s-the-output" class="headerlink" title="24. What’s the output?"></a>24. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; x: 2 &#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// &#123; x: 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  TypeError: Assignment to constant variable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const">const</a> 常量是块级范围的，非常类似用 let 语句定义的变量。但常量的值是无法（通过重新赋值）改变的，也不能被重新声明。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors">属性访问器</a> 提供了两种方式用于访问一个对象的属性，它们分别是点号和方括号。</p></blockquote></details><hr><h3 id="25-What’s-the-output"><a href="#25-What’s-the-output" class="headerlink" title="25. What’s the output?"></a>25. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">let</span> z <span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>y<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, y:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>y<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, z:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>z<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment">Increment (++)</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">const</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, y:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>y<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: "x:4, y:3"</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, b:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: "a:4, b:4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">let</span> z <span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>y<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, y:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>y<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, z:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>z<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: "x:3, y:2, z:4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="26-What’s-the-output"><a href="#26-What’s-the-output" class="headerlink" title="26. What’s the output?"></a>26. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      k<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue">continue</a> 声明终止当前循环或标记循环的当前迭代中的语句执行，并在下一次迭代时继续执行循环。</p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      k<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  输出结果 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="27-What’s-the-output"><a href="#27-What’s-the-output" class="headerlink" title="27. What’s the output?"></a>27. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 ?</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort() - JavaScript | MDN</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果：[1, 100000, 21, 30, 4]</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果：[ 1, 4, 21, 30, 100000 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="28-What’s-the-output"><a href="#28-What’s-the-output" class="headerlink" title="28. What’s the output?"></a>28. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 6</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 6</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" title="头减">Array.prototype.shift() - JavaScript | MDN</a> 方法从数组中 ** 删除第一个元素 **, 并 ** 返回该元素的值 **. 此方法更改数组的长度（该方法修改原有数组）.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> firstElement <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" title="尾加">Array.prototype.push()</a> 方法将一个或多个元素 ** 添加到数组的末尾 **, 并 ** 返回该数组的新长度 ** （该方法修改原有数组）.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pigs'</span><span class="token punctuation">,</span> <span class="token string">'goats'</span><span class="token punctuation">,</span> <span class="token string">'sheep'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> count <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'cows'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["pigs", "goats", "sheep", "cows"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" title="头加">Array.prototype.unshift()</a> 方法将一个或多个元素 ** 添加到数组的开头 **, 并 ** 返回该数组的新长度 ** （该方法修改原有数组）.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [4, 5, 1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" title="尾减">Array.prototype.pop()</a> 方法从数组中 ** 删除最后一个元素 **, 并 ** 返回该元素的值 **. 此方法更改数组的长度 （该方法修改原有数组）.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> plants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'broccoli'</span><span class="token punctuation">,</span> <span class="token string">'cauliflower'</span><span class="token punctuation">,</span> <span class="token string">'cabbage'</span><span class="token punctuation">,</span> <span class="token string">'kale'</span><span class="token punctuation">,</span> <span class="token string">'tomato'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plants<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: "tomato"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plants<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="29-What’s-the-output"><a href="#29-What’s-the-output" class="headerlink" title="29. What’s the output?"></a>29. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'421hop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt() - JavaScript | MDN</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder" title="取余">Remainder (%)</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 0</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'421hop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 421</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><hr><h3 id="30-What’s-the-output"><a href="#30-What’s-the-output" class="headerlink" title="30. What’s the output?"></a>30. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token number">9</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift">Left shift (&lt;&lt;)</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 8</span><span class="token comment">// 2 * (2 ** 2) = 2 * (4) = 8</span><span class="token number">9</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 72</span><span class="token comment">// 9 * (2 ** 3) = 9 * (8) = 72</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="31-What’s-the-output-HTML5-新增的表单元素？"><a href="#31-What’s-the-output-HTML5-新增的表单元素？" class="headerlink" title="31. What’s the output? HTML5 新增的表单元素？"></a>31. What’s the output? HTML5 新增的表单元素？</h3><details><summary><b>解析</b></summary><table><thead><tr><th>Type</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>用于指定颜色的控件；在支持的浏览器中，激活时会打开取色器。</td></tr><tr><td>date</td><td>输入日期的控件（年、月、日，不包括时间）。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</td></tr><tr><td>month</td><td>输入年和月的控件，没有时区。</td></tr><tr><td>range</td><td>此控件用于输入不需要精确的数字。控件是一个范围组件，默认值为正中间的值。</td></tr><tr><td>search</td><td>用于搜索字符串的单行文字区域。</td></tr><tr><td>tel</td><td>用于输入电话号码的控件。拥有动态键盘的设备上会显示电话数字键盘。</td></tr><tr><td>time</td><td>用于输入时间的控件，不包括时区。</td></tr><tr><td>url</td><td>用于输入 URL 的控件。类似 text 输入，但有验证参数，在支持动态键盘的设备上有相应的键盘。</td></tr></tbody></table><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input"><code>&lt;input&gt;</code>: The Input (Form Input) element</a></p></blockquote></details><hr><h3 id="32-What’s-the-output"><a href="#32-What’s-the-output" class="headerlink" title="32. What’s the output?"></a>32. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#a_model_for_understanding_equality_comparisons">A model for understanding equality comparisons?</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 true</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>null</th><th>undefined</th></tr></thead><tbody><tr><td>We declare a variable and assign it a value of <code>null</code>.</td><td>We declare a variable without assigning any value.</td></tr><tr><td>type of (null) “object”</td><td>type of (undefined) “undefined”</td></tr></tbody></table></details><hr><h3 id="33-What’s-the-output"><a href="#33-What’s-the-output" class="headerlink" title="33. What’s the output?"></a>33. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="🔥-34-What’s-the-output"><a href="#🔥-34-What’s-the-output" class="headerlink" title="🔥 34. What’s the output?"></a>🔥 34. What’s the output?</h3><blockquote><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7">async/await、promise 和 setTimeout 的执行顺序 实战</a> 🔥</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asnyc1 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeOut'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reslove</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><p><img src="/images/25ED239D.jpeg" alt="async/await、promise 和 setTimeout 的执行顺序 实战"></p><ul><li>执行 <code>console.log(&#39;script start&#39;)</code>，输出 <code>script start</code>；</li><li>执行 setTimeout，是一个异步动作，放入宏任务异步队列中；</li><li>执行 async1()，输出 <code>async1 start</code>，继续向下执行；</li><li>执行 async2()，输出 <code>async2</code>，并返回了一个 promise 对象，await 让出了线程，把返回的 promise 加入了微任务异步队列，所以 async1() 下面的代码也要等待上面完成后继续执行；</li><li>执行 new Promise，输出 <code>promise1</code>，然后将 resolve 放入微任务异步队列；</li><li>执行 <code>console.log(&#39;script end&#39;)</code>，输出 <code>script end</code>；</li><li>到此同步的代码就都执行完成了，然后去微任务异步队列里去获取任务</li><li>接下来执行 resolve（async2 返回的 promise 返回的），输出了 <code>async1 end</code>。</li><li>然后执行 resolve（new Promise 的），输出了 <code>promise2</code>。</li><li>最后执行 setTimeout，输出了 <code>setTimeOut</code>。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script startasync1 startasync2promise1promise3script endasnyc1 endpromise2setTimeOut<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="35-What’s-the-output"><a href="#35-What’s-the-output" class="headerlink" title="35. What’s the output?"></a>35. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//async2 做出如下更改：</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script startasync1 startpromise1promise3script endpromise2async1 endpromise4setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="36-What’s-the-output"><a href="#36-What’s-the-output" class="headerlink" title="36. What’s the output?"></a>36. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更改如下：</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 更改如下：</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script startasync1 startpromise1script endpromise2setTimeout3setTimeout2setTimeout1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="37-What’s-the-output"><a href="#37-What’s-the-output" class="headerlink" title="37. What’s the output?"></a>37. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a1 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'promise2.then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'promise2.then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script starta1 starta2promise2script endpromise1a1 endpromise2.thenpromise3setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="38-What’s-the-output"><a href="#38-What’s-the-output" class="headerlink" title="38. What’s the output?"></a>38. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'2'</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">27</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="39-What’s-the-output"><a href="#39-What’s-the-output" class="headerlink" title="39. What’s the output?"></a>39. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0.7999999999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="40-What’s-the-output"><a href="#40-What’s-the-output" class="headerlink" title="40. What’s the output?"></a>40. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b > 详解 </b></summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0.30000000000000004</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h3 id="41-What’s-the-output"><a href="#41-What’s-the-output" class="headerlink" title="41. What’s the output?"></a>41. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [3,3,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary></details><h3 id="42-What’s-the-output"><a href="#42-What’s-the-output" class="headerlink" title="42. What’s the output?"></a>42. What’s the output?</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary></details><h3 id="单选框组件"><a href="#单选框组件" class="headerlink" title="单选框组件"></a>单选框组件</h3><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="zhuangyin" data-slug-hash="VwpgoqQ" data-preview="true" data-editable="true"  data-prefill='{"title":" 项目需求（单选）@","tags":[],"scripts":["https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class='form_title'> 项目需求（单选）&lt;span>*&lt;/span>&lt;/div>&lt;div class="group">  &lt;label>    &lt;input type="radio" name="parent_radio" value="积分商城搭建" />    积分商城搭建 & lt;/label>  &lt;label>    &lt;input type="radio" name="parent_radio" value="积分礼品供应" />    积分礼品供应 & lt;/label>  &lt;label>    &lt;input type="radio" name="parent_radio" value="积分商城代运营" />    积分商城代运营 & lt;/label>  &lt;label>    &lt;input type="radio" name="parent_radio" value="其他定制需求" />    其他定制需求 & lt;/label>&lt;/div>&lt;p>&lt;/p></pre>  <pre data-lang="css">input[type="radio"] {  /* 取消自带按钮 */  /*display: none;*/}.group > label {  /* 未选中状态 */  float: left;  color: #333333;  padding: 7px 14px;  border: 1px solid #333333;  margin: 0 15px 15px 0;  width: 150px;}.group > label.active {  /* 选中状态 */  color: #1770e6;  padding: 7px 14px;  border: 1px solid #1770e6;}.group {  width: 400px;  height: 300px;  margin: 20px auto;}.form_title {  width: 150px;  color: #333;  margin: 20px auto;}.form_title span {  color: #ff2e3e;}body {  text-align: center;}</pre>  <pre data-lang="js">[...document.querySelectorAll(".group label")].forEach((item) => {  item.onclick = function () {    [...document.querySelectorAll(".group label")].forEach((i) =>      i.classList.remove("active")    );    item.classList.toggle("active");    // event.currentTarget.classList.toggle("active");  };});[...document.querySelectorAll(".group input")].forEach((item) => {  item.onclick = function () {    console.log(document.querySelector('input[type="radio"]:checked').value);    document.querySelector("p").textContent = document.querySelector('input[type="radio"]:checked').value;  };});</pre></div><h3 id="多选框组件"><a href="#多选框组件" class="headerlink" title="多选框组件"></a>多选框组件</h3><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-slug-hash="MWmbYOO" data-preview="true" data-editable="true" data-user="zhuangyin"  data-prefill='{"title":" 项目需求（多选）@","tags":[],"scripts":["https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class='form_title'> 项目需求（多选）&lt;span>*&lt;/span>&lt;/div>&lt;div class="group">  &lt;label>    &lt;input type="checkbox" name="parent_checkbox" value="积分商城搭建" id="" />    积分商城搭建 & lt;/label>  &lt;label>    &lt;input type="checkbox" name="parent_checkbox" value="积分礼品供应" id="" />    积分礼品供应 & lt;/label>  &lt;label>    &lt;input type="checkbox" name="parent_checkbox" value="其他定制需求" id="" />    其他定制需求 & lt;/label>  &lt;label>    &lt;input type="checkbox" name="parent_checkbox" value="积分商城代运营" id="" />    积分商城代运营 & lt;/label>&lt;/div>&lt;p>&lt;/p></pre>  <pre data-lang="css">input[type="checkbox"] {  /* 取消自带按钮 */  display: none;}.group > label {  /* 未选中状态 */  float: left;  color: #333333;  padding: 7px 14px;  border: 1px solid #333333;  margin: 0 15px 15px 0;  width: 150px;}.group > label.active {  /* 选中状态 */  color: #1770e6;  padding: 7px 14px;  border: 1px solid #1770e6;}.group {  width: 400px;  height: 300px;  margin: 20px auto;}.form_title {  width: 150px;  color: #333;  margin: 20px auto;}.form_title span {  color: #ff2e3e;}body {  text-align: center;}</pre>  <pre data-lang="js">[...document.querySelectorAll(".group label")].forEach((item, index) => {  item.onclick = function (event) {    if (event.target.matches("input")) return;    const i = document.querySelector(      ".group label:nth-child(" + (index + 1) + ")"    ).classList;    i.contains("active") ? i.remove("active") : i.add("active");  };});[...document.querySelectorAll(".group input")].forEach((item) => {  item.onclick = () => {    const arr = [      ...document.querySelectorAll('input[type="checkbox"]:checked')    ].map((i) => i.value);    console.log(arr);    document.querySelector("p").textContent = arr;  };});</pre></div><h3 id="5-个-HTML5-新增的标签和-5-个-CSS3-新增属性"><a href="#5-个-HTML5-新增的标签和-5-个-CSS3-新增属性" class="headerlink" title="5 个 HTML5 新增的标签和 5 个 CSS3 新增属性"></a>5 个 HTML5 新增的标签和 5 个 CSS3 新增属性</h3><details><summary><b>解析</b></summary><p>5 个 HTML5 新增的标签：<code>&lt;article&gt;</code>,<code>&lt;nav&gt;</code>, <code>&lt;audio&gt;</code> , <code>&lt;video&gt;</code> ,<code>&lt;main&gt;</code>,<code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code></p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/HTML5_element_list">HTML5 标签列表</a></p></blockquote><p>5 个 CSS3 新增属性：<code>box-shadow</code>, <code>text-shadow</code>,<code>background-size</code>,<code>background-clip</code>,<code>mask</code>, <code>transform</code>,<code>filter</code></p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Archive/CSS3">CSS3</a></p></blockquote></details><h3 id="iframe-内外"><a href="#iframe-内外" class="headerlink" title="iframe 内外"></a>iframe 内外</h3><p>js 在 iframe 子页面操作父页面元素 js 在父页面获取 iframe 子页面元素</p><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><ul><li>一个可选的 <code>&lt;caption&gt;</code> 元素</li><li>零个或多个的 <code>&lt;colgroup&gt;</code> 元素</li><li>零个或多个的 <code>&lt;col&gt;</code> 元素</li><li>一个可选的 <code>&lt;thead&gt;</code> 元素</li><li>下列任意一个：<ul><li>零个或多个 <code>&lt;tbody&gt;</code></li><li>零个或多个 <code>&lt;tr&gt;</code></li></ul></li><li>一个可选的 <code>&lt;tfoot&gt;</code> 元素</li></ul><h3 id="HTML5-存储类型有什么区别？"><a href="#HTML5-存储类型有什么区别？" class="headerlink" title="HTML5 存储类型有什么区别？"></a>HTML5 存储类型有什么区别？</h3><p>共同点：都是在客户端存储数据，且是同源的。</p><p>区别：</p><ul><li><p>存储大小不一样；cookie 存储数据最大只能为 4kb，而 sessionStorage 与 localStorage 可以保存 5MB 甚至更多数据。Cookie 数据始终在同源的 http 请求中携带，即 cookie 在浏览器与服务器之间来回传递，而 sessionStorage 与 localStorage 不会自动发给服务端，仅在本地保存。</p></li><li><p>数据有效期不同；sessionStorage 仅在当前浏览器窗口未关闭之前有效（同源的新窗口不生效），localStorage 仅在当前的浏览器下永久生效（不同的浏览器不能共享数据），不管关闭了 重新打开的 还是生效的。Cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或者浏览器关闭，或者打开新的同源窗口。</p></li><li><p>作用域不同；sessionStorage 不在不同的浏览器窗口中共享，即是同一个页面，localStorage 在所有的同源窗口（子域之间不能共享数据，不支持改 domain，可以用 postMassage）中都是共享的（只在相同的浏览器下），cookie 在所有的同源窗口（子域之间可以把各自的 domain 改成和主域一样来实现共享数据）都是共享的（仅在同一个浏览器中）。</p></li></ul><h3 id="浏览器缓存-应用缓存"><a href="#浏览器缓存-应用缓存" class="headerlink" title="浏览器缓存 应用缓存"></a>浏览器缓存 应用缓存</h3><p><img src="https://pic2.zhimg.com/80/v2-9ab94852cdca3e31cbfd365efe988c35_1440w.jpg"></p><h3 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a><a href="https://leetcode.com/problems/reverse-string/">反转字符串</a></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">'h,e,l,l,o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://chinese.freecodecamp.org/news/how-to-reverse-a-string-in-javascript-in-3-different-ways/">JavaScript 字符串反转的三种方式</a></p></blockquote><h3 id="CSS-属性名-选择器-是否区分大小写-5-分）"><a href="#CSS-属性名-选择器-是否区分大小写-5-分）" class="headerlink" title="CSS 属性名 选择器 是否区分大小写 (5 分）"></a>CSS 属性名 选择器 是否区分大小写 (5 分）</h3><details><summary><b>解析</b></summary><ul><li>id 名和 class 名是区分大小写的</li><li>选择器中，只有标签选择器不区分大小写</li><li>属性名和属性值是不区分大小写的</li></ul></details><hr><h3 id="Cookie-有效期-5-分）"><a href="#Cookie-有效期-5-分）" class="headerlink" title="Cookie 有效期 (5 分）"></a>Cookie 有效期 (5 分）</h3><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#define_the_lifetime_of_a_cookie">Cookie 有效期</a></p></blockquote><details><summary><b>解析</b></summary><p>The lifetime of a cookie can be defined in two ways:</p><ul><li>Session cookies are deleted when the current session ends. The browser defines when the “current session” ends, and some browsers use session restoring when restarting, which can cause session cookies to last indefinitely long.</li><li>Permanent cookies are deleted at a date specified by the <code>Expires</code> attribute, or after a period of time specified by the <code>Max-Age</code> attribute.</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#define_where_cookies_are_sent">SameSite attribute</a></p></blockquote></details><hr><h3 id="clienwidth-offsetwidth-border-box-content-box-5-分）"><a href="#clienwidth-offsetwidth-border-box-content-box-5-分）" class="headerlink" title="clienwidth offsetwidth border-box content-box (5 分）"></a><code>clienwidth</code> <code>offsetwidth</code> <code>border-box</code> <code>content-box</code> (5 分）</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  By default in the CSS box model, the width and height you assign to an element is applied only to  the element's content box. If the element has any border or padding, this is then added to the  width and height to arrive at the size of the box that's rendered on the screen. This means that  when you set width and height,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  you have to adjust the value you give to allow for any border or padding that may be added. For  example, if you have four boxes with width: 25%;, if any has left or right padding or a left or  right border, they will not by default fit on one line within the constraints of the parent  container.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 460px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 180px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 8px solid red<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#content-box</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token comment">/* Total width: 460px + (2 * 20px) + (2 * 8px) = 516px   Total height: 180px + (2 * 20px) + (2 * 8px) = 236px   Content box width: 460px   Content box height: 180px */</span><span class="token punctuation">&#125;</span><span class="token selector">#border-box</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment">/* Total width: 460px   Total height: 180px   Content box width: 460px - (2 * 20px) - (2 * 8px) = 404px   Content box height: 180px - (2 * 20px) - (2 * 8px) = 124px */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#content-box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> border <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#border-box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>border<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>border<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="esult" data-user="zhuangyin" data-slug-hash="oNBmvZw" data-preview="true" data-editable="true"  data-prefill='{"title":"clienwidth offsetwidth","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div id="content-box"> By default in the CSS box model, the width and height you assign to an element is applied only to the element's content box. If the element has any border or padding, this is then added to the width and height to arrive at the size of the box that's rendered on the screen. This means that when you set width and height,&lt;/div>&lt;div id="border-box">you have to adjust the value you give to allow for any border or padding that may be added. For example, if you have four boxes with width: 25%;, if any has left or right padding or a left or right border, they will not by default fit on one line within the constraints of the parent container.&lt;/div></pre>  <pre data-lang="css">div {  width: 460px;  height: 180px;  padding: 20px;  border: 8px solid red;  background: yellow;  margin: 10px;}#content-box {  box-sizing: content-box;  /* Total width: 460px + (2 * 20px) + (2 * 8px) = 516px   Total height: 180px + (2 * 20px) + (2 * 8px) = 236px   Content box width: 460px   Content box height: 180px */}#border-box {  box-sizing: border-box;  /* Total width: 460px   Total height: 180px   Content box width: 460px - (2 * 20px) - (2 * 8px) = 404px   Content box height: 180px - (2 * 20px) - (2 * 8px) = 124px */}</pre>  <pre data-lang="js">const content = document.querySelector("#content-box");const border = document.querySelector("#border-box");console.log(content.offsetWidth); //517（应该是 516 517 是 codepen 的问题）console.log(content.clientWidth); //500console.log(border.offsetWidth); //460console.log(border.clientWidth); //444</pre></div><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#content-box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> border <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#border-box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//516</span><span class="token comment">// 460px + (2 * 20px) + (2 * 8px) = 516px</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//500</span><span class="token comment">// 516px - (2 * 8px) = 500px</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>border<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//460</span><span class="token comment">// 460px</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>border<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//444</span><span class="token comment">// 460px - (2 * 8px) = 444px</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth">HTMLElement.offsetWidth</a> 是测量包含元素的边框 (<code>border</code>)、水平线上的内边距 (<code>padding</code>)、竖直方向滚动条 (<code>scrollbar</code>)（如果存在的话）、以及 CSS 设置的宽度 (<code>width</code>) 的值。(content + padding + border)</p></blockquote><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth">Element.clientWidth</a> 内联元素以及没有 CSS 样式的元素的 <code>clientWidth</code> 属性值为 0.Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距 <code>padding</code>, 但 ** 不包括 ** 边框 <code>border</code>、外边距 <code>margin</code> 和垂直滚动条（如果有的话）. (content + padding)</p></blockquote><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing">box-sizing</a> 属性定义了 应该如何计算一个元素的总宽度和总高度</p></blockquote><blockquote><p><code>content-box </code>gives you the default CSS box-sizing behavior. If you set an element’s width to 100 pixels, then the element’s content box will be 100 pixels wide, and <strong>the width of any border or padding will be added to the final rendered width</strong>, making the element wider than 100px.</p></blockquote><blockquote><p><code>border-box</code> tells the browser to account for any border and padding in the values you specify for an element’s width and height. If you set an element’s width to 100 pixels, that 100 pixels will include any <strong>border</strong> or <strong>padding</strong> you added, and <strong>the content box will shrink to absorb that extra width</strong>. This typically makes it much easier to size elements.</p></blockquote></details><h3 id="左-div-定宽-200px-右-div-宽度自适应-10-分）"><a href="#左-div-定宽-200px-右-div-宽度自适应-10-分）" class="headerlink" title="左 div 定宽 200px 右 div 宽度自适应 (10 分）"></a>左 div 定宽 200px 右 div 宽度自适应 (10 分）</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><ul><li>方法一：BFC（块级格式化上下文）</li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="ebing" data-preview="true" data-editable="true"  data-prefill='{"title":" 左 div 定宽 200px 右 div 宽度自适应 ","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="container">  &lt;div class="left">&lt;/div>  &lt;div class="right">&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">/* 方法一：BFC（块级格式化上下文）*/.container {  width: 100%;  height: 100vh;  border: 1px solid red;}.left {  width: 200px;  height: 100%;  background: gray;  float: left;}.right {  overflow: hidden; /* 触发 bfc */  background: green;  height: 100%;}</pre></div><blockquote><p>左侧 div <code>width: 200px;</code>,</p><p>右侧 div 的 <code>overflow: hidden;</code></p></blockquote><ul><li>方法二：flex 布局</li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="ebing" data-preview="true" data-editable="true"  data-prefill='{"title":" 左 div 定宽 200px 右 div 宽度自适应 ","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="container">  &lt;div class="left">&lt;/div>  &lt;div class="right">&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">/* 方法二：flex 布局 */.container {  width: 100%;  height: 100vh;  border: 1px solid red;  display: flex; /*flex 布局 */}.left {  width: 200px;  height: 100%;  background: gray;}.right {  height: 100%;  background: green;  flex: 1; /*flex 布局 */}</pre></div><blockquote><p>首先将 父 DIV 的 <code>display: flex</code>, 并且设置 <code>flex-flow: row</code>（默认）,</p><p>左侧 div <code>width: 200px;</code>,</p><p>右侧 div 的 <code>flex: 1;</code> 或者 <code>flex: auto;</code>,</p></blockquote><ul><li>方法三：table 布局</li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="ebing" data-preview="true" data-editable="true"  data-prefill='{"title":" 左 div 定宽 200px 右 div 宽度自适应 ","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="container">  &lt;div class="left">&lt;/div>  &lt;div class="right">&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">/* 方法三：table 布局 */.container {  width: 100%;  height: 100vh;  border: 1px solid red;  display: table; /*table 布局 */}.left {  width: 200px;  height: 100%;  background: gray;  display: table-cell;}.right {  height: 100%;  background: green;  display: table-cell;}</pre></div><blockquote><ol><li><p>先让固定宽度的 左 DIV <code>display: table-cell;</code></p></li><li><p>右 DIV <code>display: table-cell;</code></p></li></ol></blockquote><ul><li>方法四：css 计算宽度 calc</li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="ebing" data-preview="true" data-editable="true"  data-prefill='{"title":" 左 div 定宽 200px 右 div 宽度自适应 ","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="container">  &lt;div class="left">&lt;/div>  &lt;div class="right">&lt;/div>&lt;/div></pre>  <pre data-lang="css" data-option-autoprefixer="true">/* 方法四：css 计算宽度 calc*/.container {  width: 100%;  height: 100vh;  border: 1px solid red;}.left {  width: 200px;  height: 100%;  background: gray;  float: left;}.right {  height: 100%;  background: green;  float: right;  width: calc(100% - 200px);}</pre></div><blockquote><ol><li><p>先让固定宽度的 左 DIV <code>float: left;</code>, 使其脱离文档流</p></li><li><p>右 DIV <code>width</code> 的值为 <code>calc(100% - 200px)</code> 且 <code>float: right;</code></p></li></ol></blockquote><ul><li>方法五：<code>float</code> + <code>margin-left</code></li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="ebing" data-preview="true" data-editable="true"  data-prefill='{"title":" 左 div 定宽 200px 右 div 宽度自适应 ","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="container">  &lt;div class="left">&lt;/div>  &lt;div class="right">&lt;/div>&lt;/div></pre>  <pre data-lang="css">/* 方法五：float+margin-left*/.container {  width: 100%;  height: 100vh;  border: 1px solid red;}.left {  float: left;  width: 200px;  background: gray;  height: 100%;}.right {  margin-left: 200px;  background: green;  height: 100%;}</pre></div><blockquote><ol><li><p>先让固定宽度的 左 DIV <code>float: left;</code>, 使其脱离文档流</p></li><li><p>右 DIV <code>margin-left</code> 的值与左 DIV 的宽度相等</p></li></ol></blockquote><ul><li>栅格（Grid）布局</li></ul><div class="codepen" data-height="500" data-theme-id="30013" data-default-tab="result" data-user="chriscoyier" data-slug-hash="ebing" data-preview="true" data-editable="true"  data-prefill='{"title":" 左 div 定宽 200px 右 div 宽度自适应 ","tags":["center"],"scripts":[],"stylesheets":[]}'>  <pre data-lang="html">&lt;div class="container">  &lt;div class="left">&lt;/div>  &lt;div class="right">&lt;/div>&lt;/div></pre>  <pre data-lang="css">.container {  /* 设置父元素为 grid */  display: grid;  /* 设置几个值代表布局为几行，每个值是行高 */  grid-template-rows: 500px;  /* 设置几个值代表布局为几列，每个值是列宽 */  grid-template-columns: 200px auto;}.left {  background: gray;}.right {  background: green;}</pre></div></details><hr><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clear">clear</a></p><p><a href="/css-clear">CSS Clear: Learn to Clear Floating Elements</a></p></blockquote><details><summary><b>解析</b></summary><p><code>clear</code> CSS 属性指定一个元素是否必须移动 （清除浮动后） 到在它之前的浮动元素下面。<code>clear</code> 属性适用于浮动和非浮动元素。</p><ul><li>父元素结束标签之前插入清除浮动的块级元素</li><li>利用 after 伪元素 (clearfix)  </li><li>利用 overflow 清除浮动</li></ul></details><hr><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解析</b></summary><ul><li>利用 Set 去重</li></ul><blockquote><p>无法去重对象 Symbol</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">unique</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, '', true, undefined, null, NaN, &#123; a: 1&#125;, &#123; a: 2 &#125;, &#123;&#125;, &#123;&#125;, Symbol(a), Symbol(a)];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用 hasOwnProperty 判断是否存在对象属性</li></ul><blockquote><p>利用一个空的 Object 对象，我们把数组的值存成 Object 的 key 值，比如 <code>Object[value1] = true</code>, 在判断另一个值的时候，如果 <code>Object[value2]</code> 存在的话，就说明该值是重复的</p><p>因为 <code>1</code> 和 <code>&#39;1&#39;</code> 是不同的，但是这种方法会判断为同一个值，这是因为对象的键值只能是字符串，所以我们可以使用 <code>typeof item + item</code> 拼成字符串作为 key 值来避免这个问题</p><p>无法正确区分出两个对象，比如 <code>&#123;a: 1&#125;</code> 和 <code>&#123;a: 2&#125;</code>, 因为 <code>typeof item + item</code> 的结果都会是 <code>object[object Object]</code>, 不过我们可以使用 <code>JSON.stringify</code> 将对象序列化</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">Object.prototype.hasOwnProperty()</a> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">unique</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token boolean">false</span>      <span class="token operator">:</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, '', true, undefined, null, NaN, &#123; a: 1&#125;, &#123; a: 2 &#125;, &#123;&#125;, Symbol(a)];</span><span class="token comment">// 所有的都去重了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="以下属于脱离文档流布局的样式-2-分）"><a href="#以下属于脱离文档流布局的样式-2-分）" class="headerlink" title="以下属于脱离文档流布局的样式 (2 分）"></a>以下属于脱离文档流布局的样式 (2 分）</h3><p>A、<code>float:left</code><br>B、<code>position: relative</code><br>C、<code>margin-left: -50%</code><br>D、<code>transform: translate(50%)</code></p><details><summary><b > 详解 </b></summary><blockquote><p>A</p></blockquote><p>所谓的文档流，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。并最终窗体自上而下分成一行行，并在每行中按从左至右的顺序排放元素。脱离文档流即是元素打乱了这个排列，或是从排版中拿走。当前所知的脱离文档流的方式有两种：浮动和定位。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow#taking_an_item_out_of_flow">脱离常规流的元素</a></p><ul><li>floated items.</li><li>items with <code>position: absolute</code> (including <code>position: fixed</code> which acts in the same way).</li><li>the root element (<code>html</code>)</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">position</a></p><p><a href="https://developer.mozilla.org/en-US/docs/CSS/float">float</a></p></blockquote></details><hr><h3 id="以下选项中有变量提升的定义方式是-3-分）"><a href="#以下选项中有变量提升的定义方式是-3-分）" class="headerlink" title="以下选项中有变量提升的定义方式是 (3 分）"></a>以下选项中有变量提升的定义方式是 (3 分）</h3><p>A、 <code>const num = 0</code><br>B、 <code>function num()&#123;&#125;</code><br>C、 <code>var num = 0</code><br>D、 <code>num = 0</code></p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting">Hoisting（变量提升）</a> 意味着变量和函数的 ** 声明 ** 会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。</p></blockquote><details><summary><b > 详解 </b></summary><blockquote><p>BC</p></blockquote><p><code>var</code> 声明会在代码执行之前就将创建变量，并将其初始化为 <code>undefined</code>. 即创建和初始化会被提升。<br><code>let</code> 只有创建过程会提升，初始化和赋值都不会提升，所以会形成暂时性死区，这也是为什么在定义前使用 <code>let</code> 会抛错。<br><code>const</code> 的创建过程也会提升，但是与 <code>let</code> 不同之处在于 <code>const</code> 只有创建和初始化两个过程，没有赋值过程。若不初始化则会直接抛错。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function">函数声明</a> 的「创建」「初始化」和「赋值」都被提升。你可以在函数声明之前使用该函数 但 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a> 不会被提升。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class">类声明</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class">类表达式</a> 都不会被提升。</p></details><hr><h3 id="以下属-Javascript-原始数据类型的是-2-分）"><a href="#以下属-Javascript-原始数据类型的是-2-分）" class="headerlink" title="以下属 Javascript 原始数据类型的是 (2 分）"></a>以下属 Javascript 原始数据类型的是 (2 分）</h3><p>A、 <code>undefined</code><br>B、 <code>array</code><br>C、 <code>symbol</code><br>D、 <code>object</code></p><details><summary><b > 详解 </b></summary><blockquote><p>AC</p></blockquote><p>在 JavaScript 中，共有 7 种 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">基本类型</a>: <em>string</em>, <em>number</em>, <em>bigint</em>, <em>boolean</em>, <em>undefined</em>, <em>symbol</em>, and <em>null</em>.</p></details><hr><h3 id="以下结果正确的是-3-分）"><a href="#以下结果正确的是-3-分）" class="headerlink" title="以下结果正确的是 (3 分）"></a>以下结果正确的是 (3 分）</h3><p>A、 <code>console.log(parseInt(&#39;ui&#39;)); //NaN</code><br>B、 <code>console.log(0.1 + 0.2); //0.3</code><br>C、 <code>console.log(19.9 * 100); //1990</code><br>D、 <code>console.log(19.9 * 10); //199</code></p><details><summary><b > 详解 </b></summary><blockquote><p>AD</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'ui'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19.9</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1989.9999999999998</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19.9</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//199</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="display-none-与-visibility-hidden-的区别-5-分）"><a href="#display-none-与-visibility-hidden-的区别-5-分）" class="headerlink" title="display: none 与 visibility: hidden 的区别 (5 分）"></a><code>display: none</code> 与 <code>visibility: hidden</code> 的区别 (5 分）</h3><details><summary><b > 详解 </b></summary><p>在使用 CSS 隐藏一些元素时，我们经常用到 <code>display: none</code> 和 <code>visibility: hidden</code>. 两者差别如下：</p><ul><li><p>是否占据空间：<code>display: none</code>, 该元素不占据任何空间，在文档渲染时，该元素如同不存在 （但依然存在文档对象模型树中）. <code>visibility: hidden</code>, 该元素空间依旧存在。即 (<code>display: none</code>) 不会在渲染树中出现，(<code>visibility: hidden</code>) 会。</p></li><li><p>是否渲染：<code>display: none</code>, 会触发 reflow（回流）, 进行渲染。<code>visibility: hidden</code>, 只会触发 repaint（重绘）, 因为没有发现位置变化，不进行渲染。</p></li><li><p>是否是继承属性：<code>display: none</code>,display 不是继承属性，元素及其子元素都会消失。<code>visibility: hidden</code>,visibility 是继承属性，若子元素使用了 <code>visibility: hidden</code>, 则不继承，这个子孙元素又会显现出来。</p></li><li><p>读屏器是否读取：读屏器不会读取 <code>display: none</code> 的元素内容，而会读取 <code>visibility: hidden</code> 的元素内容。</p></li></ul></details><hr><h3 id="TCP-IP-协议族按层次分为哪-4-层？HTTP-中的三次握手属于哪一层-10-分）"><a href="#TCP-IP-协议族按层次分为哪-4-层？HTTP-中的三次握手属于哪一层-10-分）" class="headerlink" title="TCP/IP 协议族按层次分为哪 4 层？HTTP 中的三次握手属于哪一层 (10 分）"></a>TCP/IP 协议族按层次分为哪 4 层？HTTP 中的三次握手属于哪一层 (10 分）</h3><details><summary><b > 详解 </b></summary><p><img src="/images/tcp_ip.png"></p></details><hr><h3 id="Search-Insert-Position-15-分）"><a href="#Search-Insert-Position-15-分）" class="headerlink" title="Search Insert Position (15 分）"></a>Search Insert Position (15 分）</h3><p><a href="https://leetcode.com/problems/search-insert-position/">给定一个排序数组 （假设数组中无重复元素） 和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 4</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b > 详解 </b></summary><ul><li>解决方案：二分查找</li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift">Right shift (&gt;&gt;)</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; target * @return &#123;number&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    ans <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token comment">// 这里需要注意，循环条件</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里需要注意，计算 mid (> 和>> 都可以）</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>      <span class="token comment">// 这里需要注意，移动右指针</span>      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 这里需要注意，移动左指针</span>      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决方案一</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; target * @return &#123;number&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> r<span class="token punctuation">;</span>  <span class="token comment">// 判断在数组中是否找到目标</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在数组中找到目标，返回其索引</span>    r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在数组中没有找到目标，遍历数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果数组中找到大于目标值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 返回数组其索引</span>        r <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">// 中止当前循环</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 返回数组的长度</span>        r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化方案二</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; target * @return &#123;number&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> r<span class="token punctuation">;</span>  <span class="token comment">// 判断在数组中是否找到目标</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在数组中找到目标，返回其索引</span>    r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历数组 nums 判断是否有数组元素 element 大于 target</span>    <span class="token keyword">const</span> <span class="token function-variable function">isLargeNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> element <span class="token operator">></span> target<span class="token punctuation">;</span>    <span class="token comment">// 如果有，则返回该 element 在数组 nums 的索引</span>    <span class="token comment">// 否则返回 数组 nums 的元素个数</span>    r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isLargeNumber<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> nums<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isLargeNumber<span class="token punctuation">)</span> <span class="token operator">:</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>精简方案二</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; target * @return &#123;number&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">isLargeNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> element <span class="token operator">></span> target<span class="token punctuation">;</span>  <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token operator">?</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token operator">:</span> nums<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isLargeNumber<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token operator">?</span> nums<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isLargeNumber<span class="token punctuation">)</span>    <span class="token operator">:</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="px-em-rem"><a href="#px-em-rem" class="headerlink" title="px em rem"></a>px em rem</h3><details><summary><b>解析</b></summary><p>px 像素 1px = 1/96th of 1in</p><p>em 在 <code>font-size</code> 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</p><p>rem 根元素的字体大小</p></details><hr><h3 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP HTTPS"></a>HTTP HTTPS</h3><p>HTTP 协议传输的数据都是未加密的，也就是明文的，因此使用 HTTP 协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了 SSL（Secure Sockets Layer）协议用于对 HTTP 协议传输的数据进行加密，从而就诞生了 HTTPS. 简单来说，HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全。</p><p>HTTPS 和 HTTP 的区别主要如下：</p><ul><li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li><li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。</li><li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 SSL 握手需要的 9 个包，所以一共是 12 个包。</li><li>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li></ul><h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management">内存管理</a></p></blockquote><hr><h3 id="根据指定的字段和规则排序对象数组"><a href="#根据指定的字段和规则排序对象数组" class="headerlink" title="根据指定的字段和规则排序对象数组"></a>根据指定的字段和规则排序对象数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> area<span class="token operator">:</span> <span class="token string">'深圳'</span><span class="token punctuation">,</span> percentage<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> staytime<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> area<span class="token operator">:</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> percentage<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span> staytime<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> area<span class="token operator">:</span> <span class="token string">'广州'</span><span class="token punctuation">,</span> percentage<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> staytime<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> area<span class="token operator">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span> percentage<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> staytime<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * 根据指定的字段和规则排序数据 * data Array 要排序的数据 * field string 排序依据的字段 * rule string 排序规则 DESC / ASC * throw *       data is invalid : 要排序的数据不存在或类型不正确 *       field is invalid : 排序参考字段不存在 * return Array 排序后的数据 */</span><span class="token keyword">const</span> mySort <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> field<span class="token punctuation">,</span> rule <span class="token operator">=</span> <span class="token string">'ASC'</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'data is invalid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>field <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">'field is invalid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> a<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rule <span class="token operator">==</span> <span class="token string">'ASC'</span> <span class="token operator">?</span> v <span class="token operator">:</span> <span class="token operator">-</span>v<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mySort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort() - JavaScript | MDN</a> :  The <code>sort()</code> method sorts the elements of an array <em><a href="https://en.wikipedia.org/wiki/In-place_algorithm">in place</a></em> and returns the array.</p></blockquote><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf() - JavaScript | MDN</a> :  The <code>indexOf()</code> method returns the first index at which a given element can be found in the array, or -1 if it is not present.</p></blockquote></details><hr><h3 id="块级元素和行内元素都有哪些-？"><a href="#块级元素和行内元素都有哪些-？" class="headerlink" title="块级元素和行内元素都有哪些 ？"></a>块级元素和行内元素都有哪些 ？</h3><details><summary><b>解析</b></summary><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements">Inline elements</a> : An inline element does not start on a new line and only takes up as much width as necessary.<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code"><code>&lt;code&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"><code>&lt;img&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"><code>&lt;span&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label"><code>&lt;label&gt;</code></a>,<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"><code>&lt;select&gt;</code></a></p></blockquote><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements">Block-level elements</a> : A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><code>&lt;article&gt;</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside"><code>&lt;aside&gt;</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer"><code>&lt;footer&gt;</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header"><code>&lt;header&gt;</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><code>&lt;section&gt;</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a></p></blockquote></details><hr><hr><h3 id="data-属性的作用是什么-？"><a href="#data-属性的作用是什么-？" class="headerlink" title="data-* 属性的作用是什么 ？"></a><code>data-*</code> 属性的作用是什么 ？</h3><details><summary><b>解析</b></summary><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*">data-</a></p></blockquote></details><hr><h3 id="三列式布局，左右各-200px-中间自适应宽度-？"><a href="#三列式布局，左右各-200px-中间自适应宽度-？" class="headerlink" title="三列式布局，左右各 200px, 中间自适应宽度 ？"></a>三列式布局，左右各 200px, 中间自适应宽度 ？</h3><details><summary><b>解析</b></summary><p>传说中的 “双飞翼布局？圣杯布局？尿壶布局？”, 还有中间要先加载没提么？</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="请用-JavaScript-实现以下逻辑："><a href="#请用-JavaScript-实现以下逻辑：" class="headerlink" title="请用 JavaScript 实现以下逻辑："></a>请用 JavaScript 实现以下逻辑：</h3><p>现有一数组 a, 长度未知</p><ol><li>如果 a 的长度为零，则为其添加一个新项，值为 1.</li><li>如果 a 的长度不为零，则按照 先进先出 的原则，移除一项。</li><li>评分标准：代码越精简越好，&lt;=30 字符 10 分，&lt;=35 字符 6 分，&gt;35 字符 3 分 （空格不算）</li></ol><details><summary><b>解析</b></summary><p>参考解析</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token string">'shift'</span> <span class="token operator">:</span> <span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//30</span>a<span class="token punctuation">.</span>length <span class="token operator">?</span> a<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//29 （最佳方案）</span><span class="token comment">// 纯数组方法的使用，只要知道数组这几个方法的用法就能看明白。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>当 <code>a.length</code> 不为零，执行 <code>a.shift()</code> 移除数组中第一个元素为并返回该元素 否则执行 <code>a.push(1)</code> 将元素  <code>1</code>  添加到数组的末尾，并返回数组的新长度。</p></blockquote></details><hr><h3 id="用-JavaScript-实现以下功能："><a href="#用-JavaScript-实现以下功能：" class="headerlink" title="用 JavaScript 实现以下功能："></a>用 JavaScript 实现以下功能：</h3><p>不使用 loop 生成一个长度 n=100, 每一项的数据类型为 Number, 值等于其下标的数组 array.</p><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES6 （推荐，最佳方案）</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><hr><h3 id="列举-3-种提取网页所有链接的方法，并说明其优劣"><a href="#列举-3-种提取网页所有链接的方法，并说明其优劣" class="headerlink" title="列举 3 种提取网页所有链接的方法，并说明其优劣"></a>列举 3 种提取网页所有链接的方法，并说明其优劣</h3><details><summary><b>解析</b></summary><p>方法一：通过 DOM 分析</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aElements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aElements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>aElements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aElements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：通过正则匹配</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> docHtml <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>docHtml<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a[^>]*href=(['"])([^>'"]+)\1[^>]*></span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token comment">/* ______ */</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="如何查找一篇英文文章中出现频率最高的单词？"><a href="#如何查找一篇英文文章中出现频率最高的单词？" class="headerlink" title="如何查找一篇英文文章中出现频率最高的单词？"></a>如何查找一篇英文文章中出现频率最高的单词？</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findMostWord</span><span class="token punctuation">(</span><span class="token parameter">article</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 合法性判断</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>article<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 参数处理</span>  article <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> wordList <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    maxNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    maxWord <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  article <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">+</span> wordList<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'  '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历判断单词出现次数</span>  wordList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 加入 visited</span>      visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        num <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> maxNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxNum <span class="token operator">=</span> num<span class="token punctuation">;</span>        maxWord <span class="token operator">=</span> item<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> maxWord <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> maxNum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="innerHTML-outerHTML-innerText"><a href="#innerHTML-outerHTML-innerText" class="headerlink" title="innerHTML outerHTML innerText"></a><code>innerHTML</code> <code>outerHTML</code> <code>innerText</code></h3><details><summary><b>解析</b></summary><p>对于这样一个 HTML 元素：<code>&lt;div&gt;content&lt;br/&gt;&lt;/div&gt;</code>.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">innerHTML</a>: 内部 HTML,<code>content&lt;br/&gt;</code>;<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML">outerHTML</a>: 外部 HTML,<code>&lt;div&gt;content&lt;br/&gt;&lt;/div&gt;</code>;<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText">innerText</a>: 内部文本，<code>content</code> ;<br><del><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText">outerText</a></del>: 内部文本，<code>content</code> ;</p></details><h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><details><summary><b>解析</b></summary></details><hr><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><details><summary><b>解析</b></summary></details><hr><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>A、B 两人分别在两座岛上，B 生病了，A 有 B 所需要的药。<br>C 有一首小船和一个可以上锁的箱子。C 愿意在 A 和 B 之间运东西，但是东西只能放在箱子里。只要箱子没被上锁，C 都会偷走箱子里的东西，不管箱子里有什么。<br>如果 A 和 B 各有一把锁和只能开自己那把锁的钥匙，A 应该如何把药品安全地递交给 B？</p><details><summary><b>解析</b></summary><p>A 把药放进箱子，用自己的锁把箱子锁上。B 拿到箱子后，再在箱子上加一把自己的锁。箱子运回 A 后，A 取下自己的锁。箱子再运到 B 手中时，B 取下自己的锁，获得药物。</p></details><hr><h3 id="二叉树的节点的对称序列-后序序列-前序序列是"><a href="#二叉树的节点的对称序列-后序序列-前序序列是" class="headerlink" title="二叉树的节点的对称序列 后序序列 前序序列是"></a>二叉树的节点的对称序列 后序序列 前序序列是</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/BinaryTree.png"></p><details><summary><b>解析</b></summary><p>遍历二叉树：L、D、R 分别表示遍历左子树、访问根结点和遍历右子树，则先（根）序遍历二叉树的顺序是 DLR，中（根）序遍历二叉树的顺序是 LDR，后（根）序遍历二叉树的顺序是 LRD</p><ul><li>后序遍历最后一个结点一定是根结点</li><li>先序遍历第一个结点一定是根结点</li></ul><p>在这个二叉树中，<br>前序遍历的结果：M，G，D，B，A，C，F，E，J，H，I，K，L，S，P，O，N，Q，R，W，U，T，V，X，Z，Y<br>后序遍历的结果：A，C，B，E，F，D，I，H，L，K，J，G，N，O，R，Q，P，T，V，U，Y，Z，X，W，S，M<br>中序遍历的结果：A，B，C，D，E，F，G，H，I，J，K，L，M，N，O，P，Q，R，S，T，U，V，W，X，Y，Z</p></details><hr><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> tamp <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  val <span class="token operator">=</span> val <span class="token operator">*</span> val <span class="token operator">+</span> tamp<span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>val2<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  fun<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token keyword">return</span> fun<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  fn<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> fn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取函数需要的参数长度</span>  <span class="token keyword">let</span> length <span class="token operator">=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  args <span class="token operator">=</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> subArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 拼接得到现有的所有参数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      subArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断参数的长度是否已经满足函数所需参数的长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subArgs<span class="token punctuation">.</span>length <span class="token operator">>=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果满足，执行函数</span>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> subArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果不满足，递归返回科里化的函数，等待参数的传入</span>      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> subArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ES6 实现</span><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> fn<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> args<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://github.com/mqyqingfeng/Blog/issues/42">《JavaScript 专题之函数柯里化》</a></p></blockquote></details><hr><h3 id="HTTP-response-status-codes-404-502-403-500-504-304-200"><a href="#HTTP-response-status-codes-404-502-403-500-504-304-200" class="headerlink" title="HTTP response status codes 404 502 403 500 504 304 200"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">HTTP response status codes</a> 404 502 403 500 504 304 200</h3><details><summary><b>解析</b></summary><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200">200 OK</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301">301 Moved Permanently</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302">302 Found</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304">304 Not Modified</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403">403 Forbidden</a><br><a href="https://developer.mozilla.org/en-US/docs/Glossary/404">404 Not Found</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500">500 Internal Server Error</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502">502 Bad Gateway</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504">504 Gateway Timeout</a></p></details><hr><h3 id="找出一个字符串出现次数最多的字符"><a href="#找出一个字符串出现次数最多的字符" class="headerlink" title="找出一个字符串出现次数最多的字符"></a>找出一个字符串出现次数最多的字符</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hajjfhlhhff'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">max</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 先定义一个空对象，稍后使用。</span>  <span class="token keyword">let</span> maxChar <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment">// 要输出的字符</span>  <span class="token keyword">let</span> maxN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 字符数量</span>  <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> maxN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxN <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      maxChar <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 字符串出现次数最多的字符：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>maxChar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> , 出现次数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>maxN<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">max</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="如何将浮点数点左边的数每三位添加一个逗号-12000000-11-转化为-12-000-000-11"><a href="#如何将浮点数点左边的数每三位添加一个逗号-12000000-11-转化为-12-000-000-11" class="headerlink" title="如何将浮点数点左边的数每三位添加一个逗号 (12000000.11 转化为 12,000,000.11)"></a>如何将浮点数点左边的数每三位添加一个逗号 (12000000.11 转化为 12,000,000.11)</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法一</span><span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> number <span class="token operator">&amp;&amp;</span> number<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\d&#123;3&#125;)+\.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 方法二</span><span class="token keyword">function</span> <span class="token function">format1</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Intl<span class="token punctuation">.</span><span class="token function">NumberFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 方法三</span><span class="token keyword">function</span> <span class="token function">format2</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> number<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">'en'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="DOM-操作——怎样添加、移除、移动、复制、创建和查找节点？"><a href="#DOM-操作——怎样添加、移除、移动、复制、创建和查找节点？" class="headerlink" title="DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？"></a>DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？</h3><details><summary><b>解析</b></summary><ul><li><p>创建新节点</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment">Document.createDocumentFragment()</a> 创建一个新的空白的文档片段</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement">Document.createElement()</a> 创建一个具体的元素</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode">Document.createTextNode()</a> 创建一个新的文本节点。</li></ul></li><li><p>添加、移除、替换、插入</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild">Node.appendChild()</a> 将一个节点添加到指定父节点的子节点列表末尾。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode">Node.cloneNode()</a>  返回调用该方法的节点的一个副本</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore">Node.insertBefore()</a> 在参考节点之前插入一个拥有指定父节点的子节点。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild">Node.removeChild()</a> 从 DOM 中删除一个子节点。返回删除的节点。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild">Node.replaceChild()</a> 用指定的节点替换当前节点的一个子节点，并返回被替换掉的节点。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append">ParentNode.append()</a> 在父节点的最后一个子节点之后插入一组 Node 对象或 DOMString 对象。被插入的 DOMString 对象等价为 Text 节点。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend">ParentNode.prepend()</a> 在父节点的第一个子节点之前插入一系列 Node 对象或者 DOMString 对象。DOMString 会被当作 Text 节点对待 （也就是说插入的不是 HTML 代码）.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before">ChildNode.before()</a> 在 ChildNode 这个节点的父节点中插入一些列的 Node 或者 DOMString 对象，位置就是在 ChildNode 节点的前面</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after">ChildNode.after()</a> 在其父节点的子节点列表中插入一些 Node 或 DOMString 对象。插入位置为该节点之后</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove">ChildNode.remove()</a> 把从它所属的 DOM 树中删除</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith">ChildNode.replaceWith()</a> 用一套 Node 对象或者 DOMString 对象，替换了该节点父节点下的子节点</li></ul></li><li><p>查找</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName">getElementsByTagName()</a> 通过标签名称</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName">getElementsByClassName()</a> 通过指定类名</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName">getElementsByName</a>() 通过元素的 Name 属性的值</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById">getElementById()</a> 通过元素 Id, 唯一性</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll">querySelectorAll()</a> 返回与指定的选择器组匹配的文档中的元素列表</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">querySelector()</a> 返回文档中与指定选择器或选择器组匹配的第一个 HTMLElement 对象</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">create a <span class="token keyword">new</span> <span class="token class-name">div</span> element<span class="token comment">// and give it some content</span><span class="token keyword">var</span> newDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hi there and greetings!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newDiv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newContent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//add the text node to the newly created div.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性操作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction#DOM_interfaces">《DOM 概述》</a><br><a href="https://harttle.land/2015/10/01/JavaScript-dom-api.html">《原生 JavaScript 的 DOM 操作汇总》</a><br><a href="https://microzz.com/2017/04/06/jsdom/">《原生 JavaScript 中 DOM 节点相关 API 合集》</a></p></details><hr><h3 id="《如何更有效的获取文件扩展名》"><a href="#《如何更有效的获取文件扩展名》" class="headerlink" title="《如何更有效的获取文件扩展名》"></a><a href="https://segmentfault.com/a/1190000004993946">《如何更有效的获取文件扩展名》</a></h3><details><summary><b>解析</b></summary><p><code>String.lastIndexOf()</code> 方法返回指定值 （本例中的’.’) 在调用该方法的字符串中最后出现的位置，如果没找到则返回 <code>-1</code>.</p><p>对于 <code>&#39;filename&#39;</code> 和 <code>&#39;.hiddenfile&#39;</code> ,<code>lastIndexOf</code> 的返回值分别为 <code>0</code> 和 <code>-1</code> 无符号右移操作符 (<code>&gt;&gt;&gt;</code>) 将 <code>-1</code> 转换为 <code>4294967295</code> , 将 <code>-2</code> 转换为 <code>4294967294</code> , 这个方法可以保证边缘情况时文件名不变。</p><p><code>String.prototype.slice()</code> 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为 <code>&quot;&quot;</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> filename<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><hr><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//(1) 匹配 16 进制颜色值</span><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">//(2) 匹配日期，如 yyyy-mm-dd 格式</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//(3) 匹配 qq 号</span><span class="token keyword">var</span> qq <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]&#123;4,10&#125;$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">//(4) 手机号码正则</span><span class="token keyword">var</span> phone <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[34578]\d&#123;9&#125;$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">//(5) 用户名正则</span><span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z\$][a-zA-Z0-9_\$]&#123;4,16&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//(6)Email 正则</span><span class="token keyword">var</span> email <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//(7) 身份证号 (18 位） 正则</span><span class="token keyword">var</span> cP <span class="token operator">=</span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//(8)URL 正则</span><span class="token keyword">var</span> urlP <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">// (9)ipv4 地址正则</span><span class="token keyword">var</span> ipP <span class="token operator">=</span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">// (10)// 车牌号正则</span><span class="token keyword">var</span> cPattern <span class="token operator">=</span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9 挂学警港澳]&#123;1&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">// (11) 强密码 （必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间）:</span><span class="token keyword">var</span> pwd <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?=.\d)(?=.[a-z])(?=.[A-Z]).&#123;8,10&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://caibaojian.com/form-regexp.html">《前端表单验证常用的 15 个 JavaScript 正则表达式》</a><br><a href="https://www.jianshu.com/p/1cb5229325a7">《JavaScript 常用正则汇总》</a></p></details><hr><h3 id="正则表达式-‘23-22’-gt-‘2322’"><a href="#正则表达式-‘23-22’-gt-‘2322’" class="headerlink" title="正则表达式 ‘23 22’ =&gt; ‘2322’"></a>正则表达式 ‘23 22’ =&gt; ‘2322’</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'23 22'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以字母开头，包含字母、数字、下划线的正则表达式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正则表达式以 4 位数字开头，结尾可能带有一个大写字母</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;4&#125;[A-Z]?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">'4444A'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">'4444'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">'A4444'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式</a></p></blockquote></details><hr><h3 id="JSONP-的工作原理是什么？"><a href="#JSONP-的工作原理是什么？" class="headerlink" title="JSONP 的工作原理是什么？"></a><a href="https://www.zhihu.com/question/19966531">JSONP 的工作原理是什么？</a></h3><details><summary><b>解析</b></summary><p>首先是利用 script 标签的 src 属性来实现跨域。</p><p>通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。</p><p>由于使用 script 标签的 src 属性，因此只支持 get 方法</p><p>很简单，就是利用 <code>&lt;script&gt;</code> 标签没有跨域限制的 “漏洞”（历史遗迹啊）来达到与第三方通讯的目的。当需要通讯时，本站脚本创建一个 <code>&lt;script&gt;</code> 元素，地址指向第三方的 API 网址，形如：<br><code>&lt;script src=&quot;http://www.example.net/api?param1=1&amp;param2=2&quot;&gt;&lt;/script&gt;</code><br>并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。<br>第三方产生的响应为 json 数据的包装（故称之为 jsonp，即 json padding），形如：<br>callback({“name”:”hax”,”gender”:”Male”})<br>这样浏览器会调用 callback 函数，并传递解析后 json 对象作为参数。本站脚本可在 callback 函数里处理所传入的数据。</p><p>补充：“历史遗迹” 的意思就是，如果在今天重新设计的话，也许就不会允许这样简单的跨域了嘿，比如可能像 XHR 一样按照 CORS 规范要求服务器发送特定的 http 头。</p></details>]]></content>
      
      
      <categories>
          
          <category> Front-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 JS 代码中消灭 for 循环</title>
      <link href="rethinking-javascript-death-of-the-for-loop/"/>
      <url>rethinking-javascript-death-of-the-for-loop/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.jb51.net/article/144662.htm">如何在 JS 代码中消灭 for 循环</a></p></blockquote><p>补充一: 看来很多人没看完文章就评论了. 我在文章末尾说了, 是不写 for 循环, 不是不用 for 循环. 简单陈述不写 for 循环的理由: for 循环易读性差, 而且鼓励写指令式代码和执行副作用. 更多参考 <a href="https://hackernoon.com/rethinking-javascript-death-of-the-for-loop-c431564c84a8">这篇文章</a></p><p>1、for 循环性能最好. 回应: 微观层面的代码性能优化, 不是你应该关注的. 我在文章中演示了, 对百万级数据的操作, reduce 只比 for 循环慢 8 ms, 可忽略不计. 如果你要操作更大的数据, 要考虑下换语言了.</p><ul><li><a href="https://www.youtube.com/watch?v=PhUb7y9WZGs">Fast code is NOT important</a></li><li><a href="https://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/">The Sad Tragedy of Micro-Optimization Theater</a></li><li><a href="https://www.simplethread.com/ditching-the-micro-optimization-fetish/">Ditching the Micro-Optimization Fetish</a></li></ul><p>2、不用 for 循环不能 break. 回应: 用递归. 我在 <a href="https://www.jb51.net/article/144663.htm">这篇文章</a> 里有解释怎样解决递归爆栈.</p><p>3、框架都用 for 循环！回应: 框架考虑的场景和你不一样. React 和 Vue 还用 class 来创建对象呢. 你该跟着学吗？事实上你应该用工厂函数.<a href="https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15">Class vs Factory function: exploring the way forward</a></p><hr><ul><li>用好 filter,map, 和其它 ES6 新增的高阶遍历函数</li><li>理解和熟练使用 reduce</li><li>用递归代替循环 (可以 break！)</li><li>使用高阶函数遍历数组时可能遇到的陷阱</li><li>死磕到底, Transduce！</li><li>for 循环和 <code>for/of</code> 循环的区别</li><li>放弃倔强, 实在需要用 for 循环了</li></ul><blockquote><p>Edit: 在我入职上一家公司的第一天, 看到代码库里面一堆的 for 循环, 内心有些崩溃, 于是做了一次技术分享, 展示怎样在代码中避免 for 循环. 这篇文章是那次分享的总结. 至于为什么我提倡避免 for 循环, 参考我写的这篇文章. 本文并不完美, 其中递归的部分其实不应该在生产环境中用的. 重点其实应该是怎样用 reduce 和其它高阶函数, 至于这些高阶函数底层用的是 while 循环还是 for 循环, 都不重要, 我们可以不在乎这些细节. 在实际写代码的时候, 只要被允许, 我都会尽量使用 Ramda. 如果对 Ramda 感兴趣, 可参考我的另一篇文章优雅代码指北 – 巧用 Ramda</p></blockquote><h2 id="一-用好-filter-map-和其它-ES6-新增的高阶遍历函数"><a href="#一-用好-filter-map-和其它-ES6-新增的高阶遍历函数" class="headerlink" title="一, 用好 filter,map, 和其它 ES6 新增的高阶遍历函数"></a>一, 用好 filter,map, 和其它 ES6 新增的高阶遍历函数</h2><h3 id="问题一-将数组中的虚值去除"><a href="#问题一-将数组中的虚值去除" class="headerlink" title="问题一: 将数组中的虚值去除"></a>问题一: 将数组中的虚值去除</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">虚值</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">compact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compact</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><hr><h3 id="问题二-将数组中的-VIP-用户余额加-10"><a href="#问题二-将数组中的-VIP-用户余额加-10" class="headerlink" title="问题二: 将数组中的 VIP 用户余额加 10"></a>问题二: 将数组中的 VIP 用户余额加 10</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> username<span class="token operator">:</span> <span class="token string">'Kelly'</span><span class="token punctuation">,</span> isVIP<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> balance<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> username<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> isVIP<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> balance<span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> username<span class="token operator">:</span> <span class="token string">'Stephanie'</span><span class="token punctuation">,</span> isVIP<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> balance<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> username: <span class="token string">'Kelly'</span>, isVIP: true, balance: <span class="token number">30</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> username: <span class="token string">'Tom'</span>, isVIP: false, balance: <span class="token number">19</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> username: <span class="token string">'Stephanie'</span>, isVIP: true, balance: <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">newUers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">users</span><span class="token punctuation">)</span> <span class="token operator">=></span>  users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>isVIP <span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>user<span class="token punctuation">,</span> balance<span class="token operator">:</span> user<span class="token punctuation">.</span>balance <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span> <span class="token operator">:</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newUers</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>能用原生解决的最好</p></blockquote><p>补充: <del>经网友提醒, 这个解析存在浅拷贝的问题</del>(已修复). 操作引用型数据确实是一个麻烦的问题. 下面提供两个方案:</p><ol><li>用 Ramda</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token constant">R</span> <span class="token keyword">from</span> <span class="token string">'ramda'</span><span class="token punctuation">;</span><span class="token keyword">const</span> add10IfVIP <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">ifElse</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">propEq</span><span class="token punctuation">(</span><span class="token string">'isVIP'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">evolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> balance<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> updateUsers <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>add10IfVIP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateUsers</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>用 Immer</li></ol><p>如果你习惯写 mutable 的代码, 可以试下 Immer, 用 mutable 的风格写 immutable 的代码.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> produce <span class="token keyword">from</span> <span class="token string">'immer'</span><span class="token punctuation">;</span><span class="token keyword">const</span> updatedUsers <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">nextState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  nextState<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>isVIP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      user<span class="token punctuation">.</span>balance <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="问题三-判断字符串中是否含有元音字母"><a href="#问题三-判断字符串中是否含有元音字母" class="headerlink" title="问题三: 判断字符串中是否含有元音字母"></a>问题三: 判断字符串中是否含有元音字母</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> randomStr <span class="token operator">=</span> <span class="token string">'hdjrwqpi'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">Array.prototype.some()</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isVowel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">containsVowel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isVowel<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">containsVowel</span><span class="token punctuation">(</span>randomStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test">RegExp.prototype.test()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search">String.prototype.search()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match">String.prototype.match()</a></p></blockquote><details><summary><b>正则表达式方案</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">'a|e|o|i|u'</span><span class="token punctuation">,</span> <span class="token string">'gi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|e|o|i|u</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span><span class="token comment">// regex1 与 regex2 等价</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>randomStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>randomStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">~</span>randomStr<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">~</span>randomStr<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>randomStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>randomStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="问题四-判断用户是否全部是成年人"><a href="#问题四-判断用户是否全部是成年人" class="headerlink" title="问题四: 判断用户是否全部是成年人"></a>问题四: 判断用户是否全部是成年人</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">Array.prototype.every()</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isAdult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><h3 id="问题五-找出上面用户中的第一个未成年人"><a href="#问题五-找出上面用户中的第一个未成年人" class="headerlink" title="问题五: 找出上面用户中的第一个未成年人"></a>问题五: 找出上面用户中的第一个未成年人</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span> name: <span class="token string">'Lily'</span>, age: <span class="token number">17</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find()</a></p></blockquote><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">findTeen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">users</span><span class="token punctuation">)</span> <span class="token operator">=></span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTeen</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><h3 id="问题七-生成由随机整数组成的数组-数组长度和元素大小可自定义"><a href="#问题七-生成由随机整数组成的数组-数组长度和元素大小可自定义" class="headerlink" title="问题七: 生成由随机整数组成的数组, 数组长度和元素大小可自定义"></a>问题七: 生成由随机整数组成的数组, 数组长度和元素大小可自定义</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">genNumArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">length<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token operator">=></span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> length <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">genNumArr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details><h2 id="二-理解和熟练使用-reduce"><a href="#二-理解和熟练使用-reduce" class="headerlink" title="二, 理解和熟练使用 reduce"></a>二, 理解和熟练使用 reduce</h2><h3 id="问题八-不借助原生高阶函数-定义-reduce"><a href="#问题八-不借助原生高阶函数-定义-reduce" class="headerlink" title="问题八: 不借助原生高阶函数, 定义 reduce"></a>问题八: 不借助原生高阶函数, 定义 reduce</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reduce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> acc<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="问题九-将多层数组转换成一层数组"><a href="#问题九-将多层数组转换成一层数组" class="headerlink" title="问题九: 将多层数组转换成一层数组"></a>问题九: 将多层数组转换成一层数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> nestedArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>nestedArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// to enable deep level flatten use recursion with reduce and concat</span><span class="token keyword">const</span> <span class="token function-variable function">flatDeep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> d <span class="token operator">></span> <span class="token number">0</span>    <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatDeep</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">:</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatDeep</span><span class="token punctuation">(</span>nestedArr<span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, 2, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">reduce + concat + isArray + recursivity</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nestedArr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">Array.prototype.flat()</a></p></blockquote></details><hr><h3 id="问题十-将下面数组转成对象-key-value-对应里层数组的两个值"><a href="#问题十-将下面数组转成对象-key-value-对应里层数组的两个值" class="headerlink" title="问题十: 将下面数组转成对象, key/value 对应里层数组的两个值"></a>问题十: 将下面数组转成对象, key/value 对应里层数组的两个值</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> objLikeArr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'single'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span> name: <span class="token string">'Jim'</span>, age: <span class="token number">18</span>, single: <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fromPairs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pairs</span><span class="token punctuation">)</span> <span class="token operator">=></span> pairs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> pair</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fromPairs</span><span class="token punctuation">(</span>objLikeArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><h3 id="问题十一-取出对象中的深层属性"><a href="#问题十一-取出对象中的深层属性" class="headerlink" title="问题十一: 取出对象中的深层属性"></a>问题十一: 取出对象中的深层属性</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> deepAttr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token punctuation">&#123;</span> b<span class="token operator">:</span> <span class="token punctuation">&#123;</span> c<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pluckDeep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> attr</span><span class="token punctuation">)</span> <span class="token operator">=></span> val<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pluckDeep</span><span class="token punctuation">(</span><span class="token string">'a.b.c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deepAttr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></details><h3 id="问题十二-将用户中的男性和女性分别放到不同的数组里"><a href="#问题十二-将用户中的男性和女性分别放到不同的数组里" class="headerlink" title="问题十二: 将用户中的男性和女性分别放到不同的数组里:"></a>问题十二: 将用户中的男性和女性分别放到不同的数组里:</h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Adam'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">'male'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Helen'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">'female'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Amy'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">'female'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Anthony'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">'male'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name: <span class="token string">'Adam'</span>, age: <span class="token number">30</span>, sex: <span class="token string">'male'</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> name: <span class="token string">'Anthony'</span>, age: <span class="token number">23</span>, sex: <span class="token string">'male'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name: <span class="token string">'Helen'</span>, age: <span class="token number">27</span>, sex: <span class="token string">'female'</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> name: <span class="token string">'Amy'</span>, age: <span class="token number">25</span>, sex: <span class="token string">'female'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> isValid</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>pass<span class="token punctuation">,</span> fail<span class="token punctuation">]</span><span class="token punctuation">,</span> elem</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">...</span>pass<span class="token punctuation">,</span> elem<span class="token punctuation">]</span><span class="token punctuation">,</span> fail<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>pass<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>fail<span class="token punctuation">,</span> elem<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isMale</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=></span> person<span class="token punctuation">.</span>sex <span class="token operator">===</span> <span class="token string">'male'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>maleUser<span class="token punctuation">,</span> femaleUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> isMale<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maleUser<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>femaleUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="问题十三-reduce-的计算过程-在范畴论里面叫-catamorphism-即一种连接的变形-和它相反的变形叫-anamorphism-现在我们定义一个和-reduce-计算过程相反的函数-unfold-注-reduce-在-Haskell-里面叫-fold-对应-unfold"><a href="#问题十三-reduce-的计算过程-在范畴论里面叫-catamorphism-即一种连接的变形-和它相反的变形叫-anamorphism-现在我们定义一个和-reduce-计算过程相反的函数-unfold-注-reduce-在-Haskell-里面叫-fold-对应-unfold" class="headerlink" title="问题十三: reduce 的计算过程, 在范畴论里面叫 catamorphism, 即一种连接的变形. 和它相反的变形叫 anamorphism. 现在我们定义一个和 reduce 计算过程相反的函数 unfold(注: reduce 在 Haskell 里面叫 fold, 对应 unfold)"></a>问题十三: reduce 的计算过程, 在范畴论里面叫 catamorphism, 即一种连接的变形. 和它相反的变形叫 anamorphism. 现在我们定义一个和 reduce 计算过程相反的函数 unfold(注: reduce 在 Haskell 里面叫 fold, 对应 unfold)</h3><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">unfold</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> seed</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">go</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> seed<span class="token punctuation">,</span> acc</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res <span class="token operator">?</span> <span class="token function">go</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> acc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">go</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> seed<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个 unfold 函数, 定义一个 Python 里面的 range 函数.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">range</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unfold</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">&lt;</span> max <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> step<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></details><h2 id="三-用递归代替循环-可以-break！"><a href="#三-用递归代替循环-可以-break！" class="headerlink" title="三, 用递归代替循环 (可以 break！)"></a>三, 用递归代替循环 (可以 break！)</h2><blockquote><p>Edit: 虽然递归爆栈的问题可以用代码解决, 但递归确实性能赶不上循环. 这部分内容纯粹当做递归函数案例了. 如何解决递归爆栈, 可以参考我的另一篇文章 <a href="https://www.jb51.net/article/144663.htm">不懂递归？读完这篇保证你懂</a></p></blockquote><h3 id="问题十四-将两个数组每个元素一一对应相加-注意-第二个数组比第一个多出两个-不要把第二个数组遍历完"><a href="#问题十四-将两个数组每个元素一一对应相加-注意-第二个数组比第一个多出两个-不要把第二个数组遍历完" class="headerlink" title="问题十四: 将两个数组每个元素一一对应相加. 注意, 第二个数组比第一个多出两个, 不要把第二个数组遍历完."></a>问题十四: 将两个数组每个元素一一对应相加. 注意, 第二个数组比第一个多出两个, 不要把第二个数组遍历完.</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">zipWith</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">xs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">ys</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> ys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>xHead<span class="token punctuation">,</span> <span class="token operator">...</span>xTail<span class="token punctuation">]</span> <span class="token operator">=</span> xs<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>yHead<span class="token punctuation">,</span> <span class="token operator">...</span>yTail<span class="token punctuation">]</span> <span class="token operator">=</span> ys<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>xHead<span class="token punctuation">)</span><span class="token punctuation">(</span>yHead<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">zipWith</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span>xTail<span class="token punctuation">)</span><span class="token punctuation">(</span>yTail<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token function">zipWith</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="问题十五-将-Stark-家族成员提取出来-注意-目标数据在数组前面-使用-filter-方法遍历整个数组是浪费"><a href="#问题十五-将-Stark-家族成员提取出来-注意-目标数据在数组前面-使用-filter-方法遍历整个数组是浪费" class="headerlink" title="问题十五: 将 Stark 家族成员提取出来. 注意, 目标数据在数组前面, 使用 filter 方法遍历整个数组是浪费."></a>问题十五: 将 Stark 家族成员提取出来. 注意, 目标数据在数组前面, 使用 filter 方法遍历整个数组是浪费.</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> houses <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'Eddard Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Catelyn Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Rickard Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Brandon Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Rob Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Sansa Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Arya Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Bran Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Rickon Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Lyanna Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Tywin Lannister'</span><span class="token punctuation">,</span>  <span class="token string">'Cersei Lannister'</span><span class="token punctuation">,</span>  <span class="token string">'Jaime Lannister'</span><span class="token punctuation">,</span>  <span class="token string">'Tyrion Lannister'</span><span class="token punctuation">,</span>  <span class="token string">'Joffrey Baratheon'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">takeWhile</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isStark</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'stark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>isStark<span class="token punctuation">)</span><span class="token punctuation">(</span>houses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="问题十六-找出数组中的奇数-然后取出前-4-个"><a href="#问题十六-找出数组中的奇数-然后取出前-4-个" class="headerlink" title="问题十六: 找出数组中的奇数, 然后取出前 4 个"></a>问题十六: 找出数组中的奇数, 然后取出前 4 个</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">takeFirst</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">limit<span class="token punctuation">,</span> f<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">takeFirst</span><span class="token punctuation">(</span>limit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">takeFirst</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> f<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isOdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">takeFirst</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> isOdd<span class="token punctuation">,</span> numList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><hr><h2 id="四-使用高阶函数遍历数组时可能遇到的陷阱"><a href="#四-使用高阶函数遍历数组时可能遇到的陷阱" class="headerlink" title="四, 使用高阶函数遍历数组时可能遇到的陷阱"></a>四, 使用高阶函数遍历数组时可能遇到的陷阱</h2><h3 id="问题十七-从长度为-100-万的随机整数组成的数组中取出偶数-再把所有数字乘以-3"><a href="#问题十七-从长度为-100-万的随机整数组成的数组中取出偶数-再把所有数字乘以-3" class="headerlink" title="问题十七: 从长度为 100 万的随机整数组成的数组中取出偶数, 再把所有数字乘以 3"></a>问题十七: 从长度为 100 万的随机整数组成的数组中取出偶数, 再把所有数字乘以 3</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用我们刚刚定义的辅助函数来生成符合要求的数组</span><span class="token keyword">const</span> bigArr <span class="token operator">=</span> <span class="token function">genNumArr</span><span class="token punctuation">(</span><span class="token number">1e6</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> num <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>bigArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>triple<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意, 上面的解决方案将数组遍历了两次, 无疑是浪费. 如果写 for 循环, 只用遍历一次:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span>bigArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">triple</span><span class="token punctuation">(</span>bigArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我的电脑上测试, 先 <code>filter</code> 再 <code>map</code> 的方法耗时 105.024 ms, 而采用 <code>for</code> 循环的方法耗时仅 25.598 ms！那是否说明遇到此类情况必须用 <code>for</code> 循环解决呢? No！</p></details><h2 id="五-死磕到底-Transduce！"><a href="#五-死磕到底-Transduce！" class="headerlink" title="五, 死磕到底, Transduce！"></a>五, 死磕到底, Transduce！</h2><p>我们先用 <code>reduce</code> 来定义 <code>filter</code> 和 <code>map</code>, 至于为什么这样做等下再解释.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新定义的 <code>filter</code> 和 <code>map</code> 有共有的逻辑. 我们把这部分共有的逻辑叫做 <code>reducer</code>. 有了共有的逻辑后, 我们可以进一步地抽象, 把 <code>reducer</code> 抽离出来, 然后传入 <code>filter</code> 和 <code>map</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">reducer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reducer</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> acc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">reducer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reducer</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在 <code>filter</code> 和 <code>map</code> 的函数 signature 一样, 我们就可以进行函数组合 (function composition) 了.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pushReducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>bigNum<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>triple<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">(</span>pushReducer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这样嵌套写法易读性太差, 很容易出错. 我们可以写一个工具函数来辅助函数组合:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span>    fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fx<span class="token punctuation">,</span> fy</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fy</span><span class="token punctuation">(</span>fx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以优雅地组合函数了:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">bigNum<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map</span><span class="token punctuation">(</span>triple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pushReducer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经过测试 (用  <code>console.time()/console.timeEnd()</code>), 上面的写法耗时 33.898 ms, 仅比 for 循环慢 8 ms. 为了代码的易维护性和易读性, 这点性能上的微小牺牲, 我认为是可以接受的.</p><p>这种写法叫 transduce. 有很多工具库提供了 transducer 函数. 比如  transducers-js. 除了用 transducer 来遍历数组, 还能用它来遍历对象和其它数据集. 功能相当强大.</p><h2 id="六-for-循环和-for-of-循环的区别"><a href="#六-for-循环和-for-of-循环的区别" class="headerlink" title="六, for 循环和 for/of 循环的区别"></a>六, for 循环和 <code>for/of</code> 循环的区别</h2><p><code>for/of</code> 循环是在 ES6 引入 Iterator 后, 为了遍历 Iterable 数据类型才产生的. EcmaScript 的 Iterable 数据类型有数组, 字符串, Set 和 Map.<code>for/of</code> 循环属于重型的操作 (具体细节我也没了解过), 如果用 的数组或者对象, 而它们之间的区别非常让人疑惑. Airbnb 的 ESLint 规则, 在代码中使用 <code>for/of</code> 来遍历数组是会被禁止的.</p><p>那么,<code>for/of</code> 循环应该在哪些场景使用呢？目前我发现的合理使用场景是遍历自定义的 Iterable. 来看这个题目:</p><h3 id="问题十八-将-Stark-家族成员名字遍历-每次遍历暂停一秒-然后将当前遍历的名字打印来-遍历完后回到第一个元素再重新开始-无限循环"><a href="#问题十八-将-Stark-家族成员名字遍历-每次遍历暂停一秒-然后将当前遍历的名字打印来-遍历完后回到第一个元素再重新开始-无限循环" class="headerlink" title="问题十八: 将 Stark 家族成员名字遍历, 每次遍历暂停一秒, 然后将当前遍历的名字打印来, 遍历完后回到第一个元素再重新开始, 无限循环."></a>问题十八: 将 Stark 家族成员名字遍历, 每次遍历暂停一秒, 然后将当前遍历的名字打印来, 遍历完后回到第一个元素再重新开始, 无限循环.</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> starks <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'Eddard Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Catelyn Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Rickard Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Brandon Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Rob Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Sansa Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Arya Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Bran Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Rickon Stark'</span><span class="token punctuation">,</span>  <span class="token string">'Lyanna Stark'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解析</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">repeatedArr</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span> <span class="token operator">%</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> infiniteNameList <span class="token operator">=</span> <span class="token function">repeatedArr</span><span class="token punctuation">(</span>starks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">of</span> infiniteNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h2 id="七-放弃倔强-实在需要用-for-循环了"><a href="#七-放弃倔强-实在需要用-for-循环了" class="headerlink" title="七, 放弃倔强, 实在需要用 for 循环了"></a>七, 放弃倔强, 实在需要用 for 循环了</h2><p>前面讲到的问题基本覆盖了大部分需要使用 for 循环的场景. 那是否我们可以保证永远不用 for 循环呢？其实不是. 我讲了这么多, 其实是在鼓励大家不要写 for 循环, 而不是不用 for 循环. 我们常用的数组原型链上的 map,filter 等高阶函数, 底层其实是用 for 循环实现的. 在需要写一些底层代码的时候, 还是需要写 for 循环的. 来看这个例子:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意, 这个例子只是为了好玩. 生产环境中不要直接修改 JS 内置数据类型的原型链. 原因是 V8 引擎有一个原型链快速推测机制, 修改原型链会破坏这个机制, 造成性能问题.</p><hr><h2 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h2><p>认为是 “强行函数式” 的诸位, 实际上你们是被 for 毒害了. 这才是数据转换本该有的样子.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码的意思是 “生成一个对应原数组中每个对象 id 属性的新数组”<br>这是声明式的代码.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的意思:”新建一个数组 n , 和整数 i , 当 i 小于 arr.length 的时候, 把原数组第 n 个元素的 id 属性 添加到 n 中”.<br>这是命令式的代码.</p><p>两者可读性的差异是高下立判的.</p><p>说可读性不好的, 只不过是对 <code>map</code>/<code>foreach</code>/<code>reduce</code> 感到陌生罢了. 但这些并不是什么多么复杂的东西, 只是对数组通用操作的抽象而已. 即便 “底层都是 for”,”也没有提升性能”, 但这也是很有必要的. 将过程抽象成函数, 将过程式的代码变成函数之间的组合, 对于程序而言会有着更好的可读性 / 可维护性 / 易于测试并行等等.</p><p>计算机越是底层的操作, 越是命令式的. 而人类的思维却不适合繁杂的操作步骤. 程序员的工作重点便是将过程逐步进行各种形式的抽象, 我们所用的程序语言 / 范式 / 设计模式 / 各种业务函数, 无不如此. 很多人不理解这一点, 认为写代码无非是照着计算机的方式一步一步来罢了, 于是这些人成了 “面条代码” 的制造者.</p><hr><h3 id="Using-map-reduce-to-reformat-objects-in-an-array"><a href="#Using-map-reduce-to-reformat-objects-in-an-array" class="headerlink" title="Using map/reduce to reformat objects in an array"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#using_map_to_reformat_objects_in_an_array">Using map/reduce to reformat objects in an array</a></h3><ul><li>原始数据</li></ul><p>The following code takes an array of objects and creates a new array containing the newly reformatted objects.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> kvArray <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> key: <span class="token number">1</span>, value: <span class="token number">10</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> key: <span class="token number">2</span>, value: <span class="token number">20</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> key: <span class="token number">3</span>, value: <span class="token number">30</span> <span class="token punctuation">&#125;</span>,<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解决方案一</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">productsById</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rObj<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> Obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Obj<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>    rObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rObj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">productsById</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">,</span> <span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">productsById</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rObj<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rObj<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rObj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">productsById</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">,</span> <span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '1': 10, '2': 20, '3': 30 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><details><summary><b>解决方案二</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">productsById</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    rObj<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rObj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">productsById</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">,</span> <span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">productsById</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>rObj<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rObj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">productsById</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">,</span> <span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="合并具有-1-个相同属性名称的对象数组"><a href="#合并具有-1-个相同属性名称的对象数组" class="headerlink" title="合并具有 1 个相同属性名称的对象数组"></a><a href="https://www.debugcn.com/article/29278364.html">合并具有 1 个相同属性名称的对象数组</a></h3><blockquote><p>将对象数组或某一属性值相同的对象的另一属性值进行累加</p></blockquote><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> pid<span class="token operator">:</span> <span class="token string">'water'</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> pid<span class="token operator">:</span> <span class="token string">'oil'</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> pid<span class="token operator">:</span> <span class="token string">'water'</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> pid<span class="token operator">:</span> <span class="token string">'oil'</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> pid<span class="token operator">:</span> <span class="token string">'water'</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> pid<span class="token operator">:</span> <span class="token string">'oil'</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> pid: <span class="token string">'water'</span>, num: <span class="token number">1110</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> pid: <span class="token string">'oil'</span>, num: <span class="token number">2220</span> <span class="token punctuation">&#125;</span>,<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解决方案一</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> resultObj <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    result<span class="token punctuation">[</span>item<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>item<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>resultObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pid</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> pid<span class="token punctuation">,</span> num<span class="token operator">:</span> resultObj<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><details><summary><b>解决方案二</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">count1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> v<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">count2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> res<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> v<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">count3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> v<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count3</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">count4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> res<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span>v<span class="token punctuation">.</span>pid<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> v<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count4</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">逻辑或 (||)</a> 两个竖线符号 ( || ) 表示”或”运算，参与运算的任意一个参数为 true, 返回的结果就为 true, 否则返回 false. 或”运算串联多个值，将返回第一个真值，如果所有的值都是假值，就返回该链的最后一个值。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号表达式</a> 对它的每个操作数求值（从左到右）, 并返回最后一个操作数的值。</p></blockquote><details><summary><b>解决方案三</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span>  Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>    data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> pid<span class="token punctuation">,</span> num <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> acc<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> pid<span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="如何将具有相同属性的对象合并到单个数组中？"><a href="#如何将具有相同属性的对象合并到单个数组中？" class="headerlink" title="如何将具有相同属性的对象合并到单个数组中？"></a><a href="https://www.debugcn.com/article/42568432.html">如何将具有相同属性的对象合并到单个数组中？</a></h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'a'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'b'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'a'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'b'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'a'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id: <span class="token string">'1'</span>, name: <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> id: <span class="token string">'2'</span>, name: <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> id: <span class="token string">'3'</span>, name: <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>,<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解决方案一</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> anotherArray <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> existing <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>existing<span class="token punctuation">)</span> existing<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> acc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><details><summary><b>解决方案二</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">anotherArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span>  Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>    data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> acc<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">anotherArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="如何在两个对象数组中合并具有相同键的属性？"><a href="#如何在两个对象数组中合并具有相同键的属性？" class="headerlink" title="如何在两个对象数组中合并具有相同键的属性？"></a><a href="https://www.debugcn.com/article/47300175.html">如何在两个对象数组中合并具有相同键的属性？</a></h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'David'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">29</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Lucia'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">41</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'003'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  address <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token string">'Barcelona'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token string">'Paris'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'003'</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token string">'Tokyo'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token string">'Barcelona'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> id: <span class="token string">'001'</span>, name: <span class="token string">'David'</span>, age: <span class="token number">29</span>, city: <span class="token string">'Barcelona'</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> id: <span class="token string">'002'</span>, name: <span class="token string">'Lucia'</span>, age: <span class="token number">41</span>, city: <span class="token string">'Paris'</span> <span class="token punctuation">&#125;</span>,  <span class="token punctuation">&#123;</span> id: <span class="token string">'003'</span>, name: <span class="token string">'Steve'</span>, age: <span class="token number">18</span>, city: <span class="token string">'Tokyo'</span> <span class="token punctuation">&#125;</span>,<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解决方案</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">people<span class="token punctuation">,</span> address</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span> o<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> o<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="Grouping-objects-by-a-property"><a href="#Grouping-objects-by-a-property" class="headerlink" title="Grouping objects by a property"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#grouping_objects_by_a_property">Grouping objects by a property</a></h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jane'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>  <span class="token string">'20'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> name: <span class="token string">'Max'</span>, age: <span class="token number">20</span> <span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span> name: <span class="token string">'Jane'</span>, age: <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span>,  <span class="token string">'21'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> name: <span class="token string">'Alice'</span>, age: <span class="token number">21</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details><summary><b>解决方案一</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">groupBy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">objectArray<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> objectArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      acc<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    acc<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> acc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">groupBy</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><details><summary><b>解决方案二</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">groupBy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span>  key <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">groupBy</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="Counting-instances-of-values-in-an-object"><a href="#Counting-instances-of-values-in-an-object" class="headerlink" title="Counting instances of values in an object"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#counting_instances_of_values_in_an_object">Counting instances of values in an object</a></h3><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tiff'</span><span class="token punctuation">,</span> <span class="token string">'Bruce'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span> <span class="token string">'Alice'</span><span class="token builtin class-name">:</span> <span class="token number">2</span>, <span class="token string">'Bob'</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">'Tiff'</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">'Bruce'</span><span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><details><summary><b>解决方案</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">countedNames</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">allNames<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> allNames <span class="token operator">?</span> allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">:</span> <span class="token punctuation">(</span>allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allNames<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countedNames</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h3 id="Convert-an-array-to-an-object"><a href="#Convert-an-array-to-an-object" class="headerlink" title="Convert an array to an object"></a>Convert an array to an object</h3><p>We can use <code>.reduce()</code> to convert an array to a POJO. This can be handy if you need to do lookups of some sort. For example, imagine if we had a list of people:</p><blockquote><p>我们可以使用 <code>.reduce()</code> 将数组转换为 POJO.如果您需要进行某种形式的查找,这将很方便.例如,假设我们有一个人员列表:</p></blockquote><ul><li>原始数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> peopleArr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    username<span class="token operator">:</span> <span class="token string">'glestrade'</span><span class="token punctuation">,</span>    displayname<span class="token operator">:</span> <span class="token string">'Inspector Lestrade'</span><span class="token punctuation">,</span>    email<span class="token operator">:</span> <span class="token string">'glestrade@met.police.uk'</span><span class="token punctuation">,</span>    authHash<span class="token operator">:</span> <span class="token string">'bdbf9920f42242defd9a7f76451f4f1d'</span><span class="token punctuation">,</span>    lastSeen<span class="token operator">:</span> <span class="token string">'2019-05-13T11:07:22+00:00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    username<span class="token operator">:</span> <span class="token string">'mholmes'</span><span class="token punctuation">,</span>    displayname<span class="token operator">:</span> <span class="token string">'Mycroft Holmes'</span><span class="token punctuation">,</span>    email<span class="token operator">:</span> <span class="token string">'mholmes@gov.uk'</span><span class="token punctuation">,</span>    authHash<span class="token operator">:</span> <span class="token string">'b4d04ad5c4c6483cfea030ff4e7c70bc'</span><span class="token punctuation">,</span>    lastSeen<span class="token operator">:</span> <span class="token string">'2019-05-10T11:21:36+00:00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    username<span class="token operator">:</span> <span class="token string">'iadler'</span><span class="token punctuation">,</span>    displayname<span class="token operator">:</span> <span class="token string">'Irene Adler'</span><span class="token punctuation">,</span>    email<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    authHash<span class="token operator">:</span> <span class="token string">'319d55944f13760af0a07bf24bd1de28'</span><span class="token punctuation">,</span>    lastSeen<span class="token operator">:</span> <span class="token string">'2019-05-17T11:12:12+00:00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>期待结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>  glestrade: <span class="token punctuation">&#123;</span>    username: <span class="token string">'glestrade'</span>,    displayname: <span class="token string">'Inspector Lestrade'</span>,    email: <span class="token string">'glestrade@met.police.uk'</span>,    authHash: <span class="token string">'bdbf9920f42242defd9a7f76451f4f1d'</span>,    lastSeen: <span class="token string">'2019-05-13T11:07:22+00:00'</span>  <span class="token punctuation">&#125;</span>,  mholmes: <span class="token punctuation">&#123;</span>    username: <span class="token string">'mholmes'</span>,    displayname: <span class="token string">'Mycroft Holmes'</span>,    email: <span class="token string">'mholmes@gov.uk'</span>,    authHash: <span class="token string">'b4d04ad5c4c6483cfea030ff4e7c70bc'</span>,    lastSeen: <span class="token string">'2019-05-10T11:21:36+00:00'</span>  <span class="token punctuation">&#125;</span>,  iadler: <span class="token punctuation">&#123;</span>    username: <span class="token string">'iadler'</span>,    displayname: <span class="token string">'Irene Adler'</span>,    email: null,    authHash: <span class="token string">'319d55944f13760af0a07bf24bd1de28'</span>,    lastSeen: <span class="token string">'2019-05-17T11:12:12+00:00'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In some circumstances, it might be convenient to look up user details by their username. To make that easier, we can convert our array to an object. It might look something like this:</p><blockquote><p>在某些情况下,通过用户名查找用户详细信息可能会很方便.为了简化操作,我们可以将数组转换为对象.它可能看起来像这样:</p></blockquote><details><summary><b>解决方案</b></summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">keyByUsernameReducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>acc<span class="token punctuation">,</span> <span class="token punctuation">[</span>person<span class="token punctuation">.</span>username<span class="token punctuation">]</span><span class="token operator">:</span> person <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> peopleObj <span class="token operator">=</span> peopleArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>keyByUsernameReducer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>peopleObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></details>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> for </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts 实战</title>
      <link href="echarts/"/>
      <url>echarts/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%8E%9F%E5%A7%8B.png" alt="原始"></p><h2 id="根据数据量的大小-动态调整-ECharts-的宽度"><a href="#根据数据量的大小-动态调整-ECharts-的宽度" class="headerlink" title="根据数据量的大小, 动态调整 ECharts 的宽度"></a>根据数据量的大小, 动态调整 ECharts 的宽度</h2><p>实现构想: 根据数据的 size 调整 div 的大小, 然后调用 ECharts 对象的 resize 方法重置柱状图的宽度:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 图的大小动态自动调整</span><span class="token keyword">let</span> compactWidth <span class="token operator">=</span> data<span class="token punctuation">.</span>size <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">let</span> width <span class="token operator">=</span> compactWidth <span class="token operator">&lt;</span> <span class="token number">1860</span> <span class="token operator">?</span> <span class="token number">1860</span> <span class="token operator">:</span> compactWidth<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>chartStyle<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>VueVisit<span class="token punctuation">.</span>visitChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>碰到的问题: 柱状图并没有动态的改变了宽度, 而是下次再调整一次才生效.</p><p>原因分析: 应该是 ECharts 渲染或者读取 div 的宽度什么的延迟了.</p><p>解决方法: 延时 100 毫秒再调用 ECharts 对象的 resize 方法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 图的大小动态自动调整</span><span class="token keyword">let</span> compactWidth <span class="token operator">=</span> data<span class="token punctuation">.</span>size <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">let</span> width <span class="token operator">=</span> compactWidth <span class="token operator">&lt;</span> <span class="token number">1860</span> <span class="token operator">?</span> <span class="token number">1860</span> <span class="token operator">:</span> compactWidth<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>chartStyle<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  VueVisit<span class="token punctuation">.</span>visitChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 需要一个延迟, resize() 才能生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>ECharts 多个图表大小随屏幕的大小改变自适应, ECharts 多图表自适应窗口大小, ECharts 随页面大小变化而变化;</p><p>今天在做云监控(Dashboard)时发现 ECharts 同一页面存在多个图表的时候, 只有一个生效</p><p>当页面只有一个图表的时候直接用 <code>window.onresize = myChart.resize</code> 就可以了</p><p>resize 用来改变图表尺寸, 在容器大小发生改变时需要手动调用.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定图表的配置项和数据</span><span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">'ECharts 入门示例'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'衬衫'</span><span class="token punctuation">,</span> <span class="token string">'羊毛衫'</span><span class="token punctuation">,</span> <span class="token string">'雪纺衫'</span><span class="token punctuation">,</span> <span class="token string">'裤子'</span><span class="token punctuation">,</span> <span class="token string">'高跟鞋'</span><span class="token punctuation">,</span> <span class="token string">'袜子'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'销量'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用刚指定的配置项和数据显示图表.</span>myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> myChart<span class="token punctuation">.</span>resize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果一个页面有多个图表的时候就需要用到 <code>addEventListener</code> 了, 不然页面上只有一个图表会根据浏览器的变化而自适应.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myChartA <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mainA'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myChartB <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mainB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定图表的配置项和数据</span><span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">'ECharts 入门示例'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'衬衫'</span><span class="token punctuation">,</span> <span class="token string">'羊毛衫'</span><span class="token punctuation">,</span> <span class="token string">'雪纺衫'</span><span class="token punctuation">,</span> <span class="token string">'裤子'</span><span class="token punctuation">,</span> <span class="token string">'高跟鞋'</span><span class="token punctuation">,</span> <span class="token string">'袜子'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'销量'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用刚指定的配置项和数据显示图表.</span>myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>myChartA<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>myChartB<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myChartA<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myChartB<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myChartA<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myChartB<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resize_event">Window: resize event</a></p><p><a href="https://codepen.io/zhuangyin/pen/BaLvaGr">Window: resize event demo</a></p></blockquote><hr><h2 id="🔥-ECharts-坐标轴刻度标签的显示间隔"><a href="#🔥-ECharts-坐标轴刻度标签的显示间隔" class="headerlink" title="🔥 ECharts 坐标轴刻度标签的显示间隔"></a>🔥 ECharts 坐标轴刻度标签的显示间隔</h2><p><img src="/images/EChartsX%E8%BD%B4%E5%9D%90%E6%A0%87%E9%97%B4%E9%9A%94%E6%98%BE%E7%A4%BA.png" alt="X 坐标轴刻度标签间隔1显示"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xAxis<span class="token punctuation">.</span>axisLabel<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://echarts.apache.org/zh/option.html#xAxis.axisLabel.interval">坐标轴刻度标签的显示间隔</a>，在类目轴中有效。</p><p>默认会采用标签不重叠的策略间隔显示标签。</p><p>可以设置成 0 强制显示所有标签。</p><p>如果设置为 <code>1</code>，表示『隔一个标签显示一个标签』，如果值为 <code>2</code>，表示隔两个标签显示一个标签，以此类推。</p><p>可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">index<span class="token operator">:</span> number<span class="token punctuation">,</span> value<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> boolean<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数是类目的 index，第二个值是类目名称，如果跳过则返回 <code>false</code>。</p><h2 id="ECharts-是否显示提示框组件"><a href="#ECharts-是否显示提示框组件" class="headerlink" title="ECharts 是否显示提示框组件"></a>ECharts 是否显示提示框组件</h2><p><a href="https://echarts.apache.org/zh/option.html#tooltip.show">tooltip.show</a>。<br>是否显示提示框组件。</p><p>包括提示框浮层和 <a href="https://echarts.apache.org/zh/option.html#tooltip.axisPointer">axisPointer</a>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">tooltip<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ECharts-如何禁用-legend-的点击事件"><a href="#ECharts-如何禁用-legend-的点击事件" class="headerlink" title="ECharts 如何禁用 legend 的点击事件"></a>ECharts 如何禁用 legend 的点击事件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">legend<span class="token punctuation">.</span>selectedMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://echarts.apache.org/zh/option.html#legend.selectedMode">图例选择的模式，控制是否可以通过点击图例改变系列的显示状态</a>。默认开启图例选择，可以设成 <code>false</code> 关闭。</p><p>除此之外也可以设成 <code>&#39;single&#39;</code> 或者 <code>&#39;multiple&#39;</code> 使用单选或者多选模式。</p><h2 id="ECharts-刻度标签的内容格式器不显示"><a href="#ECharts-刻度标签的内容格式器不显示" class="headerlink" title="ECharts 刻度标签的内容格式器不显示"></a>ECharts 刻度标签的内容格式器不显示</h2><p><img src="/images/ECharts%E5%88%BB%E5%BA%A6%E6%A0%87%E7%AD%BE%E7%9A%84%E5%86%85%E5%AE%B9%E6%A0%BC%E5%BC%8F%E5%99%A8%E4%B8%8D%E6%98%BE%E7%A4%BA.png" alt="ECharts刻度标签的内容格式器不显示"></p><p><a href="https://echarts.apache.org/zh/option.html#yAxis.axisLabel.formatter">yAxis.axisLabel.formatter</a> 刻度标签的内容格式器，支持字符串模板和回调函数两种形式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yAxis<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    axisLabel<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>formatter 后面跟方法时，y 轴的显示值由方法的返回值决定</p><h2 id="ECharts-线的颜色"><a href="#ECharts-线的颜色" class="headerlink" title="ECharts 线的颜色"></a>ECharts 线的颜色</h2><p><a href="https://echarts.apache.org/zh/option.html#series-line.lineStyle.color">线的颜色</a>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">series<span class="token operator">-</span>line<span class="token punctuation">.</span>lineStyle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ECharts-图形的颜色"><a href="#ECharts-图形的颜色" class="headerlink" title="ECharts 图形的颜色"></a>ECharts 图形的颜色</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">series<span class="token operator">-</span>line<span class="token punctuation">.</span>itemStyle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://echarts.apache.org/zh/option.html#series-line.itemStyle.color">图形的颜色</a>。 默认从全局调色盘 option.color 获取颜色</p><h2 id="ECharts-是否显示分隔线"><a href="#ECharts-是否显示分隔线" class="headerlink" title="ECharts 是否显示分隔线"></a>ECharts 是否显示分隔线</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xAxis<span class="token punctuation">.</span>splitLine<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>X 轴<a href="https://echarts.apache.org/zh/option.html#xAxis.splitLine.show">是否显示分隔线</a>。默认数值轴显示，类目轴不显示。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yAxis<span class="token punctuation">.</span>splitLine<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Y 轴<a href="https://echarts.apache.org/zh/option.html#yAxis.splitLine.show">是否显示分隔线</a>。默认数值轴显示，类目轴不显示。</p><h2 id="🔥-ECharts-X-轴不从-0-刻度开始"><a href="#🔥-ECharts-X-轴不从-0-刻度开始" class="headerlink" title="🔥 ECharts X 轴不从 0 刻度开始"></a>🔥 ECharts X 轴不从 0 刻度开始</h2><p><img src="/images/EChartsX%E8%BD%B4%E4%B8%8D%E4%BB%8E0%E5%88%BB%E5%BA%A6%E5%BC%80%E5%A7%8B.png" alt="xAxis 中的 boundaryGap 属性，设置为 false 代表是零刻度开始，设置为 true 代表离零刻度间隔一段距离"></p><blockquote><p>Y 轴同理</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xAxis<span class="token punctuation">.</span>boundaryGap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://echarts.apache.org/zh/option.html#xAxis.boundaryGap">xAxis.boundaryGap</a> 坐标轴两边留白策略，类目轴和非类目轴的设置和表现不一样。</p><p>类目轴中 <code>boundaryGap</code> 可以配置为 <code>true</code> 和 <code>false</code>。默认为 <code>true</code>，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</p><p>非类目轴，包括时间，数值，对数轴，<code>boundaryGap</code> 是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效。 示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">boundaryGap<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'20%'</span><span class="token punctuation">,</span> <span class="token string">'20%'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="🔥-Echarts-刻度标签旋转"><a href="#🔥-Echarts-刻度标签旋转" class="headerlink" title="🔥 Echarts 刻度标签旋转"></a>🔥 Echarts 刻度标签旋转</h2><p><img src="/images/ECharts%E5%88%BB%E5%BA%A6%E6%A0%87%E7%AD%BE%E6%97%8B%E8%BD%AC.png" alt="刻度标签旋转的角度45"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xAxis<span class="token punctuation">.</span>axisLabel<span class="token punctuation">.</span>rotate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://echarts.apache.org/zh/option.html#xAxis.axisLabel.rotate">刻度标签旋转的角度</a>，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。</p><p>旋转的角度从 -90 度到 90 度。</p>]]></content>
      
      
      <categories>
          
          <category> Front-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解经典排序</title>
      <link href="javascript-visualized-sort/"/>
      <url>javascript-visualized-sort/</url>
      
        <content type="html"><![CDATA[<h2 id="0-算法概述"><a href="#0-算法概述" class="headerlink" title="0 算法概述"></a>0 算法概述</h2><h3 id="0-1-算法分类"><a href="#0-1-算法分类" class="headerlink" title="0.1 算法分类"></a>0.1 算法分类</h3><p>十种常见排序算法可以分为两大类：</p><p><strong>非线性时间比较类排序</strong>: 通过比较来决定元素间的相对次序，由于其时间复杂度不能突破 O(nlog<sub>2</sub>n), 因此称为非线性时间比较类排序。</p><p><strong>线性时间非比较类排序</strong>: 不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。</p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB.svg" alt="排序算法分类"></p><h3 id="0-2-算法复杂度"><a href="#0-2-算法复杂度" class="headerlink" title="0.2 算法复杂度"></a>0.2 算法复杂度</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="算法复杂度"></p><h3 id="0-3-相关概念"><a href="#0-3-相关概念" class="headerlink" title="0.3 相关概念"></a>0.3 相关概念</h3><p><strong>稳定</strong>: 如果 a 原本在 b 前面，且 a=b, 排序之后 a 仍然在 b 的前面。</p><p><strong>不稳定</strong>: 如果 a 原本在 b 的前面，且 a=b, 排序之后 a 可能会出现在 b 的后面。</p><p><strong>时间复杂度</strong>: 对排序数据的总的操作次数。反映当 n 变化时，操作次数呈现什么规律。</p><p><strong>空间复杂度</strong>: 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模 n 的函数。</p><h2 id="1-冒泡排序-Bubble-Sort"><a href="#1-冒泡排序-Bubble-Sort" class="headerlink" title="1 冒泡排序 (Bubble Sort)"></a>1 冒泡排序 (Bubble Sort)</h2><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 “浮” 到数列的顶端。</p><h3 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h3><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤 1~3, 直到没有任何一对数字需要比较。</li></ul><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><p><img src="/images/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p><h3 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h3><p>Sorts an array of numbers, using the bubble sort algorithm.</p><ul><li>Declare a variable, <code>swapped</code>, that indicates if any values were swapped during the current iteration.</li><li>Use the spread operator (<code>...</code>) to clone the original array, <code>arr</code>.</li><li>Use a <code>for</code> loop to iterate over the elements of the cloned array, terminating before the last element.</li><li>Use a nested <code>for</code> loop to iterate over the segment of the array between <code>0</code> and <code>i</code>, swapping any adjacent out of order elements and setting <code>swapped</code> to <code>true</code>.</li><li>If <code>swapped</code> is <code>false</code> after an iteration, no more changes are needed, so the cloned array is returned.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">bubbleSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/bubble-sort">bubbleSort</a></p></blockquote><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">bubbleSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-算法分析"><a href="#1-4-算法分析" class="headerlink" title="1.4 算法分析"></a>1.4 算法分析</h3><ul><li>冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换它们。</li><li>内层循环减去 i 的原因：从内循环减去外循环中已跑过的轮数，就可以避免内循环中所有不必要的比较。</li></ul><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序</a></p></blockquote><h2 id="2-选择排序-Selection-Sort"><a href="#2-选择排序-Selection-Sort" class="headerlink" title="2 选择排序 (Selection Sort)"></a>2 选择排序 (Selection Sort)</h2><p>选择排序 (Selection-sort) 是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小 （大） 元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小 （大） 元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h3 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h3><p>n 个记录的直接选择排序可经过 n-1 趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为 <code>R[1..n]</code>, 有序区为空；</li><li>第 i 趟排序 (i=1,2,3…n-1) 开始时，当前有序区和无序区分别为 <code>R[1..i-1]</code> 和 <code>R[i..n]</code>. 该趟排序从当前无序区中 - 选出关键字最小的记录 <code>R[min]</code>, 将它与无序区的第 1 个记录 <code>R[i]</code> 交换，使 <code>R[1..i]</code> 和 <code>R[i+1..n]</code> 分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；</li><li>n-1 趟结束，数组有序化了。</li></ul><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="/images/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">selectionSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> minIndex<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 寻找最小的数</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 将最小数的索引保存</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sorts an array of numbers, using the selection sort algorithm.</p><ul><li>Use the spread operator (<code>...</code>) to clone the original array, <code>arr</code>.</li><li>Use a <code>for</code> loop to iterate over elements in the array.</li><li>Use <code>Array.prototype.slice()</code> and <code>Array.prototype.reduce()</code> to find the index of the minimum element in the subarray to the right of the current index and perform a swap, if necessary.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">selectionSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> min <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>acc<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> acc<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Examples</span><span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/selection-sort">selectionSort</a></p></blockquote><h3 id="2-4-算法分析"><a href="#2-4-算法分析" class="headerlink" title="2.4 算法分析"></a>2.4 算法分析</h3><p>表现最稳定的排序算法之一，因为无论什么数据进去都是 O(n<sup>2</sup>) 的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序</a></p></blockquote><h2 id="3-插入排序-Insertion-Sort"><a href="#3-插入排序-Insertion-Sort" class="headerlink" title="3 插入排序 (Insertion Sort)"></a>3 插入排序 (Insertion Sort)</h2><p>插入排序 (Insertion-Sort) 的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h3 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h3><p>一般来说，插入排序都采用 in-place 在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素 （已排序） 大于新元素，将该元素移到下一位置；</li><li>重复步骤 3, 直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤 2~5.</li></ul><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="/images/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><p>Sorts an array of numbers, using the insertion sort algorithm.</p><ul><li>Use <code>Array.prototype.reduce()</code> to iterate over all the elements in the given array.</li><li>If the <code>length</code> of the accumulator is <code>0</code>, add the current element to it.</li><li>Use <code>Array.prototype.some()</code> to iterate over the results in the accumulator until the correct position is found.</li><li>Use <code>Array.prototype.splice()</code> to insert the current element into the accumulator.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">insertionSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    acc<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        acc<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> acc<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        acc<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> acc<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/insertion-sort">insertionSort</a></p></blockquote><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">insertionSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> preIndex<span class="token punctuation">,</span> current<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      preIndex<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-算法分析"><a href="#3-4-算法分析" class="headerlink" title="3.4 算法分析"></a>3.4 算法分析</h3><p>插入排序在实现上，通常采用 in-place 排序 （即只需用到 O(1) 的额外空间的排序）, 因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><ul><li>假定第一项已经排序了。</li><li>后内层循环对当前元素前面有序表进行待插入位置查找，并进行移动。</li></ul><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a></p></blockquote><h2 id="4-希尔排序-Shell-Sort"><a href="#4-希尔排序-Shell-Sort" class="headerlink" title="4 希尔排序 (Shell Sort)"></a>4 希尔排序 (Shell Sort)</h2><p>1959 年 Shell 发明，第一个突破 O(n<sup>2</sup>) 的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫 <strong>缩小增量排序</strong>.</p><h3 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列 t1,t2,…,tk, 其中 ti&gt;tj,tk=1;</li><li>按增量序列个数 k, 对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti, 将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h3><p><img src="/images/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="希尔排序"></p><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> gap<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>  <span class="token keyword">var</span> temp<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment">Right shift assignment (&gt;&gt;=)</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift">Right shift (&gt;&gt;)</a></p></blockquote><h3 id="4-4-算法分析"><a href="#4-4-算法分析" class="headerlink" title="4.4 算法分析"></a>4.4 算法分析</h3><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法 （第 4 版）》的合著者 Robert Sedgewick 提出的。</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">希尔排序</a></p></blockquote><h2 id="5-归并排序-Merge-Sort"><a href="#5-归并排序-Merge-Sort" class="headerlink" title="5 归并排序 (Merge Sort)"></a>5 归并排序 (Merge Sort)</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法 (Divide and Conquer) 的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为 2 - 路归并。</p><h3 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h3><ul><li>把长度为 n 的输入序列分成两个长度为 n/2 的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><h3 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h3><p><img src="/images/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="归并排序"></p><h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><p>Sorts an array of numbers, using the merge sort algorithm.</p><ul><li>Use recursion.</li><li>If the <code>length</code> of the array is less than <code>2</code>, return the array.</li><li>Use <code>Math.floor()</code> to calculate the middle point of the array.</li><li>Use <code>Array.prototype.slice()</code> to slice the array in two and recursively call <code>mergeSort()</code> on the created subarrays.</li><li>Finally, use <code>Array.from()</code> and <code>Array.prototype.shift()</code> to combine the two sorted subarrays into one.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> length<span class="token operator">:</span> l<span class="token punctuation">.</span>length <span class="token operator">+</span> r<span class="token punctuation">.</span>length <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> r<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> l<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/merge-sort">mergeSort</a></p></blockquote><h3 id="5-4-算法分析"><a href="#5-4-算法分析" class="headerlink" title="5.4 算法分析"></a>5.4 算法分析</h3><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlog<sub>2</sub>n) 的时间复杂度。代价是需要额外的内存空间。</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序</a></p></blockquote><h2 id="6-快速排序-Quick-Sort"><a href="#6-快速排序-Quick-Sort" class="headerlink" title="6 快速排序 (Quick Sort)"></a>6 快速排序 (Quick Sort)</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h3 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h3><p>快速排序使用分治法来把一个串 (list) 分为两个子串 (sub-lists). 具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”(pivot);</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面 （相同的数可以到任一边）. 在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区 (partition) 操作；</li><li>递归地 (recursive) 把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><h3 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h3><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p><h3 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h3><ul><li>Use recursion.</li><li>Use the spread operator (<code>...</code>) to clone the original array, <code>arr</code>.</li><li>If the <code>length</code> of the array is less than <code>2</code>, return the cloned array.</li><li>Use <code>Math.floor()</code> to calculate the index of the pivot element.</li><li>Use <code>Array.prototype.reduce()</code> and <code>Array.prototype.push()</code> to split the array into two subarrays (elements smaller or equal to the <code>pivot</code> and elements greater than it), destructuring the result into two arrays.</li><li>Recursively call <code>quickSort()</code> on the created subarrays.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 💯</span><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token keyword">const</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> a<span class="token punctuation">[</span>pivotIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> pivot <span class="token operator">||</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> pivot <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> pivotIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        acc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> acc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/quick-sort">quickSort</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化版</span><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">const</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">&lt;</span> pivot <span class="token operator">?</span> acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">:</span> acc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> acc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pivot<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化版-2</span><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> pivotValue <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>x <span class="token operator">></span> pivotValue <span class="token operator">?</span> right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a.forEach((a,x) => (x > pivotValue ? right.push(x) : left.push(x)));</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pivotValue<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a></p></blockquote><h2 id="7-👜-堆排序-Heap-Sort"><a href="#7-👜-堆排序-Heap-Sort" class="headerlink" title="7 👜 堆排序 (Heap Sort)"></a>7 👜 堆排序 (Heap Sort)</h2><p>堆排序 (Heapsort) 是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于 （或者大于） 它的父节点。</p><h3 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h3><ul><li>将初始待排序关键字序列 (R1,R2….Rn) 构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素 R[1] 与最后一个元素 R[n] 交换，此时得到新的无序区 (R1,R2,……Rn-1) 和新的有序区 (Rn), 且满足 R[1,2…n-1]&lt;=R[n];</li><li>由于交换后新的堆顶 R[1] 可能违反堆的性质，因此需要对当前无序区 (R1,R2,……Rn-1) 调整为新堆，然后再次将 R[1] 与无序区最后一个元素交换，得到新的无序区 (R1,R2….Rn-2) 和新的有序区 (Rn-1,Rn). 不断重复此过程直到有序区的元素个数为 n-1, 则整个排序过程完成。</li></ul><h3 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h3><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="堆排序"></p><h3 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h3><p>Sorts an array of numbers, using the heapsort algorithm.</p><ul><li>Use recursion.</li><li>Use the spread operator (<code>...</code>) to clone the original array, <code>arr</code>.</li><li>Use closures to declare a variable, <code>l</code>, and a function <code>heapify</code>.</li><li>Use a <code>for</code> loop and <code>Math.floor()</code> in combination with <code>heapify</code> to create a max heap from the array.</li><li>Use a <code>for</code> loop to repeatedly narrow down the considered range, using <code>heapify</code> and swapping values as necessary in order to sort the cloned array.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">heapsort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> l <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">heapify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> l <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> l <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>a<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">heapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">heapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">heapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/heapsort">heapsort</a></p></blockquote><h2 id="8-👜-计数排序-Counting-Sort"><a href="#8-👜-计数排序-Counting-Sort" class="headerlink" title="8 👜 计数排序 (Counting Sort)"></a>8 👜 计数排序 (Counting Sort)</h2><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h3 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h3><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li><li>对所有的计数累加 （从 C 中的第一个元素开始，每一项和前一项相加）;</li><li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i) 项，每放一个元素就将 C(i) 减去 1.</li></ul><h3 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h3><p><img src="/images/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="计数排序"></p><h3 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> maxValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sortedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>arrLen <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bucketLen <span class="token operator">=</span> maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketLen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span>sortedIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>      bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-算法分析"><a href="#8-4-算法分析" class="headerlink" title="8.4 算法分析"></a>8.4 算法分析</h3><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0 到 k 之间的整数时，时间复杂度是 O(n+k), 空间复杂度也是 O(n+k), 其排序速度快于任何比较排序算法。当 k 不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><h2 id="9-👜-桶排序-Bucket-Sort"><a href="#9-👜-桶排序-Bucket-Sort" class="headerlink" title="9 👜 桶排序 (Bucket Sort)"></a>9 👜 桶排序 (Bucket Sort)</h2><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort) 的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序 （有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）.</p><h3 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h3><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><h3 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h3><p><img src="/images/%E6%A1%B6%E6%8E%92%E5%BA%8F.png" alt="桶排序"></p><h3 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h3><p>Sorts an array of numbers, using the bucket sort algorithm.</p><ul><li>Use <code>Math.min()</code>, <code>Math.max()</code> and the spread operator (<code>...</code>) to find the minimum and maximum values of the given array.</li><li>Use <code>Array.from()</code> and <code>Math.floor()</code> to create the appropriate number of <code>buckets</code> (empty arrays).</li><li>Use <code>Array.prototype.forEach()</code> to populate each bucket with the appropriate elements from the array.</li><li>Use <code>Array.prototype.reduce()</code>, the spread operator (<code>...</code>) and <code>Array.prototype.sort()</code> to sort each bucket and append it to the result.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">bucketSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> buckets <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> length<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    buckets<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> buckets<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>acc<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.30secondsofcode.org/js/s/bucket-sort">bucketSort</a></p></blockquote><h3 id="9-4-算法分析"><a href="#9-4-算法分析" class="headerlink" title="9.4 算法分析"></a>9.4 算法分析</h3><p>桶排序最好情况下使用线性时间 O(n), 桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为 O(n). 很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p><h2 id="10-👜-基数排序-Radix-Sort"><a href="#10-👜-基数排序-Radix-Sort" class="headerlink" title="10 👜 基数排序 (Radix Sort)"></a>10 👜 基数排序 (Radix Sort)</h2><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h3 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h3><ul><li>取得数组中的最大数，并取得位数；</li><li>arr 为原始数组，从最低位开始取每个位组成 radix 数组；</li><li>对 radix 进行计数排序 （利用计数排序适用于小范围数的特点）;</li></ul><h3 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h3><p><img src="/images/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="基数排序"></p><h3 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// LSD Radix Sort</span><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> maxDigit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> dev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counter<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">=</span> counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          arr<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-算法分析"><a href="#10-4-算法分析" class="headerlink" title="10.4 算法分析"></a>10.4 算法分析</h3><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要 O(n) 的时间复杂度，而且分配之后得到新的关键字序列又需要 O(n) 的时间复杂度。假如待排数据可以分为 d 个关键字，则基数排序的时间复杂度将是 O(d*2n) , 当然 d 要远远小于 n, 因此基本上还是线性级别的。</p><p>基数排序的空间复杂度为 O(n+k), 其中 k 为桶的数量。一般来说 n&gt;&gt;k, 因此额外空间需要大概 n 个左右。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html">十大经典排序算法（动图演示）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Front-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国的房地产市场</title>
      <link href="%E6%88%BF%E5%9C%B0%E4%BA%A7/"/>
      <url>%E6%88%BF%E5%9C%B0%E4%BA%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><ol start="0"><li>国家电网统计，连续6个月电表数为零的房子有6540万套，这些房子足够2亿人居住。该消息早在2010年就曾在网络上传播。虽是谣言 但中国房产空置率到底如何？ 政府也没有统计？ 敢不敢公布？</li><li>上世纪的海南房地产崩溃都没有让中共清醒 40年来的中共的房产政策制定者就是猪狗不如 官商勾结 以权谋私   年年调控房产 房产价格 几乎年年飙涨 全国房产税迟迟不能出台</li><li>人才和资源向省会和一线城市聚集就是脑残政府 人就不应该向大省会和一线城市聚集 科研院所等就应该迁往远郊和乡村<br>年轻人为什么不结婚？年轻人为什么不生孩？</li></ol></blockquote><p>关于房产调控的新闻想必大伙儿都听烦了。18 年过去了，中共每一年都有很多种行政手段来调控房价，最终结果如何——大伙儿都看到了——都成了笑话今天，俺借此机会，分享一些网文，帮大伙儿更深刻理解中国的房地产市场。</p><h2 id="先看一则寓言"><a href="#先看一则寓言" class="headerlink" title="先看一则寓言"></a>先看一则寓言</h2><blockquote><p><strong>小白兔买房</strong> （原作者不详）<br>兔子月薪 5 千，打算用 20 万建一个窝。狼不允许，说私自建就是违章建筑，只允许向王八买。<br>王八是搞房地产的，先用 20 万贿赂狼取得开发权，再用 50 万元向狼买这块地，投资 10 万元把兔子窝盖好，向兔子要价 200 万元。<br>兔子拿不出这么多钱于是向狐狸借 200 万元，连本带利 300 万，20 年还清，兔子全家二十年给狐狸打工。<br>狼、狐狸、王八都挣了钱，只有兔子亏，连孩子也不敢生了。<br>兔子越来越少，狼觉得这样下去大家没肉吃，于是调控。<br>狼装出一副非常重视兔窝价格的样子，开始研究部署遏制兔窝价格过快上涨的政策措施。<br>经过长期研究，狼最后认定：兔窝价格卖得太高的原因是因为有的兔子买了兔窝后自己不住而进行倒卖所致。<br>于是狼规定：兔子买了兔窝 5 年内卖了的，要向狼交纳营业税。<br>结果兔窝价格没降下来，狼却发了大财。<br>狼又对狐狸说：只借钱给首先交了更多钱的兔子，并增加高利贷的利息，多买兔子窝的不借，全交现钱。<br>这样狐狸在兔子的购窝过程中也发了财。<br>王八借着兔窝价格上涨的行情，以更高的价格向狼买地，并转嫁到兔窝价格上，再加价后卖给兔子。<br>看到狼辛苦地为自己操劳，兔子很感谢狼，但还是发现兔窝价格越来越贵。<br>狼说：这事挺复杂，还真不太好办，不过兔子们请放心，我们将继续调控，坚决要把价格降下来。今后打算向买卖兔窝的兔子征收 20%的个调税。…..<br>（看见的转发一下，因为有些兔子还不太明白）</p></blockquote><p>这篇寓言点出了中国楼市的某些要害，但还不是全部。要全面认识中国的楼市，光凭一则寓言是远远不够滴！下面，俺再转其它几篇网文，帮你进一步分析。</p><h2 id="房价算不算高，有没有泡沫？"><a href="#房价算不算高，有没有泡沫？" class="headerlink" title="房价算不算高，有没有泡沫？"></a>房价算不算高，有没有泡沫？</h2><p>对于这个问题，大部分人应该是没有争议的。但是，偶尔还是有个跳梁小丑发表一些奇葩的言论。比如贪污、受贿、挪用公款、滥用职权的国企领导任志强就说中国房价不算高，没有泡沫。他还拿出纽约曼哈顿区跟中国的一线城市对比。如此脑残言论不值得作为反驳。中国城市房地产存在巨大泡沫，住房销售大大放缓，以至于供应远大于需求。</p><p>城市特别是以北上广深等一线按城市为房地产行业(中介 加盖违建的房主)代表的就是吸血鬼 #深房理事件涉事人员被处罚# 不对公民及公司的第二套及以上的房产征全国统一房产税（没有免征额），类似深房理的不会断绝，只是是转向更隐蔽。坚决彻底落实住房租售同权，建立全国统一的住房登记系统，对全国的房产进行到人到户的统计，逾期没有合法认领的房产收归国有。地方政府财政必须要与土地脱钩，与房地产挂钩。为什么贪官污吏一旦事发，动辄十几套，几十套房产？为什么无耻至极的资本家官商勾结压榨剥削劳工，破坏我们赖以生存的环境，还能转移财产，移民海外？ 为什么如此多的既得利益者在内一心牟利，子女在外卖国贼？就是因为我们对资本，对权利的监督和制约形同虚设。就是因为官员及家庭成员财产公开和遗产税，房产税，资本离境税等至今毫无进展。</p><h2 id="谁是主要受益者？"><a href="#谁是主要受益者？" class="headerlink" title="谁是主要受益者？"></a>谁是主要受益者？</h2><p>很多人都以为，房价高涨之后，地产开发商赚取了主要利润。其实不然。　大伙儿可以看看《<a href="https://3g.163.com/news/article/89F0KQ5E00014JHT.html">谁瓜分了你的买房钱 @ 网易</a>》. 该文在最后总结说：许多人都在抱怨房价高，许多呼声都在喊降房价，许多调控的利刃都对准了开发商。然而，<strong>在你买房的钱中，政府却拿走了五成以上</strong>. 这篇文章还引用了国土资源部官方发布的《2011 中国国土资源公报》, 公报中说：去年 (2010 年）的地方政府土地出让金比 2009 年几乎翻了一倍。看完此文，你应该就明白，开发商当然也赚钱（没有哪个商业机构愿意做赔本生意的）, 但赚的只是小头，真正大头的利润是给地方政府拿去了（高价卖地）. 在这部分利润中，会有多少落入贪官污吏的腰包，大伙儿可以发挥一下想象力。</p><h2 id="高价格靠什么维持？"><a href="#高价格靠什么维持？" class="headerlink" title="高价格靠什么维持？"></a>高价格靠什么维持？</h2><p>有一个基本的经济学道理，想必大伙儿都知道的——如果只有供给，没有需求，是无法维持高价格的。通俗地说就是：高房价需要有有人买，才可能维持。另外，房价多年来持续上升说明，开发商新建的住房，基本上都卖光了。很多人误以为，维持高房价的买方是”刚需”（比如婚房）. 但是这种理解是错误的。因为”刚需”买了房，肯定要自己住的，不会让房子长期空置。而事实上，中国的大中小城市，空置的新房比比皆是。由此可见，”刚需”只占买方的很小比例。</p><p>那么，到底是谁在买？知名经济学家茅于轼曾经总结了高房价的三个根源（以下是摘录，全文在”<a href="http://view.news.qq.com/a/20120227/000001.htm">这里</a>“):</p><blockquote><p>我认为房地产之所以会变成现在这样，有几个方面的原因。<br>第一，我们国家的财富分配不均，贫富差距太大，有钱人房价再高也买得起，所以他们不在乎房价涨多高。<br>第二，有钱人没有好的投资渠道，如果有好的投资渠道的话，他们就不会去购买房地产。<br>第三，政府对土地的控制，政府关于 18 亿亩耕地的红线的规定，这是非常错误的。房地产贵就贵在土地上，土地供给不足，导致房价大幅上升。</p></blockquote><p>另外，还可以看看这篇《<a href="https://view.news.qq.com/a/20100604/000001.htm">王志安：支撑高房价的购买力来自哪里</a>》.</p><blockquote><p>王志安 央视新闻 1+1 策划</p><p>近两个月来，房地产调控政策密集出台，调控的手段不可谓不严厉，但从全国范围来看，房屋的成交量虽有显著下降，但成交价降幅却不明显，有些地方的房价甚至依然在小幅攀升。许多认为房价高的人可能忽略了这样一个事实，过去两年飙涨的房价，都是自由交易的结果，从纯粹经济学的角度讲，房价其实是消费者的购买力推高的。这似乎不符合常识，但却是经济学的基本规律。而另一个有说服力的数字是，2009 年全年房地产消费额为 6 万亿元，占到全年消费总额的 50%以上，但居民的储蓄率并没有降低。任志强说中国人的钱都藏在炕头里，此话虽是戏言，但这个数字清楚地表明民间在房地产市场购买力的强大。以上的分析表明，中国人的收入被统计数字低估了，这是房地产市场价格疯涨告诉我们的事实。因为收入统计非常容易作假，但消费却从来不会骗人。但接下来的问题是，房地产市场强大的购买力来自哪里？</p><p>早有主张房价虚高的人指出，<strong>北京和上海这样的大城市，房价和工资的收入比已经远远偏离国际平均标准，但这个数据没有多少说服力。因为工资收入没有纳入城市居民的财产性收入，股票收益、债权收益、艺术品投资和房地产增值都没有计算在内</strong>, 单说房地产增值，目前全社会财产总值大约为 100 万亿，其中房地产价值大约为 60 万亿，这其中有相当一部分来源于这几年房价的上涨。虽然多数居民的房产不会变现，但同样可以部分转化为购买力。但这恐怕还不能全部解释房地产市场的飙升。</p><p>从全世界范围看，各国的国民收入都有一些无法统计的部分，其中绝大部分是非法产业，例如贩毒、走私等行业，它们虽然不合法，但同样在创造着收入。此外，加上在经济生活中无法统计或漏掉的一部分，就构成了隐性 GDP. 国际上一般估算，隐性 GDP 大约占到一个国家统计 GDP 的 3%到 5%. 前些年，有位经济学者曾经对中国的隐性 GDP 做过深入研究。其研究表明，中国的隐性 GDP 占整个统计 GDP 的比例相当高，每年大约有 4 万亿元人民币。</p><p>此外，由于国内税收体制的不完善，企业和个人偷逃税款的情况也相当普遍。譬如我们每天手机都会收到提供发票的短信，这是一个庞大的地下产业。这些发票最终掩盖了部分企业的真实收入。而城市居民从事的兼职产业，直接用现金付酬的也相当普遍，这其中相当一部分，也没有体现到收入统计表当中。</p><p>最后一部分，就是政府官员的灰色收入。文强被抓之后，在他家池塘里搜出两千万元现金，这都是文强利用职务之便收受的贿赂，但这些收入，显然不可能被列入正常的收入统计。当然，像文强这样的干部也仅仅是个例。这些腐败的官员都是事发之后才发现有大量的非法财产，而不是因为被发现有非法财产而东窗事发。</p><p>综观上述隐性财富收入逻辑，我们可以发现这样一个事实，所有隐性 GDP 的收入流向，多数集中在社会较有权势的群体。文强为”黑社会”提供”保护伞”就是很好的例子。这样看来，虽然我们整个国民的收入被低估了，但仔细观察，事实是原本高收入阶层的收入被严重低估了。低收入阶层收入被低估的部分，主要集中在涉黄产业里的小姐们、非法产业里的底层马仔，以及零散的难以统计的低端服务业从业者的收入。如果上述分析成立，这说明我们国家现在贫富分化的程度，要远远高于统计数字的水平。这也能部分解释，为什么官方公布的基尼系数尚未突破警戒线，但社会冲突频繁发生的事实。</p><p>行文至此，前文提出的问题解析自然揭晓。中国房地产市场强大的购买力，来源于城市居民的财产性收入，以及隐性产业创造的灰色收入，这是目前支撑中国少数大城市房价居高不下的重要基础。因为这些城市本身就是财富聚集的地方，而房地产市场又是一个非常好的藏匿财富和洗钱的市场，同时还能兼顾财产的保值和增值。<strong>刚刚被判处无期徒刑的安徽省黄山市园林管理局原局长耿晓军，花了 2216 万买了 38 套房产，就是最好的一个佐证。理财有方的耿局长也让我们明白，为什么在全国范围内开征房屋保有税如此之难了，因为征税的基础，就在于首先要弄清每位公民持有几套房产，这无疑将会使大量的隐性财富曝光。这对于许多人来说，实在太可怕了。但隐性的财富不曝光，灰色收入不根治，房地产的价格下降，难</strong></p><p>房产税和官员财产公开</p></blockquote><p>通俗地说就是：中国的一小撮人拥有巨大的财富。他们的钱没处花（缺乏其它投资渠道）, 就把钱拿去买房。因此房地产市场才有可能继续维持高价格。</p><h2 id="为啥有钱人想买房？"><a href="#为啥有钱人想买房？" class="headerlink" title="为啥有钱人想买房？"></a>为啥有钱人想买房？</h2><p>刚才列举了茅于轼总结的三个原因，其中的第二个就是：有钱人没有好的投资渠道，只好去买房。<br>　　最近 10 年来，中国一直是高通胀。高通胀导致有钱人不想持有大量现金，转而购买保值的资产；而房地产是少数可选的大宗商品。说到通胀，顺便给大伙儿提醒一下：千万不要给统计局的 CPI 指数迷惑了。官方的 CPI 指数远远不能反映真实的通胀程度。<br>　　另外，还可以看看《<a href="http://www.ftchinese.com/story/001033182">中国人的买房情结 @ 金融时报</a>》. 该文提到，中国几千年的历史上，民间的富豪都有购置地产的倾向；此文还分析了其中的根源。</p><h2 id="政府为啥要高价卖地？"><a href="#政府为啥要高价卖地？" class="headerlink" title="政府为啥要高价卖地？"></a>政府为啥要高价卖地？</h2><p>刚才不止一处提到说【地方政府高价卖地】, 为啥地方政府要高价卖地捏？<br>　　高价卖地对于地方官员至少有如下几个好处。正是因为好处，所以地方政府乐得高价卖地。</p><blockquote><p>增加地方财政收入<br>地方官可以从中揩油<br>拉动 GDP 带来政绩<br>政绩带来更好的仕途<br>……</p></blockquote><p>有兴趣的话，还可以看看《<a href="https://www.china-week.com/html/4860.htm">杜君立：政府是中国最大的房地产商 @ 中国报道周刊</a>》. 俺摘录此文的部分内容如下（引文中的粗体是俺标注滴）:</p><blockquote><p><strong>房地产行业的大部分利润都被收到政府的口袋去了，尤其是在现在以拍卖拿地的现状下更是如此</strong>. 该房产商举例，”某城市的地王，44 亿的标价，土地面积 1.3709 万平方米，容积率 4.8, 总建筑面积 6.58 万平方米，楼面价就是 6 万多。也就是说，房子还没建，政府就已经揣到自己口袋这么多钱了。国土局为什么那么容易出贪官，受贿原因全是那红线内外一米，或者容积率那零点几的小数！很多朋友都以为，开发商是想咋建就咋建，可是事实根本不是那么回事，国家政策在那里呢，土地竞拍就是一把刀，容积率又是二把刀，直接就限制了房屋总量的提高。地价是楼价构成中的一个主要因素，它的高低决定了房地产市场的走向。所以，一道政府搞房地产市场所谓的宏观调控我就发笑，他们不是少收点地价，而是加税，你说，这不是更加推动房价高企吗？”<br>……<br>大家在骂房地产商黑心致使房价猛涨的时候，谁也没有注意<strong>土地现价早已涨过房价的涨幅了</strong>. 现在地方财政就是土地财政，地方政府拼命要卖土地赚钱，中央想控制都控制不了，你看现在全国各地哪个城市的城区面积都在不断蔓延。房价的高低有无标准。答：房价乃政府能够忍受的价格，房产现象只是中国政治经济体系的一个表征。我有时觉得政府官员真的是很蠢，一块地，如果作为住房用地来卖，那么他所得到的税收只有卖房那么一次的税收，而一套房子可用年限至少有 4<del>50 年，甚至 70 年也就是说政府这 4</del>50 年就收这么一次税。但如果作为工业用地，做厂房，做企业，那么政府可以年年向企业商家收税，所以对于政府来说卖地建房是下下策的方法。但是，为什么他们还要买呢？因为一个地方的一届领导做多干五年，他做事只管这五年自己的财政收入，至于五年以后，他都不知道调到什么地方去了，所以，一届又一届政府是只管现在不管将来啊！</p><p>现在最搞笑的还是那个招挂拍制度。据说这个制度是向香港学习的，可是人家那是民主社会，法律多健全啊？可是在内地，这制度一出台就为政府官员游戏法律提供了更多的空间。没实行这个制度以前买土地，一般只需要出个 10 来万撑死 100 来万忽悠贿赂一下国土局的实权人士乃至一把手，那么土地譬如说本来价值 1000 万的土地，一把手银子捞足大笔一挥也许 200~300 万就搞到手了，反正都是公家的地。而现在呢？实行的正规的招拍挂，一般人就不大敢便宜卖了，你要敢这样做，不是下台也得双规，官员们心里也是有点忌惮的。</p><p>那么，价值 1000 万的土地可能就得掏出 1500 万银子才能摆得平，即使你有关系后台够硬那么最少也得 700~800 万才能堵上众人的嘴巴。因为能够搞房地产资质，能拿到土地的老板哪个是没有后台的，哪个是后台不硬的？你以关系拿到了，那我拿不到我可以利用我的关系在后面捅你一刀，还可以名正言顺的把你身后的后台给拉下马。所以土地这块上多出来的价格是谁来承担？当然是羊毛出在羊身上。开发商不可能善良到自掏腰包，当然的把房价抬上去。制度是决定资源分配的根本原则，可笑某些人还在寄希望于宏观调控，根本的原则不调，怎么调都是空调！<br>……<br>大家知道只要有政府影子的地方就一定有滥用职权，而滥用职权就意味着腐败，而这样也就提高了交易成本。所以，让政府推出这些所谓的监管，或者减少监管，或者公开监管，都会让房地产市场减少腐败，减少成本，最主要的就是那么行政性的收费项目能不能取消呢？我就不明白一件事，在房地产项目的建设过程中你收了建筑公司的税、验收合格以后你又收了房地产公司的税、交易过程中你又收了房地产公司和买房者双方的税，这些税不就是用来支付你那些行政机构的费用的吗？你政府为什么还要重新再收一遍呢？</p><p>说完了这些咱再说你政府的卖地行为，你美其名曰说是什么市场化，我看纯属你往财政捞钱，<strong>每届地方政府上台之后什么事都不用做，只要卖地就能使 GDP 上升</strong>. 卖一块地 GDP 上升一个百分点，卖两块地 GDP 又上升两个百分点，卖的价格越高 GDP 越高。所以，放眼全国，什么东西涨价最快？土地！而且是只涨不跌的，这时什么行为？市场行为？鬼才信，这就叫操控市场。你土地价格上去了，企业运营成本自然就上去了，于是，拉动相关行业涨价，相关行业涨价，其他行业能不涨价？所以啊，温总说到了经济发展中的结构性涨价，它是说到点子上了，可是他有一句隐台词没有说出来，那就是结构性上涨的根子在哪里？我相信他是明白的。</p></blockquote><h2 id="房价还会涨吗？"><a href="#房价还会涨吗？" class="headerlink" title="房价还会涨吗？"></a>房价还会涨吗？</h2><p>许小年在 2010 年写了一篇《<a href="http://xuxiaonian.blog.sohu.com/147375076.html">房价为何还会上涨</a>》. 他认为房价在短期内还会继续涨。理由是：</p><blockquote><p>平抑房价的政策是收紧货币供应和放开土地供应，现在的政策是放开货币供应和收紧土地供应。整个搞反了，不出乱子才怪呢！<br>预测一下，改变现行政策的可能性有多大？说实在的，不大。</p></blockquote><p>3 年后看此文章，说得还是比较准确的。在结尾，许小年总结道：</p><blockquote><p>结论：房价还得涨，尽管不会永远涨。<br>日本人的地产泡沫吹了四、五年，最终还是在 1989 年破了。美国人的次按泡沫吹了五、六年，最终在 2007 年破了。<br>《红楼梦》中的王熙凤说过：”千里搭长棚，没有不散的宴席”.</p></blockquote><h2 id="大伙儿该怎么办？"><a href="#大伙儿该怎么办？" class="headerlink" title="大伙儿该怎么办？"></a>大伙儿该怎么办？</h2><p>每个人都有不同的处境、不同的经济状况、不同的财务计划、不同的风险承受能力、不同的人生规划。显然，在经济层面不可能给出一概而论的建议。但是在政治层面，可以说说俺的看法。<br>　　很多人天真地以为，不需要关心政治。殊不知，【<strong>你不关心政治，政治却会来关心你</strong>】. <strong>如今中国的种种问题，包括高房价、高通胀、空气污染、食品安全、等等，如果去探寻最终的根源，你会发现，最终的根源就是政治体制。当今中国，说白了就是权贵资本主义</strong>. 只有权贵集团的人（小于万分之一）才是真正的受益者。其他人（包括<del>民营企业家、公务员、</del>白领、农民工等底层人民）都是严重的受害者。房地产市场，只是权贵集团搜刮民众的诸多手段之一。只有推动政治变革，彻底颠覆这个”权贵资本主义”的体制，才能从根本上解决诸多社会问题。至于如何推动政治变革，有兴趣的同学可以看看俺写的 <a href="https://program-think.blogspot.com/2011/12/revolution-0.html">《谈革命》系列</a>.<br>　　最后，考虑到中国有很多年青人（大都是 80 后、90 后）因为”刚需”而沦为”房奴”, 俺再转一篇《<a href="http://blog.sina.com.cn/s/blog_46f42eca0100n0ty.html">冯仑：80 后不要纠结于房子</a>》, 供房奴们参考。</p><!-- **俺博客上，和本文相关的帖子（需翻墙）**:《[相当奇葩的中国，【劫贫济富】的国度](https://program-think.blogspot.com/2018/07/Robbing-the-Poor-Funding-the-Rich.html)》《[若政治制度不公平，则经济改革无意义——谈谈中国这个大赌场](https://program-think.blogspot.com/2013/11/political-reform-or-economic-reform.html)》《[扫盲"货币经济学"基本概念——从"利率"到"央行货币政策"](https://program-think.blogspot.com/2019/08/Monetary-Economics.html)》《[为啥急功近利反而赚不到钱——给拜金主义者的忠告](https://program-think.blogspot.com/2014/01/misunderstanding-about-making-money.html)》《[股市点评：为啥大多数散户必定亏钱？——心理学层面的分析](https://program-think.blogspot.com/2015/07/China-Stock-Market-Psychology.html)》**版权声明**本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 [编程随想](mailto:program.think@gmail.com) 和本文原始地址：[https://program-think.blogspot.com/2013/03/weekly-share-42.html](https://program-think.blogspot.com/2013/03/weekly-share-42.html) --><hr><h2 id="官员财产公开-20-年：曾经两会最热，今年沉寂"><a href="#官员财产公开-20-年：曾经两会最热，今年沉寂" class="headerlink" title="官员财产公开 20 年：曾经两会最热，今年沉寂"></a>官员财产公开 20 年：曾经两会最热，今年沉寂</h2><blockquote><p>“两会打虎”持续上演，反腐已成为政治常态。全国人大教科文卫委员会副主任委员王珉涉嫌严重违纪，于两会期间接受调查。而山西团开放日省委书记王儒林口中”贪腐金额达到 6.44 亿元”的副市长，更是触目惊心。</p><p>据人大发言人傅莹透露，到去年底，本届人大已经有 43 人辞职，罢免 27 人，不少是因为违纪违法。”阳光是最好的防腐剂”, 从制度建设杜绝腐败，一直是两会期间呼声最高的话题。</p><p>2005 年，官员财产公开首次出现在人大代表的议案中。早在 1994 年，第八届全国人大常委会将《财产收入申报法》正式列入五年立法规划，但”阳光法案”未能实际进入立法程序。</p></blockquote><h3 id="首个”趟浑水”的代表"><a href="#首个”趟浑水”的代表" class="headerlink" title="首个”趟浑水”的代表"></a>首个”趟浑水”的代表</h3><p>第十届全国人大代表、烟台大学教授王全杰是国内首位提出官员财产公开的人大代表。</p><p>从 2003 年担任人大代表开始，王全杰开始思考<strong>如何从制度上解决腐败问题，经过调研，发现官员财产公开是一个重要切入口</strong>。</p><p>尽管 1994 年，<em>八届全国人大常委会就曾将《财产申报法》单独列入立法规划，但因<strong>种种原因</strong>未能启动，此后在九届、十届到十一届至今，未见重被纳入全国人大立法议程。</em></p><p>1995 年，中央相关部门先后发布了《关于党政机关县处级以上领导干部收入申报的规定》和《关于省部级现职领导干部报告家庭财产的规定（试行）》等文件，形成了对现有官员进行内部监督的机制。</p><p>在王全杰看来，这些文件在强化县处级以上领导干部的内部监督方面起到了重要作用。然而，由于申报未涉及近亲属，没有要求全面财产申报，申报的种类少，且更为重要的是，受理后不向社会公开，这些政策性文件始终未能从内部监督机制走向外部监督机制，致使其在预防和惩治官员腐败方面发挥的作用有限。</p><p>2005 年，王全杰联名 50 多位人大代表，提交题为《制定政府领导干部财产公布制度》的议案。</p><p>参与这个议案的的人大代表几乎都是非官员。一些市级以上级别的官员人大代表劝王全杰不要淌这趟浑水，在他们看来，事情并不容易。”但作为全国人大代表，身负给老百姓代言的重任，不能忽略这一重要问题。”王全杰对搜狐新闻表示。</p><p>在议案中，王全杰呼吁全国人大常委会责成有关部门，尽快制定官员资产公开制度，”还好干部以清白，还人民群众以明白，还政府以透明，还社会以公正。”</p><p>两会之后，王全杰被请到全国人大常委会的一次会议上对议案进行详细介绍。在他的记忆里，会场很安静，他发言后没有人提反对意见，也没人进行呼应。</p><p>在此之后，王全杰还于 2007 年与 2008 年的两会前提交了官员财产公开建议。</p><p>在三次提交的议案与建议中，王全杰都写了这么一句话：”自己是为人民服务的干部，是人民的公仆，有什么私产可向人民隐瞒的？个人资产对于公民是隐私，对于纳税人供养的政府官员来说，就不应当是隐私了。”</p><p>王全杰是国内研究皮革技术的顶尖科学家，在这位老党员的心中，政府官员作为人民公仆是理所当然的事情，他见证过官员财产申报制度在 1995 年后 10 年里遭遇的重重阻碍，也预见到，在接下来的 10 年中，官员财产公开之路依然坎坷。</p><h3 id="律师接力-7-年”死磕”"><a href="#律师接力-7-年”死磕”" class="headerlink" title="律师接力 7 年”死磕”"></a>律师接力 7 年”死磕”</h3><p>王全杰只担任了一届全国人大代表，在他之后，已连任三届全国人大代表的重庆律师协会会长韩德云接下他的接力棒，连续 7 年”死磕”官员财产申报与公开，因而更加出名。</p><p>作为律师的韩德云将官员财产公开作为申报的其中一个环节，以立法为诉求，推动了中纪委决策的进程。</p><p>2005 年，十届全国人大常委会第十五次会议通过《公务员法》. 在韩德云看来，作为预防腐败的重点法律，该法对公务员的行为监督做了许多规定，却没有将公务员的财产申报制度写入该法。</p><p>2006 年，他邀请超过 30 名人大代表一齐提交了关于制定《公务员财产申报法》的议案，其中财产公开作为申报制度的重要一环。在议案中，韩德云提出了两种公开的途径，一是通过官方报纸刊载，甚至上网，二是提供给公民供其索取、查询，从而接受广泛有效的社会监督。</p><p>此时，”官员财产公开”还属于概念超前的新词，附议的 30 多个代表还没有意识到今后将遭遇的阻力。</p><p>这一年，全国人大内务司法委员会回复韩德云：”目前制定财产申报法条件尚不成熟，有许多问题需要作进一步论证和研究。”</p><p>2007 年，韩德云继续提出同样的建议，中央纪委监察部回应：”制定符合国情的公务员申报制度需要认真研究。”</p><p>2008 年，中央纪委监察部负责人亲自给韩德云打电话，说正在积极开展工作。而这一年的回执中，中纪委首次就官员财产公开作出具体回复：财产收入申报后是否公开以及在什么范围公开是个敏感问题，国际上实行财产申报制度的国家对此有不同规定，也是实行财产申报制度的难点。我国制定公职人员财产收入申报法，采取什么样的公开原则，需要进一步研究论证。</p><p>而这也是韩德云这 7 年里，得到的中纪委就官员财产公开问题唯一一次的具体的回复。</p><p>2012 年 7 月，中纪委答复韩德云时表示，今年有关部门已抓紧对公职人员财产申报国家立法进行研究论证工作：结合中国实际，对申报制度进行研究论证，着手起草建议稿，并加快了起草进程。</p><p>这个消息令韩德云振奋不已。”中纪委的回复非常清晰，一直在支持和推进这个制度。”韩德云告诉搜狐新闻，他多年的努力终于有了一些反响——官员财产申报制度正一步步完善。</p><p>财产申报逐渐步入正轨，但以立法形式向社会公开官员财产还需假以时日。</p><h3 id="各地试点破冰"><a href="#各地试点破冰" class="headerlink" title="各地试点破冰"></a>各地试点破冰</h3><p>7 年间，韩德云一直在呼吁人大启动《公务员财产申报法》立法程序，并提出”中央统一立法、授权地方实施、按年增加范围、分步落实到位”的设想，为减小推行阻力，甚至提出了具体解决办法。</p><p>他提出的”三年豁免期”概念最具争议——在期满之前，如申报对象主动纠正并上缴全部违法违纪收入，申报审查机关可豁免申报对象的纪律处分，并视情况由上级行政监察部门建议司法机关减轻、免除其相关刑事责任。</p><p>这是香港上世纪 60 年代末至 70 年代初，推行官员财产公开制度时的方法。可当韩德云提出来之后，舆论哗然，认为这是为官员找退路。</p><p>韩德云意识到，距离官员财产完全公开，还有很长一段路要走。</p><p>让他欣慰的是，随着社会的呼声日益高涨，2009 年，政府开始了试点尝试。</p><p>2009 年初，新疆阿勒泰作为全国首个试点，在全国开官员申报财产公示先河。”官员财产公开”一度成为热词。</p><p>当时的制度推行者、阿勒泰地区纪委书记吴伟平在接受媒体采访时，显示了极大的改革决心，并表示将逐步实现”有限公开最终过渡到无限公开，从区域试点到全国推行”.2009 年 8 月，吴伟平因病去世。</p><p>一个月后，时任阿勒泰地区纪委书记杨振海在接受媒体采访时说：”不再按照原来制度做了。现在，我们按照自治区统一要求来进行官员财产申报。只有申报，没有公示。”</p><p>人走政息，第一个试点夭折了。</p><p>从这一年开始，四川高县、湖南浏阳、浙江慈溪、宁夏银川等多个地区进行了官员财产申报公示实践，都曾掀起舆论波澜，一度被媒体称之为制度破冰或地方探索样本。但接踵而来的，是接连的失败。</p><p>据媒体统计，试点官员财产公开的地区已近 40 个，但超过半数”昙花一现”, 且试点多为县市区，主要针对科级干部。人走政息、公众压力及个别官员的阻力、难以核实的申报内容、上级叫停等都是导致试点失败的原因。</p><p>对于这些”失败”, 韩德云认为，立法依据缺失、程序混乱、规定简陋，执行缺乏透明度等缺陷，导致推动者往往难以实现本意。</p><p>更重要的是，各地对官员财产申报制度依据的道德伦理准则及法律依据等理解差异颇大，认识不一，其中也不乏个别政治”作秀”.</p><p>这让韩德云意识到，官员财产公开制度从基层突破的成功几率很小，仅通过人大代表和地方政府来推进官员财产公开制度，从当前来看，不具备现实性。</p><p>“官员财产是否公开，本质上是一个政治问题，而非法律问题，这个制度最后能建成什么样，这完全取决于政治的决断，而非法律的设计。”</p><h3 id="官员的”公开”尝试"><a href="#官员的”公开”尝试" class="headerlink" title="官员的”公开”尝试"></a>官员的”公开”尝试</h3><p>当官员们日渐噤声，不愿谈论财产公开时，也有两名官员主动将自己家庭的财产情况曝光于公众眼前，他们压力也随之而来。</p><p>2013 年，时任广州市政协副秘书长的范松青在广州市两会上率先公开家庭财产情况而搅动全城。</p><p>“要说没有压力，总有或多或少，有形无形压力。过去，同事之间很亲密、友好的关系，慢慢敬而远之。他们怕受到我的影响，盯着我的一言一行、一举一动。”退休之后，范松青对媒体说。</p><p>公开财务状况后，范松青的妻子没少和他拌嘴。女儿结婚，要和亲家商量着不操办酒宴。去年底家里遭了贼，几千元现金、女儿结婚的金银首饰被盗，”太太说全是我惹的祸，小偷是来看我们家有多少财产的。”</p><p>对此，范松青报了警，自认倒霉。种种非议，让范松青很无奈，发出”我本将心向明月，奈何明月照沟渠”的感慨。</p><p>2014 年，广西防城港市检察院副检察长何文凯在微博上公开家庭财产。出乎他的意料，这个举动在微博掀起了巨浪，他被网友称赞的同时，遭遇了人肉搜索。</p><p>“有网友细心计算我们夫妻的收入和财产积累是否合理，更有甚者，有人把电话打到我的办公室，欲跟我立赌誓，问我敢不敢让他查。在众多亲朋好友同事支持和声援的背后，我也感受到一股对我敬而远之的味道，压力滚滚而来，孤独感深重无边。”何文凯感慨。</p><p>韩德云对搜狐新闻表示，社会难以达成对官员财产公开的共识，这是推进该制度的阻力之一。</p><p>“社会各界有各界的想法，任何一个法案，如果社会共识不够，可能就会被曲解或误解，甚至带来的负面的效果会高于正面的效果。”</p><p>“一个官员应该有多少财产？一个普通县城的县长应该有多少财产？一个北京的区长应该有多少财产？数字公开之后，大家会怎么想？”韩德云举例说，”一个厅级干部拥有一套 120 平米左右的房子，这么大的房子在北京的价格和在重庆的价格，有巨大的差别。”</p><p>基于现实的考虑，在”公开”具备条件之前，韩德云更加关注申报的落实情况。</p><p>“十八大之后，中央明确规定，官员财产公开制度从党内做起，从党员干部的财产申报开始。从最近几年的情况来看，党内推行得快，执行得比较严格。”今年，听说有谁少报了一个平方，或者存款上没说清楚，甚至房产证对不上，都会被要求去做补充说明。”</p><p>谈及官员财产公开的时间表，韩德云说：”从申报到公开，这将是一条漫长的路。先从申报开始，然后再去探讨公开。从这个角度看，中央已经明确选择了这么一条路径，等以后在恰当的时机，去落实我们想象中的公开。”</p><p>2008 年之后王全杰卸任全国人大代表，当选为山东省人大代表。他没有停止呐喊，依旧连年提官员财产公开的建议。</p><p>他坚信，官员财产会有照进”阳光”下的一天。</p><hr><h2 id="官员财产公开难在哪？"><a href="#官员财产公开难在哪？" class="headerlink" title="官员财产公开难在哪？"></a>官员财产公开难在哪？</h2><p>官员财产公开，是一条国际通用、行之有效的”阳光法案”. 在吏治清明的国家，官员的隐私空间比普通公众要小一些，就连其家庭成员的信息也并非单纯的个人隐私，而是一种公共资源，而公众有权知晓这种公共资源信息。</p><p>就目前来看，我国官员的财产申报距财产公开的要求还有一定的距离。一些官员就财产、投资、子女就业等方面的申报，都是向组织报告，向申报者的上级或领导报告，而不是向人民报告。至于报告的内容是否属实，人民也无法知道。而且，从已查实的一些贪腐案件来看，以往的这些”报告”似乎也没有起到实质性的监督作用，与人民群众的期待还有很大差距。</p><p>阳光是最好的防腐剂，官员财产公开是民心所向。中国社会科学院法学所和社会科学文献出版社发布的《法治蓝皮书：中国法治发展报告 (2011)》显示，在被调查的公众中，高达 81.4%的人认为公职人员应当公开其财产状况。从学历和就业状况来看，从小学学历到博士学历者、从学生到离退休者，均普遍认同公开公职人员的财产。即便是被调查的公职人员，亦普遍认可财产公开。调查显示，接受调查的公职人员中，有 70%认为应当公开公职人员的财产。在不同行政级别的认同者中，省部级和司局级公职人员比例最高，超过 80%认为应当公开财产。</p><p>俗话说，平生不做亏心事，半夜不怕鬼敲门。1800 多年前的诸葛亮在《自表后主》中就曾公开过自己的家产：”今成都有桑八百株，薄田十五顷，子弟衣食，自有余饶。”封建重臣尚能如此，以”为人民服务”为唯一宗旨的共产党干部更应无所畏惧。在最近召开的中共十八大上，新当选中央政治局常委的上海市委书记俞正声就毫不讳言：”财产早就申报了，大家可去中纪委查一查。”国家知识产权局局长田力普在接受记者集体采访时也表示，”关于财产公开，我会按照中央的安排，如实地填写相关的情况，如果有要求，我愿意公开，没有任何问题。”由此可见，廉洁奉公、洁身自爱的领导干部无不对财产公开持积极的支持态度。相反，只有那些”屁股不干净”的官员才会反对财产公开。</p><p>财产公开是基本制度也是基础制度。很多国家的经验证明，越公开、收入透明度越高的地方，越稳定。当然，财产公开需要一个过程，但不是技术问题，立法更不是难点，而是决心问题。官员财产难以公开的最大症结，不是目前条件不成熟等客观原因，而是财产公开直接涉及党政高级官员切身利益，受到既得利益群体的主观阻扰，导致在实践中难以施行。当改革涉及到官员自身的权益，而这些人又掌握着决定政策制定和政策走向的巨大权力的时候，改革就会变得异常艰难。因此，改革的顶层设计非常重要，而这首先需要有一个能够超越部门利益、行业利益、地区利益等各种利益关系的改革协调机构，这样改革才能冲破压力和阻力。</p><!-- ## [021316_245 余裕で三連発できちゃう極上の女優 立花美涼](https://www.busfan.net/021316_245)[MKBD-S118 KIRARI 118 余裕で三連発できちゃう極上の女優 : 立花美涼 （ブルーレイ版）](https://www.busfan.net/MKBD-S118)[![021316_245](https:/https:/www.busdmm.xyz/i.ibb.co/kc7rtHg/16520919.gif)](https:/https:/www.busdmm.xyz/ibb.co/88CRHKD)[![021316_245](https:/https:/www.busdmm.xyz/i.ibb.co/ScTZtPG/16520886.gif)](https:/https:/www.busdmm.xyz/ibb.co/C6dSbzD)[![021316_245](https:/https:/www.busdmm.xyz/i.ibb.co/kyFpnY9/16520565.gif)](https:/https:/www.busdmm.xyz/ibb.co/qnwzGbW)[![021316_245](https:/https:/www.busdmm.xyz/i.ibb.co/NK8FhH9/16520246.gif)](https:/https:/www.busdmm.xyz/ibb.co/BBXfDSy)[![021316_245](https:/https:/www.busdmm.xyz/i.ibb.co/qsQ5L0y/16515945.gif)](https:/https:/www.busdmm.xyz/ibb.co/SnCrDQs)## [091214_880 「汚された爆乳制服美女」赤井美月](https://www.busfan.net/091214_880)[![091214_880](https:/https:/www.busdmm.xyz/i.ibb.co/3v8vVv1/15262557.gif)](https:/https:/www.busdmm.xyz/ibb.co/cwpwRwJ)[![091214_880](https:/https:/www.busdmm.xyz/i.ibb.co/zHGjTsN/15262452.gif)](https:/https:/www.busdmm.xyz/ibb.co/Dg5sH4L)[![091214_880](https:/https:/www.busdmm.xyz/i.ibb.co/VDLnxBf/15262313.gif)](https:/https:/www.busdmm.xyz/ibb.co/CvwC60R)[![091214_880](https:/https:/www.busdmm.xyz/i.ibb.co/19Ccq7Z/15262236.gif)](https:/https:/www.busdmm.xyz/ibb.co/mHnpqbJ)[![091214_880](https:/https:/www.busdmm.xyz/i.ibb.co/pRbqTny/15262190.gif)](https:/https:/www.busdmm.xyz/ibb.co/txQR63X)## 061815-902 好色妻降臨 49 パート 1（里中結衣） https://www.javbus.com/061815-902[![061815_902](https:/https:/www.busdmm.xyz/i.ibb.co/b7c3Cp4/15245620.gif)](https:/https:/www.busdmm.xyz/ibb.co/hC3M4pG)[![061815_902](https:/https:/www.busdmm.xyz/i.ibb.co/YBg6m7w/15245593.gif)](https:/https:/www.busdmm.xyz/ibb.co/PGkRKZ0)[![061815_902](https:/https:/www.busdmm.xyz/i.ibb.co/JRt4ysG/15245357.gif)](https:/https:/www.busdmm.xyz/ibb.co/nsmvnLY)[![061815_902](https:/https:/www.busdmm.xyz/i.ibb.co/S3Pjb6d/15245172.gif)](https:/https:/www.busdmm.xyz/ibb.co/RD9FfgB)[![061815_902](https:/https:/www.busdmm.xyz/i.ibb.co/wdNFw6D/15244847.gif)](https:/https:/www.busdmm.xyz/ibb.co/tHMTxCy)衣服还是要亲手一件件扒下来才爽【10P】![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15234863.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15244847.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15245172.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15245357.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15245593.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15245620.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15245754.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15245837.gif)![061815_902](https://www.picnew.orghttps:/www.busdmm.xyz/images/2020/05/18/15500128.gif)## [082313-414 パーフェクトボディ 8 ](https://www.javbus.com/082313-414)[![082313_414](https:/https:/www.busdmm.xyz/i.ibb.co/wN9NjjJ/15234863.gif)](https:/https:/www.busdmm.xyz/ibb.co/6R3RLLv)[![082313_414](https:/https:/www.busdmm.xyz/i.ibb.co/xXjtGBk/15233793.gif)](https:/https:/www.busdmm.xyz/ibb.co/0mMRZ67)[![082313_414](https:/https:/www.busdmm.xyz/i.ibb.co/JB0H7tW/15225586.gif)](https:/https:/www.busdmm.xyz/ibb.co/kHkX8BV)[![082313_414](https:/https:/www.busdmm.xyz/i.ibb.co/58PvkVn/1523453.gif)](https:/https:/www.busdmm.xyz/ibb.co/qsv9CwW)![082313_414](https:/https:/www.busdmm.xyz/ibb.co/6WHTW08)## [HEYZO-1366 咲乃柑菜【さくのかんな】 擬人化したセクシーペットに生ハメ！](https://www.javbus.com/Heyzo-1366)[我是不是，你最疼爱的小猫咪？](https://momoiro-ch.com/archives/145032)2017.10.14javgifjavgifpornnsfwjapancosadultcat 可爱![](https://64.media.tumblr.com/feb44927a1a14a32fb2dfdbfe6519d26/tumblr_oxt9e7zVNe1ww6i6yo1_500.gif)![](https://64.media.tumblr.com/fede40a33d1189270d02ad3b35b38ce7/tumblr_oxt9e7zVNe1ww6i6yo2_500.gif)![](https://64.media.tumblr.com/9ec0ab135ba750ea52d6550a4e5b9735/tumblr_oxt9e7zVNe1ww6i6yo3_500.gif)![](https://64.media.tumblr.com/5d89a619658462f5589798704e4f013c/tumblr_oxt9e7zVNe1ww6i6yo4_500.gif)![](https://64.media.tumblr.com/1a2e60940fb6146f7419c519cabec51c/tumblr_oxtqv59vMm1ww6i6yo1_500.gif)![](https://64.media.tumblr.com/465ac61b1337a0f6878ba8c9b37b9462/tumblr_oxtqv59vMm1ww6i6yo2_500.gif)![](https://64.media.tumblr.com/4c6a0e8a2b6196ea81090e3e8d43bcaf/tumblr_oxtqv59vMm1ww6i6yo3_500.gif)![](https://64.media.tumblr.com/2dda3bf77c4e3657a348a39a4b02c2e2/tumblr_oxtqv59vMm1ww6i6yo4_500.gif) --><!-- ## 喜欢她的小酒窝 --><!-- 031717_047 大橋ひとみの熱視線〜何をされてもカメラ目線〜 https://www.javbus.com/031717_047 --><!-- ![](https://64.media.tumblr.com/5dfaf17426ce284b5fd2f1ac33ef8b05/tumblr_ov51ywzRZg1ww6i6yo1_500.gif)![](https://64.media.tumblr.com/ac345f1705b10a8f8c36f57dcc5cd921/tumblr_ov51ywzRZg1ww6i6yo2_500.gif)![](https://64.media.tumblr.com/37311398d9ba048905fe806c3756670e/tumblr_ov51ywzRZg1ww6i6yo3_500.gif)![](https://64.media.tumblr.com/c6c35c2f734400a76f5e16e181b14817/tumblr_ov51ywzRZg1ww6i6yo4_500.gif) --><!--## 表情十分的享受…![](https://64.media.tumblr.com/bbfb5ab745d15709ce1ceda87317d597/tumblr_ov1htl3DpJ1ww6i6yo1_500.gif)![](https://64.media.tumblr.com/c575be65a2fae9eb563b716dafc2e87b/tumblr_ov1htl3DpJ1ww6i6yo2_500.gif)## 你眉头微皱的表情最是诱人[![](https://64.media.tumblr.com/27d7f6ce7a87f2503b0413db6a4f2284/tumblr_ov3fv4A4Gk1ww6i6yo1_500.gif)](/hezhenpeng.tumblr/post/165638559658)[![](https://64.media.tumblr.com/759b2cea570a1de361e3487e01c5edff/tumblr_ov3fv4A4Gk1ww6i6yo2_500.gif)](/hezhenpeng.tumblr/post/165638559658)[![](https://64.media.tumblr.com/1c14997d8de10cd5031211ec6a104b9b/tumblr_ov3fv4A4Gk1ww6i6yo3_500.gif)](/hezhenpeng.tumblr/post/165638559658)[![](https://64.media.tumblr.com/c7d8dbf2412b38db8cf258836c46b0db/tumblr_ov3fv4A4Gk1ww6i6yo4_500.gif)](/hezhenpeng.tumblr/post/165638559658)[![](https://64.media.tumblr.com/da62823dc5b37153ac385a223fc825f8/tumblr_ov3fv4A4Gk1ww6i6yo5_500.gif)](/hezhenpeng.tumblr/post/165638559658)## HEYZO-1293 小嶋ひより【こじまひより】 勝負に勝ったら私をアゲル！巨乳すぎる女棋士 https://www.javbus.com/HEYZO-1293[![HEYZO-1293](https:/https:/www.busdmm.xyz/i.ibb.co/MCctCkf/15200953.gif)](https:/https:/www.busdmm.xyz/ibb.co/6WHTW08)[![HEYZO-1293](https:/https:/www.busdmm.xyz/i.ibb.co/3TJ00Yy/15201879.gif)](https:/https:/www.busdmm.xyz/ibb.co/dfhQQJ0)[![HEYZO-1293](https:/https:/www.busdmm.xyz/i.ibb.co/xghW78d/15201645.gif)](https:/https:/www.busdmm.xyz/ibb.co/09qTGVv)[![HEYZO-1293](https:/https:/www.busdmm.xyz/i.ibb.co/S6Zr9GZ/15200627.gif)](https:/https:/www.busdmm.xyz/ibb.co/K58w3S8)[![HEYZO-1293](https:/https:/www.busdmm.xyz/i.ibb.co/hdxsnnf/1520198.gif)](https:/https:/www.busdmm.xyz/ibb.co/ykm0MMS)[![HEYZO-1293](https:/https:/www.busdmm.xyz/i.ibb.co/ckzTbQ5/1520032.gif)](https:/https:/www.busdmm.xyz/ibb.co/pbCXWdD)## Heydouga 4017-PPV-197[![Heydouga 4017-PPV-197 ](https:/https:/www.busdmm.xyz/i.ibb.co/Rc4RYsJ/164343s0fncnhl9700wogf.gif)](https:/https:/www.busdmm.xyz/ibb.co/8941NfQ)[![Heydouga 4017-PPV-197 ](https:/https:/www.busdmm.xyz/i.ibb.co/sKd6Cmp/162946epdwanurz7nnrihj.gif)](https:/https:/www.busdmm.xyz/ibb.co/48nY2mw)[![Heydouga 4017-PPV-197 ](https:/https:/www.busdmm.xyz/i.ibb.co/ygn71mV/164340yiutazahaa20eih8.gif)](https:/https:/www.busdmm.xyz/ibb.co/h2RwjxC)[![Heydouga 4017-PPV-197 ](https:/https:/www.busdmm.xyz/i.ibb.co/1mL44XD/162725un1d8tnd8ipz8qrd.gif)](https:/https:/www.busdmm.xyz/ibb.co/S3PZZmh)## 080815_130 グラマラス 酒井ももか https://www.javbus.com/080815_130[![080815_130](https:/https:/www.busdmm.xyz/i.ibb.co/rdcxL14/162614iyn2ngll4jwyidgs.gif)](https:/https:/www.busdmm.xyz/ibb.co/GHtW1bc)[![080815_130](https:/https:/www.busdmm.xyz/i.ibb.co/Y8d0y3b/162612z5wsvgokwdx7rvx5.gif)](https:/https:/www.busdmm.xyz/ibb.co/rMpdcmv)## 072916-219 冤罪防止講習 〜被害者役の女性がグチョマンなのでマジで痴漢してやった〜 https://www.javbus.com/072916-219[072916-219](https:/https:/www.busdmm.xyz/ibb.co/rMpdcmv)## DSAMBD-19 恍惚 ~止められないおねだり~ : 鈴木さとみ （ブルーレイディスク版） https://www.javbus.com/DSAMBD-19[![DSAMBD-19](https:/https:/www.busdmm.xyz/i.ibb.co/wR1YG94/150522lu9x6o686uvc8ziv.gif)](https:/https:/www.busdmm.xyz/ibb.co/vH8Dy7k)## 091716_385 高級ソープへようこそ 目々澤めぐ https://www.javbus.com/091716_385[![091716_385](https:/https:/www.busdmm.xyz/i.ibb.co/B4143r2/134700w1eoevt8rf388z8t.gif)](https:/https:/www.busdmm.xyz/ibb.co/gvnv9PZ)[![091716_385](https:/https:/www.busdmm.xyz/i.ibb.co/W5Y4JHS/134656piu5bg6e0yzboytl.gif)](https:/https:/www.busdmm.xyz/ibb.co/1QwtW0H)[![091716_385](https:/https:/www.busdmm.xyz/i.ibb.co/Xpgw5GQ/134650dy717jquvsprhv1r.gif)](https:/https:/www.busdmm.xyz/ibb.co/tctd21G)## 052215_084 清楚な制服美女 貸しちゃいます https://www.javbus.com/052215_084[![052215_084](https:/https:/www.busdmm.xyz/i.ibb.co/gdt89zp/134043wd61kr6h6rgrhkef.gif)](https:/https:/www.busdmm.xyz/ibb.co/VxMG92Z)[![052215_084](https:/https:/www.busdmm.xyz/i.ibb.co/Wx2Lvgd/134039frpp80r8uzfujzuq.gif)](https:/https:/www.busdmm.xyz/ibb.co/QbK4vrq)[![052215_084](https:/https:/www.busdmm.xyz/i.ibb.co/kQPSvpR/134034r8r2myr1zllmhhhe.gif)](https:/https:/www.busdmm.xyz/ibb.co/ChSHDqk)## HEYZO-0201 葵なつ 俺の彼女のエロ過ぎる絶対領域～ロリ娘のニーハイにぶっかけ～ https://www.javbus.com/HEYZO-0201[![HEYZO-0201](https:/https:/www.busdmm.xyz/i.ibb.co/9wz7CkD/133754dmmkamiwyfiirzll.gif)](https:/https:/www.busdmm.xyz/ibb.co/HN1jkfS)[![HEYZO-0201](https:/https:/www.busdmm.xyz/i.ibb.co/Fsz7zfs/133750yxyng6n88zv6m3yf.gif)](https:/https:/www.busdmm.xyz/ibb.co/wJ464bJ)[![HEYZO-0201](https:/https:/www.busdmm.xyz/i.ibb.co/nktwYBm/133745oizjahdijd69h7xd.gif)](https:/https:/www.busdmm.xyz/ibb.co/mzgR20T)## 041515-853 THE 未公開 〜主観イラマチオ〜 https://www.javbus.com/041515-853[![041515_853](https:/https:/www.busdmm.xyz/i.ibb.co/cT472QF/133620hz74c3w7ukocdzdd.gif)](https:/https:/www.busdmm.xyz/ibb.co/DK0SwQC)[![041515_853](https:/https:/www.busdmm.xyz/i.ibb.co/GPW2zY0/133616lslnqt7qgisd3n6v.gif)](https:/https:/www.busdmm.xyz/ibb.co/mz9qfZG)[![041515_853](https:/https:/www.busdmm.xyz/i.ibb.co/vxgfstS/133610zbvj2bjpvybbv2iu.gif)](https:/https:/www.busdmm.xyz/ibb.co/1fhBsSk)## 061915-903 放課後に、仕込んでください 〜スケベな大人の女になりたいの〜 https://www.javbus.com/061915-903[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/NNRxBtp/133439ng8gk3cgd3g78bw8.gif)](https:/https:/www.busdmm.xyz/ibb.co/hd0szLH)[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/mRHbNMy/133435dyk1kstx7nsznsnk.gif)](https:/https:/www.busdmm.xyz/ibb.co/yN8d4bk)[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/yRgwHSQ/133430gzi3om9k9gmmmn3i.gif)](https:/https:/www.busdmm.xyz/ibb.co/BPTX0NC)[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/bRWtB4m/133425ta6s600w688vu9oy.gif)062715_105](https:/https:/www.busdmm.xyz/ibb.co/M52dVzS)[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/M6C3J33/133248o0qcsr614qn066hc.gif)](https:/https:/www.busdmm.xyz/ibb.co/xH7RrRR)[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/Mpk34P3/133243ljdlqllhmqqmqlk1.gif)](https:/https:/www.busdmm.xyz/ibb.co/3WmLqSL)[![061915-903](https:/https:/www.busdmm.xyz/i.ibb.co/w4qTKgJ/133240mnp1uzyerl50lhlr.gif)](https:/https:/www.busdmm.xyz/ibb.co/XtP9zLy)## 060215-890 極上セレブ婦人 Vol.9 https://www.javbus.com/060215-890[![060215-890](https:/https:/www.busdmm.xyz/i.ibb.co/RgLRpdP/133105uz41134vet4ev3v7.gif)](https:/https:/www.busdmm.xyz/ibb.co/fXmjYLt)[![060215-890](https:/https:/www.busdmm.xyz/i.ibb.co/tM279W1/133054z9jgasj8r7mhtrxx.gif)](https:/https:/www.busdmm.xyz/ibb.co/mCyL3MP)[![060215-890](https:/https:/www.busdmm.xyz/i.ibb.co/YktvkCp/133100yraooztt7ryoooye.gif)](https:/https:/www.busdmm.xyz/ibb.co/jML7MNg)[![060215-890](https:/https:/www.busdmm.xyz/i.ibb.co/8xy39hq/132644sir0zrqq30jes03j.gif)](https:/https:/www.busdmm.xyz/ibb.co/6tKhFdz)[![060215-890](https:/https:/www.busdmm.xyz/i.ibb.co/CJLFF8d/132639x8ineie9izv08ldt.gif)](https:/https:/www.busdmm.xyz/ibb.co/4skxxty)[![060215-890](https:/https:/www.busdmm.xyz/i.ibb.co/3MdyTpV/132634s9yyvtmdt30g87f1.gif)](https:/https:/www.busdmm.xyz/ibb.co/X3LZW76)## 071616_341 グラマラス 霧島さくら https://www.javbus.com/071616_341[![071616_341](https:/https:/www.busdmm.xyz/i.ibb.co/zf0P4BF/132511seufwetvmhtg9p5j.gif)](https:/https:/www.busdmm.xyz/ibb.co/nk5QLYB)[![071616_341](https:/https:/www.busdmm.xyz/i.ibb.co/cy8f3X6/135007tvzhzca2n1logoh3.gif)](https:/https:/www.busdmm.xyz/ibb.co/0n942VC)[![071616_341](https:/https:/www.busdmm.xyz/i.ibb.co/Fq8K00m/135003lbmx44e4zsrshz4v.gif)](https:/https:/www.busdmm.xyz/ibb.co/x8zDffX)## 071915_118 美巨乳なえりちゃんに思わず 2 連発 https://www.javbus.com/071915_118[![071915_118](https:/https:/www.busdmm.xyz/i.ibb.co/THbP4gw/132248p6c146pd0clm3ffi.gif)](https:/https:/www.busdmm.xyz/ibb.co/Jzyrvsc)[![071915_118](https:/https:/www.busdmm.xyz/i.ibb.co/k4xLkYw/132240ds5de92lslwdwdwd.gif)](https:/https:/www.busdmm.xyz/ibb.co/HtVc1mb)[![071915_118](https:/https:/www.busdmm.xyz/i.ibb.co/QMshrSY/132231e4nt580v6u7uv7u2.gif)](https:/https:/www.busdmm.xyz/ibb.co/YhvJpnf)## HEYZO-1366 咲乃柑菜【さくのかんな】 擬人化したセクシーペットに生ハメ！ https://www.javbus.com/heyzo-1366[![heyzo-1366](https:/https:/www.busdmm.xyz/i.ibb.co/mCn6pPX/131312gqkkl74jz4jhl161.gif)](https:/https:/www.busdmm.xyz/ibb.co/WWrgCRP)[![heyzo-1366](https:/https:/www.busdmm.xyz/i.ibb.co/frDST03/131307unf13qnnxwqn33v1.gif)](https:/https:/www.busdmm.xyz/ibb.co/NWT3GY0)## 100814-707 無修正 カリビアンコム スカイエンジェル 180 パート 2 https://www.javbus.com/100814-707[![100814-707](https:/https:/www.busdmm.xyz/i.ibb.co/crsVWQ8/131157kbrtu1narcbnor2e.gif)](https:/https:/www.busdmm.xyz/ibb.co/P6V02gW)[![100814-707](https:/https:/www.busdmm.xyz/i.ibb.co/zRhBPBF/131151y7ksnvsufs9yd88u.gif)](https:/https:/www.busdmm.xyz/ibb.co/yynZgZp)[![100814-707](https:/https:/www.busdmm.xyz/i.ibb.co/mX3ZYT6/131148zz9gpcis6g61p9cs.gif)](https:/https:/www.busdmm.xyz/ibb.co/gPxqX9z) -->]]></content>
      
      
      <categories>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 房产税 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 工作流</title>
      <link href="git-workflow/"/>
      <url>git-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化一个-Git-仓库"><a href="#初始化一个-Git-仓库" class="headerlink" title="初始化一个 Git 仓库"></a>初始化一个 Git 仓库</h2><p>Git 已经成为当今版本控制工具的主流,而分布式的结构和日志型的存储让 Git 不那么容易理解. 本文以实际的案例,总结了仓库初始化的操作步骤以及涉及到的 Git 命令.</p><h3 id="从既有远程仓库建立"><a href="#从既有远程仓库建立" class="headerlink" title="从既有远程仓库建立"></a>从既有远程仓库建立</h3><ul><li>场景:加入一个项目,或创建一个项目副本.</li><li>步骤:远程仓库已经存在的情况下,直接克隆即可得到一个仓库副本.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@foo.com:bar.git<span class="token builtin class-name">cd</span> bar/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="从空的远程仓库建立"><a href="#从空的远程仓库建立" class="headerlink" title="从空的远程仓库建立"></a>从空的远程仓库建立</h3><ul><li>场景:初始化一个远程仓库,例如建立一个 Github 仓库后.</li><li>步骤:新建目录并将其初始化为 Git 仓库,然后添加远程仓库到 remote.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> bar <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> bar<span class="token function">git</span> init --bare<span class="token function">git</span> remote <span class="token function">add</span> origin git@foo.com:bar.git<span class="token function">touch</span> README.md<span class="token function">git</span> <span class="token function">add</span> README.md <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">'init'</span><span class="token comment"># 初次 Push 需指定远程分支</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>Git 已经成为当今版本控制工具的主流,而分布式的结构和日志型的存储让 Git 不那么容易理解. 本文以实际的案例,总结了 Git 代码提交相关的操作步骤以及涉及到的 Git 命令.主要包括:</p><p><code>git add</code> 命令将工作区内容添加到暂存区,<code>git commit</code> 命令将暂存区内容提交到本地仓库. 添加 <code>-m</code> 参数可直接用指定的 message 提交本次 commit. 否则 Vim 会打开默认的文本编辑器提示你输入 commit message. <code>git commit</code> 时你的 Git 没有为你打开 Vim？ Git 打开哪个编辑器取决于 <code>GIT_EDITOR</code> 和 <code>EDITOR</code> 等环境变量, 一般在 <code>~/.bashrc</code> 加入下面的设置即可:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当然你可以设为 nano</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GIT_EDITOR</span><span class="token operator">=</span><span class="token string">"vim"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加到暂存区并提交"><a href="#添加到暂存区并提交" class="headerlink" title="添加到暂存区并提交"></a>添加到暂存区并提交</h3><ul><li>场景 :将新增或改动的文件添加到暂存区,并提交到 Git 仓库.</li><li>步骤 :使用 <code>git add</code> 命令即可将某个文件(的修改)添加到暂存区,再 <code>git commit</code> 来提交.</li><li>文档 :<a href="https://git-scm.com/docs/git-add">https://git-scm.com/docs/git-add</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加 README.md 到暂存区</span><span class="token function">git</span> <span class="token function">add</span> README.md<span class="token comment"># 添加当前目录所有文件到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 强制添加,忽略. gitignore 配置</span><span class="token function">git</span> <span class="token function">add</span> node_modules/ --force<span class="token function">git</span> commit -m <span class="token string">'first commit'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>git add</code> 会忽略列在 <code>.gitignore</code> 中的文件 / 目录,通过 <code>--force</code> 参数可以强制添加.</li><li>添加并提交是 Git 中最常见的代码提交方式. Git 提交总会完整地记录一次变更,即提交总会使 Git 仓库变大,不论是新增还是删除.真正从仓库中移除记录需要 <a href="/2016/03/22/purge-large-files-in-gitrepo.html">更改 Git 历史记录</a>.</li></ul><h3 id="提交对仓库中文件的改动"><a href="#提交对仓库中文件的改动" class="headerlink" title="提交对仓库中文件的改动"></a>提交对仓库中文件的改动</h3><ul><li>场景 :希望只提交仓库中既有文件的改动,而不想 <code>add</code> 其他的文件(仓库外).</li><li>步骤 :省略 <code>git add</code> 命令,然后以 <code>-a</code> 参数运行 <code>commit</code>.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可通过 <code>git status</code> 来查看当前的改动情况,以及本地与远程的同步情况.</p></blockquote><h3 id="撤销-Add"><a href="#撤销-Add" class="headerlink" title="撤销 Add"></a>撤销 Add</h3><ul><li>场景 :不小心添加了文件到暂存区,现在需要撤销所有的 <code>git add</code>.</li><li>步骤 :使用 <code>get reset</code>,重置暂存区到 HEAD.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 取消 Add 某一个文件</span><span class="token function">git</span> reset path/to/file<span class="token comment"># 取消所有 Add 的文件(将会使得所有改动变成 not staged 或 untracked)</span><span class="token function">git</span> reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="撤销上次-Commit"><a href="#撤销上次-Commit" class="headerlink" title="撤销上次 Commit"></a>撤销上次 Commit</h3><ul><li>场景 :发现上次 <code>commit</code> 信息有误,或不小心 <code>commit</code> 了不合适的文件, 希望能撤销 <code>commit</code> 而文件不受改动.</li><li>步骤 :使用 Git 的『软』(不改动文件)重置.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --soft HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>HEAD^</code> 回到表示重置到当前状态的前一个 <code>commit</code>.</p></blockquote><h3 id="修改上次-Commit"><a href="#修改上次-Commit" class="headerlink" title="修改上次 Commit"></a>修改上次 Commit</h3><ul><li>场景 :漏掉了某个文件,或者写错了 Commit 信息,希望能够补充一下而不是撤销再重新 Commit.</li><li>步骤 :使用 <code>--amend</code> 参数即可修改上次 Commit.</li><li>文档 :<a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C">https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下面三条命令只产生一个 Commit</span><span class="token function">git</span> commit -m <span class="token string">'initial commit'</span><span class="token function">git</span> <span class="token function">add</span> forgotten_file <span class="token comment"># 添加漏掉的文件</span><span class="token function">git</span> commit --amend <span class="token comment"># 补充 Commit 信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="撤销工作区所有改动"><a href="#撤销工作区所有改动" class="headerlink" title="撤销工作区所有改动"></a>撤销工作区所有改动</h3><ul><li>场景 :希望撤销所有工作区的改动,回到最后一次 commit 的状态.</li><li>步骤 :<code>git checkout</code> 和 <code>git reset</code> 都可达到目的.</li><li>文档 :<a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a>, <a href="https://git-scm.com/docs/git-checkout">https://git-scm.com/docs/git-checkout</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重置工作区的所有改动</span><span class="token function">git</span> reset --hard<span class="token comment"># 该命令可以指定当前目录,还是某个文件</span><span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空提交"><a href="#空提交" class="headerlink" title="空提交"></a>空提交</h3><ul><li>场景 :只想产生一个 commit 而不想改动文件.比如需要 push 一个 commit 以触发重新部署的 Git Hook 时. 步骤 :使用 <code>--allow-empty</code> 参数来提交.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --allow-empty -m <span class="token string">'empty commit'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将文件从仓库中移除"><a href="#将文件从仓库中移除" class="headerlink" title="将文件从仓库中移除"></a>将文件从仓库中移除</h3><ul><li>场景 :不小心把不应提交到仓库的文件(比如临时文件,大文件,配置文件等)提交了进去,现在希望将其删除.</li><li>步骤 :使用 <code>git rm</code> 命令.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从仓库和工作区都删除它(例如临时文件)</span><span class="token function">git</span> <span class="token function">rm</span> .*.swp<span class="token comment"># 只从仓库中删除,工作区中保留(例如配置文件)</span><span class="token function">git</span> <span class="token function">rm</span> --cached config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果希望从仓库历史中也删除(例如大文件),那么需要使用 <code>git filter-branch</code> 系列命令. 请参考 <a href="/2016/03/22/purge-large-files-in-gitrepo.html">寻找并删除 Git 记录中的大文件</a> 一文.</p><blockquote><p><code>git rm</code> 和 bash <code>rm</code> 的参数类似,基本可通用.</p></blockquote><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>Git 已经成为当今版本控制工具的主流,而分布式的结构和日志型的存储让 Git 不那么容易理解. Git 的一个分支相当于一个 commit 节点的命名指针.分支之间可互相 merge. 本文以实际的案例,总结了 Git 分支管理的操作步骤以及涉及到的 Git 命令.</p><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul><li>场景 :查看当前位于哪个分支,以及本地和远程各有什么分支.</li><li>步骤 :使用 <code>git branch</code> 系列命令.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本地分支</span><span class="token function">git</span> branch<span class="token comment"># 查看所有分支</span><span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支增删"><a href="#分支增删" class="headerlink" title="分支增删"></a>分支增删</h3><ul><li>场景 :删除某个分支,分支只是 Commit 的指针,删除分支不会影响 Git 中的 Commit 树.</li><li>步骤 :使用 <code>git branch -D</code> 命令.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个名为 `test` 的分支并切换到该分支:</span><span class="token function">git</span> checkout -b <span class="token builtin class-name">test</span><span class="token comment"># 切换回 `master` 分支:</span><span class="token function">git</span> checkout master<span class="token comment"># 删除 `test` 分支:</span><span class="token function">git</span> branch -D <span class="token builtin class-name">test</span><span class="token comment"># 从远程仓库删除</span><span class="token function">git</span> push --delete origin <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h3><ul><li>场景 :分支名写错了,或者找到了更合适的分支名.可能也会需要更改服务器上的分支名.</li><li>步骤 :使用 <code>git branch -m</code> 重命名,<code>git push --set-upstream</code> 来重新映射 track 关系(以及将新分支 Push 到远程).</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在本地仓库重命名</span><span class="token function">git</span> branch -m old_branch new_branch<span class="token comment"># 在远程删除旧分支</span><span class="token function">git</span> push origin :old_branch<span class="token comment"># 新分支 Push 到远程</span><span class="token function">git</span> push --set-upstream origin new_branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要重命名的是当前分支,可以直接 <code>git branch -m new_branch</code>.</p><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><ul><li>场景 :需要将某个分支合并到 <code>master</code>,或任意两个分支间希望合并.</li><li>步骤 :使用 <code>git merge</code> 系列命令,merge 成功会产生一次 commit.</li><li>文档 :<a href="https://git-scm.com/docs/git-merge">https://git-scm.com/docs/git-merge</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 feature-1 分支合并到当前分支</span><span class="token function">git</span> merge feature-1 -m <span class="token string">'merge feature 1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意 merge 前必须 commit 工作区的更改,否则 merge 后无法回到当前工作区的状态.</p></blockquote><h3 id="查看分支图"><a href="#查看分支图" class="headerlink" title="查看分支图"></a>查看分支图</h3><ul><li>场景 :需要了解当前分支的父分支,或者仓库中分支之间的关系.</li><li>步骤 :使用 <code>git log</code> 系列命令.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># --graph 画图,--decorate 标明分支名(而不只是 ID)</span><span class="token function">git</span> log --graph --decorate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><ul><li>场景 :你的 commit 修改了某个文件,希望 merge 另一个 commit.然而你们修改了同一文件的同一行.</li><li>步骤 :</li></ul><ol><li>先解决冲突,打开 Git 提示有冲突的每个文件(其中有 Git 给出的冲突信息),更改文件内容为你想要的最终内容并删除 Git 的冲突信息.</li><li><code>git add</code> 相应的冲突文件.</li><li><code>git commit</code> 本次合并.</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 假设合并发生了冲突,文件 a.txt</span><span class="token function">git</span> merge feature-2<span class="token comment"># 修改冲突的文件</span><span class="token function">vim</span> a.txt<span class="token comment"># 添加到暂存区</span><span class="token function">git</span> <span class="token function">add</span> a.txt<span class="token comment"># 提交本次合并</span><span class="token function">git</span> commit -a <span class="token string">'merged feature 2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-Tag"><a href="#新建-Tag" class="headerlink" title="新建 Tag"></a>新建 Tag</h3><ul><li>场景 :新建某个 Tag.</li><li>步骤 :使用 <code>-a</code>(annotated),<code>-d</code>(delete)参数运行 <code>git tag</code>,最后更新到远程仓库.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建</span><span class="token function">git</span> tag -a v1.4 -m <span class="token string">'my version 1.4'</span><span class="token comment"># Push 到远程</span><span class="token function">git</span> push --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除-Tag"><a href="#删除-Tag" class="headerlink" title="删除 Tag"></a>删除 Tag</h3><ul><li>场景 :有一个错误的 Tag.</li><li>步骤 :先在本地仓库删除,然后 push 到远程仓库.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -d old<span class="token function">git</span> push origin :refs/tags/old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="重命名-Tag"><a href="#重命名-Tag" class="headerlink" title="重命名 Tag"></a>重命名 Tag</h3><ul><li>场景 :当然是 Tag 名字起错了.</li><li>步骤 :先从旧的 Tag 创建新的,删除 Tag,push 到远程.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag new old<span class="token function">git</span> tag -d old<span class="token function">git</span> push origin :refs/tags/old<span class="token function">git</span> push --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列出所有-Tag"><a href="#列出所有-Tag" class="headerlink" title="列出所有 Tag"></a>列出所有 Tag</h3><ul><li>场景 :需要列出所有 Tag.</li><li>步骤 :<code>git tag</code> 即可.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有</span><span class="token function">git</span> tag<span class="token comment"># 同时列出 message</span><span class="token function">git</span> tag -n<span class="token comment"># 过滤</span><span class="token function">git</span> tag -l <span class="token string">'v1.2.\*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列出-Tag-之间的-Commit-日志"><a href="#列出-Tag-之间的-Commit-日志" class="headerlink" title="列出 Tag 之间的 Commit 日志"></a>列出 Tag 之间的 Commit 日志</h3><ul><li>场景 :需要知道版本之间有哪些改动,以生成 Chnagelog 或 ReleaseNote.</li><li>步骤 :查询 Git 日志,使用 <code>..</code> 来选择一段区间.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log v1.1<span class="token punctuation">..</span>v1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="衍合"><a href="#衍合" class="headerlink" title="衍合"></a>衍合</h3><ul><li>场景 :开发者从主分支(<code>master</code>)checkout 一个分支(如 <code>feature-x</code>)进行开发, 当要合并入主分支时发现主分支已经改变. 仓库维护者合并 <code>feature-x</code> 到 <code>master</code> 时需要解决冲突并回归测试. 为了减少维护者的工作,开发者可以将 <code>feature-x</code> Rebase(衍合)到 <code>master</code>. 这样在 <code>master</code> 合并 <code>feature-x</code> 就是 Fast Forward 了.</li><li>步骤 :切换到 <code>feature-x</code>,进行衍合,Push 代码.</li><li>文档 :<a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88">https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature-x<span class="token function">git</span> rebase master<span class="token function">git</span> push origin feature-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="重置分支指针"><a href="#重置分支指针" class="headerlink" title="重置分支指针"></a>重置分支指针</h3><ul><li>场景 :当前的工作(可以包括若干 commit,也可以只是工作区)不想要了,或者希望将的当前工作弄到别的分支. 需要恢复当前分支到之前的某个状态.</li><li>步骤 :如果要保存当前工作,首先 commit 掉并从当前分支 checkout 出来. 然后 <code>git reset</code> 当前分支到某个历史状态(通过 <code>git log</code> 可以看到当前分支的所有历史状态).</li><li>文档 :<a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 保存当前工作到 current-work 分支</span><span class="token function">git</span> commit -m <span class="token string">'current work'</span><span class="token function">git</span> checkout current-work<span class="token comment"># 重置当前分支指针</span><span class="token function">git</span> reset --hard xxxxx<span class="token comment"># 典型地,重置到远程分支</span><span class="token function">git</span> reset --hard origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h2><p>Git 已经成为当今版本控制工具的主流,而分布式的结构和日志型的存储让 Git 不那么容易理解. Git 的一个分支相当于一个 commit 节点的命名指针.分支之间可互相 merge. 本文以实际的案例,总结了 Git 远程仓库的操作步骤以及涉及到的 Git 命令.</p><h3 id="显示远程仓库"><a href="#显示远程仓库" class="headerlink" title="显示远程仓库"></a>显示远程仓库</h3><ul><li>场景:需要查看远程仓库地址(比如想把它拷贝给别人).</li><li>步骤:使用 <code>git remote</code> 相关命令.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有远程仓库</span><span class="token function">git</span> remote -v<span class="token comment"># 查看一个远程仓库(比如 origin)的详细信息(包括 Fetch、Push 地址)</span><span class="token function">git</span> remote show origin<span class="token comment"># -n 参数禁止联系远程仓库,可大大加快速度</span><span class="token function">git</span> remote show origin -n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="管理远程仓库"><a href="#管理远程仓库" class="headerlink" title="管理远程仓库"></a>管理远程仓库</h3><ul><li>场景:需要添加、更改或删除远程仓库时.例如远程仓库从 Github 迁移到 Coding.net 时需要更改远程仓库 URL(不需重新 clone).</li><li>步骤:使用 <code>git remote</code> 系列命令操作.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加远程仓库 bar.git 并命名为 bar</span><span class="token function">git</span> remote <span class="token function">add</span> bar bar.git<span class="token comment"># 更改远程仓库 URL</span><span class="token function">git</span> remote set-url origin new.xxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多命令请查询 <code>git remote --help</code></p><h3 id="同步远程仓库"><a href="#同步远程仓库" class="headerlink" title="同步远程仓库"></a>同步远程仓库</h3><ul><li>场景:将远程仓库同步到本地,或将本地仓库同步到远程.</li><li>步骤:使用 <code>git fetch</code> 和 <code>git push</code> 系列命令.</li><li>文档:<a href="https://git-scm.com/docs/git-push">https://git-scm.com/docs/git-push</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 同步默认的 remote 仓库(通常叫 origin)到本地</span><span class="token comment"># 工作区文件并不会发生改变,只同步仓库内容,即 `.git/` 目录</span><span class="token function">git</span> fetch<span class="token comment"># 同步所有 remote 仓库到本地</span><span class="token function">git</span> fetch --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个远程仓库"><a href="#多个远程仓库" class="headerlink" title="多个远程仓库"></a>多个远程仓库</h3><ul><li>场景:一个本地仓库需要与多个远程仓库同步,或需要 merge 其他远程仓库时. 例如 Github Pages 博客同时 Push 到 Github 和 Coding.net.</li><li>步骤:逐个添加远程仓库到 <code>remote</code>,逐一 Push.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 coding 仓库添加到 remote</span><span class="token function">git</span> remote <span class="token function">add</span> coding git@coding.net:bar.git<span class="token comment"># 将 master 分支 Push 到 origin 的 master 分支</span><span class="token function">git</span> push origin master<span class="token comment"># 将 master 分支 Push 到 coding 的 coding-pages 分支</span><span class="token function">git</span> push coding master:coding-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="checkout-一个远程分支"><a href="#checkout-一个远程分支" class="headerlink" title="checkout 一个远程分支"></a>checkout 一个远程分支</h3><ul><li>场景:现有一个本地仓库不存在的远程分支,希望让当前工作区进入这个分支.</li><li>步骤:可以先同步本地仓库,再切换到该分支.也可以先切换到该分支再同步远程代码.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方法一:同步本地仓库</span><span class="token function">git</span> fetch<span class="token comment"># 切换到远程分支</span><span class="token function">git</span> checkout feature-x<span class="token comment"># 方法二:切换到新的分支</span><span class="token function">git</span> checkout -b feature-x<span class="token function">git</span> branch --set-upstream remote/feature-x<span class="token comment"># 等效于</span><span class="token function">git</span> branch -u remote/feature-x<span class="token function">git</span> pull<span class="token comment"># 方法三:先创建分支以及 track 关系,再切换分支</span><span class="token function">git</span> branch feature-x<span class="token function">git</span> branch -u remote/feature-x feature-x<span class="token function">git</span> checkout feature-x<span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><ul><li>场景:不小心把一个分支名 Push 上去了,需要在远程删除一个分支.</li><li>步骤:直接 push,添加–delete 参数即可.</li><li>文档:<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除远程 origin 上的 serverfix 分支</span><span class="token function">git</span> push origin --delete serverfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除远程-Tag"><a href="#删除远程-Tag" class="headerlink" title="删除远程 Tag"></a>删除远程 Tag</h3><ul><li>场景:Tag 命名错误,或者需要统一命名风格.</li><li>步骤:在本地删除 Tag,然后 Push 到服务器.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -d some-tag<span class="token function">git</span> push origin :refs/tags/some-tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Push-到不同的分支"><a href="#Push-到不同的分支" class="headerlink" title="Push 到不同的分支"></a>Push 到不同的分支</h3><ul><li>场景:同样的改动出现在本地和远程的不同分支,例如远程分支只用来部署时.</li><li>步骤:Push 到远程时,指定本地分支与对应的远程分支.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin branch-with-changes:another-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="日志与回滚"><a href="#日志与回滚" class="headerlink" title="日志与回滚"></a>日志与回滚</h2><p>Git 已经成为当今版本控制工具的主流,而分布式的结构和日志型的存储让 Git 不那么容易理解. 本文以实际的案例,总结了日志相关的操作步骤以及涉及到的 Git 命令.</p><h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><ul><li>场景:希望查看仓库的中所有提交的信息,比如提交人、提交时间、代码增删、Commit ID 等.</li><li>步骤:通过 <code>git status</code> 和 <code>git log</code> 可查询这些信息.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 Git 提交的元信息</span><span class="token function">git</span> log<span class="token comment"># 查看 Git 提交,以及对应的代码增删</span><span class="token function">git</span> log -p<span class="token comment"># 查看 app.js 的 Git 提交日志</span><span class="token function">git</span> log -p app.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git-Blame"><a href="#Git-Blame" class="headerlink" title="Git Blame"></a>Git Blame</h3><ul><li>场景:查看每一行代码的最后改动时间,以及提交人.例如,追溯 <code>app.js</code> 文件中某一行是被谁改坏的.</li><li>步骤:通过 <code>git blame</code> 来查询.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> blame app.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多参数请查询 git blame –help</p><h3 id="检出历史版本"><a href="#检出历史版本" class="headerlink" title="检出历史版本"></a>检出历史版本</h3><ul><li>场景:希望将当前项目回到某个历史版本.例如:希望从某个历史版本建立分支时.</li><li>步骤:git checkout</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检出到某个 commit,可通过 git log 得到 Commit ID</span><span class="token function">git</span> checkout 5304f1bd<span class="token punctuation">..</span>.b4d4<span class="token comment"># 检出到某个分支或 Tag</span><span class="token function">git</span> checkout gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原则上讲 Git 历史是不允许更改的,这方面 Git 很像 日志结构的文件系统(Log-Structured File Systems). 但也有办法可以更改日志,例如:寻找并删除 Git 记录中的大文件</p><h2 id="从-Git-中移除某些历史-Commit"><a href="#从-Git-中移除某些历史-Commit" class="headerlink" title="从 Git 中移除某些历史 Commit"></a>从 Git 中移除某些历史 Commit</h2><p>在 Git 开发中通常会控制主干分支的质量,但有时还是会把错误的代码合入到远程主干. 虽然可以 <a href="/2018/03/12/reset-origin-without-force-push.html">直接回滚远程分支</a>, 但有时新的代码也已经合入,直接回滚后最近的提交都要重新操作. 那么有没有只移除某些 Commit 的方式呢？可以一次 <a href="https://git-scm.com/docs/git-revert">revert</a> 操作来完成.</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>考虑这个例子,我们提交了 6 个版本,其中 3-4 包含了错误的代码需要被回滚掉. 同时希望不影响到后续的 5-6.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 982d4f6 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> version <span class="token number">6</span>* 54cc9dc version <span class="token number">5</span>* 551c408 version <span class="token number">4</span>, harttle screwed it up again* 7e345c9 version <span class="token number">3</span>, harttle screwed it up* f7742cd version <span class="token number">2</span>* 6c4db3f version <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况在团队协作的开发中会很常见:可能是流程或认为原因不小心合入了错误的代码, 也可能是合入一段时间后才发现存在问题. 总之已经存在后续提交,使得直接回滚不太现实.</p><p>下面的部分就开始介绍具体操作了,同时我们假设远程分支是受保护的(不允许 Force Push). 思路是从产生一个新的 Commit 撤销之前的错误提交.</p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p>使用 <code>git revert &lt;commit&gt;</code> 可以撤销指定的提交, 要撤销一串提交可以用 <code>&lt;commit1&gt;..&lt;commit2&gt;</code> 语法. 注意这是一个前开后闭区间,即不包括 commit1,但包括 commit2.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert --no-commit f7742cd<span class="token punctuation">..</span>551c408<span class="token function">git</span> commit -a -m <span class="token string">'This reverts commit 7e345c9 and 551c408'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>f7742cd</code> 是 version 2,<code>551c408</code> 是 version 4,这样被移除的是 version 3 和 version 4. 注意 revert 命令会对每个撤销的 commit 进行一次提交,<code>--no-commit</code> 后可以最后一起手动提交.</p><p>此时 Git 记录是这样的:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 8fef80a <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> This reverts commit 7e345c9 and 551c408* 982d4f6 version <span class="token number">6</span>* 54cc9dc version <span class="token number">5</span>* 551c408 version <span class="token number">4</span>, harttle screwed it up again* 7e345c9 version <span class="token number">3</span>, harttle screwed it up* f7742cd version <span class="token number">2</span>* 6c4db3f version <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在的 HEAD(<code>8fef80a</code>)就是我们想要的版本,把它 Push 到远程即可.</p><h3 id="确认-diff"><a href="#确认-diff" class="headerlink" title="确认 diff"></a>确认 diff</h3><p>如果你像不确定是否符合预期,毕竟批量干掉了别人一堆 Commit,可以做一下 diff 来确认. 首先产生 version 4(<code>551c408</code>)与 version 6(<code>982d4f6</code>)的 diff,这些是我们想要保留的:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> 551c408<span class="token punctuation">..</span>982d4f6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再产生 version 2(<code>f7742cd</code>)与当前状态(HEAD)的 diff:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> f7742cd<span class="token punctuation">..</span>HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 version 3, version 4 都被 version 6 撤销的话,上述两个 diff 为空. 可以人工确认一下,或者 grep 掉 description 之后做一次 diff. 下面介绍的另一种方法可以容易地确认 diff.</p><h3 id="另外一种方式"><a href="#另外一种方式" class="headerlink" title="另外一种方式"></a>另外一种方式</h3><p>类似 <a href="/2018/03/12/reset-origin-without-force-push.html">安全回滚远程分支</a>, 我们先回到 version 2,让它合并 version 4 同时代码不变, 再合并 version 5, version 6.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从 version 2 切分支出来</span><span class="token function">git</span> checkout -b fixing f7742cd<span class="token comment"># 合并 version 4,保持代码不变</span><span class="token function">git</span> merge -s ours 551c408<span class="token comment"># 合并 version 5, version 6</span><span class="token function">git</span> merge master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述分支操作可以从 <a href="/2016/09/02/git-workflow-branch.html">分支管理</a> 一文了解. 至此,<code>fixing</code> 分支已经移除了 version 3 和 version 4 的代码,图示如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*   3cb9f8a <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> v2<span class="token punctuation">)</span> Merge branch <span class="token string">'master'</span> into v2<span class="token operator">|</span><span class="token punctuation">\</span><span class="token operator">|</span> * 982d4f6 <span class="token punctuation">(</span>master<span class="token punctuation">)</span> version <span class="token number">6</span><span class="token operator">|</span> * 54cc9dc version <span class="token number">5</span>* <span class="token operator">|</span>   c669557 Merge commit <span class="token string">'551c408'</span> into v2<span class="token operator">|</span><span class="token punctuation">\</span> <span class="token punctuation">\</span><span class="token operator">|</span> <span class="token operator">|</span>/<span class="token operator">|</span> * 551c408 version <span class="token number">4</span>, harttle screwed it up again<span class="token operator">|</span> * 7e345c9 version <span class="token number">3</span>, harttle screwed it up<span class="token operator">|</span>/* f7742cd version <span class="token number">2</span>* 6c4db3f version <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以简单 diff 一下来确认效果:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一次 merge 结果与 version 2 的 diff,应为空</span><span class="token function">git</span> <span class="token function">diff</span> f7742cd<span class="token punctuation">..</span>c669557<span class="token comment"># 第二次 merge 的内容,应包含 version 5 和 version 6 的改动</span><span class="token function">git</span> <span class="token function">diff</span> c669557<span class="token punctuation">..</span>3cb9f8a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在的 <code>HEAD</code>(即 <code>fixing</code> 分支)就是我们想要的版本,可以把它 Push 到远程了. 注意由于现在处于 <code>fixing</code> 分支, 需要 <a href="/2016/09/05/git-workflow-remote.html">Push 时指定远程分支</a> 为 <code>master</code>.</p><h2 id="安全地回滚远程分支"><a href="#安全地回滚远程分支" class="headerlink" title="安全地回滚远程分支"></a>安全地回滚远程分支</h2><p>在 Git 中使用 <a href="/2016/09/02/git-workflow-branch.html">reset</a> 可以让当前分支回滚(<a href="/2016/09/02/git-workflow-branch.html">reset</a>)到任何一个历史版本, 直接移除那以后的所有提交.但这更改了 Git 的历史,Git 服务通常会禁止这样做. 这便需要一个更安全的方式将代码状态回到历史版本,同时不更改 Git 历史.</p><p>如果直接回滚会影响到最近的提交,可以参考 <a href="/2018/03/13/remove-certain-commits-from-history.html">从 Git 历史移除某些 Commit</a> 在回滚的同时保留最近的有效提交.</p><blockquote><p>所谓 <strong>保护分支</strong>,就是指不允许改写 Git 历史的分支.在 Github 中对应的选项是 <strong>Force Pushes</strong>,该选项默认处于 Disallow 状态.</p></blockquote><h3 id="找到历史版本"><a href="#找到历史版本" class="headerlink" title="找到历史版本"></a>找到历史版本</h3><p>首先,通过 <a href="/2016/09/06/git-workflow-log.html">git log</a> 确认你要回滚到的版本的 commit hash. 例如,我们有 4 个版本其中后两个是坏的,要回滚到 version 2,它对应的 commit hash 就是 <code>4a50c9f</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* d4ccf59 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> version <span class="token number">4</span> <span class="token punctuation">(</span>harttle screwed it up, again<span class="token punctuation">)</span>* 5b7d48e version <span class="token number">3</span> <span class="token punctuation">(</span>harttle screwed it up<span class="token punctuation">)</span>* 4a50c9f version <span class="token number">2</span>* 491c6e0 version <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="签出历史版本"><a href="#签出历史版本" class="headerlink" title="签出历史版本"></a>签出历史版本</h3><p>为了便于操作,我们给这个版本一个分支名,比如 <code>v2</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b v2 4a50c9f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在就已经位于 <code>v2</code> 分支啦,当前的 Git 记录如下,比上一步只是多了一个分支名:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* d4ccf59 <span class="token punctuation">(</span>master<span class="token punctuation">)</span> version <span class="token number">4</span> <span class="token punctuation">(</span>harttle screwed it up, again<span class="token punctuation">)</span>* 5b7d48e version <span class="token number">3</span> <span class="token punctuation">(</span>harttle screwed it up<span class="token punctuation">)</span>* 4a50c9f <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> v2<span class="token punctuation">)</span> version <span class="token number">2</span>* 491c6e0 version <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="假合并-master"><a href="#假合并-master" class="headerlink" title="假合并 master"></a>假合并 master</h3><p>为了不更改 Git 记录,我们只能生成一个新的 Commit 让代码状态回到 v2. 这意味着必须在 version 4 的基础上进行,思路和手动操作无异. 但我们可以通过一个神奇的合并操作自动完成:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge -s ours master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-s &lt;strategy&gt;</code> 用来指定合并策略,ours 是递归合并策略的一种,即直接使用当前分支的代码. <code>-s ours</code> 合并的结果是产生了一个基于 master 的 Commit,但 <strong>HEAD 中的代码与合并前完全相同</strong>. 从 Git 记录可以看到 version 2 和 version 4 进行了合并:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*   94fa8a7 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> v2<span class="token punctuation">)</span> Merge branch <span class="token string">'master'</span> into v2<span class="token operator">|</span><span class="token punctuation">\</span><span class="token operator">|</span> * d4ccf59 <span class="token punctuation">(</span>master<span class="token punctuation">)</span> version <span class="token number">4</span> <span class="token punctuation">(</span>harttle screwed it up, again<span class="token punctuation">)</span><span class="token operator">|</span> * 5b7d48e version <span class="token number">3</span> <span class="token punctuation">(</span>harttle screwed it up<span class="token punctuation">)</span><span class="token operator">|</span>/* 4a50c9f version <span class="token number">2</span>* 491c6e0 version <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但合并中完全采用了 version 2 的代码,即合并前后 diff 为空:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token punctuation">..</span>4a50c9f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此我们已经产生了一个 <strong>代码状态与历史版本完全一致,但基于 master 的一个 Commit</strong>.</p><h3 id="push-到远程"><a href="#push-到远程" class="headerlink" title="push 到远程"></a>push 到远程</h3><p>在产生可用的 Commit 后,可以从当前分支 v2 直接发往 origin/master:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span class="token comment"># 等价于</span><span class="token function">git</span> push origin v2:master<span class="token comment"># 等价于</span><span class="token function">git</span> push origin HEAD:master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更详细的远程仓库操作可以参考 <a href="/2016/09/05/git-workflow-remote.html">远程仓库</a> 一文.</p><h2 id="与上游仓库保持同步"><a href="#与上游仓库保持同步" class="headerlink" title="与上游仓库保持同步"></a>与上游仓库保持同步</h2><p>How to sync a fork with an upstream</p><h3 id="检查本地仓库的远程配置"><a href="#检查本地仓库的远程配置" class="headerlink" title="检查本地仓库的远程配置"></a>检查本地仓库的远程配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -vorigin https://github.com/YOUR_USERNAME/YOUR_FORK.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin https://github.com/YOUR_USERNAME/YOUR_FORK.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加上游远程仓库"><a href="#添加上游远程仓库" class="headerlink" title="添加上游远程仓库"></a>添加上游远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git<span class="token function">git</span> remote -vorigin https://github.com/YOUR_USERNAME/YOUR_FORK.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin https://github.com/YOUR_USERNAME/YOUR_FORK.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步-fork-仓库"><a href="#同步-fork-仓库" class="headerlink" title="同步 fork 仓库"></a>同步 fork 仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span><span class="token function">git</span> fetch upstream<span class="token function">git</span> merge upstream/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意 <code>merge</code> 和 <code>rebase</code> 的区别</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
